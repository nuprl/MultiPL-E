language: jl
name: HumanEval_44_change_base
results:
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        then return toString(x)\n\
    \        else return change_base(x / base, base) + toString(x%base)\nend\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise: Write a function that converts binary numbers to decimal.\n\
    The function should take in a binary string and return the decimal number.\nThe\
    \ input string should only contain 0s and 1s.\nThe function should return an error\
    \ if the input string contains anything else.\nThe function should return an error\
    \ if the input string contains only 0s.\nThe function should return an error if\
    \ the input string contains only 1s.\nThe function should return an error if the\
    \ input string contains any character other than 0s and 1s.\nThe function should\
    \ return an error if the input string contains any character other than 0s or\
    \ 1s.\nThe function should return an error if the input string contains any character\
    \ other than 0s or 1s.\nThe function should return an error if the input string\
    \ contains any character other than 0s or 1s.\nThe function should return an error\
    \ if the input string contains any character other than 0s or 1s.\nThe function\
    \ should return an error if the input string contains any character other than\
    \ 0s or 1s.\nThe function should return an error if the input string contains\
    \ any character other than 0s or 1s.\nThe function should return an error if the\
    \ input string contains any character other than 0s or 1s.\nThe function should\
    \ return an error if the input string contains any character other than 0s or\
    \ 1s.\nThe function should return an error if the input string contains any character\
    \ other than 0s or 1s.\nThe function should return an error if the input string\
    \ contains any character other than 0s or 1s.\nThe function should return an error\
    \ if the input string contains any character other than 0s or 1s.\nThe function\
    \ should return an error if the input string contains any character other than\
    \ 0s or 1s.\nThe function should return an error if the input string contains\
    \ any character other than 0s or 1s.\nThe function should return an error if the\
    \ input string contains any character other than 0s or 1s.\nThe function should\
    \ return an error if the input string contains any character other than 0s or\
    \ 1s.\nThe function should return an error if the input string contains any character\
    \ other than 0s or 1s.\nThe function should return an error if the input string\
    \ contains any character other than 0s or 1s.\nThe function should return an error\
    \ if the input string contains any character other than 0s or 1s.\nThe function\
    \ should return an error if the input string contains any character other than\
    \ 0s or 1s.\nThe function should return an error if the input string contains\
    \ any character other than 0s or 1s.\nThe function \nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8j5hexbp.jl:13\nin expression starting at /tmp/tmp8j5hexbp.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 10\n        return string(x*10)\n    else\n        digits\
    \ = digits(x)\n        digits = digits[digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length % base]\n        digits = digits +\
    \ string(x)\n        digits = digits[digits.length - digits.length % base]\n \
    \       digits = digits[0 : digits.length % base]\n        return digits\nend\n\
    </cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptmo7bych.jl:27\nin expression starting at\
    \ /tmp/tmptmo7bych.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x*base)\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that converts a number to a string in base 10. \nThe function should\
    \ throw an error if the input is not a number.\nThe function should throw an error\
    \ if the input is not in the range [2, 10].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw \nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpae8vwdg7.jl:19\nin expression starting at\
    \ /tmp/tmpae8vwdg7.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10 \n        return \"\"\n    else if base\
    \ == 10 \n        return toString(x)\n    else \n        return toString(change_base(x\
    \ % base, base))\nend\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuwer35cx.jl:14\nin expression starting at\
    \ /tmp/tmpuwer35cx.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        error(\"base must be greater\
    \ than or equal to 10\")\n    elseif base > 64\n        error(\"base must be less\
    \ than or equal to 64\")\n    elseif base == 10\n        return string(x)\n  \
    \  else\n        return string(x/base^base, base*base)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that converts a binary number to a decimal number.\n\
    The function should take a single argument that is a binary number.\nThe function\
    \ should return the decimal number represented by the binary number.\nThe function\
    \ should raise an error if the binary number is not valid.\nThe function should\
    \ raise an error if the binary number is not in binary form.\nThe function should\
    \ raise an error if the binary number is not in decimal form.\nThe function should\
    \ raise an error if the binary number is not in binary form or decimal form.\n\
    The function should raise an error if the binary number is not in binary form\
    \ or decimal form and base is not 2.\nThe function should raise an error if the\
    \ binary number is not in binary form or decimal form and base is not 10.\nThe\
    \ function should raise an error if the binary number is not in binary form or\
    \ decimal form and base is not 16.\nThe function should raise an error if the\
    \ binary number is not in binary form or decimal form and base is not 2.\nThe\
    \ function should raise an error if the binary number is not in binary form or\
    \ decimal form and base is not 10.\nThe function should raise an error if the\
    \ binary number is not in binary form or decimal form and base is not 16.\nThe\
    \ function should raise an error if the binary number is not in binary form or\
    \ decimal form and base is not 2.\nThe function should raise an error if the binary\
    \ number is not in binary form or decimal form and base is not 10.\nThe function\
    \ should raise an error if the binary number is not in binary form or decimal\
    \ form and base is not 16.\nThe function should raise an error if the binary number\
    \ is not in binary form or decimal form and base is not 2.\nThe function should\
    \ raise an error if the binary number is not in binary form or decimal form and\
    \ base is not 10.\nThe function should raise an error if the binary number is\
    \ not in binary form or decimal form and base is not 16.\nThe function should\
    \ raise an error if the binary number is not in binary form or decimal form and\
    \ base is not 2.\nThe function should raise an error if the binary number is not\
    \ in binary form or decimal form and base is not 10.\nThe function should raise\
    \ an error if the binary number is not in binary form or decimal form and base\
    \ is not 16.\nThe function should raise an error if the binary number is not in\
    \ binary form or decimal form and base is not 2.\nThe function should raise an\
    \ error if the binary number is not in binary form or decimal form and base is\
    \ not 10.\nThe function should raise an error if the binary number is not in binary\
    \ form or decimal form and base is not 16.\n\nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1o2gas0q.jl:21\nin expression starting at\
    \ /tmp/tmp1o2gas0q.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = \"0123456789\"\n\
    \    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    return\
    \ digits[base*(x-1)::Int64]\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a binary number to a decimal number.\nThe input is a string containing only\
    \ 0s and 1s.\nThe output is a string containing the decimal number represented\
    \ by the input.\nThe input string may contain leading zeroes.\nThe output string\
    \ should always have the same number of characters as the input.\nThe input string\
    \ may contain leading zeros.\nThe output string should always have the same number\
    \ of characters as the input.\nThe input string may contain leading zeros.\nThe\
    \ output string should always have the same number of characters as the input.\n\
    The input string may contain leading zeros.\nThe output string should always have\
    \ the same number of characters as the input.\nThe input string may contain leading\
    \ zeros.\nThe output string should always have the same number of characters as\
    \ the input.\nThe input string may contain leading zeros.\nThe output string should\
    \ always have the same number of characters as the input.\nThe input string may\
    \ contain leading zeros.\nThe output string should always have the same number\
    \ of characters as the input.\nThe input string may contain leading zeros.\nThe\
    \ output string should always have the same number of characters as the input.\n\
    The input string may contain leading zeros.\nThe output string should always have\
    \ the same number of characters as the input.\nThe input string may contain leading\
    \ zeros.\nThe output string should always have the same number of characters as\
    \ the input.\nThe input string may contain leading zeros.\nThe output string should\
    \ always have the same number of characters as the input.\nThe input string may\
    \ contain leading zeros.\nThe output string should always have the same number\
    \ of characters as the input.\nThe input string may contain leading zeros.\nThe\
    \ output string should always have the same number of characters as the input.\n\
    The input string may contain leading zeros.\nThe output string should always have\
    \ the same number of characters as the input.\nThe input string may contain leading\
    \ zeros.\nThe output string should always have the same number of characters as\
    \ the input.\nThe input string may contain leading zeros.\nThe output string should\
    \ always have the same number of characters as the input.\nThe input string may\
    \ contain leading zeros.\nThe output string should always have the same number\
    \ of characters as the input.\nThe input string may contain leading zeros.\nThe\
    \ output string should always have the same number of characters as the input.\n\
    The input string may contain leading zeros.\nThe output string should always have\
    \ the same number of characters as the input.\nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvxune6lo.jl:18\nin expression starting at\
    \ /tmp/tmpvxune6lo.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    \n    if base == 2\n        return string(x)\n\
    \    \n    digits = digits(x)\n    \n    if base == 10\n        return join(digits,\
    \ \"\")\n    \n    digits = digits(x)\n    \n    base = digits[end]\n    digits\
    \ = digits[2:end]\n    \n    digits = reverse(digits)\n    \n    if base == 1\n\
    \        return join(digits, \"\")\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxtv2p7j_.jl:126\nin expression starting at\
    \ /tmp/tmpxtv2p7j_.jl:126\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    \n    if base == 10\n        return toString(x)\n\
    \    \n    if base == 2\n        return toBase10(x)\n    \n    if base == 3\n\
    \        return toBase3(x)\n    \n    if base == 4\n        return toBase4(x)\n\
    \    \n    if base == 5\n        return toBase5(x)\n    \n    if base == 6\n \
    \       return toBase6(x)\n    \n    if base == 7\n        return toBase7(x)\n\
    \    \n    if base == 8\n        return toBase8(x)\n    \n    if base == 9\n \
    \       return toBase9(x)\n    \n    if base == 10\n        return toBase10(x)\n\
    \    \n    if base == 11\n        return toBase11(x)\n    \n    if base == 12\n\
    \        return toBase12(x)\n    \n    if base == 13\n        return toBase13(x)\n\
    \    \n    if base == 14\n        return toBase14(x)\n    \n    if base == 15\n\
    \        return toBase15(x)\n    \n    if base == 16\n        return toBase16(x)\n\
    \    \n    if base == 17\n        return toBase17(x)\n    \n    if base == 18\n\
    \        return toBase18(x)\n    \n    if base == 19\n        return toBase19(x)\n\
    \    \n    if base == 20\n        return toBase20(x)\n    \n    if base == 21\n\
    \        return toBase21(x)\n    \n    if base == 22\n        return toBase22(x)\n\
    \    \n    if base == 23\n        return toBase23(x)\n    \n    if base == 24\n\
    \        return toBase24(x)\n    \n    if base == 25\n        return toBase25(x)\n\
    \    \n    if base == 26\n        return toBase26(x)\n    \n    if base == 27\n\
    \        return toBase27(x)\n    \n    if base == 28\n        return toBase28(x)\n\
    \    \n    if base == 29\n        return toBase29(x)\n    \n    if base == 30\n\
    \        return toBase30(x)\n    \n    if base == 31\n        return toBase31(x)\n\
    \    \n    if base == 32\n        return toBase32(x)\n    \n    if base == 33\n\
    \        return toBase33(x)\n    \n    if base == 34\n        return toBase34(x)\n\
    \    \n    if base == 35\n        return toBase35(x)\n    \n    if base == 36\n\
    \        return toBase36(x)\n    \n    if base == 37\n        return toBase37(x)\n\
    \    \n    if base == 38\n        return toBase38(x)\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_6xyvher.jl:1\nin expression starting at /tmp/tmp_6xyvher.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10\n        return toString(x)\n    else\n\
    \        return toString(x * base^2)\nend\n</cell>\n<code language=julia-1.4>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.4>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.4>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkk7dg0gs.jl:17\nin expression starting at\
    \ /tmp/tmpkk7dg0gs.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 10\n        return string(x*x)\n    else\n        return string(x*base^string(x%base))\n\
    end\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise: Write a function that converts binary numbers to decimal.\n\
    The function should take a string as input and return a string as output.\nThe\
    \ input string should consist of only 0s and 1s.\nThe output string should consist\
    \ of only decimal digits.\nThe function should throw an error if the input string\
    \ is not valid.\nThe function should throw an error if the input string contains\
    \ more than one leading 0\nor trailing 0s.\nThe function should throw an error\
    \ if the input string contains more than one trailing 0\nor leading 0s.\nThe function\
    \ should throw an error if the input string contains more than two leading 0s\n\
    or trailing 0s.\nThe function should throw an error if the input string contains\
    \ more than two trailing 0s\nor leading 0s.\nThe function should throw an error\
    \ if the input string contains more than three leading 0s\nor trailing 0s.\nThe\
    \ function should throw an error if the input string contains more than three\
    \ trailing 0s\nor leading 0s.\nThe function should throw an error if the input\
    \ string contains more than four leading 0s\nor trailing 0s.\nThe function should\
    \ throw an error if the input string contains more than four trailing 0s\nor leading\
    \ 0s.\nThe function should throw an error if the input string contains more than\
    \ five leading 0s\nor trailing 0s.\nThe function should throw an error if the\
    \ input string contains more than five trailing 0s\nor leading 0s.\nThe function\
    \ should throw an error if the input string contains more than six leading 0s\n\
    or trailing 0s.\nThe function should throw an error if the input string contains\
    \ more than six trailing 0s\nor leading 0s.\nThe function should throw an error\
    \ if the input string contains more than seven leading 0s\nor trailing 0s.\nThe\
    \ function should throw an error if the input string contains more than seven\
    \ trailing 0s\nor leading 0s.\nThe function should throw an error if the input\
    \ string contains more than eight leading 0s\nor trailing 0s.\nThe function should\
    \ throw an error if the input string contains more than eight trailing 0s\nor\
    \ leading 0s.\nThe function should throw an error if the input string contains\
    \ more than nine leading 0s\nor trailing 0\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgu0ml4ds.jl:21\nin expression starting at\
    \ /tmp/tmpgu0ml4ds.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10 \n        error(\"Base must be greater\
    \ than 10\")\n    elseif base == 10 \n        return toString(x)\n    elseif base\
    \ == 2 \n        return toString(x * 10)\n    elseif base == 3 \n        return\
    \ toString(x * 100)\n    elseif base == 4 \n        return toString(x * 1000)\n\
    \    elseif base == 5 \n        return toString(x * 10000)\n    elseif base ==\
    \ 6 \n        return toString(x * 100000)\n    elseif base == 7 \n        return\
    \ toString(x * 1000000)\n    elseif base == 8 \n        return toString(x * 10000000)\n\
    \    elseif base == 9 \n        return toString(x * 100000000)\n    elseif base\
    \ == 10 \n        return toString(x * 1000000000)\n    else\n        error(\"\
    Base must be between 2 and 10\")\n    end\nend\n</code>\n<|/ a tags=julia,type-conversion,string\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to avoid the\
    \ if-else ladder. Maybe some kind of recursive function?\n<|/ c |>\n<| c |>\n\
    I added a recursive solution to my answer.\n<|/ c |>\n<| c |>\nI added a recursive\
    \ solution to my answer.\n<|/ c |>\n<| a tags=julia,type-conversion,string |>\n\
    I came up with this solution:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphammpiis.jl:38\nin expression starting at\
    \ /tmp/tmphammpiis.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        error(\"Base must\
    \ be between 2 and 10\")\n    elseif base == 2 \n        return string(x)\n  \
    \  elseif base == 10 \n        return string(x * 2)\n    elseif base == 3 \n \
    \       return string(x * 3)\n    elseif base == 4 \n        return string(x *\
    \ 4)\n    elseif base == 5 \n        return string(x * 5)\n    elseif base ==\
    \ 6 \n        return string(x * 6)\n    elseif base == 7 \n        return string(x\
    \ * 7)\n    elseif base == 8 \n        return string(x * 8)\n    elseif base ==\
    \ 9 \n        return string(x * 9)\n    else\n        error(\"Base must be between\
    \ 2 and 10\")\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpixs3wydm.jl:36\nin expression starting at\
    \ /tmp/tmpixs3wydm.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str(x)\n    \n    digits\
    \ = digits(x)\n    digits = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n\
    \    digits = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n\
    \    digits = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n\
    \    digits = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n\
    \    digits = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n\
    \    digits = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n\
    \    digits = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n\
    \    digits = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n\
    \    digits = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n\
    \    digits = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n\
    \    digits = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n\
    \    digits = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n\
    \    digits = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n\
    \    digits = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n\
    \    digits = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n\
    \    digits = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n\
    \    digits = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n\
    \    digits = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n\
    \    digits = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n\
    \    digits = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n\
    \    digits = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n\
    \    digits = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n\
    \    digits = digits[digits.length-1::]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw6ku2qgt.jl:16\nin expression starting at /tmp/tmpw6ku2qgt.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Invalid\
    \ base\")\n    elseif base == 10\n        return toString(x)\n    else\n     \
    \   return toString(toBase(x, base))\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that converts binary numbers to decimal numbers.\nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptgszzm62.jl:19\nin expression starting at\
    \ /tmp/tmptgszzm62.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n   \
    \ else\n        digits = string(x)\n        digits = digits[2:end]\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ / base]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length / base]\n   \
    \     digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length / base]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length / base]\n        digits = digits[2:end]\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ / base]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length / base]\n   \
    \     digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length / base]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length / base]\n        digits = digits[2:end]\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ / base]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length / base]\n   \
    \     digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length / base]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length / base]\n        digits = digits[2:end]\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ / base]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length / base]\n   \
    \     digits = digits[2:end]\n        digits = digits[digit\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp72uyl8yc.jl:1\nin expression starting at /tmp/tmp72uyl8yc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    else\n        return toString(div(x, base))\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that converts a binary string\
    \ to a decimal number. \nThe input string may contain leading zeros, and the output\
    \ number will \nbe truncated to an integer value.\nThe input string may contain\
    \ leading spaces.\nThe input string may contain leading plus or minus signs.\n\
    The input string may contain leading zeros.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus sign\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo3x9g1uf.jl:17\nin expression starting at\
    \ /tmp/tmpo3x9g1uf.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number to a string in base 10 and returns the string\
    \ in reverse order.\nThe function should throw an error if the input number is\
    \ negative.\nThe function should throw an error if the input number is bigger\
    \ than the base 10.\nThe function should throw an error if the input number is\
    \ bigger than the base 10.\nThe function should throw an error if the input number\
    \ is bigger than the base 10.\nThe function should throw an error if the input\
    \ number is bigger than the base 10.\nThe function should throw an error if the\
    \ input number is bigger than the base 10.\nThe function should throw an error\
    \ if the input number is bigger than the base 10.\nThe function should throw an\
    \ error if the input number is bigger than the base 10.\nThe function should throw\
    \ an error if the input number is bigger than the base 10.\nThe function should\
    \ throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the \nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmendhqqo.jl:19\nin expression starting at\
    \ /tmp/tmpmendhqqo.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from base 10 to base 16. \nThe function should\
    \ throw an error if the base is not between 2 and 16.\nThe function should throw\
    \ an error if the input is not a number.\nThe function should throw an error if\
    \ the input number is negative.\nThe function should throw an error if the input\
    \ number is too large.\nThe function should throw an error if the input number\
    \ is too small.\nThe function should throw an error if the input number is zero.\n\
    The function should throw an error if the input number is infinity.\nThe function\
    \ should throw an error if the input number is NaN.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex number.\nThe function should throw\
    \ an error if the input number is a complex \nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbv6qv1sa.jl:19\nin expression starting at\
    \ /tmp/tmpbv6qv1sa.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that converts a number from one base to another.\nThe function\
    \ should throw an error if the base is out of range.\nThe function should throw\
    \ an error if the number is out of range.\nThe function should throw an error\
    \ if the number is negative.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too \nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq14bt_1m.jl:19\nin expression starting at\
    \ /tmp/tmpq14bt_1m.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return show(base * x)\n   \
    \ else\n        return show(base * x / 10)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<text>\nExercise\nWrite a function that converts a\
    \ number from base 10 to base 16. \nThe function should take two arguments: the\
    \ first is the number to be converted, and the second is the base of the number.\n\
    The function should return the string representation of the number in base 16.\n\
    The function should raise an error if the base is not 10 or 16.\nThe function\
    \ should raise an error if the number is not an integer.\nThe function should\
    \ raise an error if the number is not in the range 0 to 255.\nThe function should\
    \ raise an error if the number is not in the range 0 to 65535.\nThe function should\
    \ raise an error if the number is negative.\nThe function should raise an error\
    \ if the number is greater than 255.\nThe function should raise an error if the\
    \ number is greater than 65535.\nThe function should raise an error if the number\
    \ is greater than 4294967295.\nThe function should raise an error if the number\
    \ is greater than 18446744073709551615.\nThe function should raise an error if\
    \ the number is greater than 9223372036854775807.\nThe function should raise an\
    \ error if the number is greater than 18446744073709551615.\nThe function should\
    \ raise an error if the number is greater than 9223372036854775807.\nThe function\
    \ should raise an error if the number is greater than 9223372036854775807.\nThe\
    \ function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwlep582v.jl:17\nin expression starting at\
    \ /tmp/tmpwlep582v.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return show(base * x)\n   \
    \ else\n        return show(base * x % base)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert change_base(8, 3) == \"22\"\n@assert change_base(8, 2) == \"1000\"\n@assert\
    \ change_base(7, 2) == \"111\"\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that converts a number to a binary string. For example, convert_base(2, 8) should\
    \ return \"1000\".\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppk1ampzs.jl:17\nin expression starting at\
    \ /tmp/tmppk1ampzs.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    Base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number from one base to another. \nFor example, convert from base 10 to base\
    \ 16 (hexadecimal).\nIf the base is out of range, throw an error.\nIf the number\
    \ is negative, throw an error.\nIf the number is zero, return zero.\nIf the number\
    \ is positive, return the number in base 10.\nHint: use the function change_base.\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt_e92h3p.jl:19\nin expression starting at\
    \ /tmp/tmpt_e92h3p.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        error(\"Base must be greater\
    \ than or equal to 10\")\n    elseif base > 36\n        error(\"Base must be less\
    \ than or equal to 36\")\n    else\n        digits = digits(x)\n        digits\
    \ = digits[digits.length - base]\n        digits = digits[digits.length - base]\n\
    \        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmppk5inljp.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk5inljp.jl:1\n\
    in expression starting at /tmp/tmppk5inljp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = digits(x)\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base : digits.length]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length - digits.length % base : digits.length]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base : digits.length]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length - digits.length\
    \ % base : digits.length]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base : digits.length]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length - digits.length % base : digits.length]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base : digits.length]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length - digits.length\
    \ % base : digits.length]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base : digits.length]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length - digits.length % base : digits.length]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base : digits.length]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length - digits.length\
    \ % base : digits.length]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base : digits.length]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length - digits.length % base : digits.length]\n        digits\
    \ = digits[0 : digits.length - digit\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq_c0i0af.jl:1\nin expression starting at /tmp/tmpq_c0i0af.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return string(x)\n    else\n\
    \        return string(x/base)*base+string(x%base)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert change_base(8, 3) == \"22\"\n@assert change_base(8, 2) == \"1000\"\n@assert\
    \ change_base(7, 2) == \"111\"\n</cell>\n<text>\nExercise: Write a function that\
    \ converts a number to a string with leading zeros. For example, change_base(8,\
    \ 3) should return \"0008\".\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmputp5zwr_.jl:17\nin expression starting at\
    \ /tmp/tmputp5zwr_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        error(\"base must\
    \ be between 2 and 10\")\n    elseif base == 2 \n        return string(x)\n  \
    \  else\n        digits = string(x)\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digit\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp2giw8qgz.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2giw8qgz.jl:1\n\
    in expression starting at /tmp/tmp2giw8qgz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x*base)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8d83sfiz.jl:19\nin expression starting at\
    \ /tmp/tmp8d83sfiz.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = string(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp3zd08_dh.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3zd08_dh.jl:1\n\
    in expression starting at /tmp/tmp3zd08_dh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Invalid base\"))\n    elseif base == 10\n        return toString(x)\n    else\n\
    \        digits = digits(x)\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits + toString(base)\n        return digits\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2d143765.jl:24\nin expression starting at\
    \ /tmp/tmp2d143765.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return string(x)\n    else\n\
    \        return string(x/base^base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp40w6x3r7.jl:16\nin expression starting at\
    \ /tmp/tmp40w6x3r7.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return toString(x)\n    else\n\
    \        return toString(change_base(x, base-10))\nend\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal.\nThe input is a string of\
    \ 0s and 1s.\nThe output is the decimal equivalent of the input.\nThe function\
    \ should work for any base from 2 to 36.\nThe function should work for negative\
    \ numbers as well.\nThe function should work for any number of leading 0s.\nThe\
    \ function should work for any number of leading 1s.\nThe function should work\
    \ for any number of leading 0s and 1s.\nThe function should work for any number\
    \ of leading 0s, 1s, and 2s.\nThe function should work for any number of leading\
    \ 0s, 1s, 2s, and 3s.\nThe function should work for any number of leading 0s,\
    \ 1s, 2s, 3s, and 4s.\nThe function should work for any number of leading 0s,\
    \ 1s, 2s, 3s, 4s, and 5s.\nThe function should work for any number of leading\
    \ 0s, 1s, 2s, 3s, 4s, 5s, and 6s.\nThe function should work for any number of\
    \ leading 0s, 1s, 2s, 3s, 4s, 5s, 6s, and 7s.\nThe function should work for any\
    \ number of leading 0s, 1s, 2s, 3s, 4s, 5s, 6s, 7s, and 8s.\nThe function should\
    \ work for any number of leading 0s, 1s, 2s, 3s, 4s, 5s, 6s, 7s, 8s, and 9s.\n\
    The function should work for any number of leading 0s, 1s, 2s, 3s, 4s, 5s, 6s,\
    \ 7s, 8s, 9s, and 10s.\nThe function should work for any number of leading 0s,\
    \ 1s, 2s, 3s, 4s, 5s, 6s, 7s, 8s, 9s, 10s, and 11s.\nThe function should work\
    \ for any number of leading 0s, 1s, 2s, 3s, 4s, 5s, 6s, 7s, 8s, 9s, 10s, 11s,\
    \ and 12s.\nThe function should work for any number of leading 0s, 1s, 2s, 3s,\
    \ 4s, 5s, 6s, 7s, 8s, 9s, 10s, 11s, 12s, and 13s.\nThe function should work for\
    \ any number of leading 0s, 1s, 2s, 3s, 4s, 5s, 6s, 7s, 8s, 9s, 10s, 11s, 12s,\
    \ 13s, and 14s.\nThe function should work for any number of leading 0s, 1s, 2s,\
    \ 3s, 4s, \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo90r_px_.jl:17\nin expression starting at\
    \ /tmp/tmpo90r_px_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x*base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal numbers.\nThe input is a\
    \ string containing only binary digits. \nThe output is a string containing the\
    \ decimal number in decimal base.\nThe binary number can have up to 64 bits.\n\
    The input string may contain leading zeros.\nThe output string may contain leading\
    \ zeros.\nThe input string may contain trailing zeros.\nThe output string may\
    \ contain trailing zeros.\nThe input string may contain leading spaces.\nThe output\
    \ string may contain leading spaces.\nThe input string may contain trailing spaces.\n\
    The output string may contain trailing spaces.\nThe input string may contain leading\
    \ or trailing spaces.\nThe output string may contain leading or trailing spaces.\n\
    The input string may contain leading or trailing spaces.\nThe output string may\
    \ contain leading or trailing spaces.\nThe input string may contain leading or\
    \ trailing spaces.\nThe output string may contain leading or trailing spaces.\n\
    The input string may contain leading or trailing spaces.\nThe output string may\
    \ contain leading or trailing spaces.\nThe input string may contain leading or\
    \ trailing spaces.\nThe output string may contain leading or trailing spaces.\n\
    The input string may contain leading or trailing spaces.\nThe output string may\
    \ contain leading or trailing spaces.\nThe input string may contain leading or\
    \ trailing spaces.\nThe output string may contain leading or trailing spaces.\n\
    The input string may contain leading or trailing spaces.\nThe output string may\
    \ contain leading or trailing spaces.\nThe input string may contain leading or\
    \ trailing spaces.\nThe output string may contain leading or trailing spaces.\n\
    The input string may contain leading or trailing spaces.\nThe output string may\
    \ contain leading or trailing spaces.\nThe input string may contain leading or\
    \ trailing spaces.\nThe output string may contain leading or trailing spaces.\n\
    The input string may contain leading or trailing spaces.\nThe output string may\
    \ contain leading or trailing spaces.\nThe input string may contain leading or\
    \ trailing spaces.\nThe output string may contain leading or trailing spaces.\n\
    The input string may contain leading or trailing spaces.\nThe output string may\
    \ contain \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpppb6w9ba.jl:19\nin expression starting at\
    \ /tmp/tmpppb6w9ba.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    end\n    \n    if base == 2\n        return string(x)\n\
    \    \n    digits = string(x)\n    digits = digits[2:end]\n    \n    digits =\
    \ digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1] .. end]\n\
    \    \n    digits = digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1]\
    \ .. end]\n    \n    digits = digits[digits[end-1] .. end]\n    \n    digits =\
    \ digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1] .. end]\n\
    \    \n    digits = digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1]\
    \ .. end]\n    \n    digits = digits[digits[end-1] .. end]\n    \n    digits =\
    \ digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1] .. end]\n\
    \    \n    digits = digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1]\
    \ .. end]\n    \n    digits = digits[digits[end-1] .. end]\n    \n    digits =\
    \ digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1] .. end]\n\
    \    \n    digits = digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1]\
    \ .. end]\n    \n    digits = digits[digits[end-1] .. end]\n    \n    digits =\
    \ digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1] .. end]\n\
    \    \n    digits = digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1]\
    \ .. end]\n    \n    digits = digits[digits[end-1] .. end]\n    \n    digits =\
    \ digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1] .. end]\n\
    \    \n    digits = digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1]\
    \ .. end]\n    \n    digits = digits[digits[end-1] .. end]\n    \n    digits =\
    \ digits[digits[end-1] .. end]\n\nusing Test\n\n@testset begin\n\ncandidate =\
    \ change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) ==\
    \ \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplu5k73lj.jl:1\nin expression starting at /tmp/tmplu5k73lj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        error(\"Base must\
    \ be between 2 and 10\")\n    else \n        if base == 2 \n            return\
    \ string(x%10)\n        else \n            digits = string(x%base^(x/base))\n\
    \            return digits + change_base(digits, base-1)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal numbers.\
    \ \nThe function should take as input a binary string and return the decimal number.\n\
    The function should raise an error if the input is not binary.\nThe function should\
    \ raise an error if the input contains more than 10 binary digits.\nThe function\
    \ should raise an error if the input contains more than 10 decimal digits.\nThe\
    \ function should raise an error if the input contains more than 10 binary digits.\n\
    The function should raise an error if the input contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 10 binary digits.\nThe function should raise an error if the input contains\
    \ more than 10 decimal digits.\nThe function should raise an error if the input\
    \ contains more than 10 binary digits.\nThe function should raise an error if\
    \ the input contains more than 10 decimal digits.\nThe function should raise an\
    \ error if the input contains more than 10 binary digits.\nThe function should\
    \ raise an error if the input contains more than 10 decimal digits.\nThe function\
    \ should raise an error if the input contains more than 10 binary digits.\nThe\
    \ function should raise an error if the input contains more than 10 decimal digits.\n\
    The function should raise an error if the input contains more than 10 binary digits.\n\
    The function should raise an error if the input contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 10 binary digits.\nThe function should raise an error if the input contains\
    \ more than 10 decimal digits.\nThe function should raise an error if the input\
    \ contains more than 10 binary digits.\nThe function should raise an error if\
    \ the input contains more than 10 decimal digits.\nThe function should raise an\
    \ error if the input contains more than 10 binary digits.\nThe function should\
    \ raise an error if the input contains more than 10 decimal digits.\nThe function\
    \ should raise an error if the input contains more than 10 binary digits.\nThe\
    \ function should raise an error if the input contains more than 10 decimal digits.\n\
    The function should raise an error if the input contains more than 10 binary digits.\n\
    The function should raise an error if the input contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 10 binary digits.\nThe function should raise an error if the input contains\
    \ more than 10 decimal digits.\nThe function should raise an error if the input\
    \ contains more than 10 binary digits.\nThe function should raise an error if\
    \ the input contains more than 10 \nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmaxz7uwj.jl:21\nin expression starting at\
    \ /tmp/tmpmaxz7uwj.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 10\n        return string(x*10)\n    else\n        return\
    \ string(x*base^2)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise\nWrite a function that converts a\
    \ number from base 10 to base 16. \nThe function should throw an error if the\
    \ base is out of range.\nThe function should throw an error if the number is negative.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is zero.\nThe function should throw an error if the number is\
    \ negative.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is zero.\nThe function should throw an error if\
    \ the number is negative.\nThe function should throw an error if the number is\
    \ too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is zero.\nThe function should\
    \ throw an error if the number is negative.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is zero.\nThe\
    \ function should throw an error if the number is negative.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is zero.\nThe function should throw an error if the number is negative.\nThe\
    \ function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is zero.\nThe function should throw an error if the number is\
    \ negative.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is zero.\nThe function should throw an error if\
    \ the number is negative.\nThe function should throw an error if the number is\
    \ too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is zero.\nThe function should\
    \ throw an error if the number is negative.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is zero.\nThe\
    \ function should throw an error if the number is negative.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp66_yeons.jl:21\nin expression starting at\
    \ /tmp/tmp66_yeons.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return string(x)\n    \n  \
    \  digits = digits(x)\n    digits = digits[digits.length - digits.length % base]\n\
    \    digits = digits[0 : digits.length - digits.length % base]\n    digits = digits[0\
    \ : digits.length - digits.length % base]\n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    digits = digits[0 : digits.length - digits.length % base]\n   \
    \ digits = digits[0 : digits.length - digits.length % base]\n    digits = digits[0\
    \ : digits.length - digits.length % base]\n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    digits = digits[0 : digits.length - digits.length % base]\n   \
    \ digits = digits[0 : digits.length - digits.length % base]\n    digits = digits[0\
    \ : digits.length - digits.length % base]\n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    digits = digits[0 : digits.length - digits.length % base]\n   \
    \ digits = digits[0 : digits.length - digits.length % base]\n    digits = digits[0\
    \ : digits.length - digits.length % base]\n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    digits = digits[0 : digits.length - digits.length % base]\n   \
    \ digits = digits[0 : digits.length - digits.length % base]\n    digits = digits[0\
    \ : digits.length - digits.length % base]\n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    digits = digits[0 : digits.length - digits.length % base]\n   \
    \ digits = digits[0 : digits.length - digits.length % base]\n    digits = digits[0\
    \ : digits.length - digits.length % base]\n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    digits = digits[0 : digits.length - digits.length % base]\n   \
    \ digits = digits[0 : digits.length - digits.length % base]\n    digits = digits[0\
    \ : digits.length - digits.length % base]\n\nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpabkpztwk.jl:1\nin expression starting at /tmp/tmpabkpztwk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x*base^digits(base))\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal.\nThe input is a string containing\
    \ only 0s and 1s.\nThe output is a string containing the decimal number in base\
    \ 10.\nThe function should throw an error if the input is not valid.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains more than 10 digits.\nThe function\
    \ should throw an error if the input contains \nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp632ae8ik.jl:19\nin expression starting at\
    \ /tmp/tmp632ae8ik.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str(x)\n    else\n \
    \       return change_base(x/base, base)*base+(x%base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise: Write\
    \ a function that converts binary numbers to decimal.\nThe input is a string containing\
    \ only 1s and 0s.\nThe output is a decimal number.\nThe function should raise\
    \ an error if the input contains anything other than 1s and 0s.\nThe function\
    \ should raise an error if the input contains more than 10 1s or 0s.\nThe function\
    \ should raise an error if the input contains more than 10 0s or 1s.\nThe function\
    \ should raise an error if the input contains more than 10 1s or 0s.\nThe function\
    \ should raise an error if the input contains more than 10 0s or 1s.\nThe function\
    \ should raise an error if the input contains more than 10 1s or 0s.\nThe function\
    \ should raise an error if the input contains more than 10 0s or 1s.\nThe function\
    \ should raise an error if the input contains more than 10 1s or 0s.\nThe function\
    \ should raise an error if the input contains more than 10 0s or 1s.\nThe function\
    \ should raise an error if the input contains more than 10 1s or 0s.\nThe function\
    \ should raise an error if the input contains more than 10 0s or 1s.\nThe function\
    \ should raise an error if the input contains more than 10 1s or 0s.\nThe function\
    \ should raise an error if the input contains more than 10 0s or 1s.\nThe function\
    \ should raise an error if the input contains more than 10 1s or 0s.\nThe function\
    \ should raise an error if the input contains more than 10 0s or 1s.\nThe function\
    \ should raise an error if the input contains more than 10 1s or 0s.\nThe function\
    \ should raise an error if the input contains more than 10 0s or 1s.\nThe function\
    \ should raise an error if the input contains more than 10 1s or 0s.\nThe function\
    \ should raise an error if the input contains more than 10 0s or 1s.\nThe function\
    \ should raise an error if the input contains more than 10 1s or 0s.\nThe function\
    \ should raise an error if the input contains more than 10 0s or 1s.\nThe function\
    \ should raise an error if the input contains more than 10 1s or 0s.\nThe function\
    \ should raise an error if the input contains more than 10 0s or 1s.\nThe function\
    \ should raise an error if the input contains more than 10 1s or 0s.\nThe function\
    \ should raise an error if the input contains more than 10 0s or 1s.\nThe function\
    \ should raise an error if the input contains more than 10 1s or 0s.\nThe function\
    \ should raise an error if the input contains more than 10 0s or 1\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3zz9qjh2.jl:17\nin expression starting at\
    \ /tmp/tmp3zz9qjh2.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10 \n        error(\"Base must be greater\
    \ than or equal to 10\")\n    elseif base == 10 \n        return toString(x)\n\
    \    elseif base == 2 \n        return toString(x * x)\n    elseif base == 3 \n\
    \        return toString(x * x * x)\n    elseif base == 4 \n        return toString(x\
    \ * x * x * x)\n    elseif base == 5 \n        return toString(x * x * x * x *\
    \ x)\n    elseif base == 6 \n        return toString(x * x * x * x * x * x)\n\
    \    elseif base == 7 \n        return toString(x * x * x * x * x * x * x)\n \
    \   elseif base == 8 \n        return toString(x * x * x * x * x * x * x * x)\n\
    \    elseif base == 9 \n        return toString(x * x * x * x * x * x * x * x\
    \ * x)\n    else\n        error(\"Base must be greater than or equal to 10\")\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution, but I still don't\
    \ understand why my code doesn't work. Could you please explain why my code doesn't\
    \ work?\n<|/ c |>\n<| c |>\nI added some explanation to my answer. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThank you very much for your explanation. Now I understand\
    \ why my code doesn't work. Your solution is very elegant, but I think it would\
    \ be better to use a recursive function instead of an iterative one.\n<|/ c |>\n\
    <| c |>\nYes, I agree. Recursion is much more elegant and easier to understand.\n\
    <|/ c |>\n<| a tags=julia,recursion |>\nThe problem is that the function change_base\
    \ is called with two arguments, but the function itself only takes one argument.\
    \ \nThe function change_base is defined as:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvzfv8tif.jl:35\nin expression starting at\
    \ /tmp/tmpvzfv8tif.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Invalid\
    \ base\")\n    elseif base == 10\n        str = toString(x)\n    else\n      \
    \  str = toString(x)\n        str = str[1 .. base]\n        str = str * base\n\
    \        str = toString(str)\n    end\n    return str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmprflheq7a.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmprflheq7a.jl:29\n  Test threw exception\n\
    \  Expression: candidate(8, 3) == \"22\"\n  UndefVarError: toString not defined\n\
    \  Stacktrace:\n   [1] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmprflheq7a.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprflheq7a.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprflheq7a.jl:28\ntest set:\
    \ Error During Test at /tmp/tmprflheq7a.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == \"100\"\n  UndefVarError: toString not defined\n  Stacktrace:\n\
    \   [1] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmprflheq7a.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprflheq7a.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprflheq7a.jl:28\ntest set:\
    \ Error During Test at /tmp/tmprflheq7a.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(234, 2) == \"11101010\"\n  UndefVarError: toString not defined\n \
    \ Stacktrace:\n   [1] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmprflheq7a.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprflheq7a.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprflheq7a.jl:28\ntest set:\
    \ Error During Test at /tmp/tmprflheq7a.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(16, 2) == \"10000\"\n  UndefVarError: toString not defined\n  Stacktrace:\n\
    \   [1] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmprflheq7a.jl:17\n\
    \   [2] macro expansion\n     @ "
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    end\n    if x == 0\n        return \"\"\n    digits\
    \ = digits(x)\n    digits = digits[digits.length - digits.length % base.length\
    \ : digits.length]\n    digits = digits[0 : digits.length % base.length]\n   \
    \ digits = digits[0 : digits.length - digits.length % base.length]\n    digits\
    \ = digits[digits.length - digits.length % base.length : digits.length]\n    digits\
    \ = digits[digits.length - digits.length % base.length : digits.length]\n    digits\
    \ = digits[0 : digits.length - digits.length % base.length]\n    digits = digits[digits.length\
    \ - digits.length % base.length : digits.length]\n    digits = digits[digits.length\
    \ - digits.length % base.length : digits.length]\n    digits = digits[0 : digits.length\
    \ - digits.length % base.length]\n    digits = digits[digits.length - digits.length\
    \ % base.length : digits.length]\n    digits = digits[digits.length - digits.length\
    \ % base.length : digits.length]\n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    digits = digits[digits.length - digits.length % base.length\
    \ : digits.length]\n    digits = digits[digits.length - digits.length % base.length\
    \ : digits.length]\n    digits = digits[0 : digits.length - digits.length % base.length]\n\
    \    digits = digits[digits.length - digits.length % base.length : digits.length]\n\
    \    digits = digits[digits.length - digits.length % base.length : digits.length]\n\
    \    digits = digits[0 : digits.length - digits.length % base.length]\n    digits\
    \ = digits[digits.length - digits.length % base.length : digits.length]\n    digits\
    \ = digits[digits.length - digits.length % base.length : digits.length]\n    digits\
    \ = digits[0 : digits.length - digits.length % base.length]\n    digits = digits[digits.length\
    \ - digits.length % base.length : digits.length]\n    digits = digits[digits.length\
    \ - digits.length % base.length : digits.length]\n    digits = digits[0 : digits.length\
    \ - digits.length % base.length]\n    digits = digits[digits.length - digits.length\
    \ % base.length : digits.length]\n    digits = digits[digits.length - digits.length\
    \ % base.length : digits.length]\n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    digits = digits[digits.length - digits.length % base.length\
    \ : digit\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfdb6_r4f.jl:1\nin expression starting at /tmp/tmpfdb6_r4f.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return toString(x::Int64, base)\n\
    \    else\n        return toString(x::Int64, base::Int64)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a number from base 10 to base\
    \ 16 (hexadecimal).\nThe function should accept two arguments: a string representing\
    \ the number to be converted\nand a base (between 2 and 16).\nThe function should\
    \ return a string representing the number in hexadecimal.\nThe function should\
    \ raise an error if the base is out of range.\nThe function should raise an error\
    \ if the base is 0.\nThe function should raise an error if the input string does\
    \ not represent a number.\nThe function should raise an error if the input string\
    \ does not represent a number in base 10.\nThe function should raise an error\
    \ if the input string does not represent a number in base 16.\nThe function should\
    \ raise an error if the input string does not represent a number in base 2.\n\
    The function should raise an error if the input string does not represent a number\
    \ in base 8.\nThe function should raise an error if the input string does not\
    \ represent a number in base 16.\nThe function should raise an error if the input\
    \ string does not represent a number in base 10.\nThe function should raise an\
    \ error if the input string does not represent a number in base 2.\nThe function\
    \ should raise an error if the input string does not represent a number in base\
    \ 8.\nThe function should raise an error if the input string does not represent\
    \ a number in base 16.\nThe function should raise an error if the input string\
    \ does not represent a number in base 10.\nThe function should raise an error\
    \ if the input string does not represent a number in base 2.\nThe function should\
    \ raise an error if the input string does not represent a number in base 8.\n\
    The function should raise an error if the input string does not represent a number\
    \ in base 16.\nThe function should raise an error if the input string does not\
    \ represent a number in base 10.\nThe function should raise an error if the input\
    \ string does not represent a number in base 2.\nThe function should raise an\
    \ error if the input string does not represent a number in base 8.\nThe function\
    \ should raise an error if the input string does not represent a number in base\
    \ 16.\nThe function should raise an error if the input string does not represent\
    \ a number in base 10.\nThe function should raise an error if the input string\
    \ does not represent a number in base 2.\nThe function should raise an error if\
    \ the input string does not represent a number in base 8.\nThe function should\
    \ raise an error if the input string does not represent a number in base 16.\n\
    The function should raise \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx9lhb7r_.jl:18\nin expression starting at\
    \ /tmp/tmpx9lhb7r_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"base must\
    \ be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n   \
    \ elseif base == 3\n        return string(x, \"b\")\n    elseif base == 4\n  \
    \      return string(x, \"o\")\n    elseif base == 5\n        return string(x,\
    \ \"x\")\n    elseif base == 6\n        return string(x, \"l\")\n    elseif base\
    \ == 7\n        return string(x, \"c\")\n    elseif base == 8\n        return\
    \ string(x, \"d\")\n    elseif base == 9\n        return string(x, \"s\")\n  \
    \  elseif base == 10\n        return string(x, \"p\")\n    else\n        error(\"\
    base must be between 2 and 36\")\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThank you so much for this! I really appreciate it!\n<|/ c |>\n<| a tags=julia,string\
    \ |>\nI wrote a package for this:\nhttps://github.com/jrm/julia-base\n<code>\n\
    julia> using Base\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t\
    @test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo8n2k2vp.jl:36\nin expression starting at\
    \ /tmp/tmpo8n2k2vp.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        return \"0\" \n    else \n\
    \        return show(x % base) \nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that converts a number from\
    \ one base to another.\nFor example, change_base(8, 3) should return \"22\".\n\
    Write a function that converts a number from one base to another and returns the\
    \ string representation of that number.\nFor example, change_base(8, 3) should\
    \ return \"22\".\nWrite a function that converts a number from one base to another\
    \ and returns the string representation of that number.\nFor example, change_base(8,\
    \ 3) should return \"22\".\nWrite a function that converts a number from one base\
    \ to another and returns the string representation of that number.\nFor example,\
    \ change_base(8, 3) should return \"22\".\nWrite a function that converts a number\
    \ from one base to another and returns the string representation of that number.\n\
    For example, change_base(8, 3) should return \"22\".\nWrite a function that converts\
    \ a number from one base to another and returns the string representation of that\
    \ number.\nFor example, change_base(8, 3) should return \"22\".\nWrite a function\
    \ that converts a number from one base to another and returns the string representation\
    \ of that number.\nFor example, change_base(8, 3) should return \"22\".\nWrite\
    \ a function that converts a number from one base to another and returns the string\
    \ representation of that number.\nFor example, change_base(8, 3) should return\
    \ \"22\".\nWrite a function that converts a number from one base to another and\
    \ returns the string representation of that number.\nFor example, change_base(8,\
    \ 3) should return \"22\".\nWrite a function that converts a number from one base\
    \ to another and returns the string representation of that number.\nFor example,\
    \ change_base(8, 3) should return \"22\".\nWrite a function that converts a number\
    \ from one base to another and returns the string representation of that number.\n\
    For example, change_base(8, 3) should return \"22\".\nWrite a function that converts\
    \ a number from one base to another and returns the string representation of that\
    \ number.\nFor example, change_base(8, 3) should return \"22\".\nWrite a function\
    \ that converts a number from one base to another and returns the string representation\
    \ of that number.\nFor example, change_base(8, 3) should return \"22\".\nWrite\
    \ a function that converts a number from one base to another and returns the string\
    \ representation of that number.\nFor example, change_base(8, 3) should return\
    \ \"22\".\nWrite a function that converts a number from one base to another and\
    \ returns the string representation of that number.\nFor example, change_base(8,\
    \ 3) should return \"22\".\nWrite a function that converts a number from one base\
    \ to another and returns the string representation of that number.\nFor example,\
    \ change_base(8, 3) should return \"22\".\nWrite a function that converts a number\
    \ from one \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplfn3hnga.jl:17\nin expression starting at\
    \ /tmp/tmplfn3hnga.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 || base == 0\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x, base)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqtnodqol.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqtnodqol.jl:1\n\
    in expression starting at /tmp/tmpqtnodqol.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    change_base(s::String, base::Int64)::String\n    Change numerical\
    \ base of input string s to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(\"22\"\
    , 3)\n    \"22\"\n    >>> change_base(\"22\", 2)\n    \"1000\"\n    >>> change_base(\"\
    111\", 2)\n    \"111\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_pcihee7.jl:19\nin expression starting at\
    \ /tmp/tmp_pcihee7.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 36\n        return string(x*x)\n    else\n        return string(x*base^(x-1))\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk6ly8hsf.jl:21\nin expression starting at\
    \ /tmp/tmpk6ly8hsf.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    else\n        if base == 10\n         \
    \   return x.to_string()\n        else\n            digits = digits(x)\n     \
    \       digits = digits[digits.length - base]\n            digits = digits[digits.length\
    \ - base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq8az2jpi.jl:1\nin expression starting at /tmp/tmpq8az2jpi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str(x)\n    else\n \
    \       return change_base(x / base, base) + str(x % base)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal.\n\
    The input is a string that consists of 0s and 1s.\nThe output is a decimal number.\n\
    The function should work for all binary numbers.\nThe function should work for\
    \ all decimal numbers.\nThe function should work for all numbers with leading\
    \ zeros.\nThe function should work for all numbers with leading zeros.\nThe function\
    \ should work for all numbers with leading zeros.\nThe function should work for\
    \ all numbers with leading zeros.\nThe function should work for all numbers with\
    \ leading zeros.\nThe function should work for all numbers with leading zeros.\n\
    The function should work for all numbers with leading zeros.\nThe function should\
    \ work for all numbers with leading zeros.\nThe function should work for all numbers\
    \ with leading zeros.\nThe function should work for all numbers with leading zeros.\n\
    The function should work for all numbers with leading zeros.\nThe function should\
    \ work for all numbers with leading zeros.\nThe function should work for all numbers\
    \ with leading zeros.\nThe function should work for all numbers with leading zeros.\n\
    The function should work for all numbers with leading zeros.\nThe function should\
    \ work for all numbers with leading zeros.\nThe function should work for all numbers\
    \ with leading zeros.\nThe function should work for all numbers with leading zeros.\n\
    The function should work for all numbers with leading zeros.\nThe function should\
    \ work for all numbers with leading zeros.\nThe function should work for all numbers\
    \ with leading zeros.\nThe function should work for all numbers with leading zeros.\n\
    The function should work for all numbers with leading zeros.\nThe function should\
    \ work for all numbers with leading zeros.\nThe function should work for all numbers\
    \ with leading zeros.\nThe function should work for all numbers with leading zeros.\n\
    The function should work for all numbers with leading zeros.\nThe function should\
    \ work for all numbers with leading zeros.\nThe function should work for all numbers\
    \ with leading zeros.\nThe function should work for all numbers with leading zeros.\n\
    The function should work for all numbers with leading zeros.\nThe function should\
    \ work for all numbers with leading zeros.\nThe function should work for all numbers\
    \ with leading zeros.\nThe function should work for all numbers with leading zeros.\n\
    The function should work for all numbers with leading zeros.\nThe function \n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjbgto_7h.jl:17\nin expression starting at\
    \ /tmp/tmpjbgto_7h.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = string(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp3zd08_dh.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3zd08_dh.jl:1\n\
    in expression starting at /tmp/tmp3zd08_dh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = digits(x)\n    \
    \    digits = digits[2:end]\n        digits = digits[digits[1]==1]\n        digits\
    \ = digits[digits[2]==1]\n        digits = digits[digits[3]==1]\n        digits\
    \ = digits[digits[4]==1]\n        digits = digits[digits[5]==1]\n        digits\
    \ = digits[digits[6]==1]\n        digits = digits[digits[7]==1]\n        digits\
    \ = digits[digits[8]==1]\n        digits = digits[digits[9]==1]\n        digits\
    \ = digits[digits[10]==1]\n        digits = digits[digits[11]==1]\n        digits\
    \ = digits[digits[12]==1]\n        digits = digits[digits[13]==1]\n        digits\
    \ = digits[digits[14]==1]\n        digits = digits[digits[15]==1]\n        digits\
    \ = digits[digits[16]==1]\n        digits = digits[digits[17]==1]\n        digits\
    \ = digits[digits[18]==1]\n        digits = digits[digits[19]==1]\n        digits\
    \ = digits[digits[20]==1]\n        digits = digits[digits[21]==1]\n        digits\
    \ = digits[digits[22]==1]\n        digits = digits[digits[23]==1]\n        digits\
    \ = digits[digits[24]==1]\n        digits = digits[digits[25]==1]\n        digits\
    \ = digits[digits[26]==1]\n        digits = digits[digits[27]==1]\n        digits\
    \ = digits[digits[28]==1]\n        digits = digits[digits[29]==1]\n        digits\
    \ = digits[digits[30]==1]\n        digits = digits[digits[31]==1]\n        digits\
    \ = digits[digits[32]==1]\n        digits = digits[digits[33]==1]\n        digits\
    \ = digits[digits[34]==1]\n        digits = digits[digits[35]==1]\n        digits\
    \ = digits[digits[36]==1]\n        digits = digits[digits[37]==1]\n        digits\
    \ = digits[digits[38]==1]\n        digits = digits[digits[39]==1]\n        digits\
    \ = digits[digits[40]==1]\n        digits = digits[digits[41]==1]\n        digits\
    \ = digits[digits[42]==1]\n        digits = \nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5nqulqi0.jl:1\nin expression starting at /tmp/tmp5nqulqi0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = \"0123456789\"\n\
    \    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    return\
    \ digits[base-1] + digits[x % base]\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that converts a binary number to its decimal equivalent. \nThe input\
    \ is a binary string representing a number in base 2. \nThe output is a string\
    \ representing the number in base 10. \nThe function should return nothing but\
    \ print a message to the console if the input is not a binary string.\nThe function\
    \ should raise an error if the input is not a binary string with exactly two characters.\
    \ \nThe function should raise an error if the input is not a binary string with\
    \ exactly one '1'.\nThe function should raise an error if the input is not a binary\
    \ string with exactly one '0'.\nThe function should raise an error if the input\
    \ is not a binary string with exactly two '1's and '0's (except for the last character).\n\
    The function should raise an error if the input is not a binary string with exactly\
    \ two '1's and '0's (except for the last character).\nThe function should raise\
    \ an error if the input is not a binary string with exactly two '1's and '0's\
    \ (except for the last character).\nThe function should raise an error if the\
    \ input is not a binary string with exactly two '1's and '0's (except for the\
    \ last character).\nThe function should raise an error if the input is not a binary\
    \ string with exactly two '1's and '0's (except for the last character).\nThe\
    \ function should raise an error if the input is not a binary string with exactly\
    \ two '1's and '0's (except for the last character).\nThe function should raise\
    \ an error if the input is not a binary string with exactly two '1's and '0's\
    \ (except for the last character).\nThe function should raise an error if the\
    \ input is not a binary string with exactly two '1's and '0's (except for the\
    \ last character).\nThe function should raise an error if the input is not a binary\
    \ string with exactly two '1's and '0's (except for the last character).\nThe\
    \ function should raise an error if the input is not a binary string with exactly\
    \ two '1's and '0's (except for the last character).\nThe function should raise\
    \ an error if the input is not a binary string with exactly two '1's and '0's\
    \ (except for the last character).\nThe function should raise an error if the\
    \ input is not a binary string with exactly two '1's and '0's (except for the\
    \ last character).\nThe function should raise an error if the input is not a binary\
    \ string with exactly two '1's and '0's (except for the last character).\nThe\
    \ function should raise an error if the input is not a binary string with exactly\
    \ two '1's \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl262s1t2.jl:18\nin expression starting at\
    \ /tmp/tmpl262s1t2.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        error(\"Base must\
    \ be between 2 and 10\")\n    else\n        return toString(digits(x)[base-1])\
    \ \nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt02o0lx4.jl:17\nin expression starting at\
    \ /tmp/tmpt02o0lx4.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n   \
    \ else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal numbers. A binary number\
    \ is a string with only 0 and 1 characters. A decimal number is a string with\
    \ numbers between 0 and 9. For example, binary number \"11\" represents decimal\
    \ number \"7\".\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t\
    @test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7a35imq3.jl:19\nin expression starting at\
    \ /tmp/tmp7a35imq3.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        error(\"Base must be greater\
    \ than or equal to 10\")\n    else\n        if base == 10\n            return\
    \ toString(x)\n        else\n            digits = toString(x)\n            digits\
    \ = digits[2:end]\n            digits = digits[digits.length - base:]\n      \
    \      digits = digits[2:end]\n            digits = digits[digits.length - base:]\n\
    \            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:]\n            digits = \nusing Test\n\n@testset begin\n\ncandidate =\
    \ change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) ==\
    \ \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(digits.length - base):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjysh45oj.jl:20\n\
    in expression starting at /tmp/tmpjysh45oj.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    else if base == 2 \n        throw(ArgumentError(\"\
    base cannot be 2\"))\n    else if base == 10 \n        return toString(x)\n  \
    \  else \n        return toString(toBase(x, base))\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgt23xo3e.jl:14\nin expression starting at\
    \ /tmp/tmpgt23xo3e.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        return \"0\" \n    else \n\
    \        return show(x % base) \nend\n</cell>\n<code language=julia-1.4>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv67zla1_.jl:17\nin expression starting at\
    \ /tmp/tmpv67zla1_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return toString(x::Int64, base)\n\
    \    else\n        return toString(x::Int64, base::Int64)\n    end\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nI added a more general solution that works for any\
    \ base (including negative bases)\n<|/ c |>\n<| a |>\nThe solution by is very\
    \ elegant, but it is slower than the other solutions posted so far. Here is a\
    \ version that uses only integer arithmetic:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxrpm_viq.jl:18\nin expression starting at\
    \ /tmp/tmpxrpm_viq.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = digits(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n  \
    \      digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digit\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpw3fpgz_c.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw3fpgz_c.jl:1\n\
    in expression starting at /tmp/tmpw3fpgz_c.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = \"0123456789\"\n\
    \    else \n        digits = \"0123456789ABCDEF\"\n    digits = digits[base::Int64]\n\
    \    return digits[x % base]\nend\n</cell>\n<code language=julia-1.3>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 10)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 16)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg7c0e0ym.jl:19\nin expression starting at\
    \ /tmp/tmpg7c0e0ym.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = string(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp3zd08_dh.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3zd08_dh.jl:1\n\
    in expression starting at /tmp/tmp3zd08_dh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = digits(x)\n    \
    \    digits[digits.length - 1] = digits[digits.length - 1] * base\n        return\
    \ join(digits)\n    else \n        digits = digits(x)\n        digits[digits.length\
    \ - 1] = digits[digits.length - 1] / base\n        return join(digits)\nend\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a number to a string in base\
    \ 10 and returns the string in reverse order.\nFor example, change_base(123, 10)\
    \ should return \"321\".\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7b32weqg.jl:21\nin expression starting at\
    \ /tmp/tmp7b32weqg.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x*base^2)\nend\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from one base to another.\nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphycx9ai5.jl:19\nin expression starting at\
    \ /tmp/tmphycx9ai5.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        return \"{:0>5}\".format(x)\n\
    \    else if base == 2 \n        return \"{:0>4}\".format(x)\n    else \n    \
    \    return \"{:0>3}\".format(x)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal.\nThe input is a string with binary digits, e.g. \"\
    1010011\".\nThe output is a decimal number in base 10.\nThe function should raise\
    \ an error if the input is not valid binary number.\nThe function should raise\
    \ an error if the input contains more than 32 binary digits.\nThe function should\
    \ raise an error if the input contains more than 32 binary digits.\nThe function\
    \ should raise an error if the input contains more than 32 binary digits.\nThe\
    \ function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error \nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf697mpem.jl:14\nin expression starting at\
    \ /tmp/tmpf697mpem.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        then return to_string(x)\n\
    \    else \n        digits = digits(x)\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[0 : digits.length - base]\n        digits =\
    \ digits + [base]\n        return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.0>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.0>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.0>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from base 10 to base 16. \nThe function should\
    \ take two arguments: the first is the number to be converted, and the second\
    \ is the base of the number to be converted.\nThe function should return a string\
    \ containing the number in base 16.\nThe function should return an error message\
    \ if the input number is not in the range 10 to 16.\nThe function should return\
    \ an error message if the input base is not in the range 2 to 16.\nThe function\
    \ should return an error message if the input number is negative.\nThe function\
    \ should return an error message if the input number is zero.\nThe function should\
    \ return an error message if the input number is greater than 16.\nThe function\
    \ should return an error message if the input number is less than 2.\nThe function\
    \ should return an error message if the input number is greater than or equal\
    \ to 16.\nThe function should return an error message if the input number is less\
    \ than or equal to 2.\nThe function should return an error message if the input\
    \ number is greater than or equal to 16.\nThe function should return an error\
    \ message if the input number is less than or equal to 2.\nThe function should\
    \ return an error message if the input number is greater than or equal to 16.\n\
    The function should return an error message if the input number is less than or\
    \ equal to 2.\nThe function should return an error message if the input number\
    \ is greater than or equal to 16.\nThe function should return an error message\
    \ if the input number is less than or equal to 2.\nThe function should return\
    \ an error message if the input number is greater than or equal to 16.\nThe function\
    \ should return an error message if the input number is less than or equal to\
    \ 2.\nThe function should return an error message if the input number is greater\
    \ than or equal to 16.\nThe function should return an error message if the input\
    \ number is less than or equal to 2.\nThe function should return an error message\
    \ if the input number is greater than or equal to 16.\nThe function should return\
    \ an error message if the input number is less than or equal to 2.\nThe function\
    \ should return an error message if the input number is greater than or equal\
    \ to 16.\nThe function should return an error message if the input number is less\
    \ than or equal to 2.\nThe function should return an error message if the input\
    \ number is greater than or equal to 16.\nThe function should return an error\
    \ message if the input number is less than or equal to 2.\nThe function should\
    \ return an error message if the input number is greater than or equal to 16.\n\
    The function should \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptukonnut.jl:13\nin expression starting at /tmp/tmptukonnut.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = digits(x)\n    \
    \    digits = digits[2:end]\n        digits = digits[digits[1] == 0]\n       \
    \ digits = digits[digits[2] == 0]\n        digits = digits[digits[3] == 0]\n \
    \       digits = digits[digits[4] == 0]\n        digits = digits[digits[5] ==\
    \ 0]\n        digits = digits[digits[6] == 0]\n        digits = digits[digits[7]\
    \ == 0]\n        digits = digits[digits[8] == 0]\n        digits = digits[digits[9]\
    \ == 0]\n        digits = digits[digits[10] == 0]\n        digits = digits[digits[11]\
    \ == 0]\n        digits = digits[digits[12] == 0]\n        digits = digits[digits[13]\
    \ == 0]\n        digits = digits[digits[14] == 0]\n        digits = digits[digits[15]\
    \ == 0]\n        digits = digits[digits[16] == 0]\n        digits = digits[digits[17]\
    \ == 0]\n        digits = digits[digits[18] == 0]\n        digits = digits[digits[19]\
    \ == 0]\n        digits = digits[digits[20] == 0]\n        digits = digits[digits[21]\
    \ == 0]\n        digits = digits[digits[22] == 0]\n        digits = digits[digits[23]\
    \ == 0]\n        digits = digits[digits[24] == 0]\n        digits = digits[digits[25]\
    \ == 0]\n        digits = digits[digits[26] == 0]\n        digits = digits[digits[27]\
    \ == 0]\n        digits = digits[digits[28] == 0]\n        digits = digits[digits[29]\
    \ == 0]\n        digits = digits[digits[30] == 0]\n        digits = digits[digits[31]\
    \ == 0]\n        digits = digits[digits[32] == 0]\n        digits = digits[digits[33]\
    \ == 0]\n        digits = digits[digits[34] == 0]\n        digits = digits[digits[35]\
    \ == 0]\n        digits = digits[digits[36] == 0]\n        digits = digits[digits[37]\
    \ == 0]\n        digits = digits[digits[38] == 0]\n        digits = digits[digits[39]\
    \ == 0]\n        digits = digits[digits[40] == 0]\n        digits = digits[digits[41]\
    \ == 0]\n        digits = digits[digits[42] == 0]\n        digits = digits[digits[43]\
    \ == 0]\n        digits = digits[digits[44] == 0]\n        digits = digits[digits[\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6c_hbbm3.jl:1\nin expression starting at /tmp/tmp6c_hbbm3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwvgjaxrp.jl:19\nin expression starting at\
    \ /tmp/tmpwvgjaxrp.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = digits(x)\n    \
    \    digits = digits[2:end]\n        return join(digits, \"\")\n    else \n  \
    \      digits = digits(x)\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        return join(digits, \"\")\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string\
    \ |>\nI came up with this solution:\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_6v1bur3.jl:22\nin expression starting at\
    \ /tmp/tmp_6v1bur3.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = string(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[digits.length - digits.length % base:end]\n        digits =\
    \ digits[digits.length / base:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[digits.length - digits.length % base:end]\n        digits = digits[digits.length\
    \ / base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - digits.length % base:end]\n        digits = digits[digits.length / base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base:end]\n        digits = digits[digits.length / base:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[digits.length - digits.length % base:end]\n\
    \        digits = digits[digits.length / base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - digits.length % base:end]\n        digits\
    \ = digits[digits.length / base:end]\n        digits = digits[2:end]\n       \
    \ digits = digits[digits.length - digits.length % base:end]\n        digits =\
    \ digits[digits.length / base:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[digits.length - digits.length % base:end]\n        digits = digits[digits.length\
    \ / base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - digits.length % base:end]\n        digits = digits[digits.length / base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base:end]\n        digits = digits[digits.length / base:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[digits.length - digits.length % base:end]\n\
    \        digits = digits[digits.length / base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - digits.length % base:end]\n        digits\
    \ = digits[digits.length / base:end]\n        digits = digits[2:end]\n       \
    \ digits = digits[digits.length - digits.length % base:end]\n        digits =\
    \ digits[digits.length / base:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[digits.length - digits.length\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmg6ihdq0.jl:1\nin expression starting at /tmp/tmpmg6ihdq0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10\n        return toString(x)\n    \n\
    \    digits = digits(x)\n    \n    base = digits[end]\n    digits[end] = digits[end]-base\n\
    \    digits = digits[2:end]\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo99yox87.jl:1\nin expression starting at /tmp/tmpo99yox87.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n   \
    \ elseif base == 10\n        return string(x*base)\n    else\n        digits =\
    \ string(x%base)\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnvjwv_2y.jl:78\nin expression starting at\
    \ /tmp/tmpnvjwv_2y.jl:78\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36.\")\n    end\n    if base == 2\n        return string(x)\n\
    \    elseif base == 10\n        return string(x * 10)\n    else\n        return\
    \ string(x * pow(base, floor(log10(abs(x))))) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that converts binary numbers to decimal numbers. \nThe input is a\
    \ string that consists of 0s and 1s.\nThe output is a string that consists of\
    \ decimal numbers.\nThe function should raise an error if the input string is\
    \ not valid.\nThe function should raise an error if the input string contains\
    \ more than 10 binary digits.\nThe function should raise an error if the input\
    \ string contains more than 10 decimal digits.\nThe function should raise an error\
    \ if the input string contains more than 10 binary digits.\nThe function should\
    \ raise an error if the input string contains more than 10 decimal digits.\nThe\
    \ function should raise an error if the input string contains more than 10 binary\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 10 decimal digits.\nThe function should raise an error if the input string\
    \ contains more than 10 binary digits.\nThe function should raise an error if\
    \ the input string contains more than 10 decimal digits.\nThe function should\
    \ raise an error if the input string contains more than 10 binary digits.\nThe\
    \ function should raise an error if the input string contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 10 binary digits.\nThe function should raise an error if the input string\
    \ contains more than 10 decimal digits.\nThe function should raise an error if\
    \ the input string contains more than 10 binary digits.\nThe function should raise\
    \ an error if the input string contains more than 10 decimal digits.\nThe function\
    \ should raise an error if the input string contains more than 10 binary digits.\n\
    The function should raise an error if the input string contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 10 binary digits.\nThe function should raise an error if the input string\
    \ contains more than 10 decimal digits.\nThe function should raise an error if\
    \ the input string contains more than 10 binary digits.\nThe function should raise\
    \ an error if the input string contains more than 10 decimal digits.\nThe function\
    \ should raise an error if the input string contains more than 10 binary digits.\n\
    The function should raise an error if the input string contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 10 binary digits.\nThe function should raise an error if the input string\
    \ contains more than 10 decimal digits.\nThe function should raise an error if\
    \ the input string contains more than 10 binary digits.\nThe function \nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx_i9ryye.jl:23\nin expression starting at\
    \ /tmp/tmpx_i9ryye.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        return \"0\"\n    else if\
    \ base == 2 \n        return string(x)\n    else \n        return string(x*base)\n\
    end\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjll9pwgn.jl:14\nin expression starting at\
    \ /tmp/tmpjll9pwgn.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = digits(x)\n    \
    \    digits = digits[2:end]\n        digits = digits[2:end]\n        digits =\
    \ digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digit\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp21zw10n0.jl:1\nin expression starting at /tmp/tmp21zw10n0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = digits(x)\n        digits = digits[digits.length -\
    \ digits.length % base + 1:digits.length]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        return string(digits, base)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa5vxzn68.jl:22\nin expression starting at\
    \ /tmp/tmpa5vxzn68.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x/base^base, base^2)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from one base to another.\nThe function should\
    \ throw an error if the base is out of range.\nThe function should throw an error\
    \ if the input number is negative.\nThe function should throw an error if the\
    \ input number is zero.\nThe function should throw an error if the input number\
    \ is too large.\nThe function should throw an error if the input number is too\
    \ small.\nThe function should throw an error if the input number is too large.\n\
    The function should throw an error if the input number is too small.\nThe function\
    \ should throw an error if the input number is too large.\nThe function should\
    \ throw an error if the input number is too small.\nThe function should throw\
    \ an error if the input number is too large.\nThe function should throw an error\
    \ if the input number is too small.\nThe function should throw an error if the\
    \ input number is too large.\nThe function should throw an error if the input\
    \ number is too small.\nThe function should throw an error if the input number\
    \ is too large.\nThe function should throw an error if the input number is too\
    \ small.\nThe function should throw an error if the input number is too large.\n\
    The function should throw an error if the input number is too small.\nThe function\
    \ should throw an error if the input number is too large.\nThe function should\
    \ throw an error if the input number is too small.\nThe function should throw\
    \ an error if the input number is too large.\nThe function should throw an error\
    \ if the input number is too small.\nThe function should throw an error if the\
    \ input number is too large.\nThe function should throw an error if the input\
    \ number is too small.\nThe function should throw an error if the input number\
    \ is too large.\nThe function should throw an error if the input number is too\
    \ small.\nThe function should throw an error if the input number is too large.\n\
    The function should throw an error if the input number is too small.\nThe function\
    \ should throw an error if the input number is too large.\nThe function should\
    \ throw an error if the input number is too small.\nThe function should throw\
    \ an error if the input number is too large.\nThe function should throw an error\
    \ if the input number is too small.\nThe function should throw an error if the\
    \ input number is too large.\nThe function should throw an error if the input\
    \ number is too small.\nThe function should throw an error if the \nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp58380ozp.jl:19\nin expression starting at\
    \ /tmp/tmp58380ozp.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = string(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[digits.length - digits.length % base]\n        return digits[digits.length\
    \ / base]\nend\n</cell>\n<code language=julia-1.3>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise\nWrite a function that converts a\
    \ number from base 10 to base 36 (a-z).\nThe function should throw an error if\
    \ the base is out of range.\nThe function should throw an error if the input number\
    \ is negative.\nThe function should throw an error if the input number is zero.\n\
    The function should throw an error if the input number is too large.\nThe function\
    \ should throw an error if the input number is too small.\nThe function should\
    \ throw an error if the input number is too large.\nThe function should throw\
    \ an error if the input number is too small.\nThe function should throw an error\
    \ if the input number is too large.\nThe function should throw an error if the\
    \ input number is too small.\nThe function should throw an error if the input\
    \ number is too large.\nThe function should throw an error if the input number\
    \ is too small.\nThe function should throw an error if the input number is too\
    \ large.\nThe function should throw an error if the input number is too small.\n\
    The function should throw an error if the input number is too large.\nThe function\
    \ should throw an error if the input number is too small.\nThe function should\
    \ throw an error if the input number is too large.\nThe function should throw\
    \ an error if the input number is too small.\nThe function should throw an error\
    \ if the input number is too large.\nThe function should throw an error if the\
    \ input number is too small.\nThe function should throw an error if the input\
    \ number is too large.\nThe function should throw an error if the input number\
    \ is too small.\nThe function should throw an error if the input number is too\
    \ large.\nThe function should throw an error if the input number is too small.\n\
    The function should throw an error if the input number is too large.\nThe function\
    \ should throw an error if the input number is too small.\nThe function should\
    \ throw an error if the input number is too large.\nThe function should throw\
    \ an error if the input number is too small.\nThe function should throw an error\
    \ if the input number is too large.\nThe function should throw an error if the\
    \ input number is too small.\nThe function should throw an error if the input\
    \ number is too large.\nThe function should throw an error if the input number\
    \ is too small.\nThe function \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp36bwf7x0.jl:22\nin expression starting at\
    \ /tmp/tmp36bwf7x0.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Invalid base\"))\n    elseif base == 2\n        return string(x)\n    elseif base\
    \ == 10\n        return string(x * 10)\n    else\n        digits = string(x *\
    \ base)\n        digits = digits[2:end]\n        digits = digits[2:end]\n    \
    \    digits = digits[2:end]\n        digits = digits[2:end]\n        digits =\
    \ digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpga7yem9v.jl:78\nin expression starting at\
    \ /tmp/tmpga7yem9v.jl:78\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 10 and 36\"))\n    else\n        return String(digits(x),\
    \ base)\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeal_ae9s.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeal_ae9s.jl:1\n\
    in expression starting at /tmp/tmpeal_ae9s.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = \"0123456789\"\n\
    \    elseif base == 2 \n        digits = \"01\"\n    elseif base == 8 \n     \
    \   digits = \"01234567\"\n    elseif base == 16 \n        digits = \"0123456789abcdef\"\
    \n    elseif base == 32 \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    \n    elseif base == 64 \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    elseif base == 128 \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    elseif base == 256 \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvw\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"22\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj7z1l1j1.jl:33\nin expression starting at /tmp/tmpj7z1l1j1.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptjdym0ur.jl:19\nin expression starting at\
    \ /tmp/tmptjdym0ur.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    end\n    if base == 2\n        return string(x)\n\
    \    elseif base == 3\n        return string(x, \"b\")\n    elseif base == 4\n\
    \        return string(x, \"o\")\n    elseif base == 5\n        return string(x,\
    \ \"x\")\n    elseif base == 6\n        return string(x, \"h\")\n    elseif base\
    \ == 7\n        return string(x, \"d\")\n    elseif base == 8\n        return\
    \ string(x, \"o\")\n    elseif base == 9\n        return string(x, \"x\")\n  \
    \  elseif base == 10\n        return string(x, \"l\")\n    elseif base == 11\n\
    \        return string(x, \"d\")\n    elseif base == 12\n        return string(x,\
    \ \"h\")\n    elseif base == 13\n        return string(x, \"l\")\n    elseif base\
    \ == 14\n        return string(x, \"o\")\n    elseif base == 15\n        return\
    \ string(x, \"x\")\n    elseif base == 16\n        return string(x, \"h\")\n \
    \   elseif base == 17\n        return string(x, \"l\")\n    elseif base == 18\n\
    \        return string(x, \"o\")\n    elseif base == 19\n        return string(x,\
    \ \"x\")\n    elseif base == 20\n        return string(x, \"h\")\n    elseif base\
    \ == 21\n        return string(x, \"l\")\n    elseif base == 22\n        return\
    \ string(x, \"o\")\n    elseif base == 23\n        return string(x, \"x\")\n \
    \   elseif base == 24\n        return string(x, \"h\")\n    elseif base == 25\n\
    \        return string(x, \"l\")\n    elseif base == 26\n        return string(x,\
    \ \"o\")\n    elseif base == 27\n        return string(x, \"x\")\n    elseif base\
    \ == 28\n        return string(x, \"h\")\n    elseif base == 29\n        return\
    \ string(x, \"l\")\n    elseif base == 30\n        return string(x, \"o\")\n \
    \   elseif base == 31\n        return string(x, \"x\")\n    elseif base == 32\n\
    \        return string(x, \"h\")\n    elseif base == 33\n        return string(x,\
    \ \"l\")\n    elseif base == 34\n        return string(x, \"o\")\n    elseif base\
    \ == 35\n        return string(x, \"x\")\n    elseif base == 36\n        return\
    \ string(x, \"h\")\n    else\n        error(\"Base must be between 2 and 36\"\
    )\n    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnydqz8g0.jl:89\nin expression starting at\
    \ /tmp/tmpnydqz8g0.jl:89\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 3\n        return string(x * 1000 + 100)\n    elseif base\
    \ == 4\n        return string(x * 10000 + 1000)\n    elseif base == 5\n      \
    \  return string(x * 100000 + 10000)\n    elseif base == 6\n        return string(x\
    \ * 1000000 + 100000)\n    elseif base == 7\n        return string(x * 10000000\
    \ + 1000000)\n    elseif base == 8\n        return string(x * 100000000 + 10000000)\n\
    \    elseif base == 9\n        return string(x * 1000000000 + 100000000)\n   \
    \ elseif base == 10\n        return string(x * 10000000000 + 1000000000)\n   \
    \ elseif base == 11\n        return string(x * 100000000000 + 10000000000)\n \
    \   elseif base == 12\n        return string(x * 1000000000000 + 100000000000)\n\
    \    elseif base == 13\n        return string(x * 10000000000000 + 10000000000000)\n\
    \    elseif base == 14\n        return string(x * 100000000000000 + 100000000000000)\n\
    \    elseif base == 15\n        return string(x * 1000000000000000 + 1000000000000000)\n\
    \    elseif base == 16\n        return string(x * 10000000000000000 + 10000000000000000)\n\
    \    elseif base == 17\n        return string(x * 100000000000000000 + 100000000000000000)\n\
    \    elseif base == 18\n        return string(x * 1000000000000000000 + 100000000000000000)\n\
    \    elseif base == 19\n        return string(x * 10000000000000000000 + 10000000000000000)\n\
    \    elseif base == 20\n        return string(x * 100000000000000000000 + 100000000000000000)\n\
    \    elseif base == 21\n        return string(x * 1000000000000000000000 + 10000000000000000)\n\
    \    elseif base == 22\n        return string(x * 10000000000000000000000 + 100000000000000000)\n\
    \    elseif base == 23\n        return string(x * 100000000000000000000000 + 10000000000000000)\n\
    \    elseif base == 24\n        return string(x * 1000000000000000000000000 +\
    \ 100000000000000000)\n    elseif base == 25\n        return string(x * 10000000000000000000000000\
    \ + 10000000000000000)\n    elseif base == 26\n        return string(x * 100000000000000000000000000\
    \ + 100000000000000000)\n    elseif base == 27\n        return string(x * 1000000000000000000000000000\
    \ + 10000000000000000)\n    elseif base == 28\n        return string(x * 10000000000000000000000000000\
    \ + 100000000000000000)\n    elseif base == 29\n        return string(x * 100000000000000000000000000000\
    \ + 10000000000000000)\n\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp34crquz5.jl:1\nin expression starting at /tmp/tmp34crquz5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    Base must be between 2 and 10\"))\n    else\n        return show(digits(x, base))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpepnpwaq2.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpepnpwaq2.jl:1\n\
    in expression starting at /tmp/tmpepnpwaq2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str((x % base) + base)\n\
    \    else\n        return change_base(x / base, base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal numbers.\nThe input is a string that consists of only\
    \ 0s and 1s.\nThe output is a string that consists of decimal numbers.\nThe input\
    \ string may contain leading zeros.\nThe output string may contain leading zeros.\n\
    The input string may contain leading zeros.\nThe output string may contain leading\
    \ zeros.\nThe input string may contain leading zeros.\nThe output string may contain\
    \ leading zeros.\nThe input string may contain leading zeros.\nThe output string\
    \ may contain leading zeros.\nThe input string may contain leading zeros.\nThe\
    \ output string may contain leading zeros.\nThe input string may contain leading\
    \ zeros.\nThe output string may contain leading zeros.\nThe input string may contain\
    \ leading zeros.\nThe output string may contain leading zeros.\nThe input string\
    \ may contain leading zeros.\nThe output string may contain leading zeros.\nThe\
    \ input string may contain leading zeros.\nThe output string may contain leading\
    \ zeros.\nThe input string may contain leading zeros.\nThe output string may contain\
    \ leading zeros.\nThe input string may contain leading zeros.\nThe output string\
    \ may contain leading zeros.\nThe input string may contain leading zeros.\nThe\
    \ output string may contain leading zeros.\nThe input string may contain leading\
    \ zeros.\nThe output string may contain leading zeros.\nThe input string may contain\
    \ leading zeros.\nThe output string may contain leading zeros.\nThe input string\
    \ may contain leading zeros.\nThe output string may contain leading zeros.\nThe\
    \ input string may contain leading zeros.\nThe output string may contain leading\
    \ zeros.\nThe input string may contain leading zeros.\nThe output string may contain\
    \ leading zeros.\nThe input string may contain leading zeros.\nThe output string\
    \ may contain leading zeros.\nThe input string may contain leading zeros.\nThe\
    \ output string may contain leading zeros.\nThe input string may contain leading\
    \ zeros.\nThe output string may contain leading zeros.\nThe input string may contain\
    \ leading zeros.\nThe output string may contain leading zeros.\nThe input string\
    \ may contain leading zeros.\nThe output string may contain leading zeros.\nThe\
    \ input string may contain leading zeros.\nThe output string may contain leading\
    \ zeros.\nThe input string may contain leading zeros.\nThe output string may contain\
    \ \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp7szaf6q.jl:17\nin expression starting at\
    \ /tmp/tmpp7szaf6q.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 10\n        return string(x * 10)\n    else\n        digits\
    \ = digits(x)\n        digits = digits[digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length % base]\n        digits = digits[digits.length\
    \ / base - 1]\n        digits = digits[0 : digits.length / base]\n        digits\
    \ = digits[digits.length / base - 1]\n        digits = digits[0 : digits.length\
    \ / base]\n        digits = digits[digits.length / base - 1]\n        digits =\
    \ digits[0 : digits.length / base]\n        digits = digits[digits.length / base\
    \ - 1]\n        digits = digits[0 : digits.length / base]\n        digits = digits[digits.length\
    \ / base - 1]\n        digits = digits[0 : digits.length / base]\n        digits\
    \ = digits[digits.length / base - 1]\n        digits = digits[0 : digits.length\
    \ / base]\n        digits = digits[digits.length / base - 1]\n        digits =\
    \ digits[0 : digits.length / base]\n        digits = digits[digits.length / base\
    \ - 1]\n        digits = digits[0 : digits.length / base]\n        digits = digits[digits.length\
    \ / base - 1]\n        digits = digits[0 : digits.length / base]\n        digits\
    \ = digits[digits.length / base - 1]\n        digits = digits[0 : digits.length\
    \ / base]\n        digits = digits[digits.length / base - 1]\n        digits =\
    \ digits[0 : digits.length / base]\n        digits = digits[digits.length / base\
    \ - 1]\n        digits = digits[0 : digits.length / base]\n        digits = digits[digits.length\
    \ / base - 1]\n        digits = digits[0 : digits.length / base]\n        digits\
    \ = digits[digits.length / base - 1]\n        digits = digits[0 : digits.length\
    \ / base]\n        digits = digits[digits.length / base - 1]\n        digits =\
    \ digits[0 : digits.length / base]\n        digits = digits[digits.length / base\
    \ - 1]\n        digits = digits[0 : digits.length / base]\n        digits = digits[digits.length\
    \ / base - 1]\n        digits = digits[0 : digits.length / base]\n        digits\
    \ = digits[digits.length / base - 1]\n        digits = digits[0 : digits.length\
    \ / base]\n        digit\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpxu3ktfc9.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxu3ktfc9.jl:1\n\
    in expression starting at /tmp/tmpxu3ktfc9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        then return \"0\"\n    else\
    \ \n        digits = digits(x)\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length % base]\n\
    \        digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - \nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf2f8n64j.jl:13\nin expression starting at /tmp/tmpf2f8n64j.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        return toString(x)\n    else\
    \ if base == 2 \n        return toString(2*x)\n    else if base == 3 \n      \
    \  return toString(3*x)\n    else if base == 4 \n        return toString(4*x)\n\
    \    else if base == 5 \n        return toString(5*x)\n    else if base == 6 \n\
    \        return toString(6*x)\n    else if base == 7 \n        return toString(7*x)\n\
    \    else if base == 8 \n        return toString(8*x)\n    else if base == 9 \n\
    \        return toString(9*x)\n    else \n        return \"Invalid base\"\nend\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp528ae3fn.jl:14\nin expression starting at\
    \ /tmp/tmp528ae3fn.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Invalid\
    \ base\")\n    elseif base == 10\n        return toString(x)\n    else\n     \
    \   digits = digits(x)\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits + digits[digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length % base]\n        digits = digits[0 : digits.length % base]\n\
    \        digits = digits[0 : digits.length % base]\n        digits = digits[0\
    \ : digits.length % base]\n        digits = digits[0 : digits.length % base]\n\
    \        digits = digits[0 : digits.length % base]\n        digits = digits[0\
    \ : digits.length % base]\n        digits = digits[0 : digits.length % base]\n\
    \        digits = digits[0 : digits.length % base]\n        digits = digits[0\
    \ : digits.length % base]\n        digits = digits[0 : digits.length % base]\n\
    \        digits = digits[0 : digits.length % base]\n        digits = digits[0\
    \ : digits.length % base]\n        digits = digits[0 : digits.length % base]\n\
    \        digits = digits[0 : digits.length % base]\n        digits = digits[0\
    \ : digits.length % base]\n        digits = digits[0 : digits.length % base]\n\
    \        digits = digits[0 : digits.length % base]\n        digits = digits[0\
    \ : digits.length % base]\n        digits = digits[0 : digits.length % base]\n\
    \        digits = digits[0 : digits.length % base]\n        digits = digits[0\
    \ : digits.length % base]\n        digits = digits[0 : digits.length % base]\n\
    \        digits = digits[0 : digits.length % base]\n        digits = digits[0\
    \ : digits.length % base]\n        digits = digits[0 : digits.length % base]\n\
    \        digits = digits[0 : digits.length % base]\n        digits = digits[0\
    \ : digits.length % base]\n        digits = digits[0 : digits.length % base]\n\
    \        digits = digits[0 : digits.length % base]\n        digits = digits[0\
    \ : digits.length % base]\n        digits = digits[0 : digits.length % base]\n\
    \        digits = digits[0 : digits.length % base]\n        digits = digits[0\
    \ : digits.length % base]\n        digits = digits[0 : digits.length % base]\n\
    \        digits = digits[0 : digits.length % base]\n        digits = digit\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpiljkffqd.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiljkffqd.jl:1\n\
    in expression starting at /tmp/tmpiljkffqd.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 3\n        return string(x, \"b\")\n    elseif base == 4\n\
    \        return string(x, \"o\")\n    elseif base == 5\n        return string(x,\
    \ \"x\")\n    elseif base == 6\n        return string(x, \"l\")\n    elseif base\
    \ == 7\n        return string(x, \"c\")\n    elseif base == 8\n        return\
    \ string(x, \"d\")\n    elseif base == 9\n        return string(x, \"s\")\n  \
    \  elseif base == 10\n        return string(x, \"p\")\n    else\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt_11fee6.jl:36\nin expression starting at\
    \ /tmp/tmpt_11fee6.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str(x)\n    else\n \
    \       digits = digits(x)\n        digits = digits[digits.length-1::digits.length-base]\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp96x6xyqc.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp96x6xyqc.jl:1\n\
    in expression starting at /tmp/tmp96x6xyqc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return show(base * x)\n   \
    \ else\n        return show(base * x)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from base 10 to base 16. \nThe function should\
    \ take two arguments: a string representing the number in base 10, and an integer\
    \ representing the base of the number in base 10.\nThe function should return\
    \ the string representing the number in base 16.\nThe function should return an\
    \ error if the input string does not represent a number in base 10.\nThe function\
    \ should return an error if the input base is less than 10.\nThe function should\
    \ return an error if the input base is greater than 16.\nThe function should return\
    \ an error if the input number is negative.\nThe function should return an error\
    \ if the input number is zero.\nThe function should return an error if the input\
    \ number is greater than or equal to 16.\nThe function should return an error\
    \ if the input number is less than or equal to 16.\nThe function should return\
    \ an error if the input number is greater than or equal to 16.\nThe function should\
    \ return an error if the input number is less than or equal to 16.\nThe function\
    \ should return an error if the input number is greater than or equal to 16.\n\
    The function should return an error if the input number is less than or equal\
    \ to 16.\nThe function should return an error if the input number is greater than\
    \ or equal to 16.\nThe function should return an error if the input number is\
    \ less than or equal to 16.\nThe function should return an error if the input\
    \ number is greater than or equal to 16.\nThe function should return an error\
    \ if the input number is less than or equal to 16.\nThe function should return\
    \ an error if the input number is greater than or equal to 16.\nThe function should\
    \ return an error if the input number is less than or equal to 16.\nThe function\
    \ should return an error if the input number is greater than or equal to 16.\n\
    The function should return an error if the input number is less than or equal\
    \ to 16.\nThe function should return an error if the input number is greater than\
    \ or equal to 16.\nThe function should return an error if the input number is\
    \ less than or equal to 16.\nThe function should return an error if the input\
    \ number is greater than or equal to 16.\nThe function should return an error\
    \ if the input number is less than or equal to 16.\nThe function should return\
    \ an error if the input number is greater than or equal to 16.\nThe function should\
    \ return an error if the input number is less than or equal to 16.\nThe function\
    \ should return an error if the input number is greater than or equal to 16.\n\
    The function should return an error if the input number is less than or equal\
    \ to 16.\nThe function should return an error if the input number is greater than\
    \ or equal to 16.\nThe function should return an error if the input number is\
    \ less than or equal to 16.\nThe function should return an error if the input\
    \ number is greater than or equal to 16.\nThe function \nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjtjbgp7_.jl:17\nin expression starting at\
    \ /tmp/tmpjtjbgp7_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return string(x)\n    \n  \
    \  digits = digits(x)\n    digits = digits[digits.length - digits.length % base]\n\
    \    digits = digits[0 : digits.length - digits.length % base]\n    digits = digits[0\
    \ : digits.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    digits = digits[0 : digits.length - digits.length % base]\n   \
    \ digits = digits[0 : digits.length]\n    \n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    digits = digits[0 : digits.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base]\n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    digits = digits[0 : digits.length]\n    \n    digits\
    \ = digits[0 : digits.length - digits.length % base]\n    digits = digits[0 :\
    \ digits.length - digits.length % base]\n    digits = digits[0 : digits.length]\n\
    \    \n    digits = digits[0 : digits.length - digits.length % base]\n    digits\
    \ = digits[0 : digits.length - digits.length % base]\n    digits = digits[0 :\
    \ digits.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    digits = digits[0 : digits.length - digits.length % base]\n   \
    \ digits = digits[0 : digits.length]\n    \n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    digits = digits[0 : digits.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base]\n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    digits = digits[0 : digits.length]\n    \n    digits\
    \ = digits[0 : digits.length - digits.length % base]\n    digits = digits[0 :\
    \ digits.length - digits.length % base]\n    digits = digits[0 : digits.length]\n\
    \    \n    digits = digits[0 : digits.length - digits.length % base]\n    digits\
    \ = digits[0 : digits.length - digits.length % base]\n    digits = digits[0 :\
    \ digits.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    digits = digits[0 : digits.length - digits.length % base]\n   \
    \ digits = \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8hpsoa4y.jl:1\nin expression starting at /tmp/tmp8hpsoa4y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        return toString(x)\n    else\
    \ \n        return toString(change_base(x / base, base * base))\nend\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from one base to another.\nThe function should\
    \ take two arguments: x is the number to be converted, and base is the base of\
    \ the number.\nThe function should return the string representation of the number\
    \ after conversion.\nThe function should raise an error if the base is not in\
    \ the range [2, 36].\nThe function should raise an error if the base is 0.\nThe\
    \ function should raise an error if the input number is negative.\nThe function\
    \ should raise an error if the input number is too big.\nThe function should raise\
    \ an error if the input number is too small.\nThe function should raise an error\
    \ if the input number is NaN.\nThe function should raise an error if the input\
    \ number is infinity.\nThe function should raise an error if the input number\
    \ is too large.\nThe function should raise an error if the input number is too\
    \ small.\nThe function should raise an error if the input number is infinite.\n\
    The function should raise an error if the input number is too large.\nThe function\
    \ should raise an error if the input number is too small.\nThe function should\
    \ raise an error if the input number is infinite.\nThe function should raise an\
    \ error if the input number is too large.\nThe function should raise an error\
    \ if the input number is too small.\nThe function should raise an error if the\
    \ input number is infinite.\nThe function should raise an error if the input number\
    \ is too large.\nThe function should raise an error if the input number is too\
    \ small.\nThe function should raise an error if the input number is infinite.\n\
    The function should raise an error if the input number is too large.\nThe function\
    \ should raise an error if the input number is too small.\nThe function should\
    \ raise an error if the input number is infinite.\nThe function should raise an\
    \ error if the input number is too large.\nThe function should raise an error\
    \ if the input number is too small.\nThe function should raise an error if the\
    \ input number is infinite.\nThe function should raise an error if the input number\
    \ is too large.\nThe function should raise an error if the input number is too\
    \ small.\nThe function should raise an error if the input number is infinite.\n\
    The function should raise an error if the input number is too large.\nThe function\
    \ should raise an error if the input number is too small.\nThe function should\
    \ raise an error if the input number is infinite.\nThe function should raise an\
    \ error if the input number is too large.\nThe function should raise an error\
    \ if the input number is too small.\nThe function should raise an error if the\
    \ input number is infinite.\nThe function should raise an error if the input number\
    \ is too large.\nThe function should raise an error if the input number is too\
    \ \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcsee_dyk.jl:17\nin expression starting at\
    \ /tmp/tmpcsee_dyk.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwvgjaxrp.jl:19\nin expression starting at\
    \ /tmp/tmpwvgjaxrp.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 10\n        return string(x * 10^6)\n    else\n        return\
    \ string(x * 10^base) \nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    convert_base(x::Int64,\
    \ base::Int64)::Int64\n    Convert x from base to base numbers are less than 10.\n\
    \    base numbers are less than 10.\n    >>> convert_base(8, 3)\n    22\n    >>>\
    \ convert_base(8, 2)\n    1000\n    >>> convert_base(7, 2)\n    111\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphje5kduh.jl:21\nin expression starting at\
    \ /tmp/tmphje5kduh.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        error(\"Base must be greater\
    \ than or equal to 10\")\n    elseif base > 36\n        error(\"Base must be less\
    \ than or equal to 36\")\n    else\n        return toString(base * x)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a number from base 10 to base\
    \ 16 (hexadecimal).\nThe function should take two arguments: an integer and a\
    \ base (between 2 and 16).\nThe function should return the string representation\
    \ of the number in base 16.\nThe function should raise an error if the base is\
    \ out of range.\nThe function should raise an error if the base is less than 2.\n\
    The function should raise an error if the base is greater than 16.\nThe function\
    \ should raise an error if the base is less than 2.\nThe function should raise\
    \ an error if the base is greater than 16.\nThe function should raise an error\
    \ if the base is less than 2.\nThe function should raise an error if the base\
    \ is greater than 16.\nThe function should raise an error if the base is less\
    \ than 2.\nThe function should raise an error if the base is greater than 16.\n\
    The function should raise an error if the base is less than 2.\nThe function should\
    \ raise an error if the base is greater than 16.\nThe function should raise an\
    \ error if the base is less than 2.\nThe function should raise an error if the\
    \ base is greater than 16.\nThe function should raise an error if the base is\
    \ less than 2.\nThe function should raise an error if the base is greater than\
    \ 16.\nThe function should raise an error if the base is less than 2.\nThe function\
    \ should raise an error if the base is greater than 16.\nThe function should raise\
    \ an error if the base is less than 2.\nThe function should raise an error if\
    \ the base is greater than 16.\nThe function should raise an error if the base\
    \ is less than 2.\nThe function should raise an error if the base is greater than\
    \ 16.\nThe function should raise an error if the base is less than 2.\nThe function\
    \ should raise an error if the base is greater than 16.\nThe function should raise\
    \ an error if the base is less than 2.\nThe function should raise an error if\
    \ the base is greater than 16.\nThe function should raise an error if the base\
    \ is less than 2.\nThe function should raise an error if the base is greater than\
    \ 16.\nThe function should raise an error if the base is less than 2.\nThe function\
    \ should raise an error if the base is greater than 16.\nThe function should raise\
    \ an error if the base is less than 2.\nThe function should raise an error if\
    \ the base is greater than 16.\nThe function should raise an error if the base\
    \ is less than 2.\nThe function should raise an error if the base is greater than\
    \ 16.\nThe function should raise an error if the base is less than 2.\nThe function\
    \ should raise an error if the base is greater than 16.\nThe function should raise\
    \ an error if the base is less than 2.\nThe function should raise an error if\
    \ the base is greater than 16.\nThe function should raise an error if the base\
    \ is less than \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t\
    @test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4_ck7992.jl:19\nin expression starting at\
    \ /tmp/tmp4_ck7992.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        error(\"Base must\
    \ be between 2 and 10\")\n    elseif base == 2\n        return string(x)\n   \
    \ else\n        return string(x*base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal numbers.\nThe input is a\
    \ string containing only 0s and 1s.\nThe output is a string containing only decimal\
    \ numbers.\nThe function should raise an error if the input contains non-binary\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 10 binary digits.\nThe function should raise an error if the input contains\
    \ more than 10 decimal digits.\nThe function should raise an error if the input\
    \ contains more than 10 binary digits.\nThe function should raise an error if\
    \ the input contains more than 10 decimal digits.\nThe function should raise an\
    \ error if the input contains more than 10 binary digits.\nThe function should\
    \ raise an error if the input contains more than 10 decimal digits.\nThe function\
    \ should raise an error if the input contains more than 10 binary digits.\nThe\
    \ function should raise an error if the input contains more than 10 decimal digits.\n\
    The function should raise an error if the input contains more than 10 binary digits.\n\
    The function should raise an error if the input contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 10 binary digits.\nThe function should raise an error if the input contains\
    \ more than 10 decimal digits.\nThe function should raise an error if the input\
    \ contains more than 10 binary digits.\nThe function should raise an error if\
    \ the input contains more than 10 decimal digits.\nThe function should raise an\
    \ error if the input contains more than 10 binary digits.\nThe function should\
    \ raise an error if the input contains more than 10 decimal digits.\nThe function\
    \ should raise an error if the input contains more than 10 binary digits.\nThe\
    \ function should raise an error if the input contains more than 10 decimal digits.\n\
    The function should raise an error if the input contains more than 10 binary digits.\n\
    The function should raise an error if the input contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 10 binary digits.\nThe function should raise an error if the input contains\
    \ more than 10 decimal digits.\nThe function should raise an error if the input\
    \ contains more than 10 binary digits.\nThe function should raise an error if\
    \ the input contains more than 10 decimal digits.\nThe function should raise an\
    \ error if the input contains more than 10 binary digits.\nThe function should\
    \ raise an error if the input contains more than 10 decimal digits.\nThe function\
    \ should raise an error if the input contains more than 10 binary digits.\nThe\
    \ function should raise an error if the input contains more than 10 decimal digits.\n\
    The function should raise an error if the input contains more than 10 binary digits.\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41mxtwet.jl:19\nin expression starting at\
    \ /tmp/tmp41mxtwet.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    convert_base(x::Int64, base::Int64)::Int64\n    convert x from base\
    \ to base\n    base numbers are less than 10.\n    >>> convert_base(8, 3)\n  \
    \  22\n    >>> convert_base(8, 2)\n    1000\n    >>> convert_base(7, 2)\n    111\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppt0pzhft.jl:19\nin expression starting at\
    \ /tmp/tmppt0pzhft.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return show(base * x)\n   \
    \ else\n        return show(base * x / 10)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise: Write\
    \ a function that converts binary to decimal.\n    Binary numbers are represented\
    \ as strings of 0s and 1s.\n    For example, the binary number \"101\" is represented\
    \ by the string \"111001\".\n    Write a function that converts binary to decimal.\n\
    \    Binary numbers are represented as strings of 0s and 1s.\n    For example,\
    \ the binary number \"101\" is represented by the string \"111001\".\n    Write\
    \ a function that converts binary to decimal.\n    Binary numbers are represented\
    \ as strings of 0s and 1s.\n    For example, the binary number \"101\" is represented\
    \ by the string \"111001\".\n    Write a function that converts binary to decimal.\n\
    \    Binary numbers are represented as strings of 0s and 1s.\n    For example,\
    \ the binary number \"101\" is represented by the string \"111001\".\n    Write\
    \ a function that converts binary to decimal.\n    Binary numbers are represented\
    \ as strings of 0s and 1s.\n    For example, the binary number \"101\" is represented\
    \ by the string \"111001\".\n    Write a function that converts binary to decimal.\n\
    \    Binary numbers are represented as strings of 0s and 1s.\n    For example,\
    \ the binary number \"101\" is represented by the string \"111001\".\n    Write\
    \ a function that converts binary to decimal.\n    Binary numbers are represented\
    \ as strings of 0s and 1s.\n    For example, the binary number \"101\" is represented\
    \ by the string \"111001\".\n    Write a function that converts binary to decimal.\n\
    \    Binary numbers are represented as strings of 0s and 1s.\n    For example,\
    \ the binary number \"101\" is represented by the string \"111001\".\n    Write\
    \ a function that converts binary to decimal.\n    Binary numbers are represented\
    \ as strings of 0s and 1s.\n    For example, the binary number \"101\" is represented\
    \ by the string \"111001\".\n    Write a function that converts binary to decimal.\n\
    \    Binary numbers are represented as strings of 0s and 1s.\n    For example,\
    \ the binary number \"101\" is represented by the string \"111001\".\n    Write\
    \ a function that converts binary to decimal.\n    Binary numbers are represented\
    \ as \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplmsz_2ji.jl:17\nin expression starting at\
    \ /tmp/tmplmsz_2ji.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x, base)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7h2103ni.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7h2103ni.jl:1\n\
    in expression starting at /tmp/tmp7h2103ni.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    \n    if x == 0\n        return \"\"\n\
    \    \n    digits = digits(x)\n    \n    digits = digits[digits.length - digits.length\
    \ % base.length : digits.length]\n    \n    digits = digits[0 : digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    \n    digits = digit\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz6g1zhc3.jl:1\nin expression starting at /tmp/tmpz6g1zhc3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        error(\"base must be greater\
    \ than or equal to 10\")\n    elseif base > 36\n        error(\"base must be less\
    \ than or equal to 36\")\n    else\n        str = toString(x)\n        str = str[start:end]\n\
    \        str = str * base\n        str = toString(str)\n        return str\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbj4gxjcs.jl:24\nin expression starting at\
    \ /tmp/tmpbj4gxjcs.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return toString(x::Int64, base)\n\
    \    else\n        return toString(x::Int64, base::Int64 - 10)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a number from base 10 to base\
    \ 16 (hexadecimal).\nThe function should accept two arguments: a string representing\
    \ the number in base 10, and an integer representing the base of the number in\
    \ base 10.\nThe function should return the string representation of the number\
    \ in base 16.\nThe function should raise an error if the base is not 10 or 16.\n\
    The function should raise an error if the input string does not represent a number.\n\
    The function should raise an error if the input string does not represent a number\
    \ in base 10.\nThe function should raise an error if the input string does not\
    \ represent a number in base 16.\nThe function should raise an error if the input\
    \ string does not represent a number in base 16.\nThe function should raise an\
    \ error if the input string does not represent a number in base 16.\nThe function\
    \ should raise an error if the input string does not represent a number in base\
    \ 16.\nThe function should raise an error if the input string does not represent\
    \ a number in base 16.\nThe function should raise an error if the input string\
    \ does not represent a number in base 16.\nThe function should raise an error\
    \ if the input string does not represent a number in base 16.\nThe function should\
    \ raise an error if the input string does not represent a number in base 16.\n\
    The function should raise an error if the input string does not represent a number\
    \ in base 16.\nThe function should raise an error if the input string does not\
    \ represent a number in base 16.\nThe function should raise an error if the input\
    \ string does not represent a number in base 16.\nThe function should raise an\
    \ error if the input string does not represent a number in base 16.\nThe function\
    \ should raise an error if the input string does not represent a number in base\
    \ 16.\nThe function should raise an error if the input string does not represent\
    \ a number in base 16.\nThe function should raise an error if the input string\
    \ does not represent a number in base 16.\nThe function should raise an error\
    \ if the input string does not represent a number in base 16.\nThe function should\
    \ raise an error if the input string does not represent a number in base 16.\n\
    The function should raise an error if the input string does not represent a number\
    \ in base 16.\nThe function should raise an error if the input string does not\
    \ represent a number in base 16.\nThe function should raise an error if the input\
    \ string does not represent a number in base 16.\nThe function should raise an\
    \ error if the input string does not represent a number in base 16.\nThe function\
    \ should raise an error if the input string does not represent a number in base\
    \ 16.\nThe function should raise an error if the input string does not represent\
    \ a number in base 16.\nThe function should raise an error if the input string\
    \ does not represent a \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_l49w8ve.jl:17\nin expression starting at\
    \ /tmp/tmp_l49w8ve.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str((x % base) + base)\n\
    \    else\n        return str((x % base) / base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal numbers. \nThe input is a\
    \ string containing only 0s and 1s.\nThe output is a string containing the decimal\
    \ representation of the binary number.\nThe input string may contain leading zeroes.\n\
    The output string should contain the decimal representation of the binary number\
    \ with leading zeroes.\nThe input string may contain leading zeros.\nThe output\
    \ string should contain the decimal representation of the binary number with leading\
    \ zeros.\nThe input string may contain leading zeros.\nThe output string should\
    \ contain the decimal representation of the binary number with leading zeros.\n\
    The input string may contain leading zeros.\nThe output string should contain\
    \ the decimal representation of the binary number with leading zeros.\nThe input\
    \ string may contain leading zeros.\nThe output string should contain the decimal\
    \ representation of the binary number with leading zeros.\nThe input string may\
    \ contain leading zeros.\nThe output string should contain the decimal representation\
    \ of the binary number with leading zeros.\nThe input string may contain leading\
    \ zeros.\nThe output string should contain the decimal representation of the binary\
    \ number with leading zeros.\nThe input string may contain leading zeros.\nThe\
    \ output string should contain the decimal representation of the binary number\
    \ with leading zeros.\nThe input string may contain leading zeros.\nThe output\
    \ string should contain the decimal representation of the binary number with leading\
    \ zeros.\nThe input string may contain leading zeros.\nThe output string should\
    \ contain the decimal representation of the binary number with leading zeros.\n\
    The input string may contain leading zeros.\nThe output string should contain\
    \ the decimal representation of the binary number with leading zeros.\nThe input\
    \ string may contain leading zeros.\nThe output string should contain the decimal\
    \ representation of the binary number with leading zeros.\nThe input string may\
    \ contain leading zeros.\nThe output string should contain the decimal representation\
    \ of the binary number with leading zeros.\nThe input string may contain leading\
    \ zeros.\nThe output string should contain the decimal representation of the binary\
    \ number with leading zeros.\nThe input string may contain leading zeros.\nThe\
    \ output string should contain the decimal representation of the binary number\
    \ with leading zeros.\nThe input string may contain leading zeros.\nThe output\
    \ string should contain the decimal representation of the binary number with leading\
    \ zeros.\nThe input string may contain leading zeros.\nThe output string should\
    \ contain the decimal representation of the binary number with leading zeros.\n\
    The input string may contain leading \nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgbihvqi0.jl:17\nin expression starting at\
    \ /tmp/tmpgbihvqi0.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return show(base * x)\n   \
    \ else\n        return show(base * x) + show(x % base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from base 10 to base 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9jrelmij.jl:17\nin expression starting at\
    \ /tmp/tmp9jrelmij.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        error(\"Base must\
    \ be between 2 and 10\")\n    elseif base == 2\n        return string(x)\n   \
    \ else\n        return string(x*base^2)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8135alme.jl:19\nin expression starting at\
    \ /tmp/tmp8135alme.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    \n    if base == 2\n        return string(x)\n\
    \    \n    if base == 3\n        if x == 0\n            return \"0\"\n       \
    \ if x == 1\n            return \"1\"\n        if x == -1\n            return\
    \ \"-1\"\n        if x == -2\n            return \"-2\"\n        if x == -3\n\
    \            return \"-3\"\n        if x == -4\n            return \"-4\"\n  \
    \      if x == -5\n            return \"-5\"\n        if x == -6\n           \
    \ return \"-6\"\n        if x == -7\n            return \"-7\"\n        if x ==\
    \ -8\n            return \"-8\"\n        if x == -9\n            return \"-9\"\
    \n        if x == -10\n            return \"-10\"\n        if x == -11\n     \
    \       return \"-11\"\n        if x == -12\n            return \"-12\"\n    \
    \    if x == -13\n            return \"-13\"\n        if x == -14\n          \
    \  return \"-14\"\n        if x == -15\n            return \"-15\"\n        if\
    \ x == -16\n            return \"-16\"\n        if x == -17\n            return\
    \ \"-17\"\n        if x == -18\n            return \"-18\"\n        if x == -19\n\
    \            return \"-19\"\n        if x == -20\n            return \"-20\"\n\
    \        if x == -21\n            return \"-21\"\n        if x == -22\n      \
    \      return \"-22\"\n        if x == -23\n            return \"-23\"\n     \
    \   if x == -24\n            return \"-24\"\n        if x == -25\n           \
    \ return \"-25\"\n        if x == -26\n            return \"-26\"\n        if\
    \ x == -27\n            return \"-27\"\n        if x == -28\n            return\
    \ \"-28\"\n        if x == -29\n            return \"-29\"\n        if x == -30\n\
    \            return \"-30\"\n        if x == -31\n            return \"-31\"\n\
    \        if x == -32\n            return \"-32\"\n        if x == -33\n      \
    \      return \"-33\"\n        if x == -34\n            return \"-34\"\n     \
    \   if x == -35\n            return \"-35\"\n        if x == -36\n           \
    \ return \"-36\"\n        if x == -37\n            return \"-37\"\n        if\
    \ x == -38\n            return \"-38\"\n        if x == -39\n            return\
    \ \"-39\"\n        if x == -40\n            return \"-40\"\n        if x == -41\n\
    \            return \"-41\"\n        if x == -42\n            return \"-42\"\n\
    \        if x == -43\n            return \"-43\"\n        if x == -44\n      \
    \      return \"-44\"\n        if x == -45\n            return \"-45\"\n     \
    \   if x == -46\n            return \"-46\"\n        if x == -47\n           \
    \ return \"-47\"\n        if x == -48\n            return \"-48\"\n        if\
    \ x == -49\n            return \"-49\"\n        if x == -50\n            return\
    \ \"-50\"\n        if x == -51\n            return \"-5\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"22\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw7hyqu1_.jl:130\nin expression starting at /tmp/tmpw7hyqu1_.jl:130\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = string(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[digits.length - digits.length % base]\n        return digits[digits.length\
    \ / base]\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ binary numbers to decimal numbers.\nThe input is a string that consists of only\
    \ 0s and 1s.\nThe output is a string that consists of only decimal numbers.\n\
    The function should throw an error if the input string is not valid.\nThe function\
    \ should throw an error if the input string contains invalid characters.\nThe\
    \ function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid \nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpebbf21md.jl:23\nin expression starting at\
    \ /tmp/tmpebbf21md.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    \n    if x == 0\n        return \"\"\n\
    \    \n    if base == 10\n        return to_string(x)\n    \n    digits = to_string(x)\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp530vhe_0.jl:1\nin expression starting at /tmp/tmp530vhe_0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x/base^base, base^base)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a number from base 10 to base\
    \ 16. \nThe function should throw an error if the base is not between 2 and 16.\n\
    The function should throw an error if the number is negative.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is zero.\nThe function should throw an error if the number is infinity.\nThe\
    \ function should throw an error if the number is NaN.\nThe function should throw\
    \ an error if the number is infinite.\nThe function should throw an error if the\
    \ number is NaN.\nThe function should throw an error if the number is infinite.\n\
    The function should throw an error if the number is NaN.\nThe function should\
    \ throw an error if the number is infinite.\nThe function should throw an error\
    \ if the number is NaN.\nThe function should throw an error if the number is infinite.\n\
    The function should throw an error if the number is NaN.\nThe function should\
    \ throw an error if the number is infinite.\nThe function should throw an error\
    \ if the number is NaN.\nThe function should throw an error if the number is infinite.\n\
    The function should throw an error if the number is NaN.\nThe function should\
    \ throw an error if the number is infinite.\nThe function should throw an error\
    \ if the number is NaN.\nThe function should throw an error if the number is infinite.\n\
    The function should throw an error if the number is NaN.\nThe function should\
    \ throw an error if the number is infinite.\nThe function should throw an error\
    \ if the number is NaN.\nThe function should throw an error if the number is infinite.\n\
    The function should throw an error if the number is NaN.\nThe function should\
    \ throw an error if the number is infinite.\nThe function should throw an error\
    \ if the number is NaN.\nThe function should throw an error if the number is infinite.\n\
    The function should throw an error if the number is NaN.\nThe function should\
    \ throw an error if the number is infinite.\nThe function should throw an error\
    \ if the number is NaN.\nThe function should throw an error if the number is infinite.\n\
    The function should throw an error if the number is NaN.\nThe function should\
    \ throw an error if the number is infinite.\nThe function should throw an error\
    \ if the number is NaN.\nThe function should throw an error if the number is infinite.\n\
    The function should throw an error if the number is NaN.\nThe function should\
    \ \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprf7vphmu.jl:19\nin expression starting at\
    \ /tmp/tmprf7vphmu.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return show(base * x)\n   \
    \ else\n        return show(base * x / 10)\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts binary to decimal.\nThe input is a string that\
    \ consists of only 0s and 1s.\nThe output is an integer that is the decimal equivalent\
    \ of the binary string.\nThe function should raise an error if the input string\
    \ is not valid.\nThe function should raise an error if the input string contains\
    \ invalid characters, such as spaces or letters.\nThe function should raise an\
    \ error if the input string contains invalid characters, such as letters or symbols.\n\
    The function should raise an error if the input string contains invalid characters,\
    \ such as letters or symbols.\nThe function should raise an error if the input\
    \ string contains invalid characters, such as letters or symbols.\nThe function\
    \ should raise an error if the input string contains invalid characters, such\
    \ as letters or symbols.\nThe function should raise an error if the input string\
    \ contains invalid characters, such as letters or symbols.\nThe function should\
    \ raise an error if the input string contains invalid characters, such as letters\
    \ or symbols.\nThe function should raise an error if the input string contains\
    \ invalid characters, such as letters or symbols.\nThe function should raise an\
    \ error if the input string contains invalid characters, such as letters or symbols.\n\
    The function should raise an error if the input string contains invalid characters,\
    \ such as letters or symbols.\nThe function should raise an error if the input\
    \ string contains invalid characters, such as letters or symbols.\nThe function\
    \ should raise an error if the input string contains invalid characters, such\
    \ as letters or symbols.\nThe function should raise an error if the input string\
    \ contains invalid characters, such as letters or symbols.\nThe function should\
    \ raise an error if the input string contains invalid characters, such as letters\
    \ or symbols.\nThe function should raise an error if the input string contains\
    \ invalid characters, such as letters or symbols.\nThe function should raise an\
    \ error if the input string contains invalid characters, such as letters or symbols.\n\
    The function should raise an error if the input string contains invalid characters,\
    \ such as letters or symbols.\nThe function should raise an error if the input\
    \ string contains invalid characters, such as letters or symbols.\nThe function\
    \ should raise an error if the input string contains invalid characters, such\
    \ as letters or symbols.\nThe function should raise an error if the input string\
    \ contains invalid characters, such as letters or symbols.\nThe function should\
    \ raise an error if the input string contains invalid characters, such as letters\
    \ or symbols.\nThe function should raise an error if the input string contains\
    \ invalid characters, such as letters or symbols.\nThe function should raise an\
    \ error if the input string contains invalid characters, such as letters or symbols.\n\
    The function should raise an error if the input string contains invalid characters,\
    \ such as letters or symbols.\nThe function \nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6aixmdc.jl:17\nin expression starting at\
    \ /tmp/tmph6aixmdc.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        error(\"Base must\
    \ be between 2 and 10\")\n    elseif base == 2 \n        return string(x)\n  \
    \  elseif base == 10 \n        return string(x::Int64)\n    elseif base == 3 \n\
    \        return string(x::Int64*10)\n    elseif base == 4 \n        return string(x::Int64*100)\n\
    \    elseif base == 5 \n        return string(x::Int64*1000)\n    elseif base\
    \ == 6 \n        return string(x::Int64*10000)\n    elseif base == 7 \n      \
    \  return string(x::Int64*100000)\n    elseif base == 8 \n        return string(x::Int64*1000000)\n\
    \    elseif base == 9 \n        return string(x::Int64*10000000)\n    elseif base\
    \ == 10 \n        return string(x::Int64*100000000)\n    elseif base == 11 \n\
    \        return string(x::Int64*1000000000)\n    elseif base == 12 \n        return\
    \ string(x::Int64*10000000000)\n    elseif base == 13 \n        return string(x::Int64*100000000000)\n\
    \    elseif base == 14 \n        return string(x::Int64*1000000000000)\n    elseif\
    \ base == 15 \n        return string(x::Int64*10000000000000)\n    elseif base\
    \ == 16 \n        return string(x::Int64*100000000000000)\n    elseif base ==\
    \ 17 \n        return string(x::Int64*1000000000000000)\n    elseif base == 18\
    \ \n        return string(x::Int64*10000000000000000)\n    elseif base == 19 \n\
    \        return string(x::Int64*100000000000000000)\n    elseif base == 20 \n\
    \        return string(x::Int64*1000000000000000000)\n    elseif base == 21 \n\
    \        return string(x::Int64*10000000000000000000)\n    elseif base == 22 \n\
    \        return string(x::Int64*100000000000000000000)\n    elseif base == 23\
    \ \n        return string(x::Int64*1000000000000000000000)\n    elseif base ==\
    \ 24 \n        return string(x::Int64*10000000000000000000000)\n    elseif base\
    \ == 25 \n        return string(x::Int64*100000000000000000000000)\n    elseif\
    \ base == 26 \n        return string(x::Int64*1000000000000000000000000)\n   \
    \ elseif base == 27 \n        return string(x::Int64*10000000000000000000000000)\n\
    \    elseif base == 28 \n        return string(x::Int64*100000000000000000000000000)\n\
    \    elseif base == 29 \n        return string(x::Int64*1000000000000000000000000000)\n\
    \    elseif base == 30 \n        return string(x::Int64\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2zq50vsb.jl:74\nin expression starting at\
    \ /tmp/tmp2zq50vsb.jl:74\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = digits(x)\n    \
    \    digits = digits[2:end]\n        digits = digits[digits[1] == 0 ? (end - 1)\
    \ : 1]\n        return join(digits, \"\")\n    digits = digits(x)\n    digits\
    \ = digits[2:end]\n    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits\
    \ = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits = digits[digits[1] == 0\
    \ ? (end - 1) : 1]\n    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits\
    \ = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits = digits[digits[1] == 0\
    \ ? (end - 1) : 1]\n    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits\
    \ = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits = digits[digits[1] == 0\
    \ ? (end - 1) : 1]\n    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits\
    \ = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits = digits[digits[1] == 0\
    \ ? (end - 1) : 1]\n    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits\
    \ = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits = digits[digits[1] == 0\
    \ ? (end - 1) : 1]\n    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits\
    \ = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits = digits[digits[1] == 0\
    \ ? (end - 1) : 1]\n    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits\
    \ = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits = digits[digits[1] == 0\
    \ ? (end - 1) : 1]\n    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits\
    \ = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits = digits[digits[1] == 0\
    \ ? (end - 1) : 1]\n    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits\
    \ = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits = digits[digits[1] == 0\
    \ ? (end - 1) : 1]\n    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits\
    \ = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits = digits[digits[1] == 0\
    \ ? (end - 1) : 1]\n    digits = digits[digit\nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprwf_azmh.jl:1\nin expression starting at /tmp/tmprwf_azmh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    Base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x*base)\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that converts a number from base 10 to base 16. \nThe function should\
    \ throw an error if the base is not between 2 and 16.\nThe function should throw\
    \ an error if the number is negative.\nThe function should throw an error if the\
    \ number is too large.\nThe function should throw an error if the number is too\
    \ small.\nThe function should throw an error if the number is too large.\nThe\
    \ function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is \nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwxoippfl.jl:19\nin expression starting at\
    \ /tmp/tmpwxoippfl.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    end\n    \n    if base == 2\n        return string(x)\n\
    \    end\n    \n    digits = string(x)\n    digits = digits[2:end]\n    digits\
    \ = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n  \
    \  digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi8dpn9zv.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi8dpn9zv.jl:1\n\
    in expression starting at /tmp/tmpi8dpn9zv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        error(\"Base must\
    \ be between 2 and 10\")\n    elseif base == 2 \n        return string(x)\n  \
    \  else\n        return string(x*base^2)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    change_base(s::String, base::Int64)::String\n    Change numerical\
    \ base of input string s to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(\"22\"\
    , 3)\n    \"22\"\n    >>> change_base(\"1000\", 2)\n    \"1000\"\n    >>> change_base(\"\
    111\", 2)\n    \"111\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6r9d6_i.jl:19\nin expression starting at\
    \ /tmp/tmpv6r9d6_i.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    else\n        return string(x%base^(x/base))\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    change_base(::Int64, ::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_fn_6n4_.jl:17\nin expression starting at\
    \ /tmp/tmp_fn_6n4_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x/base^base, base^base)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that converts binary to decimal.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output is an integer number.\nThe input string may contain leading\
    \ zeros.\nThe output \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxdx6y3yk.jl:19\nin expression starting at\
    \ /tmp/tmpxdx6y3yk.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuhj8lmfz.jl:19\nin expression starting at\
    \ /tmp/tmpuhj8lmfz.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 10\n        return string(x*x)\n    else\n        return string(x*base^(x-1))\n\
    end\n</cell>\n<text>\nExercise 5\nWrite a function that converts a number from\
    \ base 10 to base 36 (a-z). \nThe function should throw an error if the base is\
    \ not between 2 and 36.\nThe function should throw an error if the input number\
    \ is negative.\nThe function should throw an error if the input number is zero.\n\
    The function should throw an error if the input number is larger than 36.\nThe\
    \ function should throw an error if the input number is smaller than 2.\nThe function\
    \ should throw an error if the input number is larger than 36.\nThe function should\
    \ throw an error if the input number is smaller than 2.\nThe function should throw\
    \ an error if the input number is larger than 36.\nThe function should throw an\
    \ error if the input number is smaller than 2.\nThe function should throw an error\
    \ if the input number is larger than 36.\nThe function should throw an error if\
    \ the input number is smaller than 2.\nThe function should throw an error if the\
    \ input number is larger than 36.\nThe function should throw an error if the input\
    \ number is smaller than 2.\nThe function should throw an error if the input number\
    \ is larger than 36.\nThe function should throw an error if the input number is\
    \ smaller than 2.\nThe function should throw an error if the input number is larger\
    \ than 36.\nThe function should throw an error if the input number is smaller\
    \ than 2.\nThe function should throw an error if the input number is larger than\
    \ 36.\nThe function should throw an error if the input number is smaller than\
    \ 2.\nThe function should throw an error if the input number is larger than 36.\n\
    The function should throw an error if the input number is smaller than 2.\nThe\
    \ function should throw an error if the input number is larger than 36.\nThe function\
    \ should throw an error if the input number is smaller than 2.\nThe function should\
    \ throw an error if the input number is larger than 36.\nThe function should throw\
    \ an error if the input number is smaller than 2.\nThe function should throw an\
    \ error if the input number is larger than 36.\nThe function should throw an error\
    \ if the input number is smaller than 2.\nThe function should throw an error if\
    \ the input number is larger than 36.\nThe function should throw an error if the\
    \ input number is smaller than 2.\nThe function should throw an error if the input\
    \ number is larger than 36.\nThe function should throw an error if the input number\
    \ is smaller than 2.\nThe function should throw an error if the input number is\
    \ larger than 36.\nThe function should throw an error if the input number is smaller\
    \ than 2.\nThe function should throw an error if the input number is larger than\
    \ 36.\nThe function should throw an error if the input number is smaller than\
    \ 2.\nThe function should throw an error if the input number is larger than 36.\n\
    The function should throw an error if the input number is smaller than 2.\nThe\
    \ function should throw an error if the input number is larger than 36.\nThe function\
    \ should throw an error if the input number is smaller than 2.\nThe \nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkch1yexh.jl:21\nin expression starting at\
    \ /tmp/tmpkch1yexh.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        error(\"Base must be less than\
    \ 10\")\n    elseif base == 10\n        return toString(x)\n    else\n       \
    \ return toString(toInt(x)/toInt(base)*toInt(base))\nend\n</code>\n<|/ a tags=julia,type-conversion\
    \ |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfhfj6_ze.jl:19\nin expression starting at\
    \ /tmp/tmpfhfj6_ze.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 3\n        return string(x, \"b\")\n    elseif base == 4\n\
    \        return string(x, \"o\")\n    elseif base == 5\n        return string(x,\
    \ \"x\")\n    elseif base == 6\n        return string(x, \"h\")\n    elseif base\
    \ == 7\n        return string(x, \"d\")\n    elseif base == 8\n        return\
    \ string(x, \"o\")\n    elseif base == 9\n        return string(x, \"x\")\n  \
    \  elseif base == 10\n        return string(x, \"l\")\n    elseif base == 11\n\
    \        return string(x, \"l\")\n    elseif base == 12\n        return string(x,\
    \ \"l\")\n    elseif base == 13\n        return string(x, \"l\")\n    elseif base\
    \ == 14\n        return string(x, \"l\")\n    elseif base == 15\n        return\
    \ string(x, \"l\")\n    elseif base == 16\n        return string(x, \"l\")\n \
    \   elseif base == 17\n        return string(x, \"l\")\n    elseif base == 18\n\
    \        return string(x, \"l\")\n    elseif base == 19\n        return string(x,\
    \ \"l\")\n    elseif base == 20\n        return string(x, \"l\")\n    elseif base\
    \ == 21\n        return string(x, \"l\")\n    elseif base == 22\n        return\
    \ string(x, \"l\")\n    elseif base == 23\n        return string(x, \"l\")\n \
    \   elseif base == 24\n        return string(x, \"l\")\n    elseif base == 25\n\
    \        return string(x, \"l\")\n    elseif base == 26\n        return string(x,\
    \ \"l\")\n    elseif base == 27\n        return string(x, \"l\")\n    elseif base\
    \ == 28\n        return string(x, \"l\")\n    elseif base == 29\n        return\
    \ string(x, \"l\")\n    elseif base == 30\n        return string(x, \"l\")\n \
    \   elseif base == 31\n        return string(x, \"l\")\n    elseif base == 32\n\
    \        return string(x, \"l\")\n    elseif base == 33\n        return string(x,\
    \ \"l\")\n    elseif base == 34\n        return string(x, \"l\")\n    elseif base\
    \ == 35\n        return string(x, \"l\")\n    elseif base == 36\n        return\
    \ string(x, \"l\")\n    else\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7sa3ud1v.jl:88\nin expression starting at\
    \ /tmp/tmp7sa3ud1v.jl:88\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = digits(x)\n    \
    \    return digits[1] + digits[2] + digits[3]\n    else \n        digits = digits(x)\n\
    \        digits[1] = digits[1] * base\n        digits[2] = digits[2] * base\n\
    \        digits[3] = digits[3] * base\n        return digits[1] + digits[2] +\
    \ digits[3]\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprew2urpx.jl:22\nin expression starting at\
    \ /tmp/tmprew2urpx.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x, base)\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts a number to a binary string. \nThe function should\
    \ take one argument x, which can be any numerical type.\nThe function should return\
    \ a string representation of x, in binary format.\nThe function should throw an\
    \ error if the argument x is not numeric.\nThe function should throw an error\
    \ if the argument x is negative.\nThe function should throw an error if the argument\
    \ x is too big.\nThe function should throw an error if the argument x is too small.\n\
    The function should throw an error if the argument x is zero.\nThe function should\
    \ throw an error if the argument x is too large.\nThe function should throw an\
    \ error if the argument x is too small.\nThe function should throw an error if\
    \ the argument x is too large.\nThe function should throw an error if the argument\
    \ x is too small.\nThe function should throw an error if the argument x is too\
    \ large.\nThe function should throw an error if the argument x is too small.\n\
    The function should throw an error if the argument x is too large.\nThe function\
    \ should throw an error if the argument x is too small.\nThe function should throw\
    \ an error if the argument x is too large.\nThe function should throw an error\
    \ if the argument x is too small.\nThe function should throw an error if the argument\
    \ x is too large.\nThe function should throw an error if the argument x is too\
    \ small.\nThe function should throw an error if the argument x is too large.\n\
    The function should throw an error if the argument x is too small.\nThe function\
    \ should throw an error if the argument x is too large.\nThe function should throw\
    \ an error if the argument x is too small.\nThe function should throw an error\
    \ if the argument x is too large.\nThe function should throw an error if the argument\
    \ x is too small.\nThe function should throw an error if the argument x is too\
    \ large.\nThe function should throw an error if the argument x is too small.\n\
    The function should throw an error if the argument x is too large.\nThe function\
    \ should throw an error if the argument x is too small.\nThe function should throw\
    \ an error if the argument x is too large.\nThe function should throw an error\
    \ if the argument x is too small.\nThe function should throw an error if the argument\
    \ x is too large.\nThe function should throw an error if the argument x is too\
    \ small.\nThe function should throw an error if the argument x is too large.\n\
    The function should throw an error if the argument x is too small.\nThe function\
    \ \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp14nv7wu0.jl:19\nin expression starting at\
    \ /tmp/tmp14nv7wu0.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = digits(x)\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits + string(x)\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        return digits\n\
    end\n</cell>\n<code language=julia-1.3>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvcbf8zva.jl:25\nin expression starting at\
    \ /tmp/tmpvcbf8zva.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return show(base * x)\n   \
    \ else\n        return show(base * x) / show(base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from base 10 to base 16. \nThe input number\
    \ x is assumed to be in string format. \nThe output string representation is returned\
    \ in string format.\nThe input number x is assumed to be in string format. \n\
    The output string representation is returned in string format.\nThe input number\
    \ x is assumed to be in string format. \nThe output string representation is returned\
    \ in string format.\nThe input number x is assumed to be in string format. \n\
    The output string representation is returned in string format.\nThe input number\
    \ x is assumed to be in string format. \nThe output string representation is returned\
    \ in string format.\nThe input number x is assumed to be in string format. \n\
    The output string representation is returned in string format.\nThe input number\
    \ x is assumed to be in string format. \nThe output string representation is returned\
    \ in string format.\nThe input number x is assumed to be in string format. \n\
    The output string representation is returned in string format.\nThe input number\
    \ x is assumed to be in string format. \nThe output string representation is returned\
    \ in string format.\nThe input number x is assumed to be in string format. \n\
    The output string representation is returned in string format.\nThe input number\
    \ x is assumed to be in string format. \nThe output string representation is returned\
    \ in string format.\nThe input number x is assumed to be in string format. \n\
    The output string representation is returned in string format.\nThe input number\
    \ x is assumed to be in string format. \nThe output string representation is returned\
    \ in string format.\nThe input number x is assumed to be in string format. \n\
    The output string representation is returned in string format.\nThe input number\
    \ x is assumed to be in string format. \nThe output string representation is returned\
    \ in string format.\nThe input number x is assumed to be in string format. \n\
    The output string representation is returned in string format.\nThe input number\
    \ x is assumed to be in string format. \nThe output string representation is returned\
    \ in string format.\nThe input number x is assumed to be in string format. \n\
    The output string representation is returned in string format.\nThe input number\
    \ x is assumed to be in string format. \nThe output string representation is returned\
    \ in string format.\nThe \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22fqp2lt.jl:17\nin expression starting at\
    \ /tmp/tmp22fqp2lt.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return toString(x::Int64, base)\n\
    \    else\n        return toString(x::Int64, base::Int64)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise\nWrite a function that converts a number from base 10 to base\
    \ 16. \nThe function should take two arguments: the first is the number to be\
    \ converted, and the second is the base of the number.\nThe function should return\
    \ a string representation of the number in base 16.\nThe function should return\
    \ an error if the base is not 10 or 16.\nThe function should return an error if\
    \ the number is negative.\nThe function should return an error if the number is\
    \ zero.\nThe function should return an error if the number is greater than the\
    \ maximum value of Int64.\nThe function should return an error if the number is\
    \ less than the minimum value of Int64.\nThe function should return an error if\
    \ the number is outside the range of Int64.\nThe function should return an error\
    \ if the number is outside the range of Int32.\nThe function should return an\
    \ error if the number is outside the range of Int8.\nThe function should return\
    \ an error if the number is outside the range of UInt8.\nThe function should return\
    \ an error if the number is outside the range of Float32.\nThe function should\
    \ return an error if the number is outside the range of Float64.\nThe function\
    \ should return an error if the number is outside the range of Float16.\nThe function\
    \ should return an error if the number is outside the range of Bool.\nThe function\
    \ should return an error if the number is outside the range of String.\nThe function\
    \ should return an error if the number is outside the range of Symbol.\nThe function\
    \ should return an error if the number is outside the range of Date.\nThe function\
    \ should return an error if the number is outside the range of Base.\nThe function\
    \ should return an error if the number is outside the range of Base.Index.\nThe\
    \ function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4h8j_q3y.jl:18\nin expression starting at\
    \ /tmp/tmp4h8j_q3y.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        error(\"Base must\
    \ be between 2 and 10\")\n    elseif base == 2 \n        return string(x)\n  \
    \  elseif base == 10 \n        return string(x*x)\n    elseif base == 3 \n   \
    \     return string(x*x*x)\n    elseif base == 4 \n        return string(x*x*x*x)\n\
    \    elseif base == 5 \n        return string(x*x*x*x*x)\n    elseif base == 6\
    \ \n        return string(x*x*x*x*x*x)\n    elseif base == 7 \n        return\
    \ string(x*x*x*x*x*x*x)\n    elseif base == 8 \n        return string(x*x*x*x*x*x*x*x)\n\
    \    elseif base == 9 \n        return string(x*x*x*x*x*x*x*x*x)\n    else\n \
    \       error(\"Base must be between 2 and 10\")\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    change_base(::Int64, ::Int64)::String\n   \
    \ Change numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8,\
    \ 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n    >>> change_base(7,\
    \ 2)\n    \"111\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp42yl9ct2.jl:36\nin expression starting at\
    \ /tmp/tmp42yl9ct2.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 10 and 36\"))\n    elseif base == 10\n        return toString(x)\n\
    \    else\n        return toString(base * x)\nend\n</cell>\n<code language=julia-1.1>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1fgu_2qa.jl:19\nin expression starting at\
    \ /tmp/tmp1fgu_2qa.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 || base == 0\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    else\n        digits = digits(x)\n    \
    \    digits = digits[digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base]\n   \
    \     digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[0 :\
    \ digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base]\n   \
    \     digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[0 :\
    \ digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base]\n   \
    \     digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[0 :\
    \ digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base]\n   \
    \     digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[0 :\
    \ digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base]\n   \
    \     digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[0 :\
    \ digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digit\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpk0rg3mge.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk0rg3mge.jl:1\n\
    in expression starting at /tmp/tmpk0rg3mge.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return string(x)\n    else\n\
    \        return string(x/base)*base\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe7hiy_xg.jl:17\nin expression starting at\
    \ /tmp/tmpe7hiy_xg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x*base)\nend\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(7, 2)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that converts a number from base 10 to base 36. \nThe function should\
    \ throw an error if the base is out of range.\nThe function should throw an error\
    \ if the number is negative.\nThe function should throw an error if the number\
    \ is zero.\nThe function should throw an error if the number is too large.\nThe\
    \ function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkrpa2pg0.jl:19\nin expression starting at\
    \ /tmp/tmpkrpa2pg0.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Invalid\
    \ base\")\n    elseif base == 2\n        return string(x)\n    elseif base ==\
    \ 3\n        return string(x * 1000 + 100)\n    elseif base == 4\n        return\
    \ string(x * 10000 + 1000)\n    elseif base == 5\n        return string(x * 100000\
    \ + 10000)\n    elseif base == 6\n        return string(x * 1000000 + 100000)\n\
    \    elseif base == 7\n        return string(x * 10000000 + 1000000)\n    elseif\
    \ base == 8\n        return string(x * 100000000 + 10000000)\n    elseif base\
    \ == 9\n        return string(x * 1000000000 + 100000000)\n    elseif base ==\
    \ 10\n        return string(x * 10000000000 + 1000000000)\n    else\n        error(\"\
    Invalid base\")\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpatpn10m6.jl:36\nin expression starting at\
    \ /tmp/tmpatpn10m6.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    else\n        str = toString(x)\n     \
    \   str = str[start:end]\n        str = str * base\n        str = toString(str)\n\
    \        return str\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphiv1_okz.jl:21\nin expression starting at\
    \ /tmp/tmphiv1_okz.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x*base)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    change_base(s::String, base::Int64)::Int64\n    Change numerical base\
    \ of input string s to base.\n    return numerical base after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(\"22\", 3)\n    22\n\
    \    >>> change_base(\"1000\", 2)\n    1000\n    >>> change_base(\"111\", 2)\n\
    \    111\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgu092g3f.jl:19\nin expression starting at\
    \ /tmp/tmpgu092g3f.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Invalid base\"))\n    \n    digits = digits(x)\n    digits = digits[2:end]\n \
    \   digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits\
    \ = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits\
    \ = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits\
    \ = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits\
    \ = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits\
    \ = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits\
    \ = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits\
    \ = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits\
    \ = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits\
    \ = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits\
    \ = digits[digits[1]\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuicxfdf5.jl:1\nin expression starting at /tmp/tmpuicxfdf5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str((x % base) + base)\n\
    \    else\n        return str((x % base) / base)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcbjz_uzi.jl:17\nin expression starting at\
    \ /tmp/tmpcbjz_uzi.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2 \n        return string(x)\n\
    \    else\n        return string(x, base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that converts binary numbers to decimal numbers. \nThe input is a\
    \ string containing binary numbers, \nthe output is a string containing the decimal\
    \ numbers.\nThe input string may contain leading zeros, \nthe output string should\
    \ not contain leading zeros.\nThe input string may contain spaces, \nthe output\
    \ string should not contain spaces.\nThe input string may contain leading spaces,\
    \ \nthe output string should not contain leading spaces.\nThe input string may\
    \ contain trailing spaces, \nthe output string should not contain trailing spaces.\n\
    The input string may contain leading zeros, \nthe output string should not contain\
    \ leading zeros.\nThe input string may contain spaces, \nthe output string should\
    \ not contain spaces.\nThe input string may contain leading spaces, \nthe output\
    \ string should not contain leading spaces.\nThe input string may contain trailing\
    \ spaces, \nthe output string should not contain trailing spaces.\nThe input string\
    \ may contain leading zeros, \nthe output string should not contain leading zeros.\n\
    The input string may contain spaces, \nthe output string should not contain spaces.\n\
    The input string may contain leading spaces, \nthe output string should not contain\
    \ leading spaces.\nThe input string may contain trailing spaces, \nthe output\
    \ string should not contain trailing spaces.\nThe input string may contain leading\
    \ zeros, \nthe output string should not contain leading zeros.\nThe input string\
    \ may contain spaces, \nthe output string should not contain spaces.\nThe input\
    \ string may contain leading spaces, \nthe output string should not contain leading\
    \ spaces.\nThe input string may contain trailing spaces, \nthe output string should\
    \ not contain trailing spaces.\nThe input string may contain leading zeros, \n\
    the output string should not contain leading zeros.\nThe input string may contain\
    \ spaces, \nthe output string should not contain spaces.\nThe input string may\
    \ contain leading spaces, \nthe output string should not contain leading spaces.\n\
    The input string may contain trailing spaces, \nthe output string should not contain\
    \ trailing spaces.\nThe input string may contain leading zeros, \nthe output string\
    \ should not contain leading zeros.\nThe input string may contain spaces, \nthe\
    \ output string should not contain spaces.\nThe input string may \nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj08d9280.jl:19\nin expression starting at\
    \ /tmp/tmpj08d9280.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return show(base * x)\n   \
    \ else\n        return show(base * x / 10)\nend\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal numbers.\nThe input is a\
    \ string containing only 0s and 1s.\nThe output is a string containing the decimal\
    \ representation of the binary number.\nThe function should work for any base\
    \ from 2 to 64.\nThe function should work for negative numbers.\nThe function\
    \ should work for any number of leading 0s.\nThe function should work for any\
    \ number of leading 1s.\nThe function should work for any number of leading 0s\
    \ and 1s.\nThe function should work for any number of leading 0s, 1s and 2s.\n\
    The function should work for any number of leading 0s, 1s, 2s and 3s.\nThe function\
    \ should work for any number of leading 0s, 1s, 2s, 3s and 4s.\nThe function should\
    \ work for any number of leading 0s, 1s, 2s, 3s, 4s and 5s.\nThe function should\
    \ work for any number of leading 0s, 1s, 2s, 3s, 4s, 5s and 6s.\nThe function\
    \ should work for any number of leading 0s, 1s, 2s, 3s, 4s, 5s, 6s and 7s.\nThe\
    \ function should work for any number of leading 0s, 1s, 2s, 3s, 4s, 5s, 6s, 7s\
    \ and 8s.\nThe function should work for any number of leading 0s, 1s, 2s, 3s,\
    \ 4s, 5s, 6s, 7s, 8s and 9s.\nThe function should work for any number of leading\
    \ 0s, 1s, 2s, 3s, 4s, 5s, 6s, 7s, 8s, 9s and 10s.\nThe function should work for\
    \ any number of leading 0s, 1s, 2s, 3s, 4s, 5s, 6s, 7s, 8s, 9s, 10s and 11s.\n\
    The function should work for any number of leading 0s, 1s, 2s, 3s, 4s, 5s, 6s,\
    \ 7s, 8s, 9s, 10s, 11s and 12s.\nThe function should work for any number of leading\
    \ 0s, 1s, 2s, 3s, 4s, 5s, 6s, 7s, 8s, 9s, 10s, 11s, 12s and 13s.\nThe function\
    \ should work for any number of leading 0s, 1s, 2s, 3s, 4s, 5s, 6s, 7s, 8s, 9s,\
    \ 10s, 11s, 12s, 13s and 14s.\nThe function should work for any number of leading\
    \ 0s, 1s, 2s, 3s, \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw7k500du.jl:17\nin expression starting at\
    \ /tmp/tmpw7k500du.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^digits(x))\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_xfx0xx3.jl:19\nin expression starting at\
    \ /tmp/tmp_xfx0xx3.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return toString(x::Int64, base)\n\
    \    else\n        return toString(x::Int64, base::Int64)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal.\n\
    The input is a string containing only 0s and 1s.\nThe output is a decimal number.\n\
    The function should raise an error if the input is not binary.\nThe function should\
    \ raise an error if the input contains more than 32 bits.\nThe function should\
    \ raise an error if the input contains negative numbers.\nThe function should\
    \ raise an error if the input contains non-binary digits.\nThe function should\
    \ raise an error if the input contains more than 32 bits.\nThe function should\
    \ raise an error if the input contains negative numbers.\nThe function should\
    \ raise an error if the input contains non-binary digits.\nThe function should\
    \ raise an error if the input contains more than 32 bits.\nThe function should\
    \ raise an error if the input contains negative numbers.\nThe function should\
    \ raise an error if the input contains non-binary digits.\nThe function should\
    \ raise an error if the input contains more than 32 bits.\nThe function should\
    \ raise an error if the input contains negative numbers.\nThe function should\
    \ raise an error if the input contains non-binary digits.\nThe function should\
    \ raise an error if the input contains more than 32 bits.\nThe function should\
    \ raise an error if the input contains negative numbers.\nThe function should\
    \ raise an error if the input contains non-binary digits.\nThe function should\
    \ raise an error if the input contains more than 32 bits.\nThe function should\
    \ raise an error if the input contains negative numbers.\nThe function should\
    \ raise an error if the input contains non-binary digits.\nThe function should\
    \ raise an error if the input contains more than 32 bits.\nThe function should\
    \ raise an error if the input contains negative numbers.\nThe function should\
    \ raise an error if the input contains non-binary digits.\nThe function should\
    \ raise an error if the input contains more than 32 bits.\nThe function should\
    \ raise an error if the input contains negative numbers.\nThe function should\
    \ raise an error if the input contains non-binary digits.\nThe function should\
    \ raise an error if the input contains more than 32 bits.\nThe function should\
    \ raise an error if the input contains negative numbers.\nThe function should\
    \ raise an error if the input contains non-binary digits.\nThe function should\
    \ raise an error if the input contains more than 32 bits.\nThe function should\
    \ raise an error if the input contains negative numbers.\nThe function should\
    \ raise an error if the input contains non-binary digits.\nThe function should\
    \ raise an error if the input contains more than 32 bits.\nThe function should\
    \ raise an error if the input contains negative numbers.\nThe function should\
    \ raise an error if the \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp25ijjxd1.jl:17\nin expression starting at\
    \ /tmp/tmp25ijjxd1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 || base == 0\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x, base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that converts binary numbers to decimal.\nThe input is a string containing\
    \ only 0s and 1s.\nThe output is a string containing the decimal representation\
    \ of the binary number.\nThe function should throw an error if the input is not\
    \ valid binary number.\nThe function should throw an error if the input contains\
    \ more than 10 binary digits.\nThe function should throw an error if the input\
    \ contains more than 10 decimal digits.\nThe function should throw an error if\
    \ the input contains more than 10 binary digits.\nThe function should throw an\
    \ error if the input contains more than 10 decimal digits.\nThe function should\
    \ throw an error if the input contains more than 10 binary digits.\nThe function\
    \ should throw an error if the input contains more than 10 decimal digits.\nThe\
    \ function should throw an error if the input contains more than 10 binary digits.\n\
    The function should throw an error if the input contains more than 10 decimal\
    \ digits.\nThe function should throw an error if the input contains more than\
    \ 10 binary digits.\nThe function should throw an error if the input contains\
    \ more than 10 decimal digits.\nThe function should throw an error if the input\
    \ contains more than 10 binary digits.\nThe function should throw an error if\
    \ the input contains more than 10 decimal digits.\nThe function should throw an\
    \ error if the input contains more than 10 binary digits.\nThe function should\
    \ throw an error if the input contains more than 10 decimal digits.\nThe function\
    \ should throw an error if the input contains more than 10 binary digits.\nThe\
    \ function should throw an error if the input contains more than 10 decimal digits.\n\
    The function should throw an error if the input contains more than 10 binary digits.\n\
    The function should throw an error if the input contains more than 10 decimal\
    \ digits.\nThe function should throw an error if the input contains more than\
    \ 10 binary digits.\nThe function should throw an error if the input contains\
    \ more than 10 decimal digits.\nThe function should throw an error if the input\
    \ contains more than 10 binary digits.\nThe function should throw an error if\
    \ the input contains more than 10 decimal digits.\nThe function should throw an\
    \ error if the input contains more than 10 binary digits.\nThe function should\
    \ throw an error if the input contains more than 10 decimal digits.\nThe function\
    \ should throw an error if the input contains more than 10 binary digits.\nThe\
    \ function should throw an error if the input contains more than 10 decimal digits.\n\
    The function should throw an error if the input contains more than 10 binary digits.\n\
    The function should throw an error if the input contains more than 10 decimal\
    \ digits.\nThe function should throw an error \nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpevwnsss1.jl:19\nin expression starting at\
    \ /tmp/tmpevwnsss1.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base)\nend\n</cell>\n<code language=julia-1.1>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.1>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.1>\nchange_base(7, 2)\n</cell>\n<text>\nExercise: Write\
    \ a function that converts a number to a string using base 36. For example, change_base(123,\
    \ 36) should return \"4m7\".\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6vca7qx.jl:19\nin expression starting at\
    \ /tmp/tmpv6vca7qx.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10 \n        error(\"base must be less\
    \ than 10\")\n    elseif base == 0 \n        error(\"base must be greater than\
    \ 0\")\n    elseif base > 36 \n        error(\"base must be less than 36\")\n\
    \    elseif base < 0 \n        error(\"base must be greater than 0\")\n    elseif\
    \ base == 1 \n        x % base\n    elseif base == 2 \n        x // base\n   \
    \ elseif base == 3 \n        x % base * base\n    elseif base == 4 \n        x\
    \ // base * base\n    elseif base == 5 \n        x % base * base * base\n    elseif\
    \ base == 6 \n        x // base * base * base * base\n    elseif base == 7 \n\
    \        x % base * base * base * base * base\n    elseif base == 8 \n       \
    \ x // base * base * base * base * base * base\n    elseif base == 9 \n      \
    \  x % base * base * base * base * base * base * base\n    elseif base == 10 \n\
    \        x // base * base * base * base * base * base * base * base\n    elseif\
    \ base == 11 \n        x % base * base * base * base * base * base * base * base\
    \ * base\n    elseif base == 12 \n        x // base * base * base * base * base\
    \ * base * base * base * base * base\n    elseif base == 13 \n        x % base\
    \ * base * base * base * base * base * base * base * base * base * base\n    elseif\
    \ base == 14 \n        x // base * base * base * base * base * base * base * base\
    \ * base * base * base * base\n    elseif base == 15 \n        x % base * base\
    \ * base * base * base * base * base * base * base * base * base * base * base\n\
    \    elseif base == 16 \n        x // base * base * base * base * base * base\
    \ * base * base * base * base * base * base * base * base * base\n    elseif base\
    \ == 17 \n        x % base * base * base * base * base * base * base * base *\
    \ base * base * base * base * base * base * base * base * base\n    elseif base\
    \ == 18 \n        x // base * base * base * base * base * base * base * base *\
    \ base * base * base * base * base * base * base * base * base * base * base *\
    \ base * base * base * base\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqrvrcx9r.jl:1\nin expression starting at /tmp/tmpqrvrcx9r.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return show(base * x)\n   \
    \ else\n        return show(base * x) % base\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from base 10 to base 16. \nThe function should\
    \ accept two arguments: the first is the number to be converted, and the second\
    \ is the base of the number to be converted.\nThe function should return a string\
    \ representation of the number in base 16.\nThe function should raise an error\
    \ if the base is not 10 or 16.\nThe function should raise an error if the number\
    \ is negative.\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphnrsquoe.jl:17\nin expression starting at\
    \ /tmp/tmphnrsquoe.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    else\n        return toString(toInt(x,\
    \ base))\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpekwiqg_d.jl:17\nin expression starting at\
    \ /tmp/tmpekwiqg_d.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        error(\"base must be greater\
    \ than or equal to 10\")\n    elseif base > 36\n        error(\"base must be less\
    \ than or equal to 36\")\n    elseif base == 0\n        error(\"base must not\
    \ be equal to 0\")\n    else\n        str = toString(x)\n        str = str[start:end]\n\
    \        str = str * base\n        str = toString(str)\n    end\n    return str\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprlqb6g7f.jl:26\nin expression starting at\
    \ /tmp/tmprlqb6g7f.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = digits(x)\n    \
    \    digits[digits.length-1] = digits[digits.length-1].to_i\n        digits =\
    \ digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo03_1xkf.jl:1\nin expression starting at /tmp/tmpo03_1xkf.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return toString(x::Int64, base)\n\
    \    else\n        return toString(x::Int64, base::Int64)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that converts a number to a binary string.\n\
    The function should take one argument x that is a number.\nThe function should\
    \ return a string containing the binary representation of x.\nThe function should\
    \ return an error message if the argument is not of type number.\nThe function\
    \ should return an error message if the argument is not positive.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not \nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6feilro.jl:18\nin expression starting at\
    \ /tmp/tmph6feilro.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Invalid\
    \ base\")\n    elseif base == 10\n        return toString(x)\n    else\n     \
    \   return toString(x*base^digits(x))\nend\n</code>\n<|/ a tags=julia |>\n<| a\
    \ tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5_nqupq.jl:19\nin expression starting at\
    \ /tmp/tmpb5_nqupq.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = digits(x)\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits + string(x)\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        return digits\n\
    end\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a number to a string with leading\
    \ zeros. If the number is negative, add \"-\" to the front of the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq_dxr5nn.jl:25\nin expression starting at\
    \ /tmp/tmpq_dxr5nn.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10 \n        error(\"base must be greater\
    \ than or equal to 10\")\n    elseif base == 10 \n        return toString(x)\n\
    \    elseif base == 2 \n        return toString(2*x)\n    elseif base == 3 \n\
    \        return toString(3*x)\n    elseif base == 4 \n        return toString(4*x)\n\
    \    elseif base == 5 \n        return toString(5*x)\n    elseif base == 6 \n\
    \        return toString(6*x)\n    elseif base == 7 \n        return toString(7*x)\n\
    \    elseif base == 8 \n        return toString(8*x)\n    elseif base == 9 \n\
    \        return toString(9*x)\n    elseif base == 10 \n        return toString(10*x)\n\
    \    elseif base == 11 \n        return toString(11*x)\n    elseif base == 12\
    \ \n        return toString(12*x)\n    elseif base == 13 \n        return toString(13*x)\n\
    \    elseif base == 14 \n        return toString(14*x)\n    elseif base == 15\
    \ \n        return toString(15*x)\n    elseif base == 16 \n        return toString(16*x)\n\
    \    elseif base == 17 \n        return toString(17*x)\n    elseif base == 18\
    \ \n        return toString(18*x)\n    elseif base == 19 \n        return toString(19*x)\n\
    \    elseif base == 20 \n        return toString(20*x)\n    elseif base == 21\
    \ \n        return toString(21*x)\n    elseif base == 22 \n        return toString(22*x)\n\
    \    elseif base == 23 \n        return toString(23*x)\n    elseif base == 24\
    \ \n        return toString(24*x)\n    elseif base == 25 \n        return toString(25*x)\n\
    \    elseif base == 26 \n        return toString(26*x)\n    elseif base == 27\
    \ \n        return toString(27*x)\n    elseif base == 28 \n        return toString(28*x)\n\
    \    elseif base == 29 \n        return toString(29*x)\n    elseif base == 30\
    \ \n        return toString(30*x)\n    elseif base == 31 \n        return toString(31*x)\n\
    \    elseif base == 32 \n        return toString(32*x)\n    elseif base == 33\
    \ \n        return toString(33*x)\n    elseif base == 34 \n        return toString(34*x)\n\
    \    elseif base == 35 \n        return toString(35*x)\n    elseif base == 36\
    \ \n        return toString(36*x)\n    elseif base == 37 \n        return toString(37*x)\n\
    \    elseif base == 38 \n        return toString(38*x)\n    elseif base == 39\
    \ \n        return toString(39*x)\n    elseif base == 40 \n        return toString(40*x)\n\
    \    elseif base == 41 \n        return toString(41*x)\n    elseif base == 42\
    \ \n        return \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsab97rhm.jl:1\nin expression starting at /tmp/tmpsab97rhm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10 \n        error(\"base must be greater\
    \ than or equal to 10\")\n    elseif base > 64 \n        error(\"base must be\
    \ less than or equal to 64\")\n    elseif base == 0 \n        error(\"base must\
    \ not be zero\")\n    elseif base == 1 \n        return string(x)\n    elseif\
    \ base == 2 \n        return string(x*2)\n    elseif base == 3 \n        return\
    \ string(x*3)\n    elseif base == 4 \n        return string(x*4)\n    elseif base\
    \ == 5 \n        return string(x*5)\n    elseif base == 6 \n        return string(x*6)\n\
    \    elseif base == 7 \n        return string(x*7)\n    elseif base == 8 \n  \
    \      return string(x*8)\n    elseif base == 9 \n        return string(x*9)\n\
    \    elseif base == 10 \n        return string(x*10)\n    elseif base == 11 \n\
    \        return string(x*11)\n    elseif base == 12 \n        return string(x*12)\n\
    \    elseif base == 13 \n        return string(x*13)\n    elseif base == 14 \n\
    \        return string(x*14)\n    elseif base == 15 \n        return string(x*15)\n\
    \    elseif base == 16 \n        return string(x*16)\n    elseif base == 17 \n\
    \        return string(x*17)\n    elseif base == 18 \n        return string(x*18)\n\
    \    elseif base == 19 \n        return string(x*19)\n    elseif base == 20 \n\
    \        return string(x*20)\n    elseif base == 21 \n        return string(x*21)\n\
    \    elseif base == 22 \n        return string(x*22)\n    elseif base == 23 \n\
    \        return string(x*23)\n    elseif base == 24 \n        return string(x*24)\n\
    \    elseif base == 25 \n        return string(x*25)\n    elseif base == 26 \n\
    \        return string(x*26)\n    elseif base == 27 \n        return string(x*27)\n\
    \    elseif base == 28 \n        return string(x*28)\n    elseif base == 29 \n\
    \        return string(x*29)\n    elseif base == 30 \n        return string(x*30)\n\
    \    elseif base == 31 \n        return string(x*31)\n    elseif base == 32 \n\
    \        return string(x*32)\n    elseif base == 33 \n        return string(x*33)\n\
    \    elseif base == 34 \n        return string(x*34)\n    elseif base == 35 \n\
    \        return string(x*35)\n    elseif base == 36 \n        return string(x*36)\n\
    \    elseif base == 37 \n        return string(x*37)\n    elseif base == 38 \n\
    \        return string(x*38)\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplh7kb3b3.jl:1\nin expression starting at /tmp/tmplh7kb3b3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return string(x)\n    \n  \
    \  digits = string(x)\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiu11b9mw.jl:1\nin expression starting at /tmp/tmpiu11b9mw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str((x % base) + base)\n\
    \    else\n        return str((x % base) / base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that converts binary numbers to decimal.\nThe input is a string containing\
    \ only 0s and 1s.\nThe output is a string containing the decimal representation\
    \ of the binary number.\nThe function should raise an error if the input string\
    \ contains non-binary digits.\nThe function should raise an error if the input\
    \ string contains more than 32 binary digits.\nThe function should raise an error\
    \ if the input string contains negative binary digits.\nThe function should raise\
    \ an error if the input string contains more than 32 binary digits.\nThe function\
    \ should raise an error if the input string contains negative binary digits.\n\
    The function should raise an error if the input string contains more than 32 binary\
    \ digits.\nThe function should raise an error if the input string contains negative\
    \ binary digits.\nThe function should raise an error if the input string contains\
    \ more than 32 binary digits.\nThe function should raise an error if the input\
    \ string contains negative binary digits.\nThe function should raise an error\
    \ if the input string contains more than 32 binary digits.\nThe function should\
    \ raise an error if the input string contains negative binary digits.\nThe function\
    \ should raise an error if the input string contains more than 32 binary digits.\n\
    The function should raise an error if the input string contains negative binary\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 32 binary digits.\nThe function should raise an error if the input string\
    \ contains negative binary digits.\nThe function should raise an error if the\
    \ input string contains more than 32 binary digits.\nThe function should raise\
    \ an error if the input string contains negative binary digits.\nThe function\
    \ should raise an error if the input string contains more than 32 binary digits.\n\
    The function should raise an error if the input string contains negative binary\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 32 binary digits.\nThe function should raise an error if the input string\
    \ contains negative binary digits.\nThe function should raise an error if the\
    \ input string contains more than 32 binary digits.\nThe function should raise\
    \ an error if the input string contains negative binary digits.\nThe function\
    \ should raise an error if the input string contains more than 32 binary digits.\n\
    The function should raise an error if the input string contains negative binary\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 32 binary digits.\nThe function should raise an error if the input string\
    \ contains negative binary digits.\nThe function should raise an error if the\
    \ input string contains more than 32 binary digits.\nThe function should raise\
    \ an error if the input string contains negative binary digits.\nThe function\
    \ should raise an error if the input string \nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl33elq81.jl:17\nin expression starting at\
    \ /tmp/tmpl33elq81.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        error(\"Base must\
    \ be between 2 and 10\")\n    elseif base == 2\n        return string(x)\n   \
    \ else\n        return string(x/base^base, base = base)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpncl65nsa.jl:19\nin expression starting at\
    \ /tmp/tmpncl65nsa.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = \"0123456789\"\n\
    \    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    \n\
    \    digits = digits[base-10:base]\n    \n    return digits[(x%base)] + digits[(x/base)]\n\
    end\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkwk23z2f.jl:21\nin expression starting at\
    \ /tmp/tmpkwk23z2f.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 10\n        return string(x*10)\n    else\n        return\
    \ string(x*pow(base, floor(log10(x))))\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal.\nThe input is a string with\
    \ binary digits, e.g. \"101001\".\nThe output is an integer with the decimal number\
    \ in base 10.\nThe function should throw an error if the input string does not\
    \ contain exactly one binary digit.\nThe function should throw an error if the\
    \ input string contains more than two binary digits.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input string contains leading zeros.\nThe function should throw\
    \ an error if the input \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkzd2qi0h.jl:21\nin expression starting at\
    \ /tmp/tmpkzd2qi0h.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = digits(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n  \
    \      digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digit\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpw3fpgz_c.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw3fpgz_c.jl:1\n\
    in expression starting at /tmp/tmpw3fpgz_c.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Invalid base\"))\n    elseif base == 10\n        return toString(x)\n    else\n\
    \        return toString(x * base^floor(log(x, base)))\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that converts a number to a binary string. \nThe\
    \ function should take two arguments: the number to be converted and the base\
    \ of the number.\nThe function should return a string representation of the number\
    \ in binary format.\nThe function should throw an error if the base is not in\
    \ the range 2 to 36.\nThe function should throw an error if the number to be converted\
    \ is negative.\nThe function should throw an error if the number to be converted\
    \ is zero.\nThe function should throw an error if the number to be converted is\
    \ larger than the base of the number.\nThe function should throw an error if the\
    \ number to be converted is smaller than the base of the number.\nThe function\
    \ should throw an error if the number to be converted is infinity.\nThe function\
    \ should throw an error if the number to be converted is NaN.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe function should\
    \ throw an error if the number to be converted is infinity.\nThe \nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa8mje_r3.jl:19\nin expression starting at\
    \ /tmp/tmpa8mje_r3.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = \"0123456789\"\n\
    \    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    return\
    \ digits[base-1] + digits[mod(x, base)]\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1_cn3m5m.jl:18\nin expression starting at\
    \ /tmp/tmp1_cn3m5m.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal.\nThe input is a string that consists of only 0s and\
    \ 1s.\nThe output is a decimal number.\nThe function should throw an error if\
    \ the input is not valid.\nThe function should throw an error if the input contains\
    \ more than 10 binary digits.\nThe function should throw an error if the input\
    \ contains more than 10 decimal digits.\nThe function should throw an error if\
    \ the input contains more than 10 binary digits.\nThe function should throw an\
    \ error if the input contains more than 10 decimal digits.\nThe function should\
    \ throw an error if the input contains more than 10 binary digits.\nThe function\
    \ should throw an error if the input contains more than 10 decimal digits.\nThe\
    \ function should throw an error if the input contains more than 10 binary digits.\n\
    The function should throw an error if the input contains more than 10 decimal\
    \ digits.\nThe function should throw an error if the input contains more than\
    \ 10 binary digits.\nThe function should throw an error if the input contains\
    \ more than 10 decimal digits.\nThe function should throw an error if the input\
    \ contains more than 10 binary digits.\nThe function should throw an error if\
    \ the input contains more than 10 decimal digits.\nThe function should throw an\
    \ error if the input contains more than 10 binary digits.\nThe function should\
    \ throw an error if the input contains more than 10 decimal digits.\nThe function\
    \ should throw an error if the input contains more than 10 binary digits.\nThe\
    \ function should throw an error if the input contains more than 10 decimal digits.\n\
    The function should throw an error if the input contains more than 10 binary digits.\n\
    The function should throw an error if the input contains more than 10 decimal\
    \ digits.\nThe function should throw an error if the input contains more than\
    \ 10 binary digits.\nThe function should throw an error if the input contains\
    \ more than 10 decimal digits.\nThe function should throw an error if the input\
    \ contains more than 10 binary digits.\nThe function should throw an error if\
    \ the input contains more than 10 decimal digits.\nThe function should throw an\
    \ error if the input contains more than 10 binary digits.\nThe function should\
    \ throw an error if the input contains more than 10 decimal digits.\nThe function\
    \ should throw an error if the input contains more than 10 binary digits.\nThe\
    \ function should throw an error if the input contains more than 10 decimal digits.\n\
    The function should throw an error if the input contains more than 10 binary digits.\n\
    The function should throw an error if the input contains more than 10 decimal\
    \ digits.\nThe function should throw an error if the input contains more than\
    \ 10 binary digits.\nThe function should throw an error if the input contains\
    \ more than 10 decimal digits.\nThe function should throw an error if the input\
    \ contains more than 10 binary digits.\nThe \nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr55u6d3g.jl:19\nin expression starting at\
    \ /tmp/tmpr55u6d3g.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = string(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp3zd08_dh.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3zd08_dh.jl:1\n\
    in expression starting at /tmp/tmp3zd08_dh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return string(x)\n    else\n\
    \        digits = string(x%base)\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa9xamn51.jl:1\nin expression starting at /tmp/tmpa9xamn51.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x/base^base*base)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    change_base(s::String, base::Int64)::Int64\n    Change numerical base\
    \ of input string s to base.\n    return numerical base after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(\"22\", 3)\n    22\n\
    \    >>> change_base(\"1000\", 2)\n    1000\n    >>> change_base(\"111\", 2)\n\
    \    111\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0mgob0n2.jl:19\nin expression starting at\
    \ /tmp/tmp0mgob0n2.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = string(x%base)\n        digits = digits[2:end]\n \
    \       digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        \nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp0oor2k4s.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0oor2k4s.jl:1\n\
    in expression starting at /tmp/tmp0oor2k4s.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = \"0123456789\"\n\
    \    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    digits\
    \ = digits[base:end]\n    return digits[(x%base)] + digits[(x/base)]\nend\n</cell>\n\
    <code language=julia-1.4>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.4>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.4>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a binary number to its decimal\
    \ representation. \nThe function should accept a binary number as its only argument\
    \ and return a string containing the decimal representation of its binary number.\
    \ \nThe function should use recursion to compute the decimal representation of\
    \ the binary number. \nThe function should return an error if the binary number\
    \ is not of length 2.\nThe function should return an error if the binary number\
    \ contains any character other than 0 or 1.\nThe function should return an error\
    \ if the binary number contains any character other than 0 or 1.\nThe function\
    \ should return an error if the binary number contains any character other than\
    \ 0 or 1.\nThe function should return an error if the binary number contains any\
    \ character other than 0 or 1.\nThe function should return an error if the binary\
    \ number contains any character other than 0 or 1.\nThe function should return\
    \ an error if the binary number contains any character other than 0 or 1.\nThe\
    \ function should return an error if the binary number contains any character\
    \ other than 0 or 1.\nThe function should return an error if the binary number\
    \ contains any character other than 0 or 1.\nThe function should return an error\
    \ if the binary number contains any character other than 0 or 1.\nThe function\
    \ should return an error if the binary number contains any character other than\
    \ 0 or 1.\nThe function should return an error if the binary number contains any\
    \ character other than 0 or 1.\nThe function should return an error if the binary\
    \ number contains any character other than 0 or 1.\nThe function should return\
    \ an error if the binary number contains any character other than 0 or 1.\nThe\
    \ function should return an error if the binary number contains any character\
    \ other than 0 or 1.\nThe function should return an error if the binary number\
    \ contains any character other than 0 or 1.\nThe function should return an error\
    \ if the binary number contains any character other than 0 or 1.\nThe function\
    \ should return an error if the binary number contains any character other than\
    \ 0 or 1.\nThe function should return an error if the binary number contains any\
    \ character other than 0 or 1.\nThe function should return an error if the binary\
    \ number contains any character other than 0 or 1.\nThe function should return\
    \ an error if the binary number contains any character other than 0 or 1.\nThe\
    \ function should return an error if the binary number contains any character\
    \ other than 0 or 1.\nThe function should return an error if the binary number\
    \ contains any character other than 0 or 1.\nThe function should return an error\
    \ if the binary number contains any \nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuwum2xbo.jl:19\nin expression starting at\
    \ /tmp/tmpuwum2xbo.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = digits(x)\n        digits = digits[digits.length -\
    \ base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpu5mz6ket.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5mz6ket.jl:1\n\
    in expression starting at /tmp/tmpu5mz6ket.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^digits(x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpupz7nqmt.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpupz7nqmt.jl:1\n\
    in expression starting at /tmp/tmpupz7nqmt.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10 \n        error(\"base must be greater\
    \ than 10\")\n    elseif base == 10 \n        return toString(x)\n    elseif base\
    \ == 2 \n        return toString(x * 10)\n    elseif base == 3 \n        return\
    \ toString(x * 100)\n    elseif base == 4 \n        return toString(x * 1000)\n\
    \    elseif base == 5 \n        return toString(x * 10000)\n    elseif base ==\
    \ 6 \n        return toString(x * 100000)\n    elseif base == 7 \n        return\
    \ toString(x * 1000000)\n    elseif base == 8 \n        return toString(x * 10000000)\n\
    \    elseif base == 9 \n        return toString(x * 100000000)\n    elseif base\
    \ == 10 \n        return toString(x * 1000000000)\n    elseif base == 11 \n  \
    \      return toString(x * 10000000000)\n    elseif base == 12 \n        return\
    \ toString(x * 100000000000)\n    elseif base == 13 \n        return toString(x\
    \ * 1000000000000)\n    elseif base == 14 \n        return toString(x * 10000000000000)\n\
    \    elseif base == 15 \n        return toString(x * 100000000000000)\n    elseif\
    \ base == 16 \n        return toString(x * 1000000000000000)\n    elseif base\
    \ == 17 \n        return toString(x * 10000000000000000)\n    elseif base == 18\
    \ \n        return toString(x * 100000000000000000)\n    elseif base == 19 \n\
    \        return toString(x * 1000000000000000000)\n    elseif base == 20 \n  \
    \      return toString(x * 10000000000000000000)\n    elseif base == 21 \n   \
    \     return toString(x * 100000000000000000000)\n    elseif base == 22 \n   \
    \     return toString(x * 1000000000000000000000)\n    elseif base == 23 \n  \
    \      return toString(x * 10000000000000000000000)\n    elseif base == 24 \n\
    \        return toString(x * 100000000000000000000000)\n    elseif base == 25\
    \ \n        return toString(x * 1000000000000000000000000)\n    elseif base ==\
    \ 26 \n        return toString(x * 10000000000000000000000000)\n    elseif base\
    \ == 27 \n        return toString(x * 100000000000000000000000000)\n    elseif\
    \ base == 28 \n        return toString(x * 1000000000000000000000000000)\n   \
    \ elseif base == 29 \n        return toString(x * 10000000000000000000000000000)\n\
    \    elseif base == 30 \n        return toString(x * 100000000000000000000000000000)\n\
    \    elseif base == 31 \n        return toString(x * 1000000000000000000000000000000)\n\
    \    elseif base == 32 \n        return toString(x * 10000000000000000000000000000000)\n\
    \    elseif base == 33 \n        return toString(x * 100000000000000000000000000000000)\n\
    \    elseif base == 34 \n        return toString(x * 1000000000000000000000000000000000)\n\
    \    elseif base == 35 \n        return toString(x * 10000000000000000000000000000000000)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkgou_wxs.jl:1\nin expression starting at /tmp/tmpkgou_wxs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    else\n        return toString(div(x, base))\n\
    end\n</cell>\n<text>\nExercise: Write a function that converts a number from base\
    \ 10 to base 2.\nThe function should throw an error if the base is not between\
    \ 2 and 10.\nThe function should return the string representation of the number\
    \ in base 2.\nThe function should work for any base between 2 and 10.\nThe function\
    \ should work for negative numbers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbtqd7q7_.jl:17\nin expression starting at\
    \ /tmp/tmpbtqd7q7_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    \n    digits = digits(x)\n    digits =\
    \ digits[digits.length - base]\n    \n    digits = digits[digits.length - base]\n\
    \    \n    digits = digits[digits.length - base]\n    \n    digits = digits[digits.length\
    \ - base]\n    \n    digits = digits[digits.length - base]\n    \n    digits =\
    \ digits[digits.length - base]\n    \n    digits = digits[digits.length - base]\n\
    \    \n    digits = digits[digits.length - base]\n    \n    digits = digits[digits.length\
    \ - base]\n    \n    digits = digits[digits.length - base]\n    \n    digits =\
    \ digits[digits.length - base]\n    \n    digits = digits[digits.length - base]\n\
    \    \n    digits = digits[digits.length - base]\n    \n    digits = digits[digits.length\
    \ - base]\n    \n    digits = digits[digits.length - base]\n    \n    digits =\
    \ digits[digits.length - base]\n    \n    digits = digits[digits.length - base]\n\
    \    \n    digits = digits[digits.length - base]\n    \n    digits = digits[digits.length\
    \ - base]\n    \n    digits = digits[digits.length - base]\n    \n    digits =\
    \ digits[digits.length - base]\n    \n    digits = digits[digits.length - base]\n\
    \    \n    digits = digits[digits.length - base]\n    \n    digits = digits[digits.length\
    \ - base]\n    \n    digits = digits[digits.length - base]\n    \n    digits =\
    \ digits[digits.length - base]\n    \n    digits = digits[digits.length - base]\n\
    \    \n    digits = digits[digits.length - base]\n    \n    digits = digits[digits.length\
    \ - base]\n    \n    digits = digits[digits.length - base]\n    \n    digits =\
    \ digits[digits.length - base]\n    \n    digits = digits[digits.length - base]\n\
    \    \n    digits = digits[digits.length - base]\n    \n    digits = digits[digits.length\
    \ - base]\n    \n    digits = digits[digits.length - base]\n    \n    digits =\
    \ digits[digits.length - base]\n    \n    digits = digits[digits.length - base]\n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7kogmjcd.jl:1\nin expression starting at /tmp/tmp7kogmjcd.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    \n    if base == 2\n        return string(x)\n\
    \    \n    digits = string(x)\n    digits = digits[2:end]\n    digits = digits[digits.length\
    \ - digits.length % base:end]\n    digits = digits[digits.length / base:end]\n\
    \    digits = digits[digits.length % base:end]\n    digits = digits[2:end]\n \
    \   digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ / base:end]\n    digits = digits[digits.length % base:end]\n    digits = digits[2:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ / base:end]\n    digits = digits[digits.length % base:end]\n    digits = digits[2:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ / base:end]\n    digits = digits[digits.length % base:end]\n    digits = digits[2:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ / base:end]\n    digits = digits[digits.length % base:end]\n    digits = digits[2:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ / base:end]\n    digits = digits[digits.length % base:end]\n    digits = digits[2:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ / base:end]\n    digits = digits[digits.length % base:end]\n    digits = digits[2:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ / base:end]\n    digits = digits[digits.length % base:end]\n    digits = digits[2:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ / base:end]\n    digits = digits[digits.length % base:end]\n    digits = digits[2:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ / base:end]\n    digits = digits[digits.length % base:end]\n    digit\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw74fa3jj.jl:1\nin expression starting at /tmp/tmpw74fa3jj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x, base)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy9_zxej0.jl:19\nin expression starting at\
    \ /tmp/tmpy9_zxej0.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return show(base * x)\n   \
    \ else\n        return show(base * x % base)\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts a number to a string with leading zeros.\nThe function\
    \ should take one argument, x, and return a string.\nThe function should return\
    \ \"0\" if x is less than 10, \"00\" if x is less than 100, etc.\nThe function\
    \ should return \"x\" if x is greater than 100.\nThe function should return \"\
    x\" if x is greater than 1000.\nThe function should return \"0\" if x is greater\
    \ than 1000.\nThe function should return \"x\" if x is greater than 10000.\nThe\
    \ function should return \"0\" if x is greater than 10000.\nThe function should\
    \ return \"x\" if x is greater than 100000.\nThe function should return \"0\"\
    \ if x is greater than 100000.\nThe function should return \"x\" if x is greater\
    \ than 1000000.\nThe function should return \"0\" if x is greater than 1000000.\n\
    The function should return \"x\" if x is greater than 10000000.\nThe function\
    \ should return \"0\" if x is greater than 10000000.\nThe function should return\
    \ \"x\" if x is greater than 100000000.\nThe function should return \"0\" if x\
    \ is greater than 100000000.\nThe function should return \"x\" if x is greater\
    \ than 1000000000.\nThe function should return \"0\" if x is greater than 1000000000.\n\
    The function should return \"x\" if x is greater than 10000000000.\nThe function\
    \ should return \"0\" if x is greater than 10000000000.\nThe function should return\
    \ \"x\" if x is greater than 100000000000.\nThe function should return \"0\" if\
    \ x is greater than 100000000000.\nThe function should return \"x\" if x is greater\
    \ than 1000000000000.\nThe function should return \"0\" if x is greater than 1000000000000.\n\
    The function should return \"x\" if x is greater than 10000000000000.\nThe function\
    \ should return \"0\" if x is greater than 10000000000000.\nThe function should\
    \ return \"x\" if x is greater than 100000000000000.\nThe function should return\
    \ \"0\" if x is greater than 100000000000000.\nThe function should return \"x\"\
    \ if x is greater than 1000000000000000.\nThe function should return \"0\" if\
    \ x is greater than 1000000000000000.\nThe function should return \"x\" if x is\
    \ greater than 10000000000000000.\nThe function should return \"0\" if x is greater\
    \ than 10000000000000000.\nThe function should return \"x\" if x is greater than\
    \ 100000000000000000.\nThe function should return \"0\" if x is greater than 100000000000000000.\n\
    The function \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplhftf4tz.jl:17\nin expression starting at\
    \ /tmp/tmplhftf4tz.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        return toString(x)\n    \n\
    \    digits = toString(x)\n    digits = digits[digits.length - digits.length %\
    \ base.length : digits.length]\n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    digits = digits[digits.length - base.length : digits.length]\n\
    \    digits = digits[0 : digits.length - base.length]\n    digits = digits[digits.length\
    \ - base.length : digits.length]\n    digits = digits[0 : digits.length - base.length]\n\
    \    digits = digits[digits.length - base.length : digits.length]\n    digits\
    \ = digits[0 : digits.length - base.length]\n    digits = digits[digits.length\
    \ - base.length : digits.length]\n    digits = digits[0 : digits.length - base.length]\n\
    \    digits = digits[digits.length - base.length : digits.length]\n    digits\
    \ = digits[0 : digits.length - base.length]\n    digits = digits[digits.length\
    \ - base.length : digits.length]\n    digits = digits[0 : digits.length - base.length]\n\
    \    digits = digits[digits.length - base.length : digits.length]\n    digits\
    \ = digits[0 : digits.length - base.length]\n    digits = digits[digits.length\
    \ - base.length : digits.length]\n    digits = digits[0 : digits.length - base.length]\n\
    \    digits = digits[digits.length - base.length : digits.length]\n    digits\
    \ = digits[0 : digits.length - base.length]\n    digits = digits[digits.length\
    \ - base.length : digits.length]\n    digits = digits[0 : digits.length - base.length]\n\
    \    digits = digits[digits.length - base.length : digits.length]\n    digits\
    \ = digits[0 : digits.length - base.length]\n    digits = digits[digits.length\
    \ - base.length : digits.length]\n    digits = digits[0 : digits.length - base.length]\n\
    \    digits = digits[digits.length - base.length : digits.length]\n    digits\
    \ = digits[0 : digits.length - base.length]\n    digits = digits[digits.length\
    \ - base.length : digits.length]\n    digits = digits[0 : digits.length - base.length]\n\
    \    digits = digits[digits.length - base.length : digits.length]\n    digits\
    \ = digits[0 : digits.length - base.length]\n    digits = digits[digits.length\
    \ - base.length : digits.length]\n    digits = digits[0 : digits.length - base.length]\n\
    \    digits = digits[digits.length - base.length : digits.length\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf4m3dgmh.jl:1\nin expression starting at /tmp/tmpf4m3dgmh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str(x)\n    else\n \
    \       return change_base(x % base, base * 10)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that converts a number from base 10 to base 16. \nThe function should\
    \ accept two arguments: the first is the number to be converted, and the second\
    \ is the base of the number.\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcpc7ohdk.jl:17\nin expression starting at\
    \ /tmp/tmpcpc7ohdk.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 3\n        return string(x, \"b\")\n    elseif base == 4\n\
    \        return string(x, \"o\")\n    elseif base == 5\n        return string(x,\
    \ \"x\")\n    elseif base == 6\n        return string(x, \"i\")\n    elseif base\
    \ == 7\n        return string(x, \"u\")\n    elseif base == 8\n        return\
    \ string(x, \"iu\")\n    elseif base == 9\n        return string(x, \"iux\")\n\
    \    elseif base == 10\n        return string(x, \"iuxb\")\n    elseif base ==\
    \ 11\n        return string(x, \"iuxob\")\n    elseif base == 12\n        return\
    \ string(x, \"iuxob\")\n    elseif base == 13\n        return string(x, \"iuxob\"\
    )\n    elseif base == 14\n        return string(x, \"iuxob\")\n    elseif base\
    \ == 15\n        return string(x, \"iuxob\")\n    elseif base == 16\n        return\
    \ string(x, \"iuxob\")\n    elseif base == 17\n        return string(x, \"iuxob\"\
    )\n    elseif base == 18\n        return string(x, \"iuxob\")\n    elseif base\
    \ == 19\n        return string(x, \"iuxob\")\n    elseif base == 20\n        return\
    \ string(x, \"iuxob\")\n    elseif base == 21\n        return string(x, \"iuxob\"\
    )\n    elseif base == 22\n        return string(x, \"iuxob\")\n    elseif base\
    \ == 23\n        return string(x, \"iuxob\")\n    elseif base == 24\n        return\
    \ string(x, \"iuxob\")\n    elseif base == 25\n        return string(x, \"iuxob\"\
    )\n    elseif base == 26\n        return string(x, \"iuxob\")\n    elseif base\
    \ == 27\n        return string(x, \"iuxob\")\n    elseif base == 28\n        return\
    \ string(x, \"iuxob\")\n    elseif base == 29\n        return string(x, \"iuxob\"\
    )\n    elseif base == 30\n        return string(x, \"iuxob\")\n    elseif base\
    \ == 31\n        return string(x, \"iuxob\")\n    elseif base == 32\n        return\
    \ string(x, \"iuxob\")\n    elseif base == 33\n        return string(x, \"iuxob\"\
    )\n    elseif base == 34\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpckyr29jt.jl:1\nin expression starting at /tmp/tmpckyr29jt.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        error(\"base must be greater\
    \ than or equal to 10\")\n    end\n    if base == 10\n        return toString(x)\n\
    \    \n    digits = toString(x)\n    digits = digits[2:end]\n    digits = digits[digits.length\
    \ - digits.length % base:end]\n    digits = digits[digits.length - digits.length\
    \ % base:end]\n    digits = digits[digits.length - digits.length % base:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ - digits.length % base:end]\n    digits = digits[digits.length - digits.length\
    \ % base:end]\n    digits = digits[digits.length - digits.length % base:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ - digits.length % base:end]\n    digits = digits[digits.length - digits.length\
    \ % base:end]\n    digits = digits[digits.length - digits.length % base:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ - digits.length % base:end]\n    digits = digits[digits.length - digits.length\
    \ % base:end]\n    digits = digits[digits.length - digits.length % base:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ - digits.length % base:end]\n    digits = digits[digits.length - digits.length\
    \ % base:end]\n    digits = digits[digits.length - digits.length % base:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ - digits.length % base:end]\n    digits = digits[digits.length - digits.length\
    \ % base:end]\n    digits = digits[digits.length - digits.length % base:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ - digits.length % base:end]\n    digits = digits[digits.length - digits.length\
    \ % base:end]\n    digits = digits[digits.length - digits.length % base:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ - digits.length % base:end]\n    digits = digits[digits.length - digits.length\
    \ % base:end]\n    digits = digits[digits.length - digits.length % base:end]\n\
    \    digits = digits[\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxvfr_s3v.jl:1\nin expression starting at /tmp/tmpxvfr_s3v.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = digits(x)\n        digits = digits[digits.length -\
    \ digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digit\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp_omr4icb.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_omr4icb.jl:1\n\
    in expression starting at /tmp/tmp_omr4icb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl_uhw4th.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl_uhw4th.jl:1\n\
    in expression starting at /tmp/tmpl_uhw4th.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = string(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp3zd08_dh.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3zd08_dh.jl:1\n\
    in expression starting at /tmp/tmp3zd08_dh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return show(base * x)\n   \
    \ else\n        return show(base * x / 10)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal.\nThe input is a string containing\
    \ only 0s and 1s.\nThe output is a decimal number.\nThe function should raise\
    \ an error if the input is not binary.\nThe function should raise an error if\
    \ the input contains more than two digits.\nThe function should raise an error\
    \ if the input contains leading zeros.\nThe function should raise an error if\
    \ the input contains trailing zeros.\nThe function should raise an error if the\
    \ input contains leading or trailing zeros.\nThe function should raise an error\
    \ if the input contains non-binary digits.\nThe function should raise an error\
    \ if the input contains non-decimal digits.\nThe function should raise an error\
    \ if the input contains non-binary digits.\nThe function should raise an error\
    \ if the input contains non-decimal digits.\nThe function should raise an error\
    \ if the input contains non-binary digits.\nThe function should raise an error\
    \ if the input contains non-decimal digits.\nThe function should raise an error\
    \ if the input contains non-binary digits.\nThe function should raise an error\
    \ if the input contains non-decimal digits.\nThe function should raise an error\
    \ if the input contains non-binary digits.\nThe function should raise an error\
    \ if the input contains non-decimal digits.\nThe function should raise an error\
    \ if the input contains non-binary digits.\nThe function should raise an error\
    \ if the input contains non-decimal digits.\nThe function should raise an error\
    \ if the input contains non-binary digits.\nThe function should raise an error\
    \ if the input contains non-decimal digits.\nThe function should raise an error\
    \ if the input contains non-binary digits.\nThe function should raise an error\
    \ if the input contains non-decimal digits.\nThe function should raise an error\
    \ if the input contains non-binary digits.\nThe function should raise an error\
    \ if the input contains non-decimal digits.\nThe function should raise an error\
    \ if the input contains non-binary digits.\nThe function should raise an error\
    \ if the input contains non-decimal digits.\nThe function should raise an error\
    \ if the input contains non-binary digits.\nThe function should raise an error\
    \ if the input contains non-decimal digits.\nThe function should raise an error\
    \ if the input contains non-binary digits.\nThe function should raise an error\
    \ if the input contains non-decimal digits.\nThe function should raise an error\
    \ if the input contains non-binary digits.\nThe function should raise an error\
    \ if the input contains non-decimal digits.\nThe function should raise an error\
    \ if the input contains non-binary digits.\nThe function should raise an error\
    \ if the input contains non-decimal digits.\nThe function should raise an error\
    \ if the input contains non-binary \nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph14r_thq.jl:17\nin expression starting at\
    \ /tmp/tmph14r_thq.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return show(base * x)\n   \
    \ else\n        return show(base * x / 10)\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that converts a number to a binary string. \nThe function should\
    \ take one argument, x, and return a string representation of x.\nThe function\
    \ should return a string representation of x with leading zeros removed.\nThe\
    \ function should return an error if x is less than 0.\nThe function should return\
    \ an error if x is greater than or equal to 2.\nThe function should return an\
    \ error if x is less than 10.\nThe function should return an error if x is greater\
    \ than or equal to 10.\nThe function should return an error if x is less than\
    \ or equal to 16.\nThe function should return an error if x is greater than or\
    \ equal to 16.\nThe function should return an error if x is less than or equal\
    \ to 32.\nThe function should return an error if x is greater than or equal to\
    \ 32.\nThe function should return an error if x is less than or equal to 64.\n\
    The function should return an error if x is greater than or equal to 64.\nThe\
    \ function should return an error if x is less than or equal to 128.\nThe function\
    \ should return an error if x is greater than or equal to 128.\nThe function should\
    \ return an error if x is less than or equal to 256.\nThe function should return\
    \ an error if x is greater than or equal to 256.\nThe function should return an\
    \ error if x is less than or equal to 512.\nThe function should return an error\
    \ if x is greater than or equal to 512.\nThe function should return an error if\
    \ x is less than or equal to 1024.\nThe function should return an error if x is\
    \ greater than or equal to 1024.\nThe function should return an error if x is\
    \ less than or equal to 2048.\nThe function should return an error if x is greater\
    \ than or equal to 2048.\nThe function should return an error if x is less than\
    \ or equal to 4096.\nThe function should return an error if x is greater than\
    \ or equal to 4096.\nThe function should return an error if x is less than or\
    \ equal to 8192.\nThe function should return an error if x is greater than or\
    \ equal to 8192.\nThe function should return an error if x is less than or equal\
    \ to 16384.\nThe function should return an error if x is greater than or equal\
    \ to 16384.\nThe function should return an error if x is less than or equal to\
    \ 32768.\nThe function should return an error if x is greater than or equal to\
    \ 32768.\nThe function should return an error if x is less than or equal to 65536.\n\
    The function should return an error if x is greater than or equal to 65536.\n\
    The function should return an error if x is less than or equal to 131072.\nThe\
    \ function should return an error if x is greater than or equal to 131072.\nThe\
    \ function \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgjdxbyy4.jl:17\nin expression starting at\
    \ /tmp/tmpgjdxbyy4.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = \"0123456789\"\n\
    \    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    \n\
    \    digits = digits[base:end]\n    \n    return digits[x]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise: Write a function that converts a number from one base to another.\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnlwa6a09.jl:21\nin expression starting at\
    \ /tmp/tmpnlwa6a09.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x*base^digits(x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk605675d.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk605675d.jl:1\n\
    in expression starting at /tmp/tmpk605675d.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Invalid base\"))\n    elseif base == 10\n        return toString(x)\n    else\n\
    \        return toString(toInt(x)/toInt(base)*toInt(base))\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplobi6fcy.jl:19\nin expression starting at\
    \ /tmp/tmplobi6fcy.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2 \n        return string(x::Int64)\n\
    \    elseif base == 10 \n        return string(x::Int64, \"0\")\n    elseif base\
    \ == 3 \n        return string(x::Int64, \"000\")\n    elseif base == 4 \n   \
    \     return string(x::Int64, \"0000\")\n    elseif base == 5 \n        return\
    \ string(x::Int64, \"00000\")\n    elseif base == 6 \n        return string(x::Int64,\
    \ \"000000\")\n    elseif base == 7 \n        return string(x::Int64, \"0000000\"\
    )\n    elseif base == 8 \n        return string(x::Int64, \"00000000\")\n    elseif\
    \ base == 9 \n        return string(x::Int64, \"000000000\")\n    elseif base\
    \ == 10 \n        return string(x::Int64, \"0000000000\")\n    elseif base ==\
    \ 11 \n        return string(x::Int64, \"00000000000\")\n    elseif base == 12\
    \ \n        return string(x::Int64, \"000000000000\")\n    elseif base == 13 \n\
    \        return string(x::Int64, \"0000000000000\")\n    elseif base == 14 \n\
    \        return string(x::Int64, \"00000000000000\")\n    elseif base == 15 \n\
    \        return string(x::Int64, \"000000000000000\")\n    elseif base == 16 \n\
    \        return string(x::Int64, \"0000000000000000\")\n    elseif base == 17\
    \ \n        return string(x::Int64, \"00000000000000000\")\n    elseif base ==\
    \ 18 \n        return string(x::Int64, \"000000000000000000\")\n    elseif base\
    \ == 19 \n        return string(x::Int64, \"0000000000000000000\")\n    elseif\
    \ base == 20 \n        return string(x::Int64, \"00000000000000000000\")\n   \
    \ elseif base == 21 \n        return string(x::Int64, \"000000000000000000000\"\
    )\n    elseif base == 22 \n        return string(x::Int64, \"0000000000000000000000\"\
    )\n    elseif base == 23 \n        return string(x::Int64, \"00000000000000000000000\"\
    )\n    elseif base == 24 \n        return string(x::Int64, \"000000000000000000000000\"\
    )\n    elseif base == 25 \n        return string(x::Int64, \"0000000000000000000000000\"\
    )\n    elseif base == 26 \n        return string(x::Int64, \"00000000000000000000000000\"\
    )\n    elseif base == 27 \n        return string(x::Int64, \"000000000000000000000000000\"\
    )\n    elseif base == 28 \n        return string(x::Int64, \"0000000000000000000000000000\"\
    )\n    elseif base == 29 \n        return string(x::Int64, \"00000000000000000000000000000\"\
    )\n    elseif base == 30 \n        return string(x\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc8j4fcgu.jl:74\nin expression starting at\
    \ /tmp/tmpc8j4fcgu.jl:74\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return show(base * x)\n   \
    \ else\n        return show(base * x / 10)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that converts binary numbers to decimal numbers.\nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf4mgtfvg.jl:17\nin expression starting at\
    \ /tmp/tmpf4mgtfvg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x/base^base, base = base)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<text>\nExercise\nWrite a function that converts binary\
    \ to decimal.\nThe input is a binary string and output is the decimal number.\n\
    The input can have up to 32 bits.\nThe input string can have leading zeros.\n\
    The input string can have trailing zeros.\nThe input string can have leading or\
    \ trailing zeros.\nThe input string can have leading spaces.\nThe input string\
    \ can have trailing spaces.\nThe input string can have leading or trailing spaces.\n\
    The input string can have leading or trailing zeros.\nThe input string can have\
    \ leading or trailing spaces.\nThe input string can have leading or trailing zeros.\n\
    The input string can have leading or trailing spaces.\nThe input string can have\
    \ leading or trailing zeros.\nThe input string can have leading or trailing spaces.\n\
    The input string can have leading or trailing zeros.\nThe input string can have\
    \ leading or trailing spaces.\nThe input string can have leading or trailing zeros.\n\
    The input string can have leading or trailing spaces.\nThe input string can have\
    \ leading or trailing zeros.\nThe input string can have leading or trailing spaces.\n\
    The input string can have leading or trailing zeros.\nThe input string can have\
    \ leading or trailing spaces.\nThe input string can have leading or trailing zeros.\n\
    The input string can have leading or trailing spaces.\nThe input string can have\
    \ leading or trailing zeros.\nThe input string can have leading or trailing spaces.\n\
    The input string can have leading or trailing zeros.\nThe input string can have\
    \ leading or trailing spaces.\nThe input string can have leading or trailing zeros.\n\
    The input string can have leading or trailing spaces.\nThe input string can have\
    \ leading or trailing zeros.\nThe input string can have leading or trailing spaces.\n\
    The input string can have leading or trailing zeros.\nThe input string can have\
    \ leading or trailing spaces.\nThe input string can have leading or trailing zeros.\n\
    The input string can have leading or trailing spaces.\nThe input string can have\
    \ leading or trailing zeros.\nThe input string can have leading or trailing spaces.\n\
    The input string can have leading or trailing zeros.\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2t776feq.jl:19\nin expression starting at\
    \ /tmp/tmp2t776feq.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x*base^digits(x))\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    digits(x::Int64)::Int64\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvc4z1m0d.jl:19\nin expression starting at\
    \ /tmp/tmpvc4z1m0d.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x, base)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8dbv4m4l.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8dbv4m4l.jl:1\n\
    in expression starting at /tmp/tmp8dbv4m4l.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x*base)\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a string to a number.\nThe string can contain any characters,\
    \ including spaces.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfsvnfgp7.jl:19\nin expression starting at\
    \ /tmp/tmpfsvnfgp7.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    \n    digits = digits(x)\n    digits =\
    \ digits[digits.length - digits.length % base.length : digits.length]\n    digits\
    \ = digits[0 : digits.length - digits.length % base.length]\n    \n    digits\
    \ = digits[0 : digits.length - digits.length % base.length]\n    digits = digits[digits.length\
    \ - digits.length % base.length : digits.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    digits = digits[digits.length\
    \ - digits.length % base.length : digits.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    digits = digits[digits.length\
    \ - digits.length % base.length : digits.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    digits = digits[digits.length\
    \ - digits.length % base.length : digits.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    digits = digits[digits.length\
    \ - digits.length % base.length : digits.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    digits = digits[digits.length\
    \ - digits.length % base.length : digits.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    digits = digits[digits.length\
    \ - digits.length % base.length : digits.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    digits = digits[digits.length\
    \ - digits.length % base.length : digits.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    digits = digits[digits.length\
    \ - digits.length % base.length : digits.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    digits = digits[digits.length\
    \ - digits.length % base.length : digits.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    digits = digits[digits.length\
    \ - digits.length % base.length : digits.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    digits = digits[digits.length\
    \ - digits.length % base.length : digits.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgpojiu0_.jl:1\nin expression starting at /tmp/tmpgpojiu0_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n   \
    \ elseif base == 3\n        return string(x * 1000 + 100)\n    elseif base ==\
    \ 4\n        return string(x * 10000 + 1000)\n    elseif base == 5\n        return\
    \ string(x * 100000 + 10000)\n    elseif base == 6\n        return string(x *\
    \ 1000000 + 100000)\n    elseif base == 7\n        return string(x * 10000000\
    \ + 1000000)\n    elseif base == 8\n        return string(x * 100000000 + 10000000)\n\
    \    elseif base == 9\n        return string(x * 1000000000 + 100000000)\n   \
    \ elseif base == 10\n        return string(x * 10000000000 + 1000000000)\n   \
    \ elseif base == 11\n        return string(x * 100000000000 + 10000000000)\n \
    \   elseif base == 12\n        return string(x * 1000000000000 + 1000000000000)\n\
    \    elseif base == 13\n        return string(x * 10000000000000 + 10000000000000)\n\
    \    elseif base == 14\n        return string(x * 100000000000000 + 100000000000000)\n\
    \    elseif base == 15\n        return string(x * 1000000000000000 + 1000000000000000)\n\
    \    elseif base == 16\n        return string(x * 10000000000000000 + 10000000000000000)\n\
    \    elseif base == 17\n        return string(x * 100000000000000000 + 100000000000000000)\n\
    \    elseif base == 18\n        return string(x * 1000000000000000000 + 100000000000000000)\n\
    \    elseif base == 19\n        return string(x * 10000000000000000000 + 10000000000000000)\n\
    \    elseif base == 20\n        return string(x * 100000000000000000000 + 100000000000000000)\n\
    \    elseif base == 21\n        return string(x * 1000000000000000000000 + 10000000000000000)\n\
    \    elseif base == 22\n        return string(x * 10000000000000000000000 + 100000000000000000)\n\
    \    elseif base == 23\n        return string(x * 100000000000000000000000 + 10000000000000000)\n\
    \    elseif base == 24\n        return string(x * 1000000000000000000000000 +\
    \ 100000000000000000)\n    elseif base == 25\n        return string(x * 10000000000000000000000000\
    \ + 10000000000000000)\n    elseif base == 26\n        return string(x * 100000000000000000000000000\
    \ + 100000000000000000)\n    elseif base == 27\n        return string(x * 1000000000000000000000000000\
    \ + 10000000000000000)\n    elseif base == 28\n        return string(x * 10000000000000000000000000000\
    \ + 100000000000000000)\n    elseif base == 29\n        return string(x * 100000000000000000000000000000\
    \ + 10000000000000000)\n    elseif base \nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmporvnn33r.jl:1\nin expression starting at /tmp/tmporvnn33r.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        then return toString(x)\n\
    \        else return change_base(x / base, base) + toString(x%base)\n    else\
    \ return change_base(x / base, base) + toString(x%base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal numbers.\nThe input is a\
    \ string that consists of 0s and 1s.\nThe output is a string that consists of\
    \ decimal numbers.\nThe input string may contain leading zeros.\nThe output string\
    \ may contain leading zeros.\nThe input string may contain trailing zeros.\nThe\
    \ output string may contain trailing zeros.\nThe input string may contain leading\
    \ spaces.\nThe output string may contain leading spaces.\nThe input string may\
    \ contain trailing spaces.\nThe output string may contain trailing spaces.\nThe\
    \ input string may contain leading plus signs.\nThe output string may contain\
    \ leading plus signs.\nThe input string may contain trailing plus signs.\nThe\
    \ output string may contain trailing plus signs.\nThe input string may contain\
    \ leading minus signs.\nThe output string may contain leading minus signs.\nThe\
    \ input string may contain trailing minus signs.\nThe output string may contain\
    \ trailing minus signs.\nThe input string may contain leading decimal points.\n\
    The output string may contain leading decimal points.\nThe input string may contain\
    \ trailing decimal points.\nThe output string may contain trailing decimal points.\n\
    The input string may contain leading zeros.\nThe output string may contain leading\
    \ zeros.\nThe input string may contain trailing zeros.\nThe output string may\
    \ contain trailing zeros.\nThe input string may contain leading spaces.\nThe output\
    \ string may contain leading spaces.\nThe input string may contain trailing spaces.\n\
    The output string may contain trailing spaces.\nThe input string may contain leading\
    \ plus signs.\nThe output string may contain leading plus signs.\nThe input string\
    \ may contain trailing plus signs.\nThe output string may contain trailing plus\
    \ signs.\nThe input string may contain leading minus signs.\nThe output string\
    \ may contain leading minus signs.\nThe input string may contain trailing minus\
    \ signs.\nThe output string may contain trailing minus signs.\nThe input string\
    \ may contain leading decimal points.\nThe output string may contain leading decimal\
    \ points.\nThe input string may contain trailing decimal points.\nThe output string\
    \ may contain trailing decimal points.\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1_kglhuq.jl:13\nin expression starting at /tmp/tmp1_kglhuq.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        return \"{:0>10}\".format(x)\n\
    \    else \n        return \"{:0>{base}b}\".format(x,base)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise: Write a function that converts a number from base 10 to any\
    \ base from 2 to 36. \nThe function should take two arguments: x is the number\
    \ to be converted, and base is the base of the number to be converted.\nThe function\
    \ should return the converted number as a string.\nThe function should raise an\
    \ error if the base is not in the range 2 to 36.\nThe function should raise an\
    \ error if the number is negative.\nThe function should raise an error if the\
    \ number is too large.\nThe function should raise an error if the number is too\
    \ small.\nThe function should raise an error if the number is zero.\nThe function\
    \ should raise an error if the number is infinity.\nThe function should raise\
    \ an error if the number is NaN.\nThe function should raise an error if the number\
    \ is infinite.\nThe function should raise an error if the number is NaN.\nThe\
    \ function should raise an error if the number is infinite.\nThe function should\
    \ raise an error if the number is NaN.\nThe function should raise an error if\
    \ the number is infinite.\nThe function should raise an error if the number is\
    \ NaN.\nThe function should raise an error if the number is infinite.\nThe function\
    \ should raise an error if the number is NaN.\nThe function should raise an error\
    \ if the number is infinite.\nThe function should raise an error if the number\
    \ is NaN.\nThe function should raise an error if the number is infinite.\nThe\
    \ function should raise an error if the number is NaN.\nThe function should raise\
    \ an error if the number is infinite.\nThe function should raise an error if the\
    \ number is NaN.\nThe function should raise an error if the number is infinite.\n\
    The function should raise an error if the number is NaN.\nThe function should\
    \ raise an error if the number is infinite.\nThe function should raise an error\
    \ if the number is NaN.\nThe function should raise an error if the number is infinite.\n\
    The function should raise an error if the number is NaN.\nThe function should\
    \ raise an error if the number is infinite.\nThe function should raise an error\
    \ if the number is NaN.\nThe function should raise an error if the number is infinite.\n\
    The function should raise an error if the number is NaN.\nThe function should\
    \ raise an error if the number is infinite.\nThe function should raise an error\
    \ if the number is NaN.\nThe function should raise an error if the number is infinite.\n\
    The function should raise an error if the number is NaN.\nThe function should\
    \ raise an error if the number is infinite.\nThe function should raise an error\
    \ if the number is NaN.\n\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb7xejn45.jl:17\nin expression starting at\
    \ /tmp/tmpb7xejn45.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = \"0123456789\"\n\
    \    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    digits\
    \ = digits[base:end]\n    return digits[(x-1):end]\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to its decimal representation.\
    \ \nThe function should take one argument, x, and return a string.\nThe function\
    \ should return the decimal representation of the binary number in string format.\n\
    The function should raise an error if the argument is not binary.\nThe function\
    \ should raise an error if the argument is not of length 2.\nThe function should\
    \ raise an error if the argument is not of length 2.\nThe function should raise\
    \ an error if the argument is not of length 2.\nThe function should raise an error\
    \ if the argument is not of length 2.\nThe function should raise an error if the\
    \ argument is not of length 2.\nThe function should raise an error if the argument\
    \ is not of length 2.\nThe function should raise an error if the argument is not\
    \ of length 2.\nThe function should raise an error if the argument is not of length\
    \ 2.\nThe function should raise an error if the argument is not of length 2.\n\
    The function should raise an error if the argument is not of length 2.\nThe function\
    \ should raise an error if the argument is not of length 2.\nThe function should\
    \ raise an error if the argument is not of length 2.\nThe function should raise\
    \ an error if the argument is not of length 2.\nThe function should raise an error\
    \ if the argument is not of length 2.\nThe function should raise an error if the\
    \ argument is not of length 2.\nThe function should raise an error if the argument\
    \ is not of length 2.\nThe function should raise an error if the argument is not\
    \ of length 2.\nThe function should raise an error if the argument is not of length\
    \ 2.\nThe function should raise an error if the argument is not of length 2.\n\
    The function should raise an error if the argument is not of length 2.\nThe function\
    \ should raise an error if the argument is not of length 2.\nThe function should\
    \ raise an error if the argument is not of length 2.\nThe function should raise\
    \ an error if the argument is not of length 2.\nThe function should raise an error\
    \ if the argument is not of length 2.\nThe function should raise an error if the\
    \ argument is not of length 2.\nThe function should raise an error if the argument\
    \ is not of length 2.\nThe function should raise an error if the argument is not\
    \ of length 2.\nThe function should raise an error if the argument is not of length\
    \ 2.\nThe function should raise an error if the argument is not of length 2.\n\
    The function should raise an error if the argument is not of length 2.\nThe function\
    \ should raise an error if the argument is not of length 2.\nThe function should\
    \ raise an error if the argument is not of length 2.\nThe function should raise\
    \ an error if the argument is not of length 2.\nThe function should raise an error\
    \ if the argument is not of length \nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgdfun5d6.jl:19\nin expression starting at\
    \ /tmp/tmpgdfun5d6.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return show(base * x)\n   \
    \ else\n        return show(base * x / 10)\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnfm6c5fn.jl:17\nin expression starting at\
    \ /tmp/tmpnfm6c5fn.jl:17\n"
  stdout: ''
