language: jl
name: HumanEval_34_unique
results:
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,set |>\n<| c |>\nThis does not answer the question. The question\
    \ is about a Julia set and not a Julia vector. Your answer does not answer the\
    \ question either.\n<|/ c |>\n<| c |>\nI edited my answer to include a Julia set\
    \ solution. Hope it helps.\n<|/ c |>\n<| c |>\nI believe that your answer does\
    \ not answer the question. The question is about a Julia set and not a Julia vector.\
    \ Your answer does not answer the question either.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a Julia set solution. Hope it helps.\n<|/ c |>\n<| c |>\n\
    I believe that your answer does not answer the question. The question is about\
    \ a Julia set and not a Julia vector. Your answer does not answer the question\
    \ either.\n<|/ c |>\n<| a |>\nThe Julia set package has a function called Sets.unique,\
    \ which does exactly what you want.\n<code>\njulia> using Sets\nusing Test\n\n\
    @testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_h0nmna.jl:14\nin expression starting at\
    \ /tmp/tmpr_h0nmna.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptv1bajec.jl:14\nin expression starting at\
    \ /tmp/tmptv1bajec.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    unique.push!(l)\n    unique\nend\n</cell>\n\
    <text>\nThe function unique returns a sorted unique vector of the type Vector{Int64}\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjo_r5ei2.jl:10\nin expression starting at\
    \ /tmp/tmpjo_r5ei2.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptv1bajec.jl:14\nin expression starting at\
    \ /tmp/tmptv1bajec.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen[i] = true\n\
    \        end\n    end\n    return unique\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2oz0bg8n.jl:16\nin expression starting at\
    \ /tmp/tmp2oz0bg8n.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen.add(i)\n  \
    \      end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(l).sort\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sort\n\
    end\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sort\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(l).sort\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sort\n\
    end\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sort\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(l).sort\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sort\n\
    end\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sort\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(l).sort\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sort\n\
    end\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sort\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(l).sort\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sort\n\
    end\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sort\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(l).sort\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sort\n\
    end\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sort\nend\nunique(l::Vector{Int64})::Vector{Int64\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw9szcrkd.jl:18\nin expression starting at /tmp/tmpw9szcrkd.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen[i] = true\n\
    \        end\n    end\n    return unique\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2oz0bg8n.jl:16\nin expression starting at\
    \ /tmp/tmp2oz0bg8n.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\nThe accepted answer by is very elegant and\
    \ efficient, but I thought I'd add an alternative that doesn't require a loop.\
    \ \n<code>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg48f04tv.jl:14\nin expression starting at\
    \ /tmp/tmpg48f04tv.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen[i] = true\n\
    \        end\n    end\n    return unique\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2oz0bg8n.jl:16\nin expression starting at\
    \ /tmp/tmp2oz0bg8n.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(unique(l))\n    return unique\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd9dum5yj.jl:9\nin expression starting at /tmp/tmpd9dum5yj.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,set |>\n<| a dscore=2 |>\nThe Julia standard library has many\
    \ useful tools for working with sets. Here are a couple examples:\n<code>\njulia>\
    \ using Sets\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprikxk2da.jl:14\nin expression starting at\
    \ /tmp/tmprikxk2da.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    uniques = Vector{Int64}()\n    for x in l\n        if\
    \ !seen.add(x)\n            push!(uniques, x)\n        end\n    end\n    return\
    \ uniques\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6djmagdo.jl:15\nin expression starting at\
    \ /tmp/tmp6djmagdo.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(unique(l))\n    return unique\nend\n</cell>\n<code language=julia-1.3>\n\
    @time unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the unique elements of a vector, sorted in ascending\
    \ order.\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5axz5sjq.jl:9\nin expression starting at /tmp/tmp5axz5sjq.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      push!(unique, x)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis is not the fastest solution. `unique` uses `Set`\
    \ internally, so it's O(n) complexity. `sort!` uses `sort` which is O(n log n)\
    \ complexity. `sort!` also uses `unique` which is O(n) complexity. `sort!` also\
    \ uses `sort` which is O(n log n) complexity. `sort!` also uses `unique` which\
    \ is O(n) complexity. `sort!` also uses `sort` which is O(n log n) complexity.\
    \ `sort!` also uses `unique` which is O(n) complexity. `sort!` also uses `sort`\
    \ which is O(n log n) complexity. `sort!` also uses `unique` which is O(n) complexity.\
    \ `sort!` also uses `sort` which is O(n log n) complexity. `sort!` also uses `unique`\
    \ which is O(n) complexity. `sort!` also uses `sort` which is O(n log n) complexity.\
    \ `sort!` also uses `unique` which is O(n) complexity. `sort!` also uses `sort`\
    \ which is O(n log n) complexity. `sort!` also uses `unique` which is O(n) complexity.\
    \ `sort!` also uses `sort` which is O(n log n) complexity. `sort!` also uses `unique`\
    \ which is O(n) complexity. `sort!` also uses `sort` which is O(n log n) complexity.\
    \ `sort!` also uses `unique` which is O(n) complexity. `sort!` also uses `sort`\
    \ which is O(n log n) complexity. `sort!` also uses `unique` which is O(n) complexity.\
    \ `sort!` also uses `sort` which is O(n log n) complexity. `sort!` also uses `unique`\
    \ which is O(n) complexity. `sort!` also uses `sort` which is O(n log n) complexity.\
    \ `sort!` also uses `unique` which is O(n) complexity. `sort!` also uses `sort`\
    \ which is O(n log n) complexity. \nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpduuxrodl.jl:14\nin expression starting at\
    \ /tmp/tmpduuxrodl.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nThis doesn't work if you have repeated elements\
    \ in the vector. For example, `unique([1,1,2,3])` returns `[1,2,3]`.\n<|/ c |>\n\
    <| c |>\nYes, it does. I tested it before posting it. I just added a comment to\
    \ the question asking if that was the case.\n<|/ c |>\n<| c |>\nI tested it again\
    \ and it works. I must have done something wrong when I first tried it.\n<|/ c\
    \ |>\n<| c |>\nI tested it again and it works. I must have done something wrong\
    \ when I first tried it.\n<|/ c |>\n<| c |>\nI tested it again and it works. I\
    \ must have done something wrong when I first tried it.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI wrote a package for this:\nhttps://github.com/kamiyamane/UniqueArrays.jl\n\
    <code>\njulia> using UniqueArrays\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp846esu_o.jl:14\nin expression starting at\
    \ /tmp/tmp846esu_o.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    unique.push!(l)\n    unique\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqkxdi9qi.jl:10\nin expression starting at\
    \ /tmp/tmpqkxdi9qi.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(l)\n    unique[unique(unique)==l] = -1\n    return unique\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8psqt9zl.jl:10\nin expression starting at\
    \ /tmp/tmp8psqt9zl.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for elt in l\n       \
    \ if !has(seen, elt)\n            push!(unique, elt)\n            push!(seen,\
    \ elt)\n        end\n    end\n    return unique\nend\n</cell>\n<text>\nThe unique\
    \ function above is very similar to the built-in function unique. Let's compare\
    \ the performance of both:\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfcmvsd08.jl:16\nin expression starting at\
    \ /tmp/tmpfcmvsd08.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,set |>\n<| c |>\nThis is not the most efficient solution. `unique`\
    \ has O(n) complexity, while `sort` has O(n log n). `sort` can be done in O(n\
    \ log n) by using a radix sort.\n<|/ c |>\n<| c |>\nI agree, `sort` can be done\
    \ in O(n log n) by using a radix sort, but `unique` has O(n) complexity. `sort`\
    \ can be done in O(n log n) by using a radix sort, but `unique` has O(n) complexity.\
    \ `sort` can be done in O(n log n) by using a radix sort, but `unique` has O(n)\
    \ complexity. `sort` can be done in O(n log n) by using a radix sort, but `unique`\
    \ has O(n) complexity. `sort` can be done in O(n log n) by using a radix sort,\
    \ but `unique` has O(n) complexity. `sort` can be done in O(n log n) by using\
    \ a radix sort, but `unique` has O(n) complexity. `sort` can be done in O(n log\
    \ n) by using a radix sort, but `unique` has O(n) complexity. `sort` can be done\
    \ in O(n log n) by using a radix sort, but `unique` has O(n) complexity. `sort`\
    \ can be done in O(n log n) by using a radix sort, but `unique` has O(n) complexity.\
    \ `sort` can be done in O(n log n) by using a radix sort, but `unique` has O(n)\
    \ complexity. `sort` can be done in O(n log n) by using a radix sort, but `unique`\
    \ has O(n) complexity. `sort` can be done in O(n log n) by using a radix sort,\
    \ but `unique` has O(n) complexity. `sort` can be done in O(n log n) by using\
    \ a radix sort, but `unique` has O(n) complexity. `sort` can be done in O(n log\
    \ n) by using a radix sort, but `unique` has O(n) \nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9lh8dzw5.jl:14\nin expression starting at\
    \ /tmp/tmp9lh8dzw5.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have repeated elements in\
    \ the vector. For example, `unique([1,2,2,3])` returns `[1,2,3]`.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if you have repeated elements in the vector. For example,\
    \ `unique([1,2,2,3])` returns `[1,2,3]`.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if you have repeated elements in the vector. For example, `unique([1,2,2,3])`\
    \ returns `[1,2,3]`.\n<|/ c |>\n<| c |>\nThis doesn't work if you have repeated\
    \ elements in the vector. For example, `unique([1,2,2,3])` returns `[1,2,3]`.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaxe90q_3.jl:14\nin expression starting at\
    \ /tmp/tmpaxe90q_3.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    unique.push!(l)\n    while length(unique)\
    \ > length(l)\n        delete!(unique, minimum(unique))\n    end\n    return unique\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsi505kv5.jl:13\nin expression starting at\
    \ /tmp/tmpsi505kv5.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThe `Set` solution is much faster than the other\
    \ solutions here.\n<|/ c |>\n<| c |>\nThe `Set` solution is much faster than the\
    \ other solutions here.\n<|/ c |>\n<| a dscore=3 |>\n<code>\njulia> using Statistics\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfevznn4h.jl:14\nin expression starting at\
    \ /tmp/tmpfevznn4h.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      push!(unique, x)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,unique,arrays |>\n<| a dscore=2 |>\nI like using Sets to do this.\
    \ \n<code>\njulia> using Sets\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbgxh48p.jl:14\nin expression starting at\
    \ /tmp/tmpqbgxh48p.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return collect(unique)\nend\n\
    </code>\n<|/ a tags=julia,set |>\n<| c |>\nThis does not answer the question.\
    \ `unique` returns a `Set`, not an `Array`.\n<|/ c |>\n<| c |>\nI guess I misunderstood\
    \ the question. I thought he was asking for a way to convert a Vector into a Set.\
    \ I'll edit my answer to reflect this.\n<|/ c |>\n<| c |>\nI believe this answer\
    \ is now the best one. `unique` returns a `Set`, not an `Array`.\n<|/ c |>\n<|\
    \ a tags=julia,set |>\nI believe this answer is now the best one. unique returns\
    \ a Set, not an Array. \n<code>\njulia> using StatsBase\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpewekqagq.jl:14\nin expression starting at\
    \ /tmp/tmpewekqagq.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    for x in l\n        if !contains(unique,\
    \ x)\n            push!(unique, x)\n        end\n    end\n    return unique\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9x9ghybd.jl:14\nin expression starting at\
    \ /tmp/tmp9x9ghybd.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,set |>\n<| a tags=julia,set |>\nThe Julia standard library has\
    \ Sets.jl which has many useful methods for working with sets. \n<code>\njulia>\
    \ using Sets\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2jkh6rl5.jl:14\nin expression starting at\
    \ /tmp/tmp2jkh6rl5.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    for x in l\n        if !haskey(unique, x)\n\
    \            push!(unique, x)\n        end\n    end\n    return unique\nend\n\
    </cell>\n<code language=julia-1.5>\nunique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of unique elements\
    \ in a vector\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    6\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjlozb8x8.jl:14\nin expression starting at\
    \ /tmp/tmpjlozb8x8.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(l)\n    unique = unique[unique(:) .!= l]\n    return unique\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5uwfort_.jl:10\nin expression starting at\
    \ /tmp/tmp5uwfort_.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_2e5_d_d.jl:14\nin expression starting at\
    \ /tmp/tmp_2e5_d_d.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\nI wrote a function that does this in Julia 1.5.1:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpihksy_ov.jl:14\nin expression starting at\
    \ /tmp/tmpihksy_ov.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, \nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t\
    @test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: l not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy40nna0s.jl:14\nin expression starting at /tmp/tmpy40nna0s.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(unique(l))\n    return unique\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpagvgsenu.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpagvgsenu.jl:14\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  UndefVarError: unique not defined\n  Stacktrace:\n   [1] unique(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpagvgsenu.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpagvgsenu.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpagvgsenu.jl:13\nTest Summary:\
    \ | Error  Total\ntest set      |     1      1\n"
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    unique.push!(l)\n    unique\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the unique elements of a vector,\
    \ sorted and in increasing order.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7d9iq7rv.jl:10\nin expression starting at\
    \ /tmp/tmp7d9iq7rv.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for x in l\n        if\
    \ !seen.add(x)\n            push!(unique, x)\n        end\n    end\n    return\
    \ unique\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ unique elements of a vector, sorted in ascending order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw5hkrdjy.jl:15\nin expression starting at\
    \ /tmp/tmpw5hkrdjy.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    for x in l\n        if !haskey(unique, x)\n\
    \            push!(unique, x)\n        end\n    end\n    unique\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThis doesn't work if there are repeated elements\
    \ in the input vector. For example, `unique([5, 3, 5, 2, 3, 3, 9, 0, 123, 5])`\
    \ returns `[5, 3, 9, 0, 123]` instead of `[0, 2, 3, 5, 9, 123]`.\n<|/ c |>\n<|\
    \ a dscore=2 |>\nI wrote a package called UniqueArrays.jl for Julia that does\
    \ exactly that:\n<code>\njulia> using UniqueArrays\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwop2_jbv.jl:14\nin expression starting at\
    \ /tmp/tmpwop2_jbv.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=4 |>\n<| a dscore=3 |>\nI believe that Julia has a built-in function\
    \ called unique! which does exactly what you want.\n<|/ a tags=julia,unique,arrays\
    \ |>\n<| a tags=julia,unique,arrays |>\nThe accepted answer doesn't work for me.\
    \ Here's a version that does:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvzjvrq0i.jl:14\nin expression starting at\
    \ /tmp/tmpvzjvrq0i.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(l)\n    unique[unique(unique)==l] = -1\n    return unique\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ifjjd23.jl:10\nin expression starting at\
    \ /tmp/tmp0ifjjd23.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})\
    \ = unique(l).sorted\nunique(l::Vector{T}) where T<:Integer  = unique(sort(l))\n\
    unique(l::Vector{T}) where T<:Float64 = unique(sort(l))\nunique(l::Vector{T})\
    \ where T<:Complex  = unique(sort(l))\nunique(l::Vector{T}) where T<:Bool = unique(sort(l))\n\
    unique(l::Vector{T}) where T<:String  = unique(sort(l))\nunique(l::Vector{T})\
    \ where T<:Symbol  = unique(sort(l))\nunique(l::Vector{T}) where T<:Any  = unique(sort(l))\n\
    unique(l::Vector{T}) where T<:Any  = unique(sort(l))\nunique(l::Vector{T}) where\
    \ T<:Any  = unique(sort(l))\nunique(l::Vector{T}) where T<:Any  = unique(sort(l))\n\
    unique(l::Vector{T}) where T<:Any  = unique(sort(l))\nunique(l::Vector{T}) where\
    \ T<:Any  = unique(sort(l))\nunique(l::Vector{T}) where T<:Any  = unique(sort(l))\n\
    unique(l::Vector{T}) where T<:Any  = unique(sort(l))\nunique(l::Vector{T}) where\
    \ T<:Any  = unique(sort(l))\nunique(l::Vector{T}) where T<:Any  = unique(sort(l))\n\
    unique(l::Vector{T}) where T<:Any  = unique(sort(l))\nunique(l::Vector{T}) where\
    \ T<:Any  = unique(sort(l))\nunique(l::Vector{T}) where T<:Any  = unique(sort(l))\n\
    unique(l::Vector{T}) where T<:Any  = unique(sort(l))\nunique(l::Vector{T}) where\
    \ T<:Any  = unique(sort(l))\nunique(l::Vector{T}) where T<:Any  = unique(sort(l))\n\
    unique(l::Vector{T}) where T<:Any  = unique(sort(l))\nunique(l::Vector{T}) where\
    \ T<:Any  = unique(sort(l))\nunique(l::Vector{T}) where T<:Any  = unique(sort(l))\n\
    unique(l::Vector{T}) where T<:Any  = unique(\nusing Test\n\n@testset begin\n\n\
    candidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2,\
    \ 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwsuv7muq.jl:43\nin expression starting at\
    \ /tmp/tmpwsuv7muq.jl:43\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nThis doesn't work if you have a vector of\
    \ strings or other objects that aren't comparable. For example, `unique([1, \"\
    a\", 2])` returns `[1, \"a\", 2]`.\n<|/ c |>\n<| c |>\nThis doesn't work if you\
    \ have a vector of strings or other objects that aren't comparable. For example,\
    \ `unique([1, \"a\", 2])` returns `[1, \"a\", 2]`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a vector of strings or other objects that aren't comparable.\
    \ For example, `unique([1, \"a\", 2])` returns `[1, \"a\", 2]`.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work if you have a vector of strings or other objects that\
    \ aren't comparable. For example, `unique([1, \"a\", 2])` returns `[1, \"a\",\
    \ 2]`.\n<|/ c |>\n<| a tags=julia,arrays |>\nI wrote a package called UniqueArrays.jl\
    \ that does exactly that. It also has a few other useful functions. You can install\
    \ it by running Pkg.add(\"UniqueArrays\") in Julia.\n<|/ a dscore=4 |>\n<| c |>\n\
    This package is no longer maintained. [UniqueArrays.jl](https://github.com/kamiyamane/UniqueArrays.jl)\
    \ has been updated.\n<|/ c |>\n<| a dscore=4 |>\nI wrote a package called UniqueArrays.jl\
    \ that does exactly that. It also has a few other useful functions. You can install\
    \ it by running Pkg.add(\"UniqueArrays\") in Julia.\n<|/ a tags=julia,arrays |>\n\
    <| c |>\nThis package is no longer maintained. [UniqueArrays.jl](https://github.com/kamiyamane/UniqueArrays.jl)\
    \ has been updated.\n<|/ c |>\n<| a dscore=3 |>\nI wrote a package called UniqueArrays.jl\
    \ that does exactly that. It also has a few other useful functions. You can install\
    \ it by running Pkg.add(\"UniqueArrays\") in Julia.\n<|/ a tags=julia,arrays |>\n\
    <| c |>\nThis package is no longer maintained. [UniqueArrays.jl](https://github.com/kamiyamane/UniqueArrays.jl)\
    \ has been updated.\n<|/ c |>\n<| a tags=julia,\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxbf8ktcc.jl:14\nin expression starting at\
    \ /tmp/tmpxbf8ktcc.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nIn Julia 1.3 you can use the function unique\
    \ to remove duplicates from a vector:\n<code>\njulia> unique([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123])\n5-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n 123\n</code>\n\
    <|/ a tags=julia |>\n<| a |>\nIn Julia 1.3 you can use unique to remove duplicates\
    \ from a vector:\n<code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element\
    \ Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a tags=julia dscore=2\
    \ |>\n<| a |>\nIn Julia 1.3 you can use unique to remove duplicates from a vector:\n\
    <code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n\
    \ 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a dscore=1 tags=julia |>\n<| a dscore=1\
    \ |>\nIn Julia 1.3 you can use unique to remove duplicates from a vector:\n<code>\n\
    julia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n 0\n\
    \ 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nIn Julia\
    \ 1.3 you can use unique to remove duplicates from a vector:\n<code>\njulia> unique([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n\
    \ 123\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nIn Julia 1.3 you can use\
    \ unique to remove duplicates from a vector:\n<code>\njulia> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n 123\n\
    </code>\n<|/ a tags=julia |>\n<| a dscore=1 |>\nIn Julia 1.3 you can use unique\
    \ to remove duplicates from a vector:\n<code>\njulia> unique([\nusing Test\n\n\
    @testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpktfux1hp.jl:14\nin expression starting at\
    \ /tmp/tmpktfux1hp.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        unique += x\n    end\n    unique\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe3uux6gt.jl:12\nin expression starting at\
    \ /tmp/tmpe3uux6gt.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nI like this solution, but I wonder if there\
    \ is a way to avoid the for loop?\n<|/ c |>\n<| c |>\nI guess you could use [`unique`](https://docs.julialang.org/en/v1/base/collections/#Base.unique)\
    \ but that would require you to convert the `Vector{Int64}` into a `Set` first,\
    \ which would require a for loop. Another option would be to convert the `Vector{Int64}`\
    \ into a `Set` first and then convert it back to a `Vector{Int64}`, but that would\
    \ require a for loop as well.\n<|/ c |>\n<| c |>\nI added a solution that avoids\
    \ the for loop\n<|/ c |>\n<| c |>\nI added a solution that avoids the for loop\n\
    <|/ c |>\n<| a dscore=1 |>\nI like the answer by but I would suggest a slight\
    \ variation that avoids the for loop:\n<code>\njulia> function unique(l::Vector{Int64})::Vector{Int64}\n\
    \           unique = Set()\n           for i in l\n               push!(unique,\
    \ i)\n           end\n           return unique\n       end\nunique (generic function\
    \ with 1 method)\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcv8p9su0.jl:14\nin expression starting at\
    \ /tmp/tmpcv8p9su0.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2,\
    \ 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbo0ro1lh.jl:14\nin expression starting at\
    \ /tmp/tmpbo0ro1lh.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of unique elements\
    \ in a vector\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    6\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdl8_7z9.jl:14\nin expression starting at\
    \ /tmp/tmpwdl8_7z9.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpky171t1w.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpky171t1w.jl:19\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  MethodError: no method matching haskey(::Set{Any}, ::Int64)\n  Closest candidates\
    \ are:\n    haskey(!Matched::Base.ImmutableDict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:789\n\
    \    haskey(!Matched::WeakKeyDict{K}, ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/weakkeydict.jl:179\n\
    \    haskey(!Matched::IOContext, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/show.jl:339\n\
    \    ...\n  Stacktrace:\n   [1] unique(l::Vector{Int64})\n     @ Main /tmp/tmpky171t1w.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpky171t1w.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpky171t1w.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     1      1\n"
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    unique.push!(l)\n    while !unique.isEmpty\
    \ do\n        unique.push!(unique(unique(unique.tail)))\n    end\n    return unique\n\
    end\nunique\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg366xag5.jl:8\nin expression starting at /tmp/tmpg366xag5.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(unique(l))\n    return unique\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpagvgsenu.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpagvgsenu.jl:14\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  UndefVarError: unique not defined\n  Stacktrace:\n   [1] unique(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpagvgsenu.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpagvgsenu.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpagvgsenu.jl:13\nTest Summary:\
    \ | Error  Total\ntest set      |     1      1\n"
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a |>\n<| a tags=julia,set |>\n<code>\njulia> using Sets\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpytt07vxt.jl:14\nin expression starting at\
    \ /tmp/tmpytt07vxt.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ i not in seen \n            push!(unique, i)\n            push!(seen, i)\n \
    \       end\n    end\n    return unique\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0516di06.jl:16\nin expression starting at\
    \ /tmp/tmp0516di06.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nThis doesn't work if you have a vector of strings\
    \ or other types that aren't comparable. For example, `unique([\"a\", \"b\", \"\
    c\", \"c\", \"c\"])` returns `[\"a\", \"b\", \"c\"]`.\n<|/ c |>\n<| c |>\nThe\
    \ question was about sorting and unique elements. I believe this answer does exactly\
    \ that.\n<|/ c |>\n<| c |>\nI believe it does, but it's worth noting that this\
    \ solution doesn't work for vectors of strings or other types that aren't comparable.\
    \ For example, `unique([\"a\", \"b\", \"c\", \"c\", \"c\"])` returns `[\"a\",\
    \ \"b\", \"c\"]`.\n<|/ c |>\n<| c |>\nYes, I agree. I've added a note about that.\n\
    <|/ c |>\n<| a dscore=3 |>\nI like to use Julia's built-in Set() for this purpose:\n\
    <code>\njulia> Set([5, 3, 5, 2, 3, 3, 9, 0, 123])\nSet{Int64}([2, 3, 5, 9, 0,\
    \ 123, 5])\n</code>\n<|/ a tags=julia,unique,sorting |>\n<| c |>\nThis doesn't\
    \ work if you have a vector of strings or other types that aren't comparable.\
    \ For example, `Set([5, 3, 5, 2, 3, 3, 9, 0, 123])` returns `Set{Int64}([2, 3,\
    \ 5, 9, 0, 123, 5])`.\n<|/ c |>\n<| c |>\nYes, I agree. I've added a note about\
    \ that.\n<|/ c |>\n<| a dscore=3 |>\nThe most efficient way is to use Sets:\n\
    <code>\njulia> Set([5, 3, 5, 2, 3, 3, 9, 0, 123])\nSet{Int64}([2, 3, 5, 9, 0,\
    \ 123, 5])\n</code>\n<|/ a tags=julia,unique,sorting |>\n<| c |>\nThis doesn't\
    \ work if you have a vector of strings or other types that aren't comparable.\
    \ For example, `Set([5, 3, 5, 2, 3, 3, 9, 0, 123])` returns `Set{Int64}([2, 3,\
    \ 5, 9, 0, 123, 5])`.\n<|/ c |>\n<| c |>\nYes, I agree. I've added a note about\
    \ that.\n<|/ c |>\n<| a dscore=3 |>\nThe most efficient way is to use Sets:\n\
    <code>\njulia> Set([5, 3, 5, 2, 3, 3, 9, 0, 123])\nSet{Int64}\nusing Test\n\n\
    @testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp77u3p5vm.jl:14\nin expression starting at\
    \ /tmp/tmp77u3p5vm.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_2e5_d_d.jl:14\nin expression starting at\
    \ /tmp/tmp_2e5_d_d.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=julia,arrays |>\nI came up with a solution that is\
    \ similar to what was proposed in the other answers, but I wanted to see how it\
    \ compared to other solutions. I used the BenchmarkTools package to compare the\
    \ different solutions.\n<code>\nusing BenchmarkTools\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcgu90k92.jl:14\nin expression starting at\
    \ /tmp/tmpcgu90k92.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    for x in l\n        if !contains(unique,\
    \ x)\n            push!(unique, x)\n        end\n    end\n    return unique\n\
    end\n</code>\n<|/ a |>\n<| a tags=julia,arrays |>\nI wrote a package called UniqueArrays.jl\
    \ that does this for you:\n<code>\njulia> using UniqueArrays\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp0hd8tg2.jl:14\nin expression starting at\
    \ /tmp/tmpp0hd8tg2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for x in l\n        if\
    \ !seen.add(x)\n            push!(unique, x)\n        end\n    end\n    return\
    \ unique\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6gvflzr0.jl:15\nin expression starting at\
    \ /tmp/tmp6gvflzr0.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnckzannz.jl:14\nin expression starting at\
    \ /tmp/tmpnckzannz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    unique.push!(l)\n    unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nThis does not answer the question, which\
    \ is about sorting and removing duplicates.\n<|/ c |>\n<| c |>\nThe question was\
    \ about sorting and removing duplicates. I thought this was the answer to the\
    \ question. Perhaps I misunderstood the question?\n<|/ c |>\n<| c |>\nI believe\
    \ this answer does answer the question. `unique` removes duplicates, `sort` sorts\
    \ the vector, and `sort!` sorts the vector in-place.\n<|/ c |>\n<| c |>\nThe question\
    \ was about sorting and removing duplicates. I thought this was the answer to\
    \ the question. Perhaps I misunderstood the question?\n<|/ c |>\n<| c |>\nThe\
    \ question was about sorting and removing duplicates. I thought this was the answer\
    \ to the question. Perhaps I misunderstood the question?\n<|/ c |>\n<| a dscore=4\
    \ |>\nThe most efficient way is to use Sets:\n<code>\njulia> using Sets\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp32_3rzan.jl:10\nin expression starting at\
    \ /tmp/tmp32_3rzan.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    unique.push!(l)\n    unique\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpn1w_qk5s.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpn1w_qk5s.jl:15\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  type Array has no field push!\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] unique(l::Vector{Int64})\n     @ Main /tmp/tmpn1w_qk5s.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpn1w_qk5s.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpn1w_qk5s.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     1      1\n"
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      push!(unique, x)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppsbxr_aa.jl:14\nin expression starting at\
    \ /tmp/tmppsbxr_aa.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_2e5_d_d.jl:14\nin expression starting at\
    \ /tmp/tmp_2e5_d_d.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    unique.push!(l)\n    unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeptefvbz.jl:10\nin expression starting at\
    \ /tmp/tmpeptefvbz.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(unique(l))\n    return unique\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| c |>\n`unique` already sorts the input vector, so you don't need to do\
    \ that yourself.\n<|/ c |>\n<| c |>\nThanks, I didn't know that. I've updated\
    \ my answer.\n<|/ c |>\n<| a tags=julia,arrays |>\nI came up with a simple solution\
    \ that works for me:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjchvup39.jl:9\nin expression starting at /tmp/tmpjchvup39.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(unique(l))\n    return unique\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpagvgsenu.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpagvgsenu.jl:14\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  UndefVarError: unique not defined\n  Stacktrace:\n   [1] unique(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpagvgsenu.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpagvgsenu.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpagvgsenu.jl:13\nTest Summary:\
    \ | Error  Total\ntest set      |     1      1\n"
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        unique += [i]\n    end\n    unique\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ unique elements in a vector\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    6\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp71bm45xl.jl:12\nin expression starting at\
    \ /tmp/tmp71bm45xl.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    for i in l\n        if !contains(unique,\
    \ i)\n            push!(unique, i)\n        end\n    end\n    unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=julia,arrays |>\n<code>\njulia> using Statistics\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzp9d1vlf.jl:14\nin expression starting at\
    \ /tmp/tmpzp9d1vlf.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have repeated elements in\
    \ the vector. For example, `unique([1,1,2,3])` returns `[1,2,3]`, but should return\
    \ `[1,2,3]`.\n<|/ c |>\n<| c |>\nYes, I agree. My answer was meant to be a general\
    \ solution, not a solution that would work for all cases. I should have added\
    \ a disclaimer about that.\n<|/ c |>\n<| a dscore=2 |>\nI wrote a function that\
    \ does this in Julia. \n<code>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8bf201y9.jl:14\nin expression starting at\
    \ /tmp/tmp8bf201y9.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    unique.push!(l)\n    unique.sort()\n   \
    \ unique\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't answer the question\
    \ of how to sort a vector in place. Also, `unique` returns a `Vector`, not a `Vector{Int64}`.\n\
    <|/ c |>\n<| c |>\nI added a version that does return an `Int64` vector\n<|/ c\
    \ |>\n<| c |>\n`unique` returns a `Vector{Int64}` because `Vector{Int64}` is an\
    \ alias for `Vector{Int64}`. `Vector{Int64}` is an alias for `Vector{Int64}`.\
    \ `Vector{Int64}` is an alias for `Vector{Int64}`.\n<|/ c |>\n<| c |>\n`Vector{Int64}`\
    \ is an alias for `Vector{Int64}` is an alias for `Vector{Int64}` is an alias\
    \ for `Vector{Int64}` is an alias for `Vector{Int64}` is an alias for `Vector{Int64}`\
    \ is an alias for `Vector{Int64}` is an alias for `Vector{Int64}` is an alias\
    \ for `Vector{Int64}` is an alias for `Vector{Int64}` is an alias for `Vector{Int64}`\
    \ is an alias for `Vector{Int64}` is an alias for `Vector{Int64}` is an alias\
    \ for `Vector{Int64}` is an alias for `Vector{Int64}` is an alias for `Vector{Int64}`\
    \ is an alias for `Vector{Int64}` is an alias for `Vector{Int64}` is an alias\
    \ for `Vector{Int64}` is an alias for `Vector{Int64}` is an alias for `Vector{Int64}`\
    \ is an alias for `Vector{Int64}` is an alias for `Vector{Int64}` is an alias\
    \ for `Vector{Int64}` is an alias for `Vector{Int64}` is an alias for `Vector{Int64}`\
    \ is an alias for `Vector{Int64}` is an alias for `Vector{Int64}` is an alias\
    \ for `Vector{Int64}` is an alias for `Vector{Int64}` is an alias for `Vector{Int64}`\
    \ is an alias for `Vector{Int64}` is an alias for `Vector{Int64}` is an alias\
    \ for `Vector{Int64}` is an alias for `Vector{Int64}` is an alias for `Vector{Int64}`\
    \ is an alias for `Vector{Int64}` is an alias for `Vector{\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk0a31hf_.jl:11\nin expression starting at\
    \ /tmp/tmpk0a31hf_.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})\
    \ = unique(l).keys\nunique(l::Vector{Int64}, k::Int64)::Vector{Int64}\n    unique\
    \ = Set()\n    for x in l\n        if !haskey(unique, x)\n            unique[x]\
    \ = true\n        end\n    end\n    return unique.keys\nend\nunique(l::Vector{Int64},\
    \ k::Int64)::Vector{Int64}\n    unique = Set()\n    for x in l\n        if !haskey(unique,\
    \ x)\n            unique[x] = true\n        end\n    end\n    return unique.keys\n\
    end\nunique(l::Vector{Int64}, k::Int64, v::Int64)::Vector{Int64}\n    unique =\
    \ Set()\n    for x in l\n        if !haskey(unique, x)\n            unique[x]\
    \ = true\n        end\n    end\n    return unique.keys\nend\nunique(l::Vector{Int64},\
    \ k::Int64, v::Int64, v::Int64)::Vector{Int64}\n    unique = Set()\n    for x\
    \ in l\n        if !haskey(unique, x)\n            unique[x] = true\n        end\n\
    \    end\n    return unique.keys\nend\nunique(l::Vector{Int64}, k::Int64, v::Int64,\
    \ v::Int64, v::Int64)::Vector{Int64}\n    unique = Set()\n    for x in l\n   \
    \     if !haskey(unique, x)\n            unique[x] = true\n        end\n    end\n\
    \    return unique.keys\nend\nunique(l::Vector{Int64}, k::Int64, v::Int64, v::Int64,\
    \ v::Int64, v::Int64)::Vector{Int64}\n    unique = Set()\n    for x in l\n   \
    \     if !haskey(unique, x)\n            unique[x] = true\n        end\n    end\n\
    \    return unique.keys\nend\nunique(l::Vector{Int64}, k::Int64, v::Int64, v::Int64,\
    \ v::Int64, v::Int64, v::Int64)::Vector{Int64}\n    unique = Set()\n    for x\
    \ in l\n        if !haskey(unique, x)\n            unique[x] = true\n        end\n\
    \    end\n    return unique.keys\nend\nunique(l::Vector{Int64}, k::Int64, v::Int64,\
    \ v::Int64, \nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: l not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp55nky1qr.jl:15\nin expression starting at /tmp/tmp55nky1qr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen[i] = true\n\
    \        end\n    end\n    return unique\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a tags=julia,arrays |>\n<code>\njulia> function unique(vec)\n       \
    \    seen = Set()\n           unique = Vector{Int}()\n           for i in vec\n\
    \               if !haskey(seen, i)\n                   push!(unique, i)\n   \
    \                seen[i] = true\n               end\n           end\n        \
    \   return unique\n       end\nunique (generic function with 1 method)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf2di8xph.jl:16\nin expression starting at\
    \ /tmp/tmpf2di8xph.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptv1bajec.jl:14\nin expression starting at\
    \ /tmp/tmptv1bajec.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_2e5_d_d.jl:14\nin expression starting at\
    \ /tmp/tmp_2e5_d_d.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique.value\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not the most efficient solution.\
    \ `unique` will have to traverse the entire list to find unique elements. A better\
    \ solution is to use `Set` as suggested by [this answer](https://stackoverflow.com/a/47708457/1090562)\n\
    <|/ c |>\n<| a dscore=2 |>\nI wanted to add an answer that uses no external packages\
    \ and is faster than the other answers. I used the Julia BenchmarkTools package\
    \ to compare the different methods. \n<code>\nusing BenchmarkTools\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa9pht8y9.jl:14\nin expression starting at\
    \ /tmp/tmpa9pht8y9.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})\
    \ = unique(l).sorted()\nunique(l::Vector{Int64}, k::Int64)::Vector{Int64} \n \
    \   unique = Set()\n    for i in l\n        if !haskey(unique, i)\n          \
    \  push!(unique, i)\n        end\n        if i == k\n            break\n     \
    \   end\n    end\n    return unique\nend\nunique(l::Vector{Int64}, k::Int64) =\
    \ unique(l).sorted(k)\nunique(l::Vector{Int64}, k::Int64, v::Int64)::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n        if i == k\n            break\n \
    \       end\n        if i == v\n            break\n        end\n    end\n    return\
    \ unique\nend\nunique(l::Vector{Int64}, k::Int64, v::Int64) = unique(l).sorted(k,\
    \ v)\nunique(l::Vector{Int64}, k::Int64, v::Int64, w::Int64)::Vector{Int64} \n\
    \    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n         \
    \   push!(unique, i)\n        end\n        if i == k\n            break\n    \
    \    end\n        if i == v\n            break\n        end\n        if i == w\n\
    \            break\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64},\
    \ k::Int64, v::Int64, w::Int64) = unique(l).sorted(k, v, w)\nunique(l::Vector{Int64},\
    \ k::Int64, v::Int64, w::Int64, x::Int64)::Vector{Int64} \n    unique = Set()\n\
    \    for i in l\n        if !haskey(unique, i)\n            push!(unique, i)\n\
    \        end\n        if i == k\n            break\n        end\n        if i\
    \ == v\n            break\n        end\n        if i == w\n            break\n\
    \        end\n        if i == x\n            break\n        end\n    end\n   \
    \ return unique\nend\nunique(l::Vector{Int64}, k::Int64, v::Int64, w::Int64, x::Int64)\
    \ = unique(l).sorted(k, v, w, x)\nunique(l::Vector{Int64}, k::Int64, v::Int64,\
    \ w::Int64, x::Int64, y::Int64)::Vector{Int64} \n    unique = Set()\n\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: l not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpobwqy04q.jl:15\nin expression starting at /tmp/tmpobwqy04q.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n         \
    \   unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n         \
    \   unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n         \
    \   unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n         \
    \   unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n         \
    \   unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n         \
    \   unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n         \
    \   unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n         \
    \   unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n         \
    \   unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n         \
    \   unique[x] = \nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: l not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptyc04qi6.jl:14\nin expression starting at /tmp/tmptyc04qi6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptv1bajec.jl:14\nin expression starting at\
    \ /tmp/tmptv1bajec.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen[i] = true\n\
    \        end\n    end\n    return unique\nend\n</cell>\n<code language=julia-1.5>\n\
    unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the number of unique elements in\
    \ the vector. For example, unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) should return\
    \ 4.\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpognfjxer.jl:16\nin expression starting at\
    \ /tmp/tmpognfjxer.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(l)\n    unique[unique(unique)==l] = -1\n    return unique\n\
    end\n</cell>\n<code language=julia-1.5>\n@time unique([5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123])\n</cell>\n<text>\nExercise: Write a function that returns the unique elements\
    \ of a vector, sorted in ascending order.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmi3b0wcq.jl:10\nin expression starting at\
    \ /tmp/tmpmi3b0wcq.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nThis doesn't work for me. `unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])` returns `[5, 3, 9, 123]` instead of `[0, 2, 3, 5, 9,\
    \ 123]`.\n<|/ c |>\n<| c |>\nIt works for me on Julia 0.6.2\n<|/ c |>\n<| c |>\n\
    It works for me on Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for me on Julia 0.6.2\n\
    <|/ c |>\n<| a dscore=4 |>\nThe most efficient way is to use Sets.jl. \n<code>\n\
    julia> using Sets\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp504v02tf.jl:14\nin expression starting at\
    \ /tmp/tmp504v02tf.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nend\nunique(l::Vector{Int64})::Vector\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9h0n6gbw.jl:16\nin expression starting at /tmp/tmp9h0n6gbw.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnauhgocm.jl:14\nin expression starting at\
    \ /tmp/tmpnauhgocm.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpktzs_310.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpktzs_310.jl:20\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  MethodError: no method matching haskey(::Set{Any}, ::Int64)\n  Closest candidates\
    \ are:\n    haskey(!Matched::Base.ImmutableDict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:789\n\
    \    haskey(!Matched::WeakKeyDict{K}, ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/weakkeydict.jl:179\n\
    \    haskey(!Matched::IOContext, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/show.jl:339\n\
    \    ...\n  Stacktrace:\n   [1] unique(l::Vector{Int64})\n     @ Main /tmp/tmpktzs_310.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpktzs_310.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpktzs_310.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     1      1\n"
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen[i] = true\n\
    \        end\n    end\n    return unique\nend\nusing Test\n\n@testset begin\n\n\
    candidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2,\
    \ 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp_oensdem.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp_oensdem.jl:21\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  MethodError: no method matching haskey(::Set{Any}, ::Int64)\n  Closest candidates\
    \ are:\n    haskey(!Matched::Base.ImmutableDict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:789\n\
    \    haskey(!Matched::WeakKeyDict{K}, ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/weakkeydict.jl:179\n\
    \    haskey(!Matched::IOContext, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/show.jl:339\n\
    \    ...\n  Stacktrace:\n   [1] unique(l::Vector{Int64})\n     @ Main /tmp/tmp_oensdem.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_oensdem.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_oensdem.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     1      1\n"
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !unique.contains(x)\n     \
    \       unique.add(x)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfl1kefbc.jl:14\nin expression starting at\
    \ /tmp/tmpfl1kefbc.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnckzannz.jl:14\nin expression starting at\
    \ /tmp/tmpnckzannz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nunique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of unique elements in a vector\n\
    \    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    6\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjc6v0pun.jl:14\nin expression starting at\
    \ /tmp/tmpjc6v0pun.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        unique.add(i)\n    end\n    unique\n\
    end\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\nI believe this should be `unique\
    \ = Set()`, not `unique = Set()[]`.\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n\
    <|/ c |>\n<| a tags=julia,arrays |>\nA more Julian way of doing this would be\
    \ to use Sets:\n<code>\njulia> a = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, \n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps4cxf49d.jl:12\nin expression starting at\
    \ /tmp/tmps4cxf49d.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpky171t1w.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpky171t1w.jl:19\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  MethodError: no method matching haskey(::Set{Any}, ::Int64)\n  Closest candidates\
    \ are:\n    haskey(!Matched::Base.ImmutableDict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:789\n\
    \    haskey(!Matched::WeakKeyDict{K}, ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/weakkeydict.jl:179\n\
    \    haskey(!Matched::IOContext, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/show.jl:339\n\
    \    ...\n  Stacktrace:\n   [1] unique(l::Vector{Int64})\n     @ Main /tmp/tmpky171t1w.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpky171t1w.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpky171t1w.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     1      1\n"
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nI wrote a package that does this in Julia.\
    \ \n<code>\nusing DataFrames\nusing DataFramesMeta\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvk08h76q.jl:14\nin expression starting at\
    \ /tmp/tmpvk08h76q.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return collect(unique)\nend\n\
    </code>\n<|/ a tags=julia |>\n<| c |>\n`unique` doesn't preserve order, so this\
    \ doesn't work as intended.\n<|/ c |>\n<| c |>\nI didn't know that `unique` doesn't\
    \ preserve order. Thanks for the info!\n<|/ c |>\n<| a dscore=2 |>\nI believe\
    \ that you can just use Sets:\n<code>\njulia> Set([5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfh3e_dlr.jl:14\nin expression starting at\
    \ /tmp/tmpfh3e_dlr.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        unique.add(i)\n    end\n    return\
    \ unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpup_xf8x4.jl:12\nin expression starting at\
    \ /tmp/tmpup_xf8x4.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen[i] = true\n\
    \        end\n    end\n    return unique\nend\nunique(l::Vector{Int64}) = unique(l).sorted\n\
    unique(l::Vector{Float64}) = unique(l).sorted\nunique(l::Vector{String}) = unique(l).sorted\n\
    unique(l::Vector{Any}) = unique(l).sorted\nunique(l::Vector{Any}) = unique(l).sorted\n\
    unique(l::Vector{Any}) = unique(l).sorted\nunique(l::Vector{Any}) = unique(l).sorted\n\
    unique(l::Vector{Any}) = unique(l).sorted\nunique(l::Vector{Any}) = unique(l).sorted\n\
    unique(l::Vector{Any}) = unique(l).sorted\nunique(l::Vector{Any}) = unique(l).sorted\n\
    unique(l::Vector{Any}) = unique(l).sorted\nunique(l::Vector{Any}) = unique(l).sorted\n\
    unique(l::Vector{Any}) = unique(l).sorted\nunique(l::Vector{Any}) = unique(l).sorted\n\
    unique(l::Vector{Any}) = unique(l).sorted\nunique(l::Vector{Any}) = unique(l).sorted\n\
    unique(l::Vector{Any}) = unique(l).sorted\nunique(l::Vector{Any}) = unique(l).sorted\n\
    unique(l::Vector{Any}) = unique(l).sorted\nunique(l::Vector{Any}) = unique(l).sorted\n\
    unique(l::Vector{Any}) = unique(l).sorted\nunique(l::Vector{Any}) = unique(l).sorted\n\
    unique(l::Vector{Any}) = unique(l).sorted\nunique(l::Vector{Any}) = unique(l).sorted\n\
    unique(l::Vector{Any}) = unique(l).sorted\nunique(l::Vector{Any}) = unique(l).sorted\n\
    unique(l::Vector{Any}) = unique(l).sorted\nunique(l::Vector{Any}) = unique(l).sorted\n\
    unique(l::Vector{Any}) = unique(l).sorted\nunique(l::Vector{Any}) = unique(l).sorted\n\
    unique(l::Vector{Any}) = unique(l).sorted\nunique(l::Vector{Any}) = unique(l).sorted\n\
    unique(l::Vector{Any}) = unique(l).sorted\nunique(l::Vector{Any}) = unique(l).sorted\n\
    unique(l::Vector{Any})\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t\
    @test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: l not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbio6_1y9.jl:51\nin expression starting at /tmp/tmpbio6_1y9.jl:51\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen.add(i)\n  \
    \      end\n    end\n    return unique\nend\nunique(l::Vector{Int64}) = unique(l,Set())\n\
    unique(l::Vector{Int64}, seen::Set{Int64})::Vector{Int64} \n    if !haskey(seen,\
    \ l)\n        push!(unique, l)\n        seen.add(l)\n    end\n    return unique\n\
    end\nunique(l::Vector{Int64}, seen::Set{Int64})::Vector{Int64} \n    if !haskey(seen,\
    \ l)\n        push!(unique, l)\n        seen.add(l)\n    end\n    return unique\n\
    end\nunique(l::Vector{Int64}, seen::Set{Int64})::Vector{Int64} \n    if !haskey(seen,\
    \ l)\n        push!(unique, l)\n        seen.add(l)\n    end\n    return unique\n\
    end\nunique(l::Vector{Int64}, seen::Set{Int64})::Vector{Int64} \n    if !haskey(seen,\
    \ l)\n        push!(unique, l)\n        seen.add(l)\n    end\n    return unique\n\
    end\nunique(l::Vector{Int64}, seen::Set{Int64})::Vector{Int64} \n    if !haskey(seen,\
    \ l)\n        push!(unique, l)\n        seen.add(l)\n    end\n    return unique\n\
    end\nunique(l::Vector{Int64}, seen::Set{Int64})::Vector{Int64} \n    if !haskey(seen,\
    \ l)\n        push!(unique, l)\n        seen.add(l)\n    end\n    return unique\n\
    end\nunique(l::Vector{Int64}, seen::Set{Int64})::Vector{Int64} \n    if !haskey(seen,\
    \ l)\n        push!(unique, l)\n        seen.add(l)\n    end\n    return unique\n\
    end\nunique(l::Vector{Int64}, seen::Set{Int64})::Vector{Int64} \n    if !haskey(seen,\
    \ l)\n        push!(unique, l)\n        seen.add(l)\n    end\n    return unique\n\
    end\nunique(l::Vector{Int64}, seen::Set{Int64})::Vector{Int64} \n    if !haskey(seen,\
    \ l)\n        push!(unique, l)\n        seen.add(l)\n    end\n    return unique\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: l not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo35um0te.jl:17\nin expression starting at /tmp/tmpo35um0te.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen[i] = true\n\
    \        end\n    end\n    return unique\nend\n</cell>\n<text>\nunique! modifies\
    \ the original vector\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t\
    @test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoazj0e00.jl:16\nin expression starting at\
    \ /tmp/tmpoazj0e00.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        push!(unique, x)\n    end\n  \
    \  unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnofpp5ci.jl:12\nin expression starting at\
    \ /tmp/tmpnofpp5ci.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen[i] = true\n\
    \        end\n    end\n    return unique\nend\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ code does not work. `unique` returns a `Vector{Int64}` but `unique!` expects\
    \ a `Vector{Int}`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've updated\
    \ the code accordingly.\n<|/ c |>\n<| a dscore=4 |>\nThe accepted answer does\
    \ not work for me. \n<code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\nERROR:\
    \ MethodError: no method matching unique!(::Array{Int64,1})\n</code>\nI used the\
    \ code from here and changed it a little bit:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbt8q_ajp.jl:16\nin expression starting at\
    \ /tmp/tmpbt8q_ajp.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !unique.contains(x)\n     \
    \       unique.add(x)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkh3fl6g1.jl:14\nin expression starting at\
    \ /tmp/tmpkh3fl6g1.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for x in l\n        if !seen.add(x)\n\
    \            unique.add(x)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjg9te1ec.jl:15\nin expression starting at\
    \ /tmp/tmpjg9te1ec.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen.add(i)\n  \
    \      end\n    end\n    return unique\nend\nunique(l::Vector{Int64}) = unique(l).sorted\n\
    unique(l::Vector{Int64}, dim::Int) = unique(l).sorted[dim]\nunique(l::Vector{Int64},\
    \ dim::Int, dim2::Int) = unique(l).sorted[dim][dim2]\nunique(l::Vector{Int64},\
    \ dim::Int, dim2::Int, dim3::Int) = unique(l).sorted[dim][dim2][dim3]\nunique(l::Vector{Int64},\
    \ dim::Int, dim2::Int, dim3::Int, dim4::Int) = unique(l).sorted[dim][dim2][dim3][dim4]\n\
    unique(l::Vector{Int64}, dim::Int, dim2::Int, dim3::Int, dim4::Int, dim5::Int)\
    \ = unique(l).sorted[dim][dim2][dim3][dim4][dim5]\nunique(l::Vector{Int64}, dim::Int,\
    \ dim2::Int, dim3::Int, dim4::Int, dim5::Int, dim6::Int) = unique(l).sorted[dim][dim2][dim3][dim4][dim5][dim6]\n\
    unique(l::Vector{Int64}, dim::Int, dim2::Int, dim3::Int, dim4::Int, dim5::Int,\
    \ dim6::Int, dim7::Int) = unique(l).sorted[dim][dim2][dim3][dim4][dim5][dim6][dim7]\n\
    unique(l::Vector{Int64}, dim::Int, dim2::Int, dim3::Int, dim4::Int, dim5::Int,\
    \ dim6::Int, dim7::Int, dim8::Int) = unique(l).sorted[dim][dim2][dim3][dim4][dim5][dim6][dim7][dim8]\n\
    unique(l::Vector{Int64}, dim::Int, dim2::Int, dim3::Int, dim4::Int, dim5::Int,\
    \ dim6::Int, dim7::Int, dim8::Int, dim9::Int) = unique(l).sorted[dim][dim2][dim3][dim4][dim5][dim6][\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi51czqxg.jl:25\nin expression starting at\
    \ /tmp/tmpi51czqxg.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(unique(l))\n    return unique\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd9dum5yj.jl:9\nin expression starting at /tmp/tmpd9dum5yj.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        push!(unique, i)\n    end\n  \
    \  return unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuc3tyxgz.jl:12\nin expression starting at\
    \ /tmp/tmpuc3tyxgz.jl:12\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})\
    \ = unique(l).keys\nunique(l::Vector{Float64}) = unique(l).keys\nunique(l::Vector{String})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(l).sorted\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n  \
    \  unique(l).sorted\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sorted\n\
    end\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sorted\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(l).sorted\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n  \
    \  unique(l).sorted\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sorted\n\
    end\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sorted\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(l).sorted\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n  \
    \  unique(l).sorted\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sorted\n\
    end\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sorted\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(l).sorted\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n  \
    \  unique(l).sorted\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sorted\n\
    end\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sorted\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(l).sorted\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n  \
    \  unique(l).sorted\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sorted\n\
    end\nunique(l::Vector\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t\
    @test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvm41ek13.jl:16\nin expression starting at /tmp/tmpvm41ek13.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    for x in l\n        if !contains(unique,\
    \ x)\n            push!(unique, x)\n        end\n    end\n    return unique\n\
    end\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThe `unique` function can be written\
    \ more concisely as `unique(unique(vec))`.\n<|/ c |>\n<| c |>\n`unique` can be\
    \ written more concisely as `unique(vec)`.\n<|/ c |>\n<| c |>\n`unique(unique(vec))`\
    \ will give `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]` instead of\
    \ `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]`\n<|/ c |>\n<| c |>\n\
    `unique(unique(vec))` will give `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]`\
    \ instead of `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]`\n<|/ c |>\n\
    <| a tags=julia,unique,arrays |>\n<code>\njulia> using Statistics\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp93rzkpug.jl:14\nin expression starting at\
    \ /tmp/tmp93rzkpug.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nThis doesn't work if you have repeated elements\
    \ in the array. For example, `unique([1,1,2,3])` returns `[1,2,3]` instead of\
    \ `[1]`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've updated the answer\
    \ to include a version that works with repeated elements.\n<|/ c |>\n<| a tags=julia,arrays\
    \ |>\nThe most efficient way is to use Sets:\n<code>\njulia> using Sets\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp26bceble.jl:14\nin expression starting at\
    \ /tmp/tmp26bceble.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(unique(l))\n    return unique\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpagvgsenu.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpagvgsenu.jl:14\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  UndefVarError: unique not defined\n  Stacktrace:\n   [1] unique(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpagvgsenu.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpagvgsenu.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpagvgsenu.jl:13\nTest Summary:\
    \ | Error  Total\ntest set      |     1      1\n"
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have a vector of strings.\
    \ `unique([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"])` returns `[\"a\", \"b\"\
    , \"c\"]`\n<|/ c |>\n<| c |>\nThe question was about integers, not strings. If\
    \ you have a vector of strings, you can just call `unique` on the strings. `unique([\"\
    a\", \"a\", \"b\", \"c\", \"c\", \"c\"])` returns `[\"a\", \"b\", \"c\"]`\n<|/\
    \ c |>\n<| c |>\nI see what you mean. My mistake.\n<|/ c |>\n<| a |>\nI wrote\
    \ a function that does this for me:\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2,\
    \ 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1br1ckpu.jl:14\nin expression starting at\
    \ /tmp/tmp1br1ckpu.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        push!(unique, x)\n    end\n  \
    \  return unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk1v77r2r.jl:12\nin expression starting at\
    \ /tmp/tmpk1v77r2r.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    unique.push!(l)\n    unique\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqkxdi9qi.jl:10\nin expression starting at\
    \ /tmp/tmpqkxdi9qi.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=julia |>\nHere is a simple and efficient solution:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn4c6zeay.jl:14\nin expression starting at\
    \ /tmp/tmpn4c6zeay.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for e in l \n        if !haskey(unique, e) \n    \
    \        unique[e] = true\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprwyhx983.jl:14\nin expression starting at\
    \ /tmp/tmprwyhx983.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !unique.contains(x)\n     \
    \       unique.add(x)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})\
    \ = unique(l).sorted\nunique(l::Vector{Int64}, k::Int64)::Vector{Int64}\n    unique\
    \ = Set()\n    for x in l\n        if !unique.contains(x)\n            unique.add(x)\n\
    \        end\n        if k > 0 && unique.size > k\n            unique = unique.sorted\n\
    \        end\n    end\n    return unique\nend\nunique(l::Vector{Int64}, k::Int64)\
    \ = unique(l,k).sorted\nunique(l::Vector{Int64}, k::Int64) = unique(l,k)\nunique(l::Vector{Int64},\
    \ k::Int64) = unique(l,k)\nunique(l::Vector{Int64}, k::Int64) = unique(l,k)\n\
    unique(l::Vector{Int64}, k::Int64) = unique(l,k)\nunique(l::Vector{Int64}, k::Int64)\
    \ = unique(l,k)\nunique(l::Vector{Int64}, k::Int64) = unique(l,k)\nunique(l::Vector{Int64},\
    \ k::Int64) = unique(l,k)\nunique(l::Vector{Int64}, k::Int64) = unique(l,k)\n\
    unique(l::Vector{Int64}, k::Int64) = unique(l,k)\nunique(l::Vector{Int64}, k::Int64)\
    \ = unique(l,k)\nunique(l::Vector{Int64}, k::Int64) = unique(l,k)\nunique(l::Vector{Int64},\
    \ k::Int64) = unique(l,k)\nunique(l::Vector{Int64}, k::Int64) = unique(l,k)\n\
    unique(l::Vector{Int64}, k::Int64) = unique(l,k)\nunique(l::Vector{Int64}, k::Int64)\
    \ = unique(l,k)\nunique(l::Vector{Int64}, k::Int64) = unique(l,k)\nunique(l::Vector{Int64},\
    \ k::Int64) = unique(l,k)\nunique(l::Vector{Int64}, k::Int64) = unique(l,k)\n\
    unique(l::Vector{Int64}, k::Int64) = unique(l,k)\nunique(l::Vector{Int64}, k::Int64)\
    \ = unique(l,k)\nunique(l::Vector{Int64}, k::Int64) = unique(l,k)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: l not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx4nx33zw.jl:15\nin expression starting at /tmp/tmpx4nx33zw.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for x in l\n        if\
    \ !haskey(seen, x)\n            push!(unique, x)\n            seen[x] = true\n\
    \        end\n    end\n    return unique\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of unique elements\
    \ in a vector\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == 5\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqwn96fus.jl:16\nin expression starting at\
    \ /tmp/tmpqwn96fus.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(l)\n    unique = unique[unique(unique) .!= 0]\n    return\
    \ unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfpfuzhl2.jl:10\nin expression starting at\
    \ /tmp/tmpfpfuzhl2.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        push!(unique, x)\n    end\n  \
    \  return unique\nend\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t\
    @test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpmt1qkskl.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpmt1qkskl.jl:17\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  MethodError: Cannot `convert` an object of type Set{Any} to an object of type\
    \ Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique(l::Vector{Int64})\n     @ Main /tmp/tmpmt1qkskl.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmt1qkskl.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmt1qkskl.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     1      1\n"
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptv1bajec.jl:14\nin expression starting at\
    \ /tmp/tmptv1bajec.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(unique(l))\n    return unique\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd9dum5yj.jl:9\nin expression starting at /tmp/tmpd9dum5yj.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        push!(unique, x)\n    end\n  \
    \  return unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk1v77r2r.jl:12\nin expression starting at\
    \ /tmp/tmpk1v77r2r.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nThis doesn't work if you have a `Vector{Int64}`\
    \ that contains `NaN`s.\n<|/ c |>\n<| c |>\nIt doesn't work if you have a `Vector{Int64}`\
    \ that contains `NaN`s because `NaN` is not equal to itself. `NaN != NaN` returns\
    \ `false`. To fix this, you can either use `NaN==NaN` instead of `==`, or you\
    \ can replace `NaN` with `NaN==NaN?NaN:x`.\n<|/ c |>\n<| c |>\nI added a fix for\
    \ that case.\n<|/ c |>\n<| a tags=julia,arrays |>\n<code>\njulia> using Statistics\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfyy6qvun.jl:14\nin expression starting at\
    \ /tmp/tmpfyy6qvun.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    for x in l\n        if !contains(unique,\
    \ x)\n            push!(unique, x)\n        end\n    end\n    return unique\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\nI believe that your problem\
    \ is that you are trying to use an Int64 type to store a vector of Int64s. Int64\
    \ is only a 64-bit integer type. \nThe reason why you get an error is because\
    \ you are trying to push a Int64 onto a Vector{Int64}. \nTo fix this problem,\
    \ you can either use an Int128 type or convert your Int64 vector into a Vector{Int64}\
    \ before pushing onto the vector.\n<|/ a dscore=0 |>\n<| c |>\nThank you for your\
    \ answer! I understand that Int64 is only a 64-bit integer type, but I thought\
    \ that Vector{Int64} is also a 64-bit integer type. Do you know why this is?\n\
    <|/ c |>\n<| c |>\n`Vector{Int64}` is a type. `Int64` is a type. `Vector{Int64}`\
    \ is a type. `Int64` is a type. `Vector{Int64}` is a type. `Int64` is a type.\
    \ `Vector{Int64}` is a type. `Int64` is a type. `Vector{Int64}` is a type. `Int64`\
    \ is a type. `Vector{Int64}` is a type. `Int64` is a type. `Vector{Int64}` is\
    \ a type. `Int64` is a type. `Vector{Int64}` is a type. `Int64` is a type. `Vector{Int64}`\
    \ is a type. `Int64` is a type. `Vector{Int64}` is a type. `Int64` is a type.\
    \ `Vector{Int64}` is a type. `Int64` is a type. `Vector{Int64}` is a type. `Int64`\
    \ is a type. `Vector{Int64}` is a type. `Int64` is a type. `Vector{Int64}` is\
    \ a type. `Int64` is a type. `Vector{Int64}` is a type. `Int64` is a type. `Vector{Int64}`\
    \ is a type. `Int64` is a type. `Vector{Int64}` is a type. `Int64` is a type.\
    \ `Vector{Int64}` is a type. `Int64` is a type. `Vector{Int64}` is a type. `Int64`\
    \ is a type. `Vector{Int64}` is a type. `Int64` is a type. `Vector{Int64}` is\
    \ a type. `Int\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl6c96e9b.jl:14\nin expression starting at\
    \ /tmp/tmpl6c96e9b.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for x in l\n        if\
    \ !seen.add(x)\n            push!(unique, x)\n        end\n    end\n    return\
    \ unique\nend\n</cell>\n<text>\nunique! modifies the original vector\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyu8p7i2b.jl:15\nin expression starting at\
    \ /tmp/tmpyu8p7i2b.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        unique.add(x)\n    end\n    return\
    \ unique\nend\n</cell>\n<text>\nThe function unique returns a sorted unique vector\
    \ of Int64s.\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2tkcpy02.jl:12\nin expression starting at\
    \ /tmp/tmp2tkcpy02.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        push!(unique, x)\n    end\n  \
    \  return unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk1v77r2r.jl:12\nin expression starting at\
    \ /tmp/tmpk1v77r2r.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})\
    \ = unique(l).sort()\nunique(l::Vector{Int64}, k::Int64)::Vector{Int64} \n   \
    \ unique = Set()\n    for i in l\n        if !haskey(unique, i)\n            push!(unique,\
    \ i)\n        end\n    end\n    return unique.sort()[1:k]\nend\nunique(l::Vector{Int64},\
    \ k::Int64) = unique(l).sort() [1:k]\nunique(l::Vector{Int64}, k::Int64) = unique(l).sort()\
    \ [1:k]\nunique(l::Vector{Int64}, k::Int64) = unique(l).sort() [1:k]\nunique(l::Vector{Int64},\
    \ k::Int64) = unique(l).sort() [1:k]\nunique(l::Vector{Int64}, k::Int64) = unique(l).sort()\
    \ [1:k]\nunique(l::Vector{Int64}, k::Int64) = unique(l).sort() [1:k]\nunique(l::Vector{Int64},\
    \ k::Int64) = unique(l).sort() [1:k]\nunique(l::Vector{Int64}, k::Int64) = unique(l).sort()\
    \ [1:k]\nunique(l::Vector{Int64}, k::Int64) = unique(l).sort() [1:k]\nunique(l::Vector{Int64},\
    \ k::Int64) = unique(l).sort() [1:k]\nunique(l::Vector{Int64}, k::Int64) = unique(l).sort()\
    \ [1:k]\nunique(l::Vector{Int64}, k::Int64) = unique(l).sort() [1:k]\nunique(l::Vector{Int64},\
    \ k::Int64) = unique(l).sort() [1:k]\nunique(l::Vector{Int64}, k::Int64) = unique(l).sort()\
    \ [1:k]\nunique(l::Vector{Int64}, k::Int64) = unique(l).sort() [1:k]\nunique(l::Vector{Int64},\
    \ k::Int64) = unique(l).sort() [1:k]\nunique(l::Vector{Int64}, k::Int64) = unique(l).sort()\
    \ [1:k]\nunique(l::Vector{Int64}, k::Int64) = unique(l).sort() [1:k]\nunique(l::Vector{Int64},\
    \ k::Int64) = unique(l).sort() [1:k]\nunique(l::Vector{Int64}, k\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: l not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4x17j9nx.jl:15\nin expression starting at /tmp/tmp4x17j9nx.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    sort(unique(l))\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n   \
    \ sort(unique(l))\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n    sort(unique(l))\n\
    end\nunique(l::Vector{Int64})::Vector{Int64} =\n    sort(unique(l))\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    sort(unique(l))\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n   \
    \ sort(unique(l))\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n    sort(unique(l))\n\
    end\nunique(l::Vector{Int64})::Vector{Int64} =\n    sort(unique(l))\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    sort(unique(l))\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n   \
    \ sort(unique(l))\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n    sort(unique(l))\n\
    end\nunique(l::Vector{Int64})::Vector{Int64} =\n    sort(unique(l))\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    sort(unique(l))\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n   \
    \ sort(unique(l))\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n    sort(unique(l))\n\
    end\nunique(l::Vector{Int64})::Vector{Int64} =\n    sort(unique(l))\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    sort(unique(l))\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n   \
    \ sort(unique(l))\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n    sort(unique(l))\n\
    end\nunique(l::Vector\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t\
    @test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfiy31n32.jl:16\nin expression starting at /tmp/tmpfiy31n32.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen.add(i)\n  \
    \      end\n    end\n    return unique\nend\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nThis doesn't work if there are repeated elements in the input vector. For\
    \ example, `unique([5, 3, 5, 2, 3, 3, 9, 0, 123])` returns `[5, 3, 9, 0, 123]`.\n\
    <|/ c |>\n<| c |>\nI believe that `unique` should return `[5, 3, 9, 0, 123]` because\
    \ `[5, 3, 9, 0, 123]` has repeated elements. Please correct me if I am wrong.\n\
    <|/ c |>\n<| c |>\nYes, you are right. My mistake. Thanks for pointing out.\n\
    <|/ c |>\n<| c |>\nI believe that `unique` should return `[5, 3, 9, 0, 123]` because\
    \ `[5, 3, 9, 0, 123]` has repeated elements. Please correct me if I am wrong.\n\
    <|/ c |>\n<| c |>\nYes, you are right. My mistake. Thanks for pointing out.\n\
    <|/ c |>\n<| a tags=julia,unique |>\nThe accepted answer does not work when there\
    \ are repeated elements in the input vector. For example, unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) returns [5, 3, 9, 0, 123].\nHere is a solution that works\
    \ with repeated elements:\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnw_k0c31.jl:16\nin expression starting at\
    \ /tmp/tmpnw_k0c31.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})\
    \ = unique(l).sorted\nunique(l::Vector{Int64}, dim::Int64)::Vector{Int64}\n  \
    \  unique = Set()\n    for i in l\n        if !haskey(unique, i)\n           \
    \ push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64},\
    \ dim::Int64) = unique(l).sorted\nunique(l::Vector{Int64}, dim::Int64) = unique(l).sorted\n\
    unique(l::Vector{Int64}, dim::Int64) = unique(l).sorted\nunique(l::Vector{Int64},\
    \ dim::Int64) = unique(l).sorted\nunique(l::Vector{Int64}, dim::Int64) = unique(l).sorted\n\
    unique(l::Vector{Int64}, dim::Int64) = unique(l).sorted\nunique(l::Vector{Int64},\
    \ dim::Int64) = unique(l).sorted\nunique(l::Vector{Int64}, dim::Int64) = unique(l).sorted\n\
    unique(l::Vector{Int64}, dim::Int64) = unique(l).sorted\nunique(l::Vector{Int64},\
    \ dim::Int64) = unique(l).sorted\nunique(l::Vector{Int64}, dim::Int64) = unique(l).sorted\n\
    unique(l::Vector{Int64}, dim::Int64) = unique(l).sorted\nunique(l::Vector{Int64},\
    \ dim::Int64) = unique(l).sorted\nunique(l::Vector{Int64}, dim::Int64) = unique(l).sorted\n\
    unique(l::Vector{Int64}, dim::Int64) = unique(l).sorted\nunique(l::Vector{Int64},\
    \ dim::Int64) = unique(l).sorted\nunique(l::Vector{Int64}, dim::Int64) = unique(l).sorted\n\
    unique(l::Vector{Int64}, dim::Int64) = unique(l).sorted\nunique(l::Vector{Int64},\
    \ dim::Int64) = unique(l).sorted\nunique(l::Vector{Int64}, dim::Int64) = unique(l).sorted\n\
    unique(l::Vector{Int64}, dim::Int64) = unique(l).sorted\nunique(l::Vector{Int64},\
    \ dim::Int64) = unique(l).sorted\nunique(l::Vector{Int64}, dim::Int64) = unique(l).\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: l not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpklhxw_in.jl:15\nin expression starting at /tmp/tmpklhxw_in.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1heglw12.jl:15\nin expression starting at\
    \ /tmp/tmp1heglw12.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpzkedebx3.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpzkedebx3.jl:19\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  MethodError: no method matching haskey(::Set{Any}, ::Int64)\n  Closest candidates\
    \ are:\n    haskey(!Matched::Base.ImmutableDict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:789\n\
    \    haskey(!Matched::WeakKeyDict{K}, ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/weakkeydict.jl:179\n\
    \    haskey(!Matched::IOContext, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/show.jl:339\n\
    \    ...\n  Stacktrace:\n   [1] unique(l::Vector{Int64})\n     @ Main /tmp/tmpzkedebx3.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzkedebx3.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzkedebx3.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     1      1\n"
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    for x in l\n        if !contains(unique,\
    \ x)\n            push!(unique, x)\n        end\n    end\n    return unique\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like the `contains` approach, but\
    \ I wonder if there is a way to avoid the O(n) `contains` call. Maybe `find` could\
    \ help?\n<|/ c |>\n<| c |>\n`find` would still be O(n), but you could use a `Set`\
    \ instead, which would only require O(1) contains.\n<|/ c |>\n<| c |>\nYes, `find`\
    \ would be O(n), but `contains` would be O(1), so it's still better than O(n).\n\
    <|/ c |>\n<| c |>\n`find` would still be O(n), but you could use a `Set` instead,\
    \ which would only require O(1) contains.\n<|/ c |>\n<| c |>\nYes, `find` would\
    \ be O(n), but `contains` would be O(1), so it's still better than O(n).\n<|/\
    \ c |>\n<| a dscore=2 |>\nA simple solution that doesn't require any external\
    \ packages is:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t\
    @test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsby47geq.jl:14\nin expression starting at\
    \ /tmp/tmpsby47geq.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        push!(unique, i)\n    end\n  \
    \  return unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuc3tyxgz.jl:12\nin expression starting at\
    \ /tmp/tmpuc3tyxgz.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(unique(l))\n    return unique\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd9dum5yj.jl:9\nin expression starting at /tmp/tmpd9dum5yj.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = \nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: l not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgszfx3a2.jl:14\nin expression starting at /tmp/tmpgszfx3a2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis does not answer the question. OP asked for unique elements\
    \ in a vector, not unique keys in a map.\n<|/ c |>\n<| c |>\nThis answer does\
    \ answer the question. The OP asked for unique elements in a vector, not unique\
    \ keys in a map. This answer does exactly that.\n<|/ c |>\n<| a tags=julia |>\n\
    <code>\njulia> using Statistics\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplueb2t_3.jl:14\nin expression starting at\
    \ /tmp/tmplueb2t_3.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nThe function you are looking for is unique!\
    \ which removes duplicates from a vector.\n<code>\njulia> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n0-element Array{Int64,1}\n</code>\n<|/ a tags=julia |>\n\
    <| a tags=julia |>\n<code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n0-element\
    \ Array{Int64,1}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nThe function you\
    \ are looking for is unique! which removes duplicates from a vector.\n<code>\n\
    julia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n0-element Array{Int64,1}\n</code>\n\
    <|/ a tags=julia |>\n<| a tags=julia |>\nThe function you are looking for is unique!\
    \ which removes duplicates from a vector.\n<code>\njulia> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n0-element Array{Int64,1}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\nThe function you are looking for is unique! which removes duplicates\
    \ from a vector.\n<code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n0-element\
    \ Array{Int64,1}\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nThe function\
    \ you are looking for is unique! which removes duplicates from a vector.\n<code>\n\
    julia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n0-element Array{Int64,1}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=julia |>\n<code>\njulia> unique([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123])\n0-element Array{Int64,1}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nThe function you are looking for is unique! which removes duplicates from\
    \ a vector.\n<code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n0-element Array{Int64,1}\n\
    </code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\nThe function you are looking for\
    \ is unique! which removes duplicates from a vector.\n<code>\njulia> unique([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n0-element Array{Int64,1}\n</code>\n<|/\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkl5eukh.jl:14\nin expression starting at\
    \ /tmp/tmpwkl5eukh.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptv1bajec.jl:14\nin expression starting at\
    \ /tmp/tmptv1bajec.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen[i] = true\n\
    \        end\n    end\n    return unique\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a tags=julia,arrays |>\nI wrote a package called UniqueArrays.jl that\
    \ does this for you:\n<code>\njulia> using UniqueArrays\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3fs_y_lf.jl:16\nin expression starting at\
    \ /tmp/tmp3fs_y_lf.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        push!(unique, i)\n    end\n  \
    \  return unique\nend\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t\
    @test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp45wzufsv.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp45wzufsv.jl:17\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  MethodError: Cannot `convert` an object of type Set{Any} to an object of type\
    \ Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique(l::Vector{Int64})\n     @ Main /tmp/tmp45wzufsv.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp45wzufsv.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp45wzufsv.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     1      1\n"
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    uniques = Vector{Int64}()\n    for el in l \n      \
    \  if !has(seen, el) \n            push!(uniques, el)\n            push!(seen,\
    \ el)\n        end\n    end\n    return uniques\nend\n</cell>\n<text>\nunique!\
    \ modifies the original vector\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3_srcl71.jl:16\nin expression starting at\
    \ /tmp/tmp3_srcl71.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      push!(unique, x)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvs2e4467.jl:14\nin expression starting at\
    \ /tmp/tmpvs2e4467.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    unique.push!(l)\n    unique\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqkxdi9qi.jl:10\nin expression starting at\
    \ /tmp/tmpqkxdi9qi.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        push!(unique, x)\n    end\n  \
    \  return unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk1v77r2r.jl:12\nin expression starting at\
    \ /tmp/tmpk1v77r2r.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen.add(i)\n  \
    \      end\n    end\n    return unique\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| c |>\nThis does not answer the question. `unique` does not sort the array,\
    \ it just removes duplicates.\n<|/ c |>\n<| c |>\nI believe this does answer the\
    \ question. `unique` removes duplicates, while `sort` sorts the array. `sort`\
    \ also returns a sorted array. `unique` does not return sorted array, but a sorted\
    \ unique array.\n<|/ c |>\n<| c |>\nThis does not answer the question. `unique`\
    \ does not sort the array, it just removes duplicates.\n<|/ c |>\n<| c |>\nI believe\
    \ this does answer the question. `unique` removes duplicates, while `sort` sorts\
    \ the array. `sort` also returns a sorted array. `unique` does not return sorted\
    \ array, but a sorted unique array.\n<|/ c |>\n<| a dscore=4 |>\nThe most efficient\
    \ way is to use Sets:\n<code>\njulia> using Sets\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7vhf7jrj.jl:16\nin expression starting at\
    \ /tmp/tmp7vhf7jrj.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      push!(unique, x)\n        end\n    end\n    return unique(unique(unique))\n\
    end\nunique(a)\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: a not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq9vzfpbt.jl:14\nin expression starting at /tmp/tmpq9vzfpbt.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen.add(i)\n  \
    \      end\n    end\n    return unique\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a dscore=2 |>\n<code>\njulia> using Statistics\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_uowtaq7.jl:16\nin expression starting at\
    \ /tmp/tmp_uowtaq7.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for x in l\n        if\
    \ !seen.add(x)\n            push!(unique, x)\n        end\n    end\n    return\
    \ unique\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6gvflzr0.jl:15\nin expression starting at\
    \ /tmp/tmp6gvflzr0.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        unique.add(i)\n    end\n    return\
    \ unique\nend\n</code>\n<|/ a tags=julia,set |>\n<| c |>\nThis doesn't work for\
    \ me. `julia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\nERROR: MethodError: no method\
    \ matching length(::Set{Int64})`\n<|/ c |>\n<| c |>\nSorry, I forgot to mention\
    \ that this was a Julia 1.0 solution. Julia 1.0 doesn't support the Set data structure.\
    \ I've updated my answer to include a solution for Julia 1.0.\n<|/ c |>\n<| c\
    \ |>\nThanks for your answer. I've tried your solution and it works. But I still\
    \ don't understand why my code doesn't work. Could you please explain to me why\
    \ my code doesn't work?\n<|/ c |>\n<| c |>\nThe reason your code doesn't work\
    \ is that `Set` doesn't have a `length` method. `Set` has a `length` function,\
    \ which returns the number of elements in the set. `Set` also has a `add` function,\
    \ which adds an element to the set. `Set` also has a `remove` function, which\
    \ removes an element from the set. `Set` also has a `contains` function, which\
    \ checks whether an element is in the set. `Set` also has a `union` function,\
    \ which merges two sets. `Set` also has a `intersection` function, which returns\
    \ the intersection of two sets. `Set` also has a `difference` function, which\
    \ returns the difference of two sets. `Set` also has a `issubset` function, which\
    \ checks whether one set is a subset of another.\n<|/ c |>\n<| c |>\n`Set` also\
    \ has a `issuperset` function, which checks whether one set is a superset of another.\n\
    <|/ c |>\n<| a dscore=3 |>\nIn Julia 1.0 you can use the following code:\n<code>\n\
    julia> using Sets\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvny7wu67.jl:12\nin expression starting at\
    \ /tmp/tmpvny7wu67.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptv1bajec.jl:14\nin expression starting at\
    \ /tmp/tmptv1bajec.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    return unique(sort(l))\nend\nunique(l::Vector{Int64})::Vector{Int64}\n  \
    \  return unique(sort(l))\nend\nunique(l::Vector{Int64})::Vector{Int64}\n    return\
    \ unique(sort(l))\nend\nunique(l::Vector{Int64})::Vector{Int64}\n    return unique(sort(l))\n\
    end\nunique(l::Vector{Int64})::Vector{Int64}\n    return unique(sort(l))\nend\n\
    unique(l::Vector{Int64})::Vector{Int64}\n    return unique(sort(l))\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    return unique(sort(l))\nend\nunique(l::Vector{Int64})::Vector{Int64}\n  \
    \  return unique(sort(l))\nend\nunique(l::Vector{Int64})::Vector{Int64}\n    return\
    \ unique(sort(l))\nend\nunique(l::Vector{Int64})::Vector{Int64}\n    return unique(sort(l))\n\
    end\nunique(l::Vector{Int64})::Vector{Int64}\n    return unique(sort(l))\nend\n\
    unique(l::Vector{Int64})::Vector{Int64}\n    return unique(sort(l))\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    return unique(sort(l))\nend\nunique(l::Vector{Int64})::Vector{Int64}\n  \
    \  return unique(sort(l))\nend\nunique(l::Vector{Int64})::Vector{Int64}\n    return\
    \ unique(sort(l))\nend\nunique(l::Vector{Int64})::Vector{Int64}\n    return unique(sort(l))\n\
    end\nunique(l::Vector{Int64})::Vector{Int64}\n    return unique(sort(l))\nend\n\
    unique(l::Vector{Int64})::Vector{Int64}\n    return unique(sort(l))\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    return unique(sort(l))\nend\nunique(l::Vector{Int64})::Vector{Int64}\n  \
    \  return unique(sort(l))\nend\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: l not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9a7jpwe4.jl:14\nin expression starting at /tmp/tmp9a7jpwe4.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nI like using Set() for this purpose:\n<code>\n\
    julia> using Sets\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3vjsv68j.jl:14\nin expression starting at\
    \ /tmp/tmp3vjsv68j.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      push!(unique, x)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nThis doesn't work for me. `unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])` returns `[5, 3, 9, 0, 123]`\n<|/ c |>\n<| c |>\nIt\
    \ works on my computer. Which Julia version are you using?\n<|/ c |>\n<| c |>\n\
    I'm using Julia 1.5.1\n<|/ c |>\n<| c |>\nI tested on 1.5.1 too. Maybe the problem\
    \ comes from your environment. Can you try the code I posted in the answer?\n\
    <|/ c |>\n<| c |>\nI tested on 1.5.1 too. Maybe the problem comes from your environment.\
    \ Can you try the code I posted in the answer?\n<|/ c |>\n<| a tags=julia,arrays\
    \ |>\nThe solution by is correct, but I wanted to add some explanation as to why\
    \ it works.\nThe reason why it works is because Sets are implemented as hash tables.\
    \ In Julia, a set is implemented as a hash table. Hash tables are implemented\
    \ as hash tables. In Julia, a set is implemented as a hash table. Hash tables\
    \ are implemented as hash tables. In Julia, a set is implemented as a hash table.\
    \ Hash tables are implemented as hash tables. In Julia, a set is implemented as\
    \ a hash table. Hash tables are implemented as hash tables.\nIn Julia, a set is\
    \ implemented as a hash table. Hash tables are implemented as hash tables. In\
    \ Julia, a set is implemented as a hash table. Hash tables are implemented as\
    \ hash tables. In Julia, a set is implemented as a hash table. Hash tables are\
    \ implemented as hash tables.\nIn Julia, a set is implemented as a hash table.\
    \ Hash tables are implemented as hash tables. In Julia, a set is implemented as\
    \ a hash table. Hash tables are implemented as hash tables. In Julia, a set is\
    \ implemented as a hash table. Hash tables are implemented as hash tables.\nIn\
    \ Julia, a set is implemented as a hash table. Hash tables are implemented as\
    \ hash tables. In Julia, a set is implemented as a hash table. Hash tables are\
    \ implemented as hash tables. In Julia, a set is implemented as a hash table.\
    \ Hash tables are implemented as hash tables.\nIn Julia, a \nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz3oggufh.jl:14\nin expression starting at\
    \ /tmp/tmpz3oggufh.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_2e5_d_d.jl:14\nin expression starting at\
    \ /tmp/tmp_2e5_d_d.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work for me. `unique([5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123])` returns `[5, 3, 9, 0, 123]`.\n<|/ c |>\n<| c |>\nI tested it on Julia\
    \ 0.6.2 and it works. What version are you using?\n<|/ c |>\n<| c |>\nI'm using\
    \ Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it on 0.6.2 too. Works fine. Are you\
    \ sure you copied the code correctly? I tested it on 0.6.2 too.\n<|/ c |>\n<|\
    \ c |>\nYes, I copied the code correctly. I'm running Julia 0.6.2 on OS X. Maybe\
    \ it's an OS X issue?\n<|/ c |>\n<| a tags=julia,unique,arrays |>\nThe Julia standard\
    \ library has this functionality built in:\n<code>\njulia> unique(vec)\n5-element\
    \ Array{Int64,1}:\n 0\n 1\n 2\n 3\n 4\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ doesn't work for me. `unique(vec)` returns `[5, 3, 9, 0, 123]`.\n<|/ c |>\n\
    <| c |>\nIt works for me on Julia 0.6.2 on OS X. Are you sure you copied the code\
    \ correctly? I tested it on 0.6.2 too.\n<|/ c |>\n<| c |>\nYes, I copied the code\
    \ correctly. I'm running Julia 0.6.2 on OS X. Maybe it's an OS X issue?\n<|/ c\
    \ |>\n<| c |>\nI tested it on 0.6.2 too. Works fine. Are you sure you copied the\
    \ code correctly? I tested it on 0.6.2 too.\n<|/ c |>\n<| c |>\nYes, I copied\
    \ the code correctly. I'm running Julia 0.6.2 on OS X. Maybe it's an OS X issue?\n\
    <|/ c |>\n<| a dscore=4 |>\nThe Julia standard library has this functionality\
    \ built in:\n<code>\njulia> unique(vec)\n5-element Array{Int64,1}:\n 0\n 1\n 2\n\
    \ 3\n 4\n</code>\n<|/ a tags=julia,unique,arrays \nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqktsuxa8.jl:14\nin expression starting at\
    \ /tmp/tmpqktsuxa8.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for x in l \n        if !seen.add(x)\
    \ \n            unique.add(x)\n        end\n    end\n    return unique\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmph4apsvy6.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmph4apsvy6.jl:20\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  type Set has no field add\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] unique(l::Vector{Int64})\n     @ Main /tmp/tmph4apsvy6.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph4apsvy6.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph4apsvy6.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     1      1\n"
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a |>\n<| a dscore=2 |>\nI wrote a function to do that in Julia 1.5.\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo2ado62l.jl:14\nin expression starting at\
    \ /tmp/tmpo2ado62l.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nThis doesn't work if you have a vector of\
    \ strings. `unique([\"a\", \"a\", \"b\", \"a\", \"c\"])` returns `[\"a\", \"b\"\
    , \"c\"]`\n<|/ c |>\n<| c |>\nI fixed it by changing the `if` statement to `if\
    \ !haskey(unique, i)`\n<|/ c |>\n<| c |>\nThis doesn't work if you have a vector\
    \ of strings. `unique([\"a\", \"a\", \"b\", \"a\", \"c\"])` returns `[\"a\", \"\
    b\", \"c\"]`\n<|/ c |>\n<| a dscore=4 |>\nIn Julia 1.5 you can use the function\
    \ unique:\n<code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n\
    \ 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\nThis\
    \ doesn't work if you have a vector of strings. `unique([\"a\", \"a\", \"b\",\
    \ \"a\", \"c\"])` returns `[\"a\", \"b\", \"c\"]`\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a vector of strings. `unique([\"a\", \"a\", \"b\", \"a\", \"\
    c\"])` returns `[\"a\", \"b\", \"c\"]`\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ you have a vector of strings. `unique([\"a\", \"a\", \"b\", \"a\", \"c\"])`\
    \ returns `[\"a\", \"b\", \"c\"]`\n<|/ c |>\n<| c |>\nThis doesn't work if you\
    \ have a vector of strings. `unique([\"a\", \"a\", \"b\", \"a\", \"c\"])` returns\
    \ `[\"a\", \"b\", \"c\"]`\n<|/ c |>\n<| c |>\nThis doesn't work if you have a\
    \ vector of strings. `unique([\"a\", \"a\", \"b\", \"a\", \"c\"])` returns `[\"\
    a\", \"b\", \"c\"]`\n<|/ c |>\n<| a dscore=4 |>\nIn Julia 1.5 you can use the\
    \ function unique:\n<code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element\
    \ Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a tags=julia,arrays |>\nIn Julia 1.5 you can use the function unique:\n\
    <code>\njulia> unique([5, 3, 5, 2, 3, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp18giswfi.jl:14\nin expression starting at\
    \ /tmp/tmp18giswfi.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for x in l\n        if\
    \ !seen.add(x)\n            push!(unique, x)\n        end\n    end\n    return\
    \ unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1h_yvzr6.jl:15\nin expression starting at\
    \ /tmp/tmp1h_yvzr6.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for x in l\n        if\
    \ !haskey(seen, x)\n            push!(unique, x)\n            seen[x] = true\n\
    \        end\n    end\n    return unique\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have a vector of strings. I added a solution\
    \ that works for both cases.\n<|/ c |>\n<| a tags=julia,arrays |>\n<code>\njulia>\
    \ using Statistics\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcupd4anr.jl:16\nin expression starting at\
    \ /tmp/tmpcupd4anr.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ = unique(l).\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe `unique` function you\
    \ wrote is wrong. `unique` returns a `Set`, not a `Vector`. Also, `unique` doesn't\
    \ sort the vector.\n<|/ c |>\n<| c |>\nThanks for pointing out the mistakes. I\
    \ fixed the code accordingly.\n<|/ c |>\n<| a tags=julia,unique,sorting |>\nA\
    \ simple and efficient solution using Julia's built-in Sets:\n<code>\njulia> s\
    \ = Set([5,3,5,2,3,3,9,0,123])\nSet{Int64}([5, 3, 9, 123, 2])\nusing Test\n\n\
    @testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbw20l2w7.jl:16\nin expression starting at\
    \ /tmp/tmpbw20l2w7.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})\
    \ = unique(l).sorted()\nunique(l::Vector{Float64}) = unique(l).sorted()\nunique(l::Vector{Complex{Float64}})\
    \ = unique(l).sorted()\nunique(l::Vector{Any}) = unique(l).sorted()\nunique(l::Vector{Union{Nothing,\
    \ Int64}}) = unique(l).sorted()\nunique(l::Vector{Union{Nothing, Float64}}) =\
    \ unique(l).sorted()\nunique(l::Vector{Union{Nothing, Complex{Float64}}}) = unique(l).sorted()\n\
    unique(l::Vector{Union{Nothing, Any}}) = unique(l).sorted()\nunique(l::Vector{Union{Nothing,\
    \ Union{Nothing, Int64}}}) = unique(l).sorted()\nunique(l::Vector{Union{Nothing,\
    \ Union{Nothing, Float64}}}) = unique(l).sorted()\nunique(l::Vector{Union{Nothing,\
    \ Union{Nothing, Complex{Float64}}}}) =  unique(l).sorted()\nunique(l::Vector{Union{Nothing,\
    \ Union{Nothing, Any}}}) = unique(l).sorted()\nunique(l::Vector{Union{Nothing,\
    \ Union{Nothing, Union{Nothing, Int64}}}}) =  unique(l).sorted()\nunique(l::Vector{Union{Nothing,\
    \ Union{Nothing, Union{Nothing, Float64}}}}) =  unique(l).sorted()\nunique(l::Vector{Union{Nothing,\
    \ Union{Nothing, Union{Nothing, Complex{Float64}}}}}) = unique(l).sorted()\nunique(l::Vector{Union{Nothing,\
    \ Union{Nothing, Union{Nothing, Any}}}}) =  unique(l).sorted()\nunique(l::Vector{Union{Nothing,\
    \ Union{Nothing, Union{Nothing, Union{Nothing, Int64}}}}}) = unique(l).sorted()\n\
    unique(l::Vector{Union{Nothing, Union{Nothing, Union{Nothing, Union{Nothing, Float64}}}}})\
    \ = unique(l).sorted()\nunique(l::Vector{Union{Nothing, Union{Nothing, Union{Nothing,\
    \ Union{Nothing, Complex{Float64}}}}}}) =  unique(l).sorted()\nunique(l::Vector{Union{Nothing,\
    \ Union{Nothing, Union{Nothing, Union{Nothing, Any}}\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or } in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe8txa_xg.jl:34\nin expression starting at\
    \ /tmp/tmpe8txa_xg.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like your answer, but I think it would be more efficient\
    \ to just use `Set` instead of `Dict`\n<|/ c |>\n<| c |>\nI agree with you, `Set`\
    \ would be more efficient.\n<|/ c |>\n<| a tags=julia,arrays |>\nI like your answer,\
    \ but I think it would be more efficient to just use Set instead of Dict\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe53muqoz.jl:14\nin expression starting at\
    \ /tmp/tmpe53muqoz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(unique(l))\n    return unique\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpagvgsenu.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpagvgsenu.jl:14\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  UndefVarError: unique not defined\n  Stacktrace:\n   [1] unique(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpagvgsenu.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpagvgsenu.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpagvgsenu.jl:13\nTest Summary:\
    \ | Error  Total\ntest set      |     1      1\n"
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    for x in l\n        if !haskey(unique, x)\n\
    \            push!(unique, x)\n        end\n    end\n    unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnfdi16d4.jl:14\nin expression starting at\
    \ /tmp/tmpnfdi16d4.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <text>\nThe function unique returns a sorted unique vector of the type Vector{Int64}\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp43sxd1_y.jl:14\nin expression starting at\
    \ /tmp/tmp43sxd1_y.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !unique.contains(x)\n     \
    \       unique.add(x)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})\
    \ = unique(l).sorted()\nunique(l::Vector{Float64}) = unique(l).sorted()\nunique(l::Vector{String})\
    \ = unique(l).sorted()\nunique(l::Vector{Any}) = unique(l).sorted()\nunique(l::Vector{Any})\
    \ = unique(l).sorted()\nunique(l::Vector{Any}) = unique(l).sorted()\nunique(l::Vector{Any})\
    \ = unique(l).sorted()\nunique(l::Vector{Any}) = unique(l).sorted()\nunique(l::Vector{Any})\
    \ = unique(l).sorted()\nunique(l::Vector{Any}) = unique(l).sorted()\nunique(l::Vector{Any})\
    \ = unique(l).sorted()\nunique(l::Vector{Any}) = unique(l).sorted()\nunique(l::Vector{Any})\
    \ = unique(l).sorted()\nunique(l::Vector{Any}) = unique(l).sorted()\nunique(l::Vector{Any})\
    \ = unique(l).sorted()\nunique(l::Vector{Any}) = unique(l).sorted()\nunique(l::Vector{Any})\
    \ = unique(l).sorted()\nunique(l::Vector{Any}) = unique(l).sorted()\nunique(l::Vector{Any})\
    \ = unique(l).sorted()\nunique(l::Vector{Any}) = unique(l).sorted()\nunique(l::Vector{Any})\
    \ = unique(l).sorted()\nunique(l::Vector{Any}) = unique(l).sorted()\nunique(l::Vector{Any})\
    \ = unique(l).sorted()\nunique(l::Vector{Any}) = unique(l).sorted()\nunique(l::Vector{Any})\
    \ = unique(l).sorted()\nunique(l::Vector{Any}) = unique(l).sorted()\nunique(l::Vector{Any})\
    \ = unique(l).sorted()\nunique(l::Vector{Any}) = unique(l).sorted()\nunique(l::Vector{Any})\
    \ = unique(l).sorted()\nunique(l::Vector{Any}) = unique(l).sorted()\nunique(l::Vector{Any})\
    \ = unique(l).sorted()\nunique(l::Vector{Any}) = unique(l).sorted()\nunique(l::Vector{Any})\
    \ = unique(l).sorted()\nunique(l::Vector{Any}) = unique(l).sorted()\nunique(l::\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph0nyomj2.jl:51\nin expression starting at\
    \ /tmp/tmph0nyomj2.jl:51\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptv1bajec.jl:14\nin expression starting at\
    \ /tmp/tmptv1bajec.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nI wrote a package that does this in Julia\
    \ 1.0:\nhttps://github.com/jrockway/UniqueArrays.jl\n<code>\nusing UniqueArrays\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9sw00u1a.jl:14\nin expression starting at\
    \ /tmp/tmp9sw00u1a.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(l))\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyvcz2_4j.jl:16\nin expression starting at /tmp/tmpyvcz2_4j.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,set,arrays |>\n<| a tags=julia,set,arrays |>\nA more Julian way\
    \ would be to use Sets:\n<code>\njulia> using Sets\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ps2oyjh.jl:14\nin expression starting at\
    \ /tmp/tmp1ps2oyjh.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen[i] = true\n\
    \        end\n    end\n    return unique\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThis is not the fastest solution, since it requires O(n) memory and O(n^2)\
    \ time.\n<|/ c |>\n<| c |>\nYes, I agree. My solution is more of a proof of concept,\
    \ since I didn't want to reinvent the wheel. I'll update my answer with your solution.\n\
    <|/ c |>\n<| c |>\nI updated my answer with a solution that is O(n) memory and\
    \ O(n) time.\n<|/ c |>\n<| c |>\nI updated my answer with a solution that is O(n)\
    \ memory and O(n) time.\n<|/ c |>\n<| a dscore=2 |>\nThe first thing that comes\
    \ to mind is to use an associative array (aka hash table). \n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qevnyb1.jl:16\nin expression starting at\
    \ /tmp/tmp5qevnyb1.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=julia,sorting |>\nThe Julia standard library includes\
    \ a function called unique that does exactly what you want:\n<code>\njulia> unique([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n\
    \ 123\n</code>\n<|/ a dscore=2 |>\n<| a |>\nI like using Sets to remove duplicates:\n\
    <code>\njulia> Set([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Set{Int64}:\n 0\n\
    \ 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a tags=julia,sorting dscore=2 |>\n<| a dscore=1\
    \ |>\nI like using Sets to remove duplicates:\n<code>\njulia> Set([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n5-element Set{Int64}:\n 0\n 2\n 3\n 5\n 9\n 123\n</code>\n\
    <|/ a tags=julia,sorting |>\n<| a dscore=1 |>\nI like using Sets to remove duplicates:\n\
    <code>\njulia> Set([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Set{Int64}:\n 0\n\
    \ 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a tags=julia,sorting |>\n<| a tags=julia,sorting\
    \ |>\n<code>\njulia> using Statistics\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9s5ruqzf.jl:14\nin expression starting at\
    \ /tmp/tmp9s5ruqzf.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen[i] = true\n\
    \        end\n    end\n    return unique\nend\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a vector of strings and returns a vector of unique strings.\
    \ Test it by passing in a vector of strings that you know should contain unique\
    \ strings and a vector of strings that should contain unique strings. What do\
    \ you observe?\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc3m723bk.jl:16\nin expression starting at\
    \ /tmp/tmpc3m723bk.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptv1bajec.jl:14\nin expression starting at\
    \ /tmp/tmptv1bajec.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        push!(unique, i)\n    end\n  \
    \  return unique\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\nThis does\
    \ not answer the question. `unique` does not remove duplicates.\n<|/ c |>\n<|\
    \ c |>\nIt does. `unique` removes duplicates.\n<|/ c |>\n<| c |>\n`unique` does\
    \ not remove duplicates. `unique` removes duplicates. `unique` removes duplicates.\
    \ `unique` removes duplicates. `unique` removes duplicates. `unique` removes duplicates.\
    \ `unique` removes duplicates. `unique` removes duplicates. `unique` removes duplicates.\
    \ `unique` removes duplicates. `unique` removes duplicates. `unique` removes duplicates.\
    \ `unique` removes duplicates. `unique` removes duplicates. `unique` removes duplicates.\
    \ `unique` removes duplicates. `unique` removes duplicates. `unique` removes duplicates.\
    \ `unique` removes duplicates. `unique` removes duplicates. `unique` removes duplicates.\
    \ `unique` removes duplicates. `unique` removes duplicates. `unique` removes duplicates.\
    \ `unique` removes duplicates. `unique` removes duplicates. `unique` removes duplicates.\
    \ `unique` removes duplicates. `unique` removes duplicates. `unique` removes duplicates.\
    \ `unique` removes duplicates. `unique` removes duplicates. `unique` removes duplicates.\
    \ `unique` removes duplicates. `unique` removes duplicates. `unique` removes duplicates.\
    \ `unique` removes duplicates. `unique` removes duplicates. `unique` removes duplicates.\
    \ `unique` removes duplicates. `unique` removes duplicates. `unique` removes duplicates.\
    \ `unique` removes duplicates. `unique` removes duplicates. `unique` removes duplicates.\
    \ `unique` removes duplicates. `unique` removes duplicates. `unique` removes duplicates.\
    \ `unique` removes duplicates. `unique` removes duplicates. `unique` removes duplicates.\
    \ `unique` removes duplicates. `unique` removes duplicates. `unique` removes duplicates.\
    \ `unique` removes duplicates. `unique` removes duplicates. `unique` removes duplicates.\
    \ `unique` removes duplicates. `unique` removes duplicates. `unique` removes duplicates.\
    \ `unique` removes duplicates. \nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm28966ui.jl:12\nin expression starting at\
    \ /tmp/tmpm28966ui.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      push!(unique, x)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvs2e4467.jl:14\nin expression starting at\
    \ /tmp/tmpvs2e4467.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      push!(unique, x)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <text>\nThe function unique returns a sorted unique vector of the elements in\
    \ the input vector.\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp64i6gas6.jl:14\nin expression starting at\
    \ /tmp/tmp64i6gas6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    unique.push!(l)\n    unique\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpn1w_qk5s.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpn1w_qk5s.jl:15\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  type Array has no field push!\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] unique(l::Vector{Int64})\n     @ Main /tmp/tmpn1w_qk5s.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpn1w_qk5s.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpn1w_qk5s.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     1      1\n"
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_2e5_d_d.jl:14\nin expression starting at\
    \ /tmp/tmp_2e5_d_d.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for x in l\n        if\
    \ !haskey(seen, x)\n            push!(unique, x)\n            seen[x] = true\n\
    \        end\n    end\n    return unique\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0clu_7zh.jl:16\nin expression starting at\
    \ /tmp/tmp0clu_7zh.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for x in l\n        if\
    \ !seen.add(x)\n            push!(unique, x)\n        end\n    end\n    return\
    \ unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1h_yvzr6.jl:15\nin expression starting at\
    \ /tmp/tmp1h_yvzr6.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThis doesn't work for me. `unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])` returns `[5, 3, 9, 123]`\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with Julia 0.6.2\n<|/ c |>\n<| c |>\nThis doesn't work for me either.\
    \ `unique([5, 3, 5, 2, 3, 3, 9, 0, 123])` returns `[5, 3, 9, 123]`\n<|/ c |>\n\
    <| c |>\nI added a version that works with Julia 0.6.2\n<|/ c |>\n<| a tags=julia\
    \ |>\n<code>\njulia> using Statistics\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxoegzmup.jl:14\nin expression starting at\
    \ /tmp/tmpxoegzmup.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for i in l\n        if !haskey(seen,\
    \ i)\n            push!(unique, i)\n            seen[i] = true\n        end\n\
    \    end\n    return unique\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpt6z3rdjj.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpt6z3rdjj.jl:21\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  MethodError: no method matching haskey(::Set{Any}, ::Int64)\n  Closest candidates\
    \ are:\n    haskey(!Matched::Base.ImmutableDict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:789\n\
    \    haskey(!Matched::WeakKeyDict{K}, ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/weakkeydict.jl:179\n\
    \    haskey(!Matched::IOContext, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/show.jl:339\n\
    \    ...\n  Stacktrace:\n   [1] unique(l::Vector{Int64})\n     @ Main /tmp/tmpt6z3rdjj.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt6z3rdjj.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt6z3rdjj.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     1      1\n"
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique(unique(l)...)\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8recccz7.jl:14\nin expression starting at\
    \ /tmp/tmp8recccz7.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpky171t1w.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpky171t1w.jl:19\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  MethodError: no method matching haskey(::Set{Any}, ::Int64)\n  Closest candidates\
    \ are:\n    haskey(!Matched::Base.ImmutableDict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:789\n\
    \    haskey(!Matched::WeakKeyDict{K}, ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/weakkeydict.jl:179\n\
    \    haskey(!Matched::IOContext, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/show.jl:339\n\
    \    ...\n  Stacktrace:\n   [1] unique(l::Vector{Int64})\n     @ Main /tmp/tmpky171t1w.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpky171t1w.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpky171t1w.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     1      1\n"
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(unique(l))\n    return unique\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd9dum5yj.jl:9\nin expression starting at /tmp/tmpd9dum5yj.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for x in l\n        if\
    \ !seen.add(x)\n            push!(unique, x)\n        end\n    end\n    return\
    \ unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1h_yvzr6.jl:15\nin expression starting at\
    \ /tmp/tmp1h_yvzr6.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nThe `Set` type was introduced in Julia v0.6.0,\
    \ so this won't work if you're using an older version.\n<|/ c |>\n<| c |>\nI believe\
    \ this would work if you replaced `Set` with `Dict`\n<|/ c |>\n<| c |>\nYes, `Dict`\
    \ works, but `Set` does not. `Set` does not allow duplicate elements. `Dict` does.\n\
    <|/ c |>\n<| a |>\nIn Julia v0.6.0 you can use Sets:\n<code>\njulia> Set([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\nSet{Int64}([5, 3, 9, 0, 123])\n</code>\n<|/ a dscore=5\
    \ tags=julia,arrays |>\n<| c |>\nThis should be the accepted answer. `Set` was\
    \ introduced in v0.6.0\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ `Set` was introduced in v0.6.0\n<|/ c |>\n<| a |>\nIn Julia v0.6.0 you can use\
    \ Sets:\n<code>\njulia> Set([5, 3, 5, 2, 3, 3, 9, 0, 123])\nSet{Int64}([5, 3,\
    \ 9, 0, 123])\n</code>\n<|/ a dscore=5 tags=julia,arrays |>\n<| c |>\nThis should\
    \ be the accepted answer. `Set` was introduced in v0.6.0\n<|/ c |>\n<| a dscore=5\
    \ |>\nIn Julia v0.6.0 you can use Sets:\n<code>\njulia> Set([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123])\nSet{Int64}([5, 3, 9, 0, 123])\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a tags=julia,arrays |>\nIn Julia v0.6.0 you can use Sets:\n<code>\njulia>\
    \ Set([5, 3, 5, 2, 3, 3, 9, 0, 123])\nSet{Int64}([5, 3, 9, 0, 123])\n</code>\n\
    <|/ a dscore=4 |>\n<| a tags=julia,arrays |>\nIn Julia v0.6.0 you can use Sets:\n\
    <code>\njulia> Set([5, 3, 5, 2, 3, 3, 9, 0, 123])\nSet{Int64}([5, 3, 9, 0, 123])\n\
    </code>\n<|/ a \nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4f8_3pks.jl:14\nin expression starting at\
    \ /tmp/tmp4f8_3pks.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(l).sort()\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n  \
    \  unique(l).sort()\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sort()\n\
    end\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sort()\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(l).sort()\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n  \
    \  unique(l).sort()\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sort()\n\
    end\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sort()\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(l).sort()\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n  \
    \  unique(l).sort()\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sort()\n\
    end\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sort()\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(l).sort()\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n  \
    \  unique(l).sort()\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sort()\n\
    end\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sort()\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(l).sort()\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n  \
    \  unique(l).sort()\nend\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(l).sort()\n\
    end\nunique(l::Vector\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t\
    @test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcrhrldah.jl:16\nin expression starting at /tmp/tmpcrhrldah.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\nI wrote a Julia package called UniqueArrays.jl that\
    \ does exactly this. It works by first sorting the array and then removing duplicates.\
    \ It's a drop-in replacement for unique.\n<code>\njulia> using UniqueArrays\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbmcrljx2.jl:14\nin expression starting at\
    \ /tmp/tmpbmcrljx2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        push!(unique, i)\n    end\n  \
    \  return unique\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\nThis is not\
    \ the most efficient solution, since it creates a new set for every element in\
    \ the vector. Also, it does not preserve the order of the elements in the vector.\n\
    <|/ c |>\n<| c |>\nYes, I agree with you. But the question was about sorting and\
    \ unique. Also I believe that `unique` preserves the order of the elements in\
    \ the vector.\n<|/ c |>\n<| c |>\nYes, but `unique` does not preserve the order\
    \ of the elements in the vector. `unique` will sort the elements in the vector\
    \ and remove duplicates. But it does this in-place.\n<|/ c |>\n<| c |>\nYes, you\
    \ are right. I missed that point. Thanks for pointing out.\n<|/ c |>\n<| a tags=julia,arrays\
    \ |>\n<code>\njulia> using Statistics\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1wj0g1de.jl:12\nin expression starting at\
    \ /tmp/tmp1wj0g1de.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique(unique(l)...)\n\
    end\n</code>\n<|/ a tags=julia,set |>\n<| c |>\nThis doesn't seem to work if you\
    \ have a vector of strings. `unique([\"a\", \"b\", \"c\", \"a\", \"b\"])` returns\
    \ `[\"a\", \"b\", \"c\"]` instead of `[\"a\", \"b\"]`.\n<|/ c |>\n<| c |>\nI believe\
    \ this is because `Set` does not preserve order. `Set` does not preserve order\
    \ in Julia 1.5.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a vector of\
    \ strings. `unique([\"a\", \"b\", \"c\", \"a\", \"b\"])` returns `[\"a\", \"b\"\
    , \"c\"]` instead of `[\"a\", \"b\"]`.\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ you have a vector of strings. `unique([\"a\", \"b\", \"c\", \"a\", \"b\"])`\
    \ returns `[\"a\", \"b\", \"c\"]` instead of `[\"a\", \"b\"]`.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if you have a vector of strings. `unique([\"a\", \"b\"\
    , \"c\", \"a\", \"b\"])` returns `[\"a\", \"b\", \"c\"]` instead of `[\"a\", \"\
    b\"]`.\n<|/ c |>\n<| a |>\nI came up with this solution:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4rjyu787.jl:14\nin expression starting at\
    \ /tmp/tmp4rjyu787.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        push!(unique, i)\n    end\n  \
    \  return unique\nend\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t\
    @test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp45wzufsv.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp45wzufsv.jl:17\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  MethodError: Cannot `convert` an object of type Set{Any} to an object of type\
    \ Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique(l::Vector{Int64})\n     @ Main /tmp/tmp45wzufsv.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp45wzufsv.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp45wzufsv.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     1      1\n"
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      push!(unique, x)\n        end\n    end\n    return unique\nend\nunique\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmplv154v83.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmplv154v83.jl:20\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  MethodError: no method matching haskey(::Set{Any}, ::Int64)\n  Closest candidates\
    \ are:\n    haskey(!Matched::Base.ImmutableDict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:789\n\
    \    haskey(!Matched::WeakKeyDict{K}, ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/weakkeydict.jl:179\n\
    \    haskey(!Matched::IOContext, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/show.jl:339\n\
    \    ...\n  Stacktrace:\n   [1] unique(l::Vector{Int64})\n     @ Main /tmp/tmplv154v83.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplv154v83.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplv154v83.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     1      1\n"
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen[i] = true\n\
    \        end\n    end\n    return unique\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2oz0bg8n.jl:16\nin expression starting at\
    \ /tmp/tmp2oz0bg8n.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        push!(unique, x)\n    end\n  \
    \  unique\nend\n</cell>\n<text>\nExercise 3: Write a function that returns the\
    \ unique elements in a vector\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp62vlg51h.jl:12\nin expression starting at\
    \ /tmp/tmp62vlg51h.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    unique.push!(l)\n    unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeptefvbz.jl:10\nin expression starting at\
    \ /tmp/tmpeptefvbz.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Vector{Int64}()\n    unique.push!(l)\n    while !unique.isEmpty\
    \ \n        unique.push!(unique[unique.end-1])\n    end\n    return unique\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwlbal2_b.jl:13\nin expression starting at\
    \ /tmp/tmpwlbal2_b.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      push!(unique, x)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThanks, this was very helpful. I'm still trying\
    \ to figure out how to get it to work with a vector of strings. I tried to change\
    \ the type to Vector{String}, but that didn't work. Do you know how I could get\
    \ it to work with a vector of strings?\n<|/ c |>\n<| c |>\nI added a solution\
    \ for strings. Please let me know if it works for you.\n<|/ c |>\n<| c |>\nThanks,\
    \ this works great. I'm still trying to figure out how to get it to work with\
    \ a vector of strings. I tried to change the type to Vector{String}, but that\
    \ didn't work. Do you know how I could get it to work with a vector of strings?\n\
    <|/ c |>\n<| c |>\nI added a solution for strings. Please let me know if it works\
    \ for you.\n<|/ c |>\n<| a |>\nYou can use the function unique.\n<code>\njulia>\
    \ unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n0-element Array{Int64,1}\n</code>\n<|/\
    \ a tags=julia dscore=3 |>\n<| c |>\nThanks, this was very helpful. I'm still\
    \ trying to figure out how to get it to work with a vector of strings. I tried\
    \ to change the type to Vector{String}, but that didn't work. Do you know how\
    \ I could get it to work with a vector of strings?\n<|/ c |>\n<| c |>\nI added\
    \ a solution for strings. Please let me know if it works for you.\n<|/ c |>\n\
    <| a dscore=3 |>\nIf you want a more general solution that will work with any\
    \ type that implements hash and eq, you can use Base.unique:\n<code>\njulia> Base.unique([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n0-element Array{Int64,1}\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThanks, this was very helpful. I'm still trying to figure out how\
    \ to get it to work with a vector of strings. I tried to change the type to Vector{String},\
    \ but that didn't work. Do you know how I could get it to work with a vector of\
    \ strings?\n<|/ c |>\n<| c |>\nI added a solution for strings. Please let me know\
    \ if it works for you.\n<|/ c |>\n<| a tags=julia |>\nFor a vector of strings:\n\
    <code>\njulia> unique([\"a\", \"b\", \"a\", \"c\", \"c\", \"c\"])\n4-element Array\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsc00q3l1.jl:14\nin expression starting at\
    \ /tmp/tmpsc00q3l1.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(unique(l))\n    return unique\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd9dum5yj.jl:9\nin expression starting at /tmp/tmpd9dum5yj.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(unique(l))\n    return unique\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpagvgsenu.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpagvgsenu.jl:14\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  UndefVarError: unique not defined\n  Stacktrace:\n   [1] unique(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpagvgsenu.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpagvgsenu.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpagvgsenu.jl:13\nTest Summary:\
    \ | Error  Total\ntest set      |     1      1\n"
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,set |>\n<| c |>\nThis is not the fastest solution. `unique` has\
    \ O(n) complexity and `Set` has O(n^2) complexity. `Set` should be avoided if\
    \ possible.\n<|/ c |>\n<| c |>\nI agree, but I thought that `Set` was the fastest\
    \ solution in Julia 1.5.\n<|/ c |>\n<| c |>\nI agree, `Set` should be avoided\
    \ if possible. `Set` should be avoided if possible. `Set` should be avoided if\
    \ possible. `Set` should be avoided if possible. `Set` should be avoided if possible.\
    \ `Set` should be avoided if possible. `Set` should be avoided if possible. `Set`\
    \ should be avoided if possible. `Set` should be avoided if possible. `Set` should\
    \ be avoided if possible. `Set` should be avoided if possible. `Set` should be\
    \ avoided if possible. `Set` should be avoided if possible. `Set` should be avoided\
    \ if possible. `Set` should be avoided if possible. `Set` should be avoided if\
    \ possible. `Set` should be avoided if possible. `Set` should be avoided if possible.\
    \ `Set` should be avoided if possible. `Set` should be avoided if possible. `Set`\
    \ should be avoided if possible. `Set` should be avoided if possible. `Set` should\
    \ be avoided if possible. `Set` should be avoided if possible. `Set` should be\
    \ avoided if possible. `Set` should be avoided if possible. `Set` should be avoided\
    \ if possible. `Set` should be avoided if possible. `Set` should be avoided if\
    \ possible. `Set` should be avoided if possible. `Set` should be avoided if possible.\
    \ `Set` should be avoided if possible. `Set` should be avoided if possible. `Set`\
    \ should be avoided if possible. `Set` should be avoided if possible. `Set` should\
    \ be avoided if possible. `Set` should be avoided if possible. `Set` should be\
    \ avoided if possible. \nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm9cnp7xx.jl:14\nin expression starting at\
    \ /tmp/tmpm9cnp7xx.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return sorted unique elements in a vector\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_2e5_d_d.jl:14\nin expression starting at\
    \ /tmp/tmp_2e5_d_d.jl:14\n"
  stdout: ''
