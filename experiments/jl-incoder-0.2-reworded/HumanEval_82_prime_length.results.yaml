language: jl
name: HumanEval_82_prime_length
results:
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    for i in string\n        if i == \"a\"\n            prime_length\
    \ = true\n            break\n        else if i == \"b\"\n            prime_length\
    \ = true\n            break\n        else if i == \"c\"\n            prime_length\
    \ = true\n            break\n        else if i == \"d\"\n            prime_length\
    \ = true\n            break\n        else if i == \"e\"\n            prime_length\
    \ = true\n            break\n        else if i == \"f\"\n            prime_length\
    \ = true\n            break\n        else if i == \"g\"\n            prime_length\
    \ = true\n            break\n        else if i == \"h\"\n            prime_length\
    \ = true\n            break\n        else if i == \"i\"\n            prime_length\
    \ = true\n            break\n        else if i == \"j\"\n            prime_length\
    \ = true\n            break\n        else if i == \"k\"\n            prime_length\
    \ = true\n            break\n        else if i == \"l\"\n            prime_length\
    \ = true\n            break\n        else if i == \"m\"\n            prime_length\
    \ = true\n            break\n        else if i == \"n\"\n            prime_length\
    \ = true\n            break\n        else if i == \"o\"\n            prime_length\
    \ = true\n            break\n        else if i == \"p\"\n            prime_length\
    \ = true\n            break\n        else if i == \"q\"\n            prime_length\
    \ = true\n            break\n        else if i == \"r\"\n            prime_length\
    \ = true\n            break\n        else if i == \"s\"\n            prime_length\
    \ = true\n            break\n        else if i == \"t\"\n            prime_length\
    \ = true\n            break\n        else if i == \"u\"\n            prime_length\
    \ = true\n            break\n        else if i == \"v\"\n            prime_length\
    \ = true\n            break\n        else if i == \"w\"\n            prime_length\
    \ = true\n            break\n        else if i == \"x\"\n            prime_length\
    \ = true\n            break\n        else if i == \"y\"\n            prime_length\
    \ = true\n            break\n        else if i == \"z\"\n            prime_length\
    \ = true\n            break\n        else if i == \"A\"\n            prime_length\
    \ = true\n            break\n        else if i == \"B\"\n            prime_length\
    \ = true\n            break\n        else if i == \"C\"\n            prime_length\
    \ = true\n            break\n        else if i == \"D\"\n            prime_length\
    \ = true\n            break\n        else if i == \"E\"\n            prime_length\
    \ = true\n            break\n        else if i == \"F\"\n            prime_length\
    \ = true\n            break\n        else if i == \"G\"\n            prime_length\
    \ = true\n            break\n        else if i == \"H\"\n            prime_length\
    \ = true\n\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu6t_kegc.jl:21\nin expression starting at\
    \ /tmp/tmpu6t_kegc.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n</cell>\n<cell>\nprime_length(\"Hello\")\n</cell>\n\
    <cell>\nprime_length(\"abcdcba\")\n</cell>\n<cell>\nprime_length(\"kittens\")\n\
    </cell>\n<cell>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns true if the string is a palindrome\
    \ or false otherwise\nExamples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\"\
    ) == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz870gyjx.jl:18\nin expression starting at\
    \ /tmp/tmpz870gyjx.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers::Set{Int}\
    \ = (2..math.floor(sqrt(string)))\n    \n    for i in prime_numbers:\n       \
    \ if string % i == 0 \n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.0>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nWrite a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsxtf5wk4.jl:18\nin expression starting at\
    \ /tmp/tmpsxtf5wk4.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers:\n        if string == str(i)+\"\":\n      \
    \      return true\n    return false\n</code>\n<|/ a tags=julia,primes |>\n<|\
    \ a dscore=1 |>\nThe code below is based on a previous answer, but is more efficient\
    \ and more readable:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpigfk4dxi.jl:18\nin expression starting at\
    \ /tmp/tmpigfk4dxi.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = true\n\
    \    \n    for i in string.chars\n        if string.chars.count(i) == 1 && string.chars.count(i)\
    \ == string.chars.count(i-1)\n            prime_length = false\n            break\n\
    \    end\n    \n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite a function\
    \ that takes a string and returns true if the string\n    contains only letters\
    \ or false otherwise\n    Examples\n    >>> letter_length(\"Hello\")\n    true\n\
    \    >>> letter_length(\"abcdcba\")\n    false\n    >>> letter_length(\"kittens\"\
    )\n    false\n    >>> letter_length(\"orange\")\n    false\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\"\
    ) == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf1upcuqk.jl:25\nin expression starting at\
    \ /tmp/tmpf1upcuqk.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n</cell>\n<cell>\nprime_length(\"Hello\")\n</cell>\n\
    <cell>\nprime_length(\"abcdcba\")\n</cell>\n<cell>\nprime_length(\"kittens\")\n\
    </cell>\n<cell>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns true if the string is a palindrome\
    \ or false otherwise\nExamples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"race\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkv19_mt9.jl:18\nin expression starting at\
    \ /tmp/tmpkv19_mt9.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = Set{Int}()\n\
    \    for character in string\n        if character in prime_numbers\n        \
    \    return false\n        else\n            prime_numbers.add(character)\n  \
    \  end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string\n    contains only letters or false\
    \ otherwise\n    Examples\n    >>> is_letter(\"Hello\")\n    true\n    >>> is_letter(\"\
    abcdcba\")\n    false\n    >>> is_letter(\"kittens\")\n    false\n    >>> is_letter(\"\
    orange\")\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptu2hjow1.jl:24\nin expression starting at\
    \ /tmp/tmptu2hjow1.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    if string == \"\" \n        prime_length = true \n    else \n  \
    \      prime_length = false \n        \n        for i in 2..(string.length-1)\
    \ do \n            if string[i] % i == 0 \n                prime_length = false\
    \ \n            end \n        end \n    end \n    \n    return prime_length \n\
    end \n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns true if the string\n    length is a prime number or false otherwise\n\
    \    Examples\n    >>> prime_length(\"Hello\")\n    true\n    >>> prime_length(\"\
    abcdcba\")\n    true\n    >>> prime_length(\"kittens\")\n    true\n    >>> prime_length(\"\
    orange\")\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpemht2q3o.jl:22\nin expression starting at /tmp/tmpemht2q3o.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length = true\n\
    \    \n    for i in string:\n        if i == \"a\" || i == \"e\" || i == \"i\"\
    \ || i == \"o\" || i == \"u\":\n            prime_length = false\n           \
    \ break\n        \n    return prime_length\n</cell>\n<cell>\nprime_length(\"Hello\"\
    )\n</cell>\n<cell>\nprime_length(\"abcdcba\")\n</cell>\n<cell>\nprime_length(\"\
    kittens\")\n</cell>\n<cell>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite\
    \ a function that takes a string and returns true if the string is a palindrome\
    \ or false otherwise\nExamples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecarace\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> \nusing Test\n\n@testset begin\n\ncandidate\
    \ = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5c8xl4zk.jl:18\nin expression starting at\
    \ /tmp/tmp5c8xl4zk.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = prime_numbers()\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string and returns true if the string\n    length is an even number or false\
    \ otherwise\n    Examples\n    >>> even_length(\"Hello\")\n    true\n    >>> even_length(\"\
    abcdcba\")\n    false\n    >>> even_length(\"kittens\")\n    false\n    >>> even_length(\"\
    orange\")\n    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpahslg8iw.jl:18\nin expression starting at\
    \ /tmp/tmpahslg8iw.jl:18\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    if string == \"\"\n        true\n\
    \    else\n        prime_length(string.tail) == true\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpq_dnohj5.jl:25\n  Test threw
    exception\n  Expression: candidate("Hello") == true\n  type String has no field
    tail\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]
    prime_length(string::String)\n     @ Main /tmp/tmpq_dnohj5.jl:17\n   [3] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq_dnohj5.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq_dnohj5.jl:24\ntest set: Error
    During Test at /tmp/tmpq_dnohj5.jl:26\n  Test threw exception\n  Expression: candidate("abcdcba")
    == true\n  type String has no field tail\n  Stacktrace:\n   [1] getproperty\n     @
    ./Base.jl:42 [inlined]\n   [2] prime_length(string::String)\n     @ Main /tmp/tmpq_dnohj5.jl:17\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq_dnohj5.jl:26 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq_dnohj5.jl:24\ntest set: Error
    During Test at /tmp/tmpq_dnohj5.jl:27\n  Test threw exception\n  Expression: candidate("kittens")
    == true\n  type String has no field tail\n  Stacktrace:\n   [1] getproperty\n     @
    ./Base.jl:42 [inlined]\n   [2] prime_length(string::String)\n     @ Main /tmp/tmpq_dnohj5.jl:17\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq_dnohj5.jl:27 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq_dnohj5.jl:24\ntest set: Error
    During Test at /tmp/tmpq_dnohj5.jl:28\n  Test threw exception\n  Expression: candidate("orange'
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = Set{Int}()\n\
    \    \n    for character in string\n        if character in prime_numbers\n  \
    \          return false\n        else\n            prime_numbers.add(character)\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns true if the string is a palindrome or false\
    \ otherwise\nExamples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\"\
    )\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palin\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpajuv1guc.jl:25\nin expression starting at\
    \ /tmp/tmpajuv1guc.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers::Set{Int}\
    \ = (2..math.floor(sqrt(string)))\n    for i in prime_numbers\n        if string\
    \ mod i == 0\n            return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns true if the string contains any\
    \ uppercase letters or false otherwise\nExamples\n>>> contains_uppercase(\"Hello\"\
    )\ntrue\n>>> contains_uppercase(\"HELLO\")\ntrue\n>>> contains_uppercase(\"HELLOWORLD\"\
    )\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HEL\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"i\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxgjw0nsf.jl:17\nin expression starting at /tmp/tmpxgjw0nsf.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    for char in string:\n        if char == \"a\" || char == \"e\" ||\
    \ char == \"i\" || char == \"o\" || char == \"u\" || char == \"y\" \n        prime_length\
    \ = true\n        break\n    \n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns true if the string is a palindrome\
    \ or false otherwise\nExamples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palin\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5mg67j9i.jl:18\nin expression starting at\
    \ /tmp/tmp5mg67j9i.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = true\
    \ \n    \n    prime_length::Bool = false \n    \n    for i in string\n       \
    \ \n        if prime_length::Bool = true \n            \n            if string::Int\
    \ % i::Int == 0\n                \n                prime_length::Bool = false\
    \ \n            \n            else\n                \n                prime_length::Bool\
    \ = true \n        \n        else\n            \n            prime_length::Bool\
    \ = false \n    \n    return prime_length::Bool \nend \n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns true if the string\n    contains\
    \ only letters and false otherwise\n    Examples\n    >>> only_letters(\"Hello\"\
    )\n    true\n    >>> only_letters(\"abcdcba\")\n    false\n    >>> only_letters(\"\
    kittens\")\n    false\n    >>> only_letters(\"orange\")\n    false\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd3g8eq4j.jl:21\nin expression starting at /tmp/tmpd3g8eq4j.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n</code>\n<|/ a tags=haskell,primes |>\n<| c |>\n`prime_length`\
    \ can be written as `prime_length string = any (\\x -> x `mod` string == 0) primes`.\n\
    <|/ c |>\n<| c |>\n`prime_length` can be written as `prime_length string = any\
    \ (\\x -> x `mod` string == 0) primes`.\n<|/ c |>\n<| c |>\n`prime_length` can\
    \ be written as `prime_length string = any (\\x -> x `mod` string == 0) primes`.\n\
    <|/ c |>\n<| a dscore=2 |>\nThe first thing I notice is that your function prime_length\
    \ doesn't take any arguments. So when you call it you get an error. \nThe second\
    \ thing I notice is that your function prime_length doesn't return anything. \n\
    The third thing I notice is that your function prime_length doesn't take any arguments.\
    \ So when you call it you get an error. \nThe fourth thing I notice is that your\
    \ function prime_length doesn't return anything. \nThe fifth thing I notice is\
    \ that your function prime_length doesn't take any arguments. So when you call\
    \ it you get an error. \nThe sixth thing I notice is that your function prime_length\
    \ doesn't return anything. \nThe seventh thing I notice is that your function\
    \ prime_length doesn't take any arguments. So when you call it you get an error.\
    \ \nThe eighth thing I notice is that your function prime_length doesn't return\
    \ anything. \nThe ninth thing I notice is that your function prime_length doesn't\
    \ take any arguments. So when you call it you get an error. \nThe tenth thing\
    \ I notice is that your function prime_length doesn't return anything. \nThe eleventh\
    \ thing I notice is that your function prime_length doesn't take any arguments.\
    \ So when you call it you get an error. \nThe twelfth thing I notice is that your\
    \ function prime_length doesn't return anything. \nThe thirteenth thing I notice\
    \ is that your function prime_length doesn't take any arguments. So when you call\
    \ it you get an error. \nThe fourteenth thing I notice is that your function prime_length\
    \ doesn't return anything. \nThe fifteenth thing I notice is that your function\
    \ prime_length doesn't take any arguments. So when you call it you get an error.\
    \ \nThe sixteenth thing I notice is that \nusing Test\n\n@testset begin\n\ncandidate\
    \ = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7m5tbhkg.jl:18\nin expression starting at\
    \ /tmp/tmp7m5tbhkg.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = true\
    \ \n    \n    for i in string.chars \n        if prime_length::Bool = false \n\
    \            break \n        else \n            if i::Int > 1 \n             \
    \   prime_length::Bool = false \n                break \n            else \n \
    \               if i::Int == 1 \n                    prime_length::Bool = false\
    \ \n                    break \n                else \n                    if\
    \ i::Int % 2 == 0 \n                        prime_length::Bool = false \n    \
    \                    break \n    return prime_length::Bool \nend \n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns true if the\
    \ string length is an even number or false otherwise\nExamples\n>>> is_even(\"\
    Hello\")\ntrue\n>>> is_even(\"abcdcba\")\nfalse\n>>> is_even(\"kittens\")\nfalse\n\
    >>> is_even(\"orange\")\ntrue\n</text>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpac2blf9c.jl:18\nin expression starting at /tmp/tmpac2blf9c.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number = true\n\
    \    \n    for i in string:\n        if i == \"a\" or i == \"b\" or i == \"c\"\
    \ or i == \"d\" or i == \"e\" or i == \"f\" or i == \"g\" or i == \"h\" or i ==\
    \ \"i\" or i == \"j\" or i == \"k\" or i == \"l\" or i == \"m\" or i == \"n\"\
    \ or i == \"o\" or i == \"p\" or i == \"q\" or i == \"r\" or i == \"s\" or i ==\
    \ \"t\" or i == \"u\" or i == \"v\" or i == \"w\" or i == \"x\" or i == \"y\"\
    \ or i == \"z\":\n            prime_number = false\n            break\n    \n\
    \    return prime_number\n\"\"\"\nWrite a function that takes a string and returns\
    \ true if the string\n    is a palindrome or false otherwise\n    Examples\n \
    \   >>> palindrome(\"racecar\")\n    true\n    >>> palindrome(\"racecars\")\n\
    \    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp796gvo90.jl:18\nin expression starting at\
    \ /tmp/tmp796gvo90.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    if string == \"\"\n  \
    \      true\n    else\n        if string.length % 2 == 0\n            false\n\
    \        else\n            if string.length % 3 == 0\n                true\n \
    \           else\n                if string.length % 5 == 0\n                \
    \    true\n                else\n                    if string.length % 7 == 0\n\
    \                        true\n                    else\n                    \
    \    false\n</code>\n<|/ a tags=string,julia |>\n<| a dscore=0 |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\"\
    ) == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdtogugtl.jl:31\nin expression starting at\
    \ /tmp/tmpdtogugtl.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\n\
    \    \n    if string == \"\"\n        prime_length = true\n    else\n        if\
    \ string.length % 2 == 0\n            prime_length = false\n        else\n   \
    \         prime_length = true\n            for x in string.substring(1, string.length)\n\
    \                if string.length % x == 0\n                    prime_length =\
    \ false\n                    break\n        end\n    end\n    return prime_length\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nWrite a function that takes a string and returns true\
    \ if the string\n    length is a prime number or false otherwise\n    Examples\n\
    \    >>> prime_length(\"Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n\
    \    true\n    >>> prime_length(\"kittens\")\n    true\n    >>> prime_length(\"\
    orange\")\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgo1g5mfy.jl:32\nin expression starting at\
    \ /tmp/tmpgo1g5mfy.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = prime_numbers()\n\
    \    \n    prime_numbers_set = Set(prime_numbers)\n    \n    prime_numbers_set\
    \ = prime_numbers_set - Set(string)\n    \n    if prime_numbers_set == Set([]):\n\
    \        return true\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns true if the string is a palindrome\
    \ or false otherwise\nExamples\n\"racecar\" is a palindrome\n\"racecar\" is not\
    \ a palindrome\n\"racecar\" is a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\"\
    \ is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\"\
    \ is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\"\
    \ is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\"\
    \ is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\"\
    \ is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\"\
    \ is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is not a p\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppj5e4ndo.jl:22\nin expression starting at\
    \ /tmp/tmppj5e4ndo.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number = 2\n   \
    \ \n    for character in string:\n        if character == character % prime_number:\n\
    \            return False\n        else:\n            prime_number += 1\n    return\
    \ True\n</cell>\n<cell>\nprime_length(\"Hello\")\n</cell>\n<cell>\nprime_length(\"\
    abcdcba\")\n</cell>\n<cell>\nprime_length(\"kittens\")\n</cell>\n<cell>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns true if the string is a palindrome or false otherwise\nExamples\n>>>\
    \ palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\n\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuws3vym0.jl:18\nin expression starting at\
    \ /tmp/tmpuws3vym0.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers::Set{Int}\
    \ = (2..math.floor(sqrt(string)))\n    \n    for number in prime_numbers\n   \
    \     if string mod number == 0\n            return false\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns true if the\
    \ string contains only letters a-z or A-Z or only numbers 0-9 or only spaces \\\
    s or only punctuation marks \\p{P} or only uppercase letters A-Z or only lowercase\
    \ letters a-z\nExamples\n>>> only_letters(\"Hello\")\ntrue\n>>> only_letters(\"\
    abcdcba\")\ntrue\n>>> only_letters(\"kittens\")\ntrue\n>>> only_letters(\"orange\"\
    )\nfalse\n>>> only_letters(\"   \")\nfalse\n>>> only_letters(\"   kittens\")\n\
    false\n>>> only_letters(\"   kittens   \")\nfalse\n>>> only_letters(\"   kittens\
    \   kittens\")\nfalse\n>>> only_letters(\"   kittens   kittens   \")\nfalse\n\
    >>> only_letters(\"   kittens   kittens   kittens\")\nfalse\n>>> only_letters(\"\
    \   kittens   kittens   kittens   \")\nfalse\n>>> only_letters(\"   kittens  \
    \ kittens   kittens   kittens\")\nfalse\n>>> only_letters(\"   kittens   kittens\
    \   kittens   kittens   \")\nfalse\n>>> only_letters(\"   kittens   kittens  \
    \ kittens   kittens   kittens\")\nfalse\n>>> only_letters(\"   kittens   kittens\
    \   kittens   kittens   kittens   \")\nfalse\n>>> only_letters(\"   kittens  \
    \ kittens   kittens   kittens   kittens   kittens\")\nfalse\n>>> only_letters(\"\
    \   kittens   kittens   kittens   kittens   kittens   kittens   kittens\")\nfalse\n\
    >>> only_letters(\"   kittens   kittens   kittens   kittens\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"number\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl90n8fdt.jl:18\nin expression starting at /tmp/tmpl90n8fdt.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n</code>\n<|/ a dscore=0 |>\n<| a tags=python,primes\
    \ |>\n<code>\ndef prime_number(n):\n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n\
    \    \n    for i in prime_numbers:\n        if n%i == 0:\n            return False\n\
    \    return True\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer\
    \ the question, providing additional context regarding why and/or how this code\
    \ answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\ndef prime_number(n):\n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n\
    \    \n    for i in prime_numbers:\n        if n%i == 0:\n            return False\n\
    \    return True\n</code>\n<|/ a tags=python,primes |>\n<| c |>\nWhile this code\
    \ may answer the question, providing additional context regarding why and/or how\
    \ this code answers the question improves its long-term value.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\ndef prime_number(n):\n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n\
    \    \n    for i in prime_numbers:\n        if n%i == 0:\n            return False\n\
    \    return True\n</code>\n<|/ a tags=python,primes |>\n<| c |>\nWhile this code\
    \ may answer the question, providing additional context regarding why and/or how\
    \ this code answers the question improves its long-term value.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\ndef prime_number(n):\n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n\
    \    \n    for i in prime_numbers:\n        if n%i == 0:\n            return False\n\
    \    return True\n</code>\n<|/ a tags=python,primes |>\n<| c |>\nWhile this code\
    \ may answer the question, providing additional context regarding why and/or how\
    \ this code answers the question improves its long-term value.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\ndef prime_number(n):\n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n\
    \    \n    for i in prime_numbers:\n        if n%i == 0:\n            return False\n\
    \    return True\n</code>\n<|/ a tags=python,primes |>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxyjchtr3.jl:18\nin expression starting at\
    \ /tmp/tmpxyjchtr3.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    if string == \"\"\n        prime_length = true\n    else\n     \
    \   prime_length = false\n        for i in string\n            if string[i] %\
    \ 2 == 0\n                prime_length = false\n                break\n      \
    \      else\n                prime_length = true\n        end\n    end\n    return\
    \ prime_length\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string\n    length is an even number or false\
    \ otherwise\n    Examples\n    >>> even_length(\"Hello\")\n    true\n    >>> even_length(\"\
    abcdcba\")\n    false\n    >>> even_length(\"kittens\")\n    false\n    >>> even_length(\"\
    orange\")\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuw_u3mwp.jl:31\nin expression starting at\
    \ /tmp/tmpuw_u3mwp.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n\
    \    \n    for char in string:\n        if char in prime_numbers:\n          \
    \  return False\n    return True\n    \n</cell>\n<cell>\nprime_length(\"Hello\"\
    )\n</cell>\n<cell>\nprime_length(\"abcdcba\")\n</cell>\n<cell>\nprime_length(\"\
    kittens\")\n</cell>\n<cell>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns true if the string contains\
    \ any uppercase letters or false otherwise\nExamples\n>>> contains_uppercase(\"\
    Hello\")\ntrue\n>>> contains_uppercase(\"HELLO\")\ntrue\n>>> contains_uppercase(\"\
    HelloWorld\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9a0tanao.jl:18\nin expression starting at\
    \ /tmp/tmp9a0tanao.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = true\
    \ \n    \n    for i in string\n        if prime_length == true\n            break\n\
    \        else\n            prime_length::Bool = false \n    \n    return prime_length\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns true if the string is a palindrome or false otherwise\nExamples\n>>>\
    \ palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\nusing Test\n\n\
    @testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\
    \t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvyqav1pb.jl:25\nin expression starting at\
    \ /tmp/tmpvyqav1pb.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number::Bool = false\n\
    \    \n    for i in string\n        if i == \"a\"\n            prime_number =\
    \ true\n            break\n        else\n            prime_number = false\n  \
    \          break\n    end\n    \n    return prime_number\nend\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns true if the\
    \ string contains any character from your alphabet or false otherwise\nExamples\n\
    >>> contains_alphabet(\"Hello\")\ntrue\n>>> contains_alphabet(\"abcdcba\")\ntrue\n\
    >>> contains_alphabet(\"kittens\")\nfalse\n>>> contains_alphabet(\"orange\")\n\
    false\n>>> contains_alphabet(\"a\")\nfalse\n>>> contains_alphabet(\"A\")\nfalse\n\
    >>> contains_alphabet(\"1\")\nfalse\n>>> contains_alphabet(\"2\")\nfalse\n>>>\
    \ contains_alphabet(\"3\")\nfalse\n>>> contains_alphabet(\"4\")\nfalse\n>>> contains_alphabet(\"\
    5\")\nfalse\n>>> contains_alphabet(\"6\")\nfalse\n>>> contains_alphabet(\"7\"\
    )\nfalse\n>>> contains_alphabet(\"8\")\nfalse\n>>> contains_alphabet(\"9\")\n\
    false\n>>> contains_alphabet(\"0\")\nfalse\n>>> contains_alphabet(\"Aa\")\nfalse\n\
    >>> contains_alphabet(\"A1\")\nfalse\n>>> contains_alphabet(\"A2\")\nfalse\n>>>\
    \ contains_alphabet(\"A3\")\nfalse\n>>> contains_alphabet(\"A4\")\nfalse\n>>>\
    \ contains_alphabet(\"A5\")\nfalse\n>>> contains_alphabet(\"A6\")\nfalse\n>>>\
    \ contains_alphabet(\"A7\")\nfalse\n>>> contains_alphabet(\"A8\")\nfalse\n>>>\
    \ contains_alphabet(\"A9\")\nfalse\n>>> contains_alphabet(\"A0\")\nfalse\n>>>\
    \ contains_alphabet(\"Aaa\")\nfalse\n>>> contains_alphabet(\"A11\")\nfalse\n>>>\
    \ contains_alphabet(\"A12\")\nfalse\n>>> contains_alphabet(\"A13\")\nfalse\n>>>\
    \ contains_alphabet(\"A14\")\nfalse\n>>> contains_alphabet(\"A15\")\nfalse\n>>>\
    \ contains_alphabet(\"A16\")\nfalse\n>>> contains_alphabet(\"A17\")\nfalse\n>>>\
    \ contains_alphabet(\"A18\")\nfalse\n>>> contains_alphabet(\"A19\")\nfalse\n>>>\
    \ contains_alphabet(\"A20\")\nfalse\n>>> contains_alphabet(\"A21\")\nfalse\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\"\
    ) == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptlb_kmnt.jl:28\nin expression starting at\
    \ /tmp/tmptlb_kmnt.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    if string.length == 0 \n   \
    \     return true\n    else \n        return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns true if the\
    \ string length is an even number or false otherwise\nExamples\n>>> even_length(\"\
    Hello\")\ntrue\n>>> even_length(\"abcdcba\")\nfalse\n>>> even_length(\"kittens\"\
    )\nfalse\n>>> even_length(\"orange\")\nfalse\n</text>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgf0vgqdc.jl:20\nin expression starting at\
    \ /tmp/tmpgf0vgqdc.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = true\n\
    \    \n    for char in string:\n        if char == \"a\" || char == \"e\" || char\
    \ == \"i\" || char == \"o\" || char == \"u\":\n            prime_length = false\n\
    \            break\n        \n    return prime_length\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns true if the string contains\
    \ only letters a-z or A-Z or false otherwise\nExamples\n>>> only_letters(\"Hello\"\
    )\ntrue\n>>> only_letters(\"abcdcba\")\nfalse\n>>> only_letters(\"kittens\")\n\
    false\n>>> only_letters(\"orange\")\ntrue\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfjk55fsq.jl:18\nin expression starting at\
    \ /tmp/tmpfjk55fsq.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers::Set{Int}\
    \ = (2..math.floor(sqrt(string)))\n    \n    for number in prime_numbers\n   \
    \     if string % number == 0\n            return false\n    return true\nend\n\
    </cell>\n<code language=julia-1.4>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns true if the\
    \ string\n    length is an even number or false otherwise\n    Examples\n    >>>\
    \ even_length(\"Hello\")\n    true\n    >>> even_length(\"abcdcba\")\n    false\n\
    \    >>> even_length(\"kittens\")\n    false\n    >>> even_length(\"orange\")\n\
    \    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplptwiu6w.jl:22\nin expression starting at\
    \ /tmp/tmplptwiu6w.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string == i\n            return\
    \ true\n        else\n            return false\nend\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.0>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.0>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns true if the string\n    contains\
    \ any uppercase letters or false otherwise\n    Examples\n    >>> contains_uppercase(\"\
    Hello\")\n    true\n    >>> contains_uppercase(\"abcdcba\")\n    false\n    >>>\
    \ contains_uppercase(\"kittens\")\n    false\n    >>> contains_uppercase(\"orange\"\
    )\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6porpdhp.jl:23\nin expression starting at\
    \ /tmp/tmp6porpdhp.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = prime_numbers()\n\
    \    \n    for i in string:\n        if i not in prime_numbers:\n            return\
    \ False\n    return True\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    def prime_number(n):\n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    for i in range(2,n):\n        if n%i == 0:\n            return False\n  \
    \      else:\n            if i in prime_numbers:\n                return False\n\
    \    return True\n</code>\n<|/ a tags=python,primes |>\n<| a tags=python,primes\
    \ |>\n<code>\ndef prime_number(n):\n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    for i in range(2,n):\n        if n%i == 0:\n            return False\n  \
    \      else:\n            if i in prime_numbers:\n                return False\n\
    \    return True\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\ndef prime_number(n):\n\
    \    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    for i in range(2,n):\n        if n%i == 0:\n            return False\n  \
    \      else:\n            if i in prime_numbers:\n                return False\n\
    \    return True\n</code>\n<|/ a dscore=1 tags=python,primes |>\n<| a tags=python,primes\
    \ |>\n<code>\ndef prime_number(n):\n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    for i in range(2,n):\n        if n%i == 0:\n            return False\n  \
    \      else:\n            if i in prime_numbers:\n                return False\n\
    \    return True\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndef prime_number(n):\n\
    \    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    for i in range(2,n):\n        if n%i == 0:\n            return False\n  \
    \      else:\n            if i in prime_numbers:\n                return False\n\
    \    return True\n</code>\n<|/ a tag\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk_8le_p_.jl:18\nin expression starting at\
    \ /tmp/tmpk_8le_p_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string == string.replace(string[i],\"\
    \",1)\n            return true\n        end\n    end\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nWrite a function that takes a string and returns true if the string\n\
    \    contains only letters or false otherwise\n    Examples\n    >>> is_letter(\"\
    Hello\")\n    true\n    >>> is_letter(\"abcdcba\")\n    false\n    >>> is_letter(\"\
    kittens\")\n    false\n    >>> is_letter(\"orange\")\n    false\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6q62fb7.jl:24\nin expression starting at\
    \ /tmp/tmpv6q62fb7.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number::Bool = true\n\
    \    \n    for i in string\n        if i == \"a\"\n            prime_number =\
    \ false\n            break\n        if i == \"b\"\n            prime_number =\
    \ false\n            break\n        if i == \"c\"\n            prime_number =\
    \ false\n            break\n        if i == \"d\"\n            prime_number =\
    \ false\n            break\n        if i == \"e\"\n            prime_number =\
    \ false\n            break\n        if i == \"f\"\n            prime_number =\
    \ false\n            break\n        if i == \"g\"\n            prime_number =\
    \ false\n            break\n        if i == \"h\"\n            prime_number =\
    \ false\n            break\n        if i == \"i\"\n            prime_number =\
    \ false\n            break\n        if i == \"j\"\n            prime_number =\
    \ false\n            break\n        if i == \"k\"\n            prime_number =\
    \ false\n            break\n        if i == \"l\"\n            prime_number =\
    \ false\n            break\n        if i == \"m\"\n            prime_number =\
    \ false\n            break\n        if i == \"n\"\n            prime_number =\
    \ false\n            break\n        if i == \"o\"\n            prime_number =\
    \ false\n            break\n        if i == \"p\"\n            prime_number =\
    \ false\n            break\n        if i == \"q\"\n            prime_number =\
    \ false\n            break\n        if i == \"r\"\n            prime_number =\
    \ false\n            break\n        if i == \"s\"\n            prime_number =\
    \ false\n            break\n        if i == \"t\"\n            prime_number =\
    \ false\n            break\n        if i == \"u\"\n            prime_number =\
    \ false\n            break\n        if i == \"v\"\n            prime_number =\
    \ false\n            break\n        if i == \"w\"\n            prime_number =\
    \ false\n            break\n        if i == \"x\"\n            prime_number =\
    \ false\n            break\n        if i == \"y\"\n            prime_number =\
    \ false\n            break\n        if i == \"z\"\n            prime_number =\
    \ false\n            break\n        if i == \"A\"\n            prime_number =\
    \ false\n            break\n        if i == \"B\"\n            prime_number =\
    \ false\n            break\n        if i == \"C\"\n            prime_number =\
    \ false\n            break\n        if i == \"D\"\n            prime_number =\
    \ false\n            break\n        if i == \"E\"\n            prime_number =\
    \ false\n            break\n        if i == \"F\"\n            prime_number =\
    \ false\n            break\n        if i == \"G\"\n            prime_number =\
    \ false\n            break\n        if i == \"H\"\n            prime_number =\
    \ false\n            break\n        if i == \"I\"\n            prime_number =\
    \ false\n            break\n        if i == \"J\"\n            prime_number =\
    \ false\n            break\n        if i == \"K\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv05v5vyx.jl:132\nin expression starting at\
    \ /tmp/tmpv05v5vyx.jl:132\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\n\
    \    \n    if string == \"\"\n        prime_length::Bool = true\n    else\n  \
    \      \n        prime_length::Bool = false\n        \n        for character in\
    \ string\n            \n            if character == \"a\"\n                prime_length::Bool\
    \ = true\n            else\n                \n                if character ==\
    \ \"b\"\n                    prime_length::Bool = true\n                else\n\
    \                    \n                    if character == \"c\"\n           \
    \             prime_length::Bool = true\n                    else\n          \
    \              \n                        if character == \"d\"\n             \
    \               prime_length::Bool = true\n                        else\n    \
    \                        \n                            if character == \"e\"\n\
    \                                prime_length::Bool = true\n                 \
    \           else\n                                \n                         \
    \       if character == \"f\"\n                                    prime_length::Bool\
    \ = true\n                                else\n                             \
    \       \n                                    if character == \"g\"\n        \
    \                                prime_length::Bool = true\n                 \
    \                   else\n                                        \n         \
    \                               if character == \"h\"\n                      \
    \                      prime_length::Bool = true\n                           \
    \             else\n                                            \n           \
    \                                 if character == \"i\"\n                    \
    \                            prime_length::Bool = true\n                     \
    \                       else\n                                               \
    \ \n                                                if character == \"j\"\n  \
    \                                                  prime_length::Bool = true\n\
    \                                                else\n                      \
    \                              \n                                            \
    \        if character == \"k\"\n                                             \
    \           prime_length::Bool = true\n                                      \
    \              else\n                                                        \n\
    \                                                        if character == \"l\"\
    \n                                                            prime_length::Bool\
    \ = true\n                                                        else\n     \
    \                                                       \n                   \
    \                                         if character == \"m\"\n            \
    \                                                    prime_length::Bool = true\n\
    \                                                            else\n          \
    \                                                      \n                    \
    \                                            if character == \"n\"\n         \
    \                                                           prime_length::Bool\
    \ = true\n                                                                else\n\
    \                                                                    \n      \
    \                                                              if character ==\
    \ \"o\"\n                                                                    \
    \    prime_length::Bool = true\n                                             \
    \                       else\n                                               \
    \                         \n                                                 \
    \                       if character == \"p\"\n                              \
    \                                              prime_length::Bool = true\n   \
    \                                                                     else\n \
    \                                                                           \n\
    \                                                                            \
    \    if character == \"q\"\n                                                 \
    \                                   prime_length::Bool = true\n              \
    \                                                                  else\n    \
    \                                                                            \
    \    \n                                                                      \
    \              if character == \"r\"\n                                       \
    \                                                 prime_length::Bool = true\n\
    \                                                                            \
    \        else\n                                                              \
    \                          \n                                                \
    \                                        if character == \"s\"\n             \
    \                                                                            \
    \   prime_length::Bool = true\n                                              \
    \                                          else\n                            \
    \                                                                \n          \
    \                                                                            \
    \      if character == \"t\"\n                                               \
    \                                                 prime_length::Bool = true\n\
    \                                                                            \
    \                else\n                                                      \
    \                                          \n                                \
    \                                                                if character\
    \ == \"u\"\n                                                                 \
    \                                   prime_length::Bool = true\n              \
    \                                                                            \
    \      else\n                                                                \
    \                                    \n                                      \
    \                                                              if character ==\
    \ \"v\"\n                                                                    \
    \                                    prime_length::Bool = true\n             \
    \                                                                            \
    \           else\n                                                           \
    \                                             \n                             \
    \                                                                           if\
    \ character == \"w\"\n                                                       \
    \                                                     prime_length\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp5t0n8d6.jl:1\nin expression starting at /tmp/tmpp5t0n8d6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\n\
    \    \n    for i in string\n        if i == \"a\"\n            prime_length =\
    \ true\n            break\n        if i == \"b\"\n            prime_length = true\n\
    \            break\n        if i == \"c\"\n            prime_length = true\n \
    \           break\n        if i == \"d\"\n            prime_length = true\n  \
    \          break\n        if i == \"e\"\n            prime_length = true\n   \
    \         break\n        if i == \"f\"\n            prime_length = true\n    \
    \        break\n        if i == \"g\"\n            prime_length = true\n     \
    \       break\n        if i == \"h\"\n            prime_length = true\n      \
    \      break\n        if i == \"i\"\n            prime_length = true\n       \
    \     break\n        if i == \"j\"\n            prime_length = true\n        \
    \    break\n        if i == \"k\"\n            prime_length = true\n         \
    \   break\n        if i == \"l\"\n            prime_length = true\n          \
    \  break\n        if i == \"m\"\n            prime_length = true\n           \
    \ break\n        if i == \"n\"\n            prime_length = true\n            break\n\
    \        if i == \"o\"\n            prime_length = true\n            break\n \
    \       if i == \"p\"\n            prime_length = true\n            break\n  \
    \      if i == \"q\"\n            prime_length = true\n            break\n   \
    \     if i == \"r\"\n            prime_length = true\n            break\n    \
    \    if i == \"s\"\n            prime_length = true\n            break\n     \
    \   if i == \"t\"\n            prime_length = true\n            break\n      \
    \  if i == \"u\"\n            prime_length = true\n            break\n       \
    \ if i == \"v\"\n            prime_length = true\n            break\n        if\
    \ i == \"w\"\n            prime_length = true\n            break\n        if i\
    \ == \"x\"\n            prime_length = true\n            break\n        if i ==\
    \ \"y\"\n            prime_length = true\n            break\n        if i == \"\
    z\"\n            prime_length = true\n            break\n        if i == \"A\"\
    \n            prime_length = true\n            break\n        if i == \"B\"\n\
    \            prime_length = true\n            break\n        if i == \"C\"\n \
    \           prime_length = true\n            break\n        if i == \"D\"\n  \
    \          prime_length = true\n            break\n        if i == \"E\"\n   \
    \         prime_length = true\n            break\n        if i == \"F\"\n    \
    \        prime_length = true\n            break\n        if i == \"G\"\n     \
    \       prime_length = true\n            break\n        if i == \"H\"\n      \
    \      prime_length = true\n            break\n        if i == \"I\"\n       \
    \     prime_length = true\n            break\n        if i == \"J\"\n        \
    \    prime_length = true\n            break\n        if i == \"K\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa7jsi_1x.jl:132\nin expression starting at\
    \ /tmp/tmpa7jsi_1x.jl:132\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    if string == \"\" \n        prime_length = true\n    else \n   \
    \     prime_length = false \n        \n        for i in string\n            if\
    \ i \u2209 string\n                prime_length = false\n                break\n\
    \            else\n                prime_length = true\n                break\n\
    \        end\n    end\n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes a string and returns true if the string contains only\
    \ letters a-z or A-Z or only numbers 0-9 or only spaces \\s\nExamples\n>>> string_only_letters(\"\
    Hello\")\ntrue\n>>> string_only_letters(\"abcdcba\")\nfalse\n>>> string_only_letters(\"\
    kittens\")\nfalse\n>>> string_only_letters(\"orange\")\nfalse\n>>> string_only_letters(\"\
    \   \")\ntrue\n>>> string_only_letters(\"   a\")\nfalse\n>>> string_only_letters(\"\
    \   ab\")\nfalse\n>>> string_only_letters(\"   abc\")\nfalse\n>>> string_only_letters(\"\
    \   abcd\")\nfalse\n>>> string_only_letters(\"   abcde\")\nfalse\n>>> string_only_letters(\"\
    \   abcdea\")\nfalse\n>>> string_only_letters(\"   abcdeab\")\nfalse\n>>> string_only_letters(\"\
    \   abcdeabc\")\nfalse\n>>> string_only_letters(\"   abcdeabcd\")\nfalse\n>>>\
    \ string_only_letters(\"   abcdeabcde\")\nfalse\n>>> string_only_letters(\"  \
    \ abcdeabcdea\")\nfalse\n>>> string_only_letters(\"   abcdeabcdeab\")\nfalse\n\
    >>> string_only_letters(\"   abcdeabcdeabc\")\nfalse\n>>> string_only_letters(\"\
    \   abcdeabcdeabcd\")\nfalse\n>>> string_only_letters(\"   abcdeabcdeabcde\")\n\
    false\n>>> string_only_letters(\"   abcdeabcdeabcdea\")\nfalse\n>>> string_only_letters(\"\
    \   abcdeabcdeabcdeab\")\nfalse\n>>> string_only_letters(\"   abcdeabcdeabcdeabc\"\
    )\nfalse\n>>> string_only_letters(\"   abcdeabcdeabcdeabcd\")\nfalse\n>>> string_only_letters(\"\
    \   abcdeabcdeabcdeabcde\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjepu32dj.jl:33\nin expression starting at\
    \ /tmp/tmpjepu32dj.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    string::String = string.lower()\n    \n    for character in string.lower():\n\
    \        if character in \"abcdefghijklmnopqrstuvwxyz\":\n            prime_length\
    \ = true\n            break\n    \n    return prime_length\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\ndef prime_length(s):\n    prime_length = 0\n \
    \   for character in s:\n        if character in \"abcdefghijklmnopqrstuvwxyz\"\
    :\n            prime_length += 1\n    return prime_length\n</code>\n<|/ a tags=python,primes\
    \ |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| a tags=python,primes |>\n<code>\n\
    def prime_length(s):\n    prime_length = 0\n    for character in s:\n        if\
    \ character in \"abcdefghijklmnopqrstuvwxyz\":\n            prime_length += 1\n\
    \    return prime_length\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post\
    \ only code as an answer, but also provide an explanation of what your code does\
    \ and how it solves the problem of the question. Answers with an explanation are\
    \ usually more helpful and of better quality, and are more likely to attract upvotes.\n\
    <|/ c |>\n<| a tags=python,primes |>\n<code>\ndef prime_length(s):\n    prime_length\
    \ = 0\n    for character in s:\n        if character in \"abcdefghijklmnopqrstuvwxyz\"\
    :\n            prime_length += 1\n    return prime_length\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| a tags=python,primes |>\n<code>\n\
    def prime_length(s):\n    prime_length = 0\n    for character in s:\n        if\
    \ character in \"abcdefghijklmnopqrstuvwxyz\":\n            prime_length += 1\n\
    \    return prime_length\n\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdz9ol3da.jl:20\nin expression starting at\
    \ /tmp/tmpdz9ol3da.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    if string == \"\" \n        prime_length = true \n    else \n  \
    \      \n        prime_length = false \n        \n        for i in string\n  \
    \          if string[i] != string[i - 1]\n                prime_length = false\
    \ \n                break \n            \n    return prime_length \nend\n</cell>\n\
    <code language=julia-1.3>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns true if the\
    \ string is a palindrome or false otherwise\nExamples\n>>> palindrome(\"Hello\"\
    )\ntrue\n>>> palindrome(\"Hello World\")\ntrue\n>>> palindrome(\"Hello World!\"\
    )\ntrue\n>>> palindrome(\"Hello World!!\")\ntrue\n>>> palindrome(\"Hello World!!!\"\
    )\nfalse\n>>> palindrome(\"Hello World!!! \")\nfalse\n>>> palindrome(\"Hello World!!!\
    \ !\")\nfalse\n>>> palindrome(\"Hello World!!! !?\")\nfalse\n>>> palindrome(\"\
    Hello World!!! !?!\")\nfalse\n>>> palindrome(\"Hello World!!! !?!?\")\nfalse\n\
    >>> palindrome(\"Hello World!!! !?!?!\")\nfalse\n>>> palindrome(\"Hello World!!!\
    \ !?!?!?\")\nfalse\n>>> palindrome(\"Hello World!!! !?!?!?!\")\nfalse\n>>> palindrome(\"\
    Hello World!!! !?!?!?!?\")\nfalse\n>>> palindrome(\"Hello World!!! !?!?!?!?!\"\
    )\nfalse\n>>> palindrome(\"Hello World!!! !?!?!?!?!?\")\nfalse\n>>> palindrome(\"\
    Hello World!!! !?!?!?!?!?!\")\nfalse\n>>> palindrome(\"Hello World!!! !?!?!?!?!?!\"\
    )\nfalse\n>>> palindrome(\"Hello World!!! !?!?!?!?!?!?\")\nfalse\n>>> palindrome(\"\
    Hello World!!! !?!\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz1lgy8z9.jl:30\nin expression starting at\
    \ /tmp/tmpz1lgy8z9.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n</code>\n<|/ a tags=python,primes,string |>\n<| a dscore=0\
    \ |>\n<code>\ndef prime_number(n):\n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \    \n    for i in prime_numbers:\n        if n%i == 0:\n            return False\n\
    \    return True\n</code>\n<|/ a tags=python,primes,string |>\n<| c |>\nPlease\
    \ add some explanation to your answer such that others can learn from it\n<|/\
    \ c |>\n<| a tags=python,primes,string |>\n<code>\ndef prime_number(n):\n    \n\
    \    prime_numbers = Set([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \    \n    for i in prime_numbers:\n        if n%i == 0:\n            return False\n\
    \    return True\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef prime_number(n):\n\
    \    \n    prime_numbers = Set([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \    \n    for i in prime_numbers:\n        if n%i == 0:\n            return False\n\
    \    return True\n</code>\n<|/ a tags=python,primes,string |>\n<| c |>\nPlease\
    \ add some explanation to your answer such that others can learn from it\n<|/\
    \ c |>\n<| a tags=python,primes,string |>\n<code>\ndef prime_number(n):\n    \n\
    \    prime_numbers = Set([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \    \n    for i in prime_numbers:\n        if n%i == 0:\n            return False\n\
    \    return True\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation\
    \ to your \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6lzmafk.jl:18\nin expression starting at\
    \ /tmp/tmph6lzmafk.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = string.chars().filter(|c|c == 'a' || c == 'b'\
    \ || c == 'c' || c == 'd' || c == 'e' || c == 'f' || c == 'g' || c == 'h' || c\
    \ == 'i' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'o'\
    \ || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'u' || c\
    \ == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z').count() == string.chars().filter(|c|c\
    \ == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f' || c == 'g'\
    \ || c == 'h' || c == 'i' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c\
    \ == 'n' || c == 'o' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't'\
    \ || c == 'u' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z').count()\
    \ \n    \n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string contains only letters or false otherwise\n\
    Examples\n>>> only_letters(\"Hello\")\ntrue\n>>> only_letters(\"abcdcba\")\nfalse\n\
    >>> only_letters(\"kittens\")\nfalse\n>>> only_letters(\"orange\")\ntrue\n>>>\
    \ only_letters(\"123\")\nfalse\n>>> only_letters(\"123abc\")\nfalse\n>>> only_letters(\"\
    123abc456\")\nfalse\n>>> only_letters(\"123abc456def\")\nfalse\n>>> only_letters(\"\
    123abc456defg\")\nfalse\n>>> only_letters(\"123abc456defgh\")\nfalse\n>>> only_letters(\"\
    123abc456defghi\")\nfalse\n>>> only_letters(\"123abc456defghij\")\nfalse\n>>>\
    \ only_letters(\"123abc456defghijk\")\nfalse\n>>> only_letters(\"123abc456\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\"\
    ) == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_n412sp.jl:17\nin expression starting at\
    \ /tmp/tmpy_n412sp.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length_bool = false\n\
    \    \n    if string == \"\"\n        return prime_length_bool\n    \n    prime_length_bool\
    \ = true\n    \n    for character in string\n        if character == \"a\"\n \
    \           prime_length_bool = false\n            break\n        if character\
    \ == \"b\"\n            prime_length_bool = false\n            break\n       \
    \ if character == \"c\"\n            prime_length_bool = false\n            break\n\
    \        if character == \"d\"\n            prime_length_bool = false\n      \
    \      break\n        if character == \"e\"\n            prime_length_bool = false\n\
    \            break\n        if character == \"f\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"g\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"h\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"i\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"j\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"k\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"l\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"m\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"n\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"o\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"p\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"q\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"r\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"s\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"t\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"u\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"v\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"w\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"x\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"y\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"z\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"A\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"B\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"C\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"D\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"E\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"F\"\n            prime_length_bool\
    \ = false\n            break\n        if character == \"G\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4jq065ti.jl:1\nin expression starting at /tmp/tmp4jq065ti.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    if string == \"\"\n        prime_length = true\n    else\n     \
    \   \n        for i in string\n            \n            if string.index(i) ==\
    \ 0 \n                prime_length = false\n                break\n          \
    \  else\n                prime_length = true\n                break\n        end\n\
    \    end\n    \n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns true if the string\n    contains\
    \ only letters or false otherwise\n    Examples\n    >>> letters_only(\"Hello\"\
    )\n    true\n    >>> letters_only(\"abcdcba\")\n    false\n    >>> letters_only(\"\
    kittens\")\n    false\n    >>> letters_only(\"orange\")\n    false\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzd30gg40.jl:34\nin expression starting at\
    \ /tmp/tmpzd30gg40.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \    \n    prime_numbers_set = Set(prime_numbers)\n    \n    prime_numbers_set.remove(string.length)\n\
    \    \n    if prime_numbers_set.isEmpty()\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\nprime_length(\"Hello\")\n</cell>\n\
    <code language=julia-1.1>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.1>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.1>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns true if the string is a palindrome or false otherwise\nExamples\n>>>\
    \ is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"racecars\")\nfalse\n>>>\
    \ is_palindrome(\"racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprqp41qpo.jl:27\nin expression starting at\
    \ /tmp/tmprqp41qpo.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = \n\
    \        if string == \"\" \n        then false \n        else \n            if\
    \ string.length == 2 \n            then true \n            else \n           \
    \     if string.length == 3 \n                then true \n                else\
    \ \n                    if string.length == 4 \n                    then true\
    \ \n                    else \n                        if string.length == 5 \n\
    \                        then true \n                        else \n         \
    \                   if string.length == 6 \n                            then true\
    \ \n                            else \n                                if string.length\
    \ == 7 \n                                then true \n                        \
    \        else \n                                    if string.length == 8 \n \
    \                                   then true \n                             \
    \       else \n                                        if string.length == 9 \n\
    \                                        then true \n                        \
    \                else \n                                            if string.length\
    \ == 10 \n                                            then true \n           \
    \                                 else \n                                    \
    \            if string.length == 11 \n                                       \
    \         then true \n                                                else \n\
    \                                                    if string.length == 12 \n\
    \                                                    then true \n            \
    \                                        else \n                             \
    \                           if string.length == 13 \n                        \
    \                                then true \n                                \
    \                        else \n                                             \
    \               if string.length == 14 \n                                    \
    \                        then true \n                                        \
    \                    else \n                                                 \
    \               if string.length == 15 \n                                    \
    \                            then true \n                                    \
    \                            else \n                                         \
    \                           if string.length == 16 \n                        \
    \                                            then true \n                    \
    \                                                else \n                     \
    \                                   if string.length == 17 \n                \
    \                                        then true \n                        \
    \                                else \n                                     \
    \                       if string.length == 18 \n                            \
    \                                then true \n                                \
    \                            else \n                                         \
    \                       if string.length == 19 \n                            \
    \                                    then true \n                            \
    \                                    else \n                                 \
    \                                   if string.length == 20 \n                \
    \                                                    then true \n            \
    \                                                        else \n             \
    \                                           if string.length == 21 \n        \
    \                                                then true \n                \
    \                                        else \n                             \
    \                               if string.length == 22 \n                    \
    \                                        then true \n                        \
    \                                    else \n                                 \
    \                               if string.length == 23 \n                    \
    \                                            then true \n                    \
    \                                            else \n                         \
    \                                           if string.length == 24 \n        \
    \                                                            then true \n    \
    \                                                                else \n     \
    \                                                   if string.length == 25 \n\
    \                                                        then true \n        \
    \                                                else \n                     \
    \                                       if string.length == 26 \n            \
    \                                                then true \n                \
    \                                            else \n                         \
    \                                       if string.length == 27 \n            \
    \                                                    then true \n            \
    \                                                    else \n                 \
    \                                                   if string.length == 28 \n\
    \                                                                    then true\
    \ \n                                                                    else \n\
    \                                                        if string.length == 29\
    \ \n                                                        then true \n     \
    \                                                   else \n                  \
    \                                          if string.length == 30 \n         \
    \                                                   then true \n             \
    \                                               else \n                      \
    \                                          if string.length == 31 \n         \
    \                                                       then true \n         \
    \                                                       else \n              \
    \                                                      if string.length == 32\
    \ \n                                                                    then true\
    \ \n                                                                    else \n\
    \                                                        if string.length == 33\
    \ \n                                                        then true \n     \
    \                                                   else \n                  \
    \                                          if string.length == 34 \n         \
    \                                                   then true \n             \
    \                                               else \n                      \
    \                                          if string.length == 35 \n         \
    \                                                       then true \n         \
    \                                                       else \n              \
    \                                                      if string.length == 36\
    \ \n                                                                    then true\
    \ \n                                                                    else \n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"false\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp31c8oh6q.jl:17\nin expression starting at /tmp/tmp31c8oh6q.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length = true\n\
    \    \n    for i in string:\n        if i == \"a\" or i == \"b\" or i == \"c\"\
    \ or i == \"d\" or i == \"e\" or i == \"f\" or i == \"g\" or i == \"h\" or i ==\
    \ \"i\" or i == \"j\" or i == \"k\" or i == \"l\" or i == \"m\" or i == \"n\"\
    \ or i == \"o\" or i == \"p\" or i == \"q\" or i == \"r\" or i == \"s\" or i ==\
    \ \"t\" or i == \"u\" or i == \"v\" or i == \"w\" or i == \"x\" or i == \"y\"\
    \ or i == \"z\":\n            prime_length = false\n            break\n    \n\
    \    return prime_length\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns true if the string contains any uppercase letters or false\
    \ otherwise\nExamples\n>>> contains_uppercase(\"Hello\")\ntrue\n>>> contains_uppercase(\"\
    abcdcba\")\ntrue\n>>> contains_uppercase(\"kittens\")\ntrue\n>>> contains_uppercase(\"\
    orange\")\nfalse\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ccf_96k.jl:18\nin expression starting at\
    \ /tmp/tmp_ccf_96k.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    if string == \"\" \n        prime_length = true \n    else \n  \
    \      if string.length % 2 == 0 \n            prime_length = false \n       \
    \ else \n            for i in 2..string.length \n                if string.charAt(i)\
    \ == string.charAt(i-1) \n                    prime_length = false \n        \
    \            break \n    return prime_length \nend \n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns true if the string\n    length\
    \ is an even number or false otherwise\n    Examples\n    >>> even_length(\"Hello\"\
    )\n    true\n    >>> even_length(\"abcdcba\")\n    false\n    >>> even_length(\"\
    kittens\")\n    false\n    >>> even_length(\"orange\")\n    true\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ewwjiz1.jl:29\nin expression starting at\
    \ /tmp/tmp_ewwjiz1.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number::Bool = true\n\
    \    \n    for char in string:\n        if char == \"a\" || char == \"e\" || char\
    \ == \"i\" || char == \"o\" || char == \"u\" || char == \"y\" \n        prime_number\
    \ = false\n        break\n    \n    return prime_number\nend\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.3>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite a function\
    \ that takes a string and returns true if the string\n    length is a prime number\
    \ or false otherwise\n    Examples\n    >>> prime_length(\"Hello\")\n    true\n\
    \    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"kittens\"\
    )\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprurf01hb.jl:18\nin expression starting at\
    \ /tmp/tmprurf01hb.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    if string == \"\"\n        return prime_length\n    \n    length::Int\
    \ = string.length\n    \n    if length == 1\n        return prime_length\n   \
    \ \n    if length == 2\n        return true\n    \n    if length == 3\n      \
    \  return true\n    \n    if length == 5\n        return true\n    \n    if length\
    \ == 7\n        return true\n    \n    if length == 11\n        return true\n\
    \    \n    if length == 13\n        return true\n    \n    if length == 17\n \
    \       return true\n    \n    if length == 21 or length == 29\n        return\
    \ true\n    \n    if length == 25\n        return true\n    \n    if length ==\
    \ 31\n        return true\n    \n    if length == 37\n        return true\n  \
    \  \n    if length == 41 or length == 43\n        return true\n    \n    if length\
    \ == 47\n        return true\n    \n    if length == 53 or length == 59\n    \
    \    return true\n    \n    if length == 71 or length == 79\n        return true\n\
    \    \n    if length == 91 or length == 97\n        return true\n    \n    if\
    \ length == 111 or length == 119\n        return true\n    \n    if length ==\
    \ 131 or length == 139\n        return true\n    \n    if length == 151 or length\
    \ == 159\n        return true\n    \n    if length == 171 or length == 179\n \
    \       return true\n    \n    if length == 23 or length == 25\n        return\
    \ true\n    \n    if length == 31 or length == 33\n        return true\n    \n\
    \    if length == 37 or length == 39\n        return true\n    \n    if length\
    \ == 43 or length == 47\n        return true\n    \n    if length == 53\n    \
    \    return true\n    \n    if length == 59\n        return true\n    \n    if\
    \ length == 71 or length == 73\n        return true\n    \n    if length == 79\n\
    \        return true\n    \n    if length == 91 or length == 97\n        return\
    \ true\n    \n    if length == 111 or length == 119\n        return true\n   \
    \ \n    if length == 131 or length == 139 \n        return true\n    \n    if\
    \ length == 151 or length == 159 \n        return true\n    \n    if length ==\
    \ 171 or length == 179 \n        return true\n    \n    if length == 19\n    \
    \    return true\n    \n    if length == 23 or length == 25\n        return true\n\
    \    \n    if length == 31 or length == 33\n        return true\n    \n    if\
    \ length == 37 or length == 39\n        return true\n    \n    if length == 43\
    \ or length == 47\n        return true\n    \n    if length == 53\n        return\
    \ true\n\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"length\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppkyuuhpq.jl:46\nin expression starting at /tmp/tmppkyuuhpq.jl:46\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    if string == \"\"\n  \
    \      return true\n    \n    let n = string.len()\n    \n    if n == 1\n    \
    \    return true\n    \n    if n == 2\n        return false\n    \n    if n %\
    \ 2 == 0\n        return false\n    \n    for i in 2..n\n        if n % i == 0\n\
    \            return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns true if the string contains only\
    \ letters a-z or A-Z or only numbers 0-9 or only spaces \\s\nExamples\n>>> string_only_letters(\"\
    Hello\")\ntrue\n>>> string_only_letters(\"abcdcba\")\ntrue\n>>> string_only_letters(\"\
    kittens\")\ntrue\n>>> string_only_letters(\"orange\")\nfalse\n>>> string_only_letters(\"\
    \   \")\ntrue\n>>> string_only_letters(\"   a\")\nfalse\n>>> string_only_letters(\"\
    \   a\")\nfalse\n>>> string_only_letters(\"   a\")\nfalse\n>>> string_only_letters(\"\
    \   a\")\nfalse\n>>> string_only_letters(\"   a\")\nfalse\n>>> string_only_letters(\"\
    \   a\")\nfalse\n>>> string_only_letters(\"   a\")\nfalse\n>>> string_only_letters(\"\
    \   a\")\nfalse\n>>> string_only_letters(\"   a\")\nfalse\n>>> string_only_letters(\"\
    \   a\")\nfalse\n>>> string_only_letters(\"   a\")\nfalse\n>>> string_only_letters(\"\
    \   a\")\nfalse\n>>> string_only_letters(\"   a\")\nfalse\n>>> string_only_letters(\"\
    \   a\")\nfalse\n>>> string_only_letters(\"   a\")\nfalse\n>>> string_only_letters(\"\
    \   a\")\nfalse\n>>> string_only_letters(\"   a\")\nfalse\n>>> string_only_letters(\"\
    \   a\")\nfalse\n>>> string_only_letters(\"   a\")\nfalse\n>>> string_only_letters(\"\
    \   a\")\nfalse\n>>> string_only_letters(\"   a\")\nfalse\n>>> string_only_letters(\"\
    \   a\")\nfalse\n>>> string_only_letters(\"   a\")\nfalse\n>>> string_only_letters(\"\
    \   a\")\nfalse\n>>> string_only_letters(\"   a\")\nfalse\n>>> string_only_letters(\"\
    \   a\")\nfalse\n>>> string_only_letters(\"   a\")\nfalse\n>>> string_only_letters(\"\
    \   a\")\nfalse\n>>> string_\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpywetoaxm.jl:35\nin expression starting at\
    \ /tmp/tmpywetoaxm.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    for i in string.chars \n        if prime_length::Bool = false \n\
    \            if i::Int > 1 \n                if i::Int % 2 == 0 \n           \
    \         prime_length::Bool = false \n                else\n                \
    \    prime_length::Bool = true \n            else\n                prime_length::Bool\
    \ = false \n        end\n    end\n    return prime_length::Bool\nend\n</cell>\n\
    <code language=julia-1.3>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns true if the\
    \ string\n    length is a prime number or false otherwise\n    Examples\n    >>>\
    \ prime_length(\"Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n\
    \    >>> prime_length(\"kittens\")\n    true\n    >>> prime_length(\"orange\"\
    )\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt7rpsfh9.jl:18\nin expression starting at /tmp/tmpt7rpsfh9.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number::Bool = true\n\
    \    \n    for character in string\n        if character == \"a\"\n          \
    \  prime_number = false\n        end\n    end\n    \n    return prime_number\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns true if the string length is greater than 10 and false otherwise\nExamples\n\
    >>> string_length(\"Hello\") # returns true\n>>> string_length(\"abcdcba\") #\
    \ returns true\n>>> string_length(\"kittens\") # returns true\n>>> string_length(\"\
    orange\") # returns false\n>>> string_length(\"1234567890\") # returns false\n\
    >>> string_length(\"12345678901\") # returns false\n>>> string_length(\"123456789012\"\
    ) # returns false\n>>> string_length(\"1234567890123\") # returns false\n>>> string_length(\"\
    12345678901234\") # returns false\n>>> string_length(\"123456789012345\") # returns\
    \ false\n>>> string_length(\"1234567890123456\") # returns false\n>>> string_length(\"\
    12345678901234567\") # returns false\n>>> string_length(\"123456789012345678\"\
    ) # returns false\n>>> string_length(\"1234567890123456790\") # returns false\n\
    >>> string_length(\"12345678901234567901\") # returns false\n>>> string_length(\"\
    123456789012345679012\") # returns false\n>>> string_length(\"1234567890123456790123\"\
    ) # returns false\n>>> string_length(\"12345678901234567901234\") # returns false\n\
    >>> string_length(\"123456789012345679012345\") # returns false\n>>> string_length(\"\
    1234567890123456790123456\") # returns false\n>>> string_length(\"12345678901234567901234567\"\
    ) # returns false\n>>> string_length(\"123456789012345679012345678\") # returns\
    \ false\n>>> string_length(\"1234567890123456790123456790\") # returns false\n\
    >>> string_length(\"12345678901234567901234567901\") # returns false\n>>> string_length(\"\
    123456789012345679012345679012\") # returns false\n>>> string_length(\"1234567890123456790123456790123\"\
    ) # returns false\n>>> string_length(\"12345678901234567901234567901234\") # \n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsyyeasfd.jl:25\nin expression starting at\
    \ /tmp/tmpsyyeasfd.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer\
    \ the question. The question was about how to write this in Haskell, not how to\
    \ write it in Python.\n<|/ c |>\n<| c |>\nThe question was about how to write\
    \ this in Haskell, not how to write it in Python.\n<|/ c |>\n<| c |>\nThe question\
    \ was about how to write this in Haskell, not how to write it in Python.\n<|/\
    \ c |>\n<| c |>\nThe question was about how to write this in Haskell, not how\
    \ to write it in Python.\n<|/ c |>\n<| c |>\nThe question was about how to write\
    \ this in Haskell, not how to write it in Python.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nprime_length :: String -> Bool\nprime_length s = length s == prime_number\n\
    \  where prime_number = [2,3,5,7,11,13,17,19]\n</code>\n<|/ a tags=haskell,python\
    \ |>\n<| c |>\nThis doesn't answer the question. The question was about how to\
    \ write this in Haskell, not how to write it in Python.\n<|/ c |>\n<| c |>\nThe\
    \ question was about how to write this in Haskell, not how to write it in Python.\n\
    <|/ c |>\n<| c |>\nThe question was about how to write this in Haskell, not how\
    \ to write it in Python.\n<|/ c |>\n<| c |>\nThe question was about how to write\
    \ this in Haskell, not how to write it in Python.\n<|/ c |>\n<| c |>\nThe question\
    \ was about how to write this in Haskell, not how to write it in Python.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nprime_length :: String -> Bool\nprime_length\
    \ s = length s == prime_number\n  where prime_number = [2,3,5,7,11,13,17,19]\n\
    </code>\n<|/ a tags=haskell,python |>\n<| c |>\nThis doesn't answer the question.\
    \ The question was about how to write this in Haskell, not how to write it in\
    \ Python.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nprime_length :: String -> Bool\n\
    prime_length s = length s == prime_number\n  where \nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph8t29tv8.jl:18\nin expression starting at\
    \ /tmp/tmph8t29tv8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length = true\n\
    \    \n    for i in string:\n        if i == \"a\" or i == \"e\" or i == \"i\"\
    \ or i == \"o\" or i == \"u\":\n            prime_length = false\n           \
    \ break\n    \n    return prime_length\n\"\"\"\nWrite a function that takes a\
    \ string and returns true if the string\n    contains only letters or false otherwise\n\
    \    Examples\n    >>> letters_only(\"Hello\")\n    true\n    >>> letters_only(\"\
    abcdcba\")\n    false\n    >>> letters_only(\"kittens\")\n    false\n    >>> letters_only(\"\
    orange\")\n    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmporzu2ssf.jl:18\nin expression starting at\
    \ /tmp/tmporzu2ssf.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = true\n\
    \    \n    for i in string:\n        if prime_length == true\n            break\n\
    \        if i == \"a\"\n            prime_length = false\n        else\n     \
    \       prime_length = true\n    end\n    return prime_length\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns true if the\
    \ string\n    length is a prime number or false otherwise\n    Examples\n    >>>\
    \ prime_length(\"Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n\
    \    >>> prime_length(\"kittens\")\n    true\n    >>> prime_length(\"orange\"\
    )\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7qhmq40p.jl:18\nin expression starting at\
    \ /tmp/tmp7qhmq40p.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length = true\n\
    \    for char in string:\n        if char == \"a\" or char == \"e\" or char ==\
    \ \"i\" or char == \"o\" or char == \"u\":\n            prime_length = false\n\
    \            break\n        if char == \"b\" or char == \"c\" or char == \"d\"\
    \ or char == \"f\" or char == \"g\" or char == \"h\" or char == \"j\" or char\
    \ == \"k\" or char == \"l\" or char == \"m\" or char == \"n\" or char == \"p\"\
    \ or char == \"q\" or char == \"r\" or char == \"s\" or char == \"t\" or char\
    \ == \"v\" or char == \"w\" or char == \"x\" or char == \"y\" or char == \"z\"\
    :\n            prime_length = false\n            break\n        if char == \"\
    0\" or char == \"1\":\n            prime_length = false\n            break\n \
    \       if char == \"2\" or char == \"3\" or char == \"4\" or char == \"5\" or\
    \ char == \"6\" or char == \"7\" or char == \"8\" or char == \"9\":\n        \
    \    prime_length = false\n            break\n    return prime_length\n</cell>\n\
    <cell>\nprime_length(\"Hello\")\n</cell>\n<cell>\nprime_length(\"abcdcba\")\n\
    </cell>\n<cell>\nprime_length(\"kittens\")\n</cell>\n<cell>\nprime_length(\"orange\"\
    )\n</cell>\n<text>\nWrite a function that takes a string and returns true if the\
    \ string is a palindrome or false otherwise\nExamples\n>>> palindrome(\"racecar\"\
    )\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    race\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpifxcs37p.jl:17\nin expression starting at\
    \ /tmp/tmpifxcs37p.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \    \n    string_length = len(string)\n    \n    for i in prime_numbers:\n  \
    \      if string_length == i:\n            return true\n        \n        if string_length\
    \ < i:\n            return false\n        \n        if string_length == string_length\
    \ + 1:\n            return true\n        \n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nWrite a function that takes a string and returns true if the string\n\
    \    contains only letters (a-z) or false otherwise\n    Examples\n    >>> only_letters(\"\
    Hello\")\n    true\n    >>> only_letters(\"abcdcba\")\n    false\n    >>> only_letters(\"\
    kittens\")\n    false\n    >>> only_letters(\"orange\")\n    false\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0f8e52qt.jl:20\nin expression starting at\
    \ /tmp/tmp0f8e52qt.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\n\
    \    \n    for character in string\n        if character == character\n      \
    \      prime_length = true\n        else\n            prime_length = false\n \
    \       end\n    end\n    \n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite a function\
    \ that takes a string and returns true if the string\n    length is an even number\
    \ or false otherwise\n    Examples\n    >>> even_length(\"Hello\")\n    true\n\
    \    >>> even_length(\"abcdcba\")\n    false\n    >>> even_length(\"kittens\"\
    )\n    false\n    >>> even_length(\"orange\")\n    false\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvbc_rsxz.jl:27\nin expression starting at\
    \ /tmp/tmpvbc_rsxz.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\n\
    \    \n    prime_length::Bool = string.length == 0 \n    \n    if prime_length\n\
    \        prime_length::Bool = true\n    else\n        prime_length::Bool = false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns true if the string\n    length is greater than or equal to 3 or false\
    \ otherwise\n    Examples\n    >>> prime_length_gt3(\"Hello\")\n    true\n   \
    \ >>> prime_length_gt3(\"abcdcba\")\n    true\n    >>> prime_length_gt3(\"kittens\"\
    )\n    false\n    >>> prime_length_gt3(\"orange\")\n    false\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\"\
    ) == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: multiple type declarations for \"prime_length\"\
    \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcci84k6o.jl:1\nin expression\
    \ starting at /tmp/tmpcci84k6o.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = true\
    \ \n    \n    for char in string:\n        if char == \"a\" || char == \"e\" ||\
    \ char == \"i\" || char == \"o\" || char == \"u\" || char == \"y\" :\n       \
    \     prime_length = false\n            break\n    \n    return prime_length\n\
    </cell>\n<cell>\nprime_length(\"Hello\")\n</cell>\n<cell>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<cell>\nprime_length(\"kittens\")\n</cell>\n<cell>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string and\
    \ returns true if the string contains only letters a-z and A-Z and false otherwise\n\
    Examples\n>>> only_letters(\"Hello\")\ntrue\n>>> only_letters(\"abcdcba\")\nfalse\n\
    >>> only_letters(\"kittens\")\nfalse\n>>> only_letters(\"orange\")\nfalse\n\"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9i1r9vb5.jl:18\nin expression starting at\
    \ /tmp/tmp9i1r9vb5.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string == i\n            return\
    \ true\n        else\n            return false\nend\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.3>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes a string and returns true if the string\n    contains\
    \ only letters or false otherwise\n    Examples\n    >>> letters_only(\"Hello\"\
    )\n    true\n    >>> letters_only(\"abcdcba\")\n    false\n    >>> letters_only(\"\
    kittens\")\n    false\n    >>> letters_only(\"orange\")\n    false\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0wgjt9b5.jl:23\nin expression starting at\
    \ /tmp/tmp0wgjt9b5.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string.len() == i\n            return\
    \ true\n    return false\nend\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.0>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string is a palindrome or false otherwise\n\
    Examples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecar\nusing Test\n\n@testset begin\n\n\
    candidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvy48eigy.jl:22\nin expression starting at\
    \ /tmp/tmpvy48eigy.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    if string == \"\"\n        return prime_length\n    \n    length::Int\
    \ = string.length\n    \n    if length == 1\n        return prime_length\n   \
    \ \n    if length == 2\n        return true\n    \n    if length == 3\n      \
    \  return true\n    \n    if length == 5\n        return true\n    \n    if length\
    \ == 7\n        return true\n    \n    if length == 11\n        return true\n\
    \    \n    if length == 13\n        return true\n    \n    if length == 17\n \
    \       return true\n    \n    if length == 21 or length == 29\n        return\
    \ true\n    \n    if length == 25\n        return true\n    \n    if length ==\
    \ 31\n        return true\n    \n    if length == 37\n        return true\n  \
    \  \n    if length == 41 or length == 43\n        return true\n    \n    if length\
    \ == 47\n        return true\n    \n    if length == 53\n        return true\n\
    \    \n    if length == 59\n        return true\n    \n    if length == 61\n \
    \       return true\n    \n    if length == 67\n        return true\n    \n  \
    \  if length == 73 or length == 79\n        return true\n    \n    if length ==\
    \ 83\n        return true\n    \n    if length == 91 or length == 97\n       \
    \ return true\n    \n    if length == 101\n        return true\n    \n    if length\
    \ == 113\n        return true\n    \n    if length == 127\n        return true\n\
    \    \n    if length == 131\n        return true\n    \n    if length == 139\n\
    \        return true\n    \n    if length == 147\n        return true\n    \n\
    \    if length == 153\n        return true\n    \n    if length == 159\n     \
    \   return true\n    \n    if length == 161\n        return true\n    \n    if\
    \ length == 179\n        return true\n    \n    if length == 181\n        return\
    \ true\n    \n    if length == 191\n        return true\n    \n    if length ==\
    \ 197\n        return true\n    \n    if length == 269\n        return true\n\
    \    \n    if length == 271\n        return true\n    \n    if length == 283\n\
    \        return true\n    \n    if length == 293\n        return true\n    \n\
    \    if length == 311\n        return true\n    \n    if length == 319\n     \
    \   return true\n    \n    if length == 331\n        return true\n    \n    if\
    \ length == 337\n        return true\n    \n    if length == 347\n        return\
    \ true\n    \n    if length == 353\n        return true\n    \n    if length ==\
    \ 361\n        return true\n    \n    if length == 369\n        return true\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"length\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcm8_di41.jl:46\nin expression starting at /tmp/tmpcm8_di41.jl:46\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = Set{Int}()\n\
    \    \n    for i in string.split(\"\")\n        prime_numbers.add(Int(i))\n  \
    \  \n    for i in prime_numbers\n        if prime_numbers.count(i) == Int(string.count(i))\n\
    \            return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite a function\
    \ that takes a string and returns true if the string\n    contains only letters\
    \ or false otherwise\n    Examples\n    >>> letters_only(\"Hello\")\n    true\n\
    \    >>> letters_only(\"abcdcba\")\n    false\n    >>> letters_only(\"kittens\"\
    )\n    false\n    >>> letters_only(\"orange\")\n    false\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcx2vfb4h.jl:25\nin expression starting at\
    \ /tmp/tmpcx2vfb4h.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length = true\n    \n    for i in string.chars\n        if\
    \ string.index(i) == 0 \n            prime_length = false\n            break\n\
    \        end\n    end\n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns true if the string\n    length\
    \ is an even number or false otherwise\n    Examples\n    >>> even_length(\"Hello\"\
    )\n    true\n    >>> even_length(\"abcdcba\")\n    false\n    >>> even_length(\"\
    kittens\")\n    false\n    >>> even_length(\"orange\")\n    true\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprvehzn9_.jl:27\nin expression starting at\
    \ /tmp/tmprvehzn9_.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = true\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2_9wiz2_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2_9wiz2_.jl:1\n\
    in expression starting at /tmp/tmp2_9wiz2_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length_bool = false\n\
    \    \n    if string == \"\"\n        prime_length_bool = true\n    else \n  \
    \      if string.length % 2 == 0\n            prime_length_bool = false\n    \
    \    else\n            prime_length_bool = true\n            \n            for\
    \ char in string\n                if char == \"a\"\n                    prime_length_bool\
    \ = false\n                    break\n                else\n                 \
    \   prime_length_bool = true\n                    break\n        end\n    end\n\
    \    return prime_length_bool\nend\n</cell>\n<code language=julia-1.3>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string\n    length is an even number or false\
    \ otherwise\n    Examples\n    >>> even_length(\"Hello\")\n    true\n    >>> even_length(\"\
    abcdcba\")\n    false\n    >>> even_length(\"kittens\")\n    false\n    >>> even_length(\"\
    orange\")\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63mlks22.jl:36\nin expression starting at\
    \ /tmp/tmp63mlks22.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    for character in string \n        \n        if character == character\
    \ \n            \n            prime_length = false \n            \n        else\
    \ \n            \n            if character == character - 1 \n               \
    \ \n                prime_length = true \n            \n            else \n  \
    \              \n                if character == character + 1 \n            \
    \        \n                    prime_length = true \n                \n      \
    \          else \n                    \n                    if character == character\
    \ + 2 \n                        \n                        prime_length = true\
    \ \n                    \n                    else \n                        \n\
    \                        if character == character + 3 \n                    \
    \        \n                            prime_length = true \n                \
    \        \n                    else \n                        \n             \
    \           if character == character + 4 \n                            \n   \
    \                         prime_length = true \n                        \n   \
    \                 else \n                        \n                        if\
    \ character == character + 5 \n                            \n                \
    \            prime_length = true \n                        \n                \
    \    else \n                        \n                        if character ==\
    \ character + 6 \n                            \n                            prime_length\
    \ = true \n                        \n                    else \n             \
    \           \n                        if character == character + 7 \n       \
    \                     \n                            prime_length = true \n   \
    \                     \n                    else \n                        \n\
    \                        if character == character + 8 \n                    \
    \        \n                            prime_length = true \n                \
    \        \n                    else \n                        \n             \
    \           if character == character + 9 \n                            \n   \
    \                         prime_length = true \n                        \n   \
    \                 else \n                        \n                        if\
    \ character == character + 10 \n                            \n               \
    \             prime_length = true \n                        \n               \
    \     else \n                        \n                        if character ==\
    \ character + 11 \n                            \n                            prime_length\
    \ = true \n                        \n                    else \n             \
    \           \n                        if character == character + 12 \n      \
    \                      \n                            prime_length = true \n  \
    \                      \n                    else \n                        \n\
    \                        if character == character + 13 \n                   \
    \         \n                            prime_length = true \n               \
    \         \n                    else \n                        \n            \
    \            if character == character + 14 \n                            \n \
    \                           prime_length = true \n                        \n \
    \                   else \n                        \n                        if\
    \ character == character + 15 \n                            \n               \
    \             prime_length = true \n                        \n               \
    \     else \n                        \n                        if character ==\
    \ character + 16 \n                            \n                            prime_length\
    \ = true \n                        \n                    else \n             \
    \           \n                        if character == character + 17 \n      \
    \                      \n                            prime_length = true \n  \
    \                      \n                    else \n                        \n\
    \                        if character == character + 18 \n                   \
    \         \n                            prime_length = true \n               \
    \         \n                    else \n                        \n            \
    \            if character == character + 19 \n                            \n \
    \                           prime_length = true \n                        \n \
    \                   else \n                        \n                        if\
    \ character == character + 20 \n                            \n               \
    \             prime_length = true \n                        \n               \
    \     else \n                        \n                        if character ==\
    \ character + 21 \n                            \n                            prime_length\
    \ = \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfs1y8hng.jl:1\nin expression starting at /tmp/tmpfs1y8hng.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    for i in string:\n        if i == \"a\" || i == \"e\" || i == \"\
    i\" || i == \"o\" || i == \"u\":\n            prime_length = true\n          \
    \  break\n    \n    return prime_length\n</code>\n<|/ a tags=julia,primes |>\n\
    <| a tags=julia,primes |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv2zvzq_g.jl:18\nin expression starting at\
    \ /tmp/tmpv2zvzq_g.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \    \n    string_length = len(string)\n    \n    if string_length < 2:\n    \
    \    return false\n    \n    if string_length == 2 or string_length == 3:\n  \
    \      return true\n    \n    if string_length < 4:\n        return false\n  \
    \  \n    if string_length == 4:\n        return true\n    \n    if string_length\
    \ == 5:\n        return true\n    \n    if string_length == 6:\n        return\
    \ true\n    \n    if string_length == 7:\n        return true\n    \n    if string_length\
    \ == 8:\n        return true\n    \n    if string_length == 9:\n        return\
    \ true\n    \n    if string_length == 10:\n        return true\n    \n    if string_length\
    \ == 11:\n        return true\n    \n    if string_length == 12 or string_length\
    \ == 13:\n        return true\n    \n    if string_length == 14 or string_length\
    \ == 15:\n        return true\n    \n    if string_length == 16 or string_length\
    \ == 17:\n        return true\n    \n    if string_length == 18 or string_length\
    \ == 19:\n        return true\n    \n    if string_length == 20 or string_length\
    \ == 21:\n        return true\n    \n    if string_length == 22 or string_length\
    \ == 23:\n        return true\n    \n    if string_length == 24 or string_length\
    \ == 25:\n        return true\n    \n    if string_length == 26 or string_length\
    \ == 27:\n        return true\n    \n    if string_length == 28 or string_length\
    \ == 29:\n        return true\n    \n    if string_length == 30 or string_length\
    \ == 31:\n        return true\n    \n    if string_length == 32 or string_length\
    \ == 33:\n        return true\n    \n    if string_length == 34 or string_length\
    \ == 35:\n        return true\n    \n    if string_length == 36 or string_length\
    \ == 37:\n        return true\n    \n    if string_length == 38 or string_length\
    \ == 39:\n        return true\n    \n    if string_length == 40 or string_length\
    \ == 41:\n        return true\n    \n    if string_length == 42 or string_length\
    \ == 43:\n        return true\n    \n    if string_length == 44 or string_length\
    \ == 45:\n        return true\n    \n    if string_length == 46 or string_length\
    \ == 47:\n        return true\n    \n    if string_length == 48 or string_length\
    \ == 49:\n        return true\n    \n    if string_length == 50 or string_length\
    \ == 51:\n        return true\n    \n    if string_length == 52 or string_length\
    \ == \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwnuhimoc.jl:20\nin expression starting at\
    \ /tmp/tmpwnuhimoc.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = true\
    \ \n    \n    for i in string.chars \n        \n        if i == 'a' || i == 'b'\
    \ || i == 'c' || i == 'd' || i == 'e' || i == 'f' || i == 'g' || i == 'h' || i\
    \ == 'i' || i == 'j' || i == 'k' || i == 'l' || i == 'm' || i == 'n' || i == 'o'\
    \ || i == 'p' || i == 'q' || i == 'r' || i == 's' || i == 't' || i == 'u' || i\
    \ == 'v' || i == 'w' || i == 'x' || i == 'y' || i == 'z' \n            \n    \
    \        prime_length = false \n            \n        else \n            \n  \
    \          prime_length = true \n            \n    return prime_length \nend \n\
    </cell>\n<code language=julia-1.4>\n\"\"\"Write a function that takes a string\
    \ and returns true if the string\n    length is a prime number or false otherwise\n\
    \    Examples\n    >>> prime_length(\"Hello\")\n    true\n    >>> prime_length(\"\
    abcdcba\")\n    true\n    >>> prime_length(\"kittens\")\n    true\n    >>> prime_length(\"\
    orange\")\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu5bed3xt.jl:29\nin expression starting at\
    \ /tmp/tmpu5bed3xt.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = true\n\
    \    \n    for i in string.split(\"\")\n        if prime_length == true\n    \
    \        break\n        if i == \"1\"\n            prime_length = false\n    \
    \    else\n            prime_length = true\n    end\n    return prime_length\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nWrite a function that takes a string and returns true\
    \ if the string\n    contains only letters or false otherwise\n    Examples\n\
    \    >>> letters_only(\"Hello\")\n    true\n    >>> letters_only(\"abcdcba\")\n\
    \    false\n    >>> letters_only(\"kittens\")\n    false\n    >>> letters_only(\"\
    orange\")\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvj2_nkpt.jl:27\nin expression starting at\
    \ /tmp/tmpvj2_nkpt.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number::Bool = true\
    \ \n    \n    for i in string.chars do \n        if i mod 2 != 0 then \n     \
    \       prime_number = false \n            break \n        end \n    end \n  \
    \  return prime_number \nend \n</cell>\n<code language=julia-1.3>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string\n    length is an even number or false\
    \ otherwise\n    Examples\n    >>> even_length(\"Hello\")\n    true\n    >>> even_length(\"\
    abcdcba\")\n    false\n    >>> even_length(\"kittens\")\n    false\n    >>> even_length(\"\
    orange\")\n    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4vmbvqte.jl:17\nin expression starting at /tmp/tmp4vmbvqte.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number::Bool = true\
    \ \n    \n    for character in string \n        \n        if character == character\
    \ \n            prime_number = false \n        \n        else \n            prime_number\
    \ = true \n    \n    return prime_number \nend \n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns true if the string is a palindrome\
    \ or false otherwise\nExamples\n>>> palindrome(\"hello\")\ntrue\n>>> palindrome(\"\
    racecar\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> p\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_mnpyb8.jl:27\nin expression starting at\
    \ /tmp/tmp5_mnpyb8.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    if string == \"\" \n        prime_length = true\n    else \n   \
    \     prime_length = false\n        \n        for i in string\n            if\
    \ string[i] == string[i+1]\n                prime_length = false\n           \
    \ end\n        end\n    end\n    \n    return prime_length\nend\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns true if the\
    \ string length is even\nor false otherwise\nExamples\n>>> even_string(\"Hello\"\
    )\ntrue\n>>> even_string(\"abcdcba\")\ntrue\n>>> even_string(\"kittens\")\nfalse\n\
    >>> even_string(\"orange\")\nfalse\n</text>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\"\
    ) == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplm2k621y.jl:31\nin expression starting at\
    \ /tmp/tmplm2k621y.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number::Bool = true\n\
    \    \n    for i in string.split(\"\")\n        if prime_number == true\n    \
    \        if string.count(i) == string.count(i-1) == string.count(i-2) == string.count(i-3)\
    \ == string.count(i-4) == string.count(i-5) == string.count(i-6) == string.count(i-7)\
    \ == string.count(i-8) == string.count(i-9) == string.count(i-10) == string.count(i-11)\
    \ == string.count(i-12) == string.count(i-13) == string.count(i-14) == string.count(i-15)\
    \ == string.count(i-16) == string.count(i-17) == string.count(i-18) == string.count(i-19)\
    \ == string.count(i-20) == string.count(i-21) == string.count(i-22) == string.count(i-23)\
    \ == string.count(i-24) == string.count(i-25) == string.count(i-26) == string.count(i-27)\
    \ == string.count(i-28) == string.count(i-29) == string.count(i-30) == string.count(i-31)\
    \ == string.count(i-32) == string.count(i-33) == string.count(i-34) == string.count(i-35)\
    \ == string.count(i-36) == string.count(i-37) == string.count(i-38) == string.count(i-39)\
    \ == string.count(i-40) == string.count(i-41) == string.count(i-42) == string.count(i-43)\
    \ == string.count(i-44) == string.count(i-45) == string.count(i-46) == string.count(i-47)\
    \ == string.count(i-48) == string.count(i-49) == string.count(i-50) == string.count(i-51)\
    \ == string.count(i-52) == string.count(i-53) == string.count(i-54) == string.count(i-55)\
    \ == string.count(i-56) == string.count(i-57) == string.count(i-58) == string.count(i-59)\
    \ == string.count(i-60) == string.count(i-61) == string.count(i-62) == string.count(i-63)\
    \ == string.count(i-64) == string.count(i-65) == string.count(i-66) == string.count(i-67)\
    \ == string.count(i-68) == string.count(i-69) == string.count(i-70) == string.count(i-71)\
    \ == string.count(i-72) == string.count(i-73) == string.count(i-74) == string.count(i-75)\
    \ == string.count(i-76) == string.count(i-77) == string.count(i-78) == string.count(i-79)\
    \ == string.count(i-80) == string.count(i-81) == string.count(i-82) == string.count(i-83)\
    \ == string.count(i-84) == string.count(i-85) == string.count(i-86) == string.count(i-87)\
    \ == string.count(i-88) == string.count(i-89) == string.count(i-90) == string.count(i-91)\
    \ == string.count(i-92) == string.count(i-93) == string.count(i-94) == string.count(i-95)\
    \ == string.count(i-96) == string.count(i-\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgr_ljlr_.jl:22\nin expression starting at\
    \ /tmp/tmpgr_ljlr_.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    if string == \"\" \n        prime_length = true \n    else \n  \
    \      \n        prime_length = false \n        \n        for i in string\n  \
    \          \n            if string[i] == string[i+1] \n                \n    \
    \            prime_length = false \n            \n            else \n        \
    \        \n                prime_length = true \n                \n          \
    \      break \n                \n    return prime_length \nend \n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns true if the\
    \ string\n    contains any letters other than letters a-z or A-Z\n    Examples\n\
    \    >>> contains_only_letters(\"Hello\")\n    true\n    >>> contains_only_letters(\"\
    abcdcba\")\n    false\n    >>> contains_only_letters(\"kittens\")\n    false\n\
    \    >>> contains_only_letters(\"orange\")\n    false\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcy_5kbs3.jl:37\nin expression starting at\
    \ /tmp/tmpcy_5kbs3.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = Set{Int}()\n\
    \    \n    for character in string\n        if character in prime_numbers\n  \
    \          return false\n        else\n            prime_numbers.add(character)\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string and returns true if the string length is an even number or false otherwise\n\
    Examples\n>>> even_length(\"Hello\")\ntrue\n>>> even_length(\"abcdcba\")\nfalse\n\
    >>> even_length(\"kittens\")\ntrue\n>>> even_length(\"orange\")\nfalse\n\"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3bt20eq.jl:25\nin expression starting at\
    \ /tmp/tmpv3bt20eq.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\n\
    \    \n    if string == \"\"\n        prime_length = true\n    else\n        prime_length\
    \ = false\n        for char in string\n            if char == \"a\"\n        \
    \        prime_length = true\n            else\n                if char == \"\
    b\"\n                    prime_length = true\n                else\n         \
    \           if char == \"c\"\n                        prime_length = true\n  \
    \                  else\n                        if char == \"d\"\n          \
    \                  prime_length = true\n                        else\n       \
    \                     if char == \"e\"\n                                prime_length\
    \ = true\n                            else\n                                if\
    \ char == \"f\"\n                                    prime_length = true\n   \
    \                             else\n                                    if char\
    \ == \"g\"\n                                        prime_length = true\n    \
    \                                else\n                                      \
    \  if char == \"h\"\n                                            prime_length\
    \ = true\n                                        else\n                     \
    \                       if char == \"i\"\n                                   \
    \             prime_length = true\n                                          \
    \  else\n                                                if char == \"j\"\n  \
    \                                                  prime_length = true\n     \
    \                                           else\n                           \
    \                         if char == \"k\"\n                                 \
    \                       prime_length = true\n                                \
    \                    else\n                                                  \
    \      if char == \"l\"\n                                                    \
    \        prime_length = true\n                                               \
    \         else\n                                                            if\
    \ char == \"m\"\n                                                            \
    \    prime_length = true\n                                                   \
    \         else\n                                                             \
    \   if char == \"n\"\n                                                       \
    \             prime_length = true\n                                          \
    \                      else\n                                                \
    \                    if char == \"o\"\n                                      \
    \                                  prime_length = true\n                     \
    \                                               else\n                       \
    \                                 if char == \"p\"\n                         \
    \                                   prime_length = true\n                    \
    \                                    else\n                                  \
    \                          if char == \"q\"\n                                \
    \                                prime_length = true\n                       \
    \                                     else\n                                 \
    \                               if char == \"r\"\n                           \
    \                                         prime_length = true\n              \
    \                                                  else\n                    \
    \                                                if char == \"s\"\n          \
    \                                                              prime_length =\
    \ true\n                                                                    else\n\
    \                                                        if char == \"t\"\n  \
    \                                                          prime_length = true\n\
    \                                                        else\n              \
    \                                              if char == \"u\"\n            \
    \                                                    prime_length = true\n   \
    \                                                         else\n             \
    \                                                   if char == \"v\"\n       \
    \                                                             prime_length = true\n\
    \                                                                else\n      \
    \                                                              if char == \"w\"\
    \n                                                                        prime_length\
    \ = true\n                                                                   \
    \ else\n                                                        if char == \"\
    x\"\n                                                            prime_length\
    \ = true\n                                                        else\n     \
    \                                                       if char == \"y\"\n   \
    \                                                             prime_length = true\n\
    \                                                            else\n          \
    \                                                      if char == \"z\"\n    \
    \                                                                prime_length\
    \ = true\n                                                                else\n\
    \                                                                    if char ==\
    \ \"A\"\n                                                                    \
    \    prime_length = true\n                                                   \
    \                 else\n                                                     \
    \   if char == \"B\"\n                                                       \
    \     prime_length = true\n                                                  \
    \      else\n                                                            if char\
    \ == \"C\"\n                                                                prime_length\
    \ = true\n                                                            else\n \
    \                                                               if char == \"\
    D\"\n                                                                    prime_length\
    \ = true\n\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptju6qzqb.jl:1\nin expression starting at /tmp/tmptju6qzqb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers::Set{Int}\
    \ = (2..math.floor(sqrt(string)))\n    \n    for i in prime_numbers\n        if\
    \ string % i == 0\n            return false\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns true if the\
    \ string contains any letter 'a' or 'e' or 'i' or 'o' or 'u'\nExamples\n>>> contains_letter(\"\
    Hello\")\ntrue\n>>> contains_letter(\"HellO\")\ntrue\n>>> contains_letter(\"kittens\"\
    )\nfalse\n>>> contains_letter(\"orange\")\nfalse\n>>> contains_letter(\"apple\"\
    )\nfalse\n>>> contains_letter(\"a\")\ntrue\n>>> contains_letter(\"e\")\ntrue\n\
    >>> contains_letter(\"i\")\ntrue\n>>> contains_letter(\"o\")\ntrue\n>>> contains_letter(\"\
    u\")\ntrue\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp86y3ng75.jl:22\nin expression starting at\
    \ /tmp/tmp86y3ng75.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = primes(string)\n\
    \    \n    if prime_numbers == []\n        true\n    else\n        false\n   \
    \ end\nend\n</cell>\n<code language=julia-1.3>\n@test prime_length(\"Hello\")\
    \ == true\n@test prime_length(\"abcdcba\") == true\n@test prime_length(\"kittens\"\
    ) == true\n@test prime_length(\"orange\") == false\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns true if the string contains\
    \ any character that is a vowel (a, e, i, o, u) or false otherwise\nExamples\n\
    >>> vowel(\"Hello\")\ntrue\n>>> vowel(\"abcdcba\")\ntrue\n>>> vowel(\"kittens\"\
    )\ntrue\n>>> vowel(\"orange\")\nfalse\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgp99mzgs.jl:23\nin expression starting at\
    \ /tmp/tmpgp99mzgs.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number::Bool = false\n\
    \    \n    for i in string:\n        if i == \"a\" || i == \"b\" || i == \"c\"\
    \ || i == \"d\" || i == \"e\" || i == \"f\" || i == \"g\" || i == \"h\" || i ==\
    \ \"i\" || i == \"j\" || i == \"k\" || i == \"l\" || i == \"m\" || i == \"n\"\
    \ || i == \"o\" || i == \"p\" || i == \"q\" || i == \"r\" || i == \"s\" || i ==\
    \ \"t\" || i == \"u\" || i == \"v\" || i == \"w\" || i == \"x\" || i == \"y\"\
    \ || i == \"z\" :\n            prime_number = true\n            break\n      \
    \  else :\n            prime_number = false\n            break\n    return prime_number\n\
    end\n</cell>\n<code language=julia-1.3>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.3>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns true if the string length is an even number or false otherwise\nExamples\n\
    >>> even_length(\"Hello\")\ntrue\n>>> even_length(\"abcdcba\")\nfalse\n>>> even_length(\"\
    kittens\")\ntrue\n>>> even_length(\"orange\")\nfalse\n</text>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqqj5ymzt.jl:18\nin expression starting at\
    \ /tmp/tmpqqj5ymzt.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    if string == \"\"\n  \
    \      return true\n    \n    prime_number::Int64 = 1\n    \n    for i in string.chars\n\
    \        if prime_number == 1\n            return false\n        if i % prime_number\
    \ == 0\n            prime_number = prime_number * prime_number\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string\n    length is an even number or false\
    \ otherwise\n    Examples\n    >>> even_length(\"Hello\")\n    true\n    >>> even_length(\"\
    abcdcba\")\n    false\n    >>> even_length(\"kittens\")\n    false\n    >>> even_length(\"\
    orange\")\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoqop_4kf.jl:29\nin expression starting at\
    \ /tmp/tmpoqop_4kf.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string.length == i\n           \
    \ return true\n        else\n            return false\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string and returns true if the\
    \ string is a palindrome or false otherwise\nExamples\n>>> palindrome(\"racecar\"\
    )\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzxyy3zrt.jl:24\nin expression starting at\
    \ /tmp/tmpzxyy3zrt.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\n\
    \    \n    if string == \"\"\n        return prime_length\n    \n    length::Int\
    \ = string.length\n    \n    if length == 1\n        return prime_length\n   \
    \ \n    if length == 2\n        return true\n    \n    prime::Bool = true\n  \
    \  \n    for i in 2..length\n        if string.charAt(i) == string.charAt(length-1)\n\
    \            prime = false\n            break\n    \n    if prime\n        return\
    \ prime_length\n    else\n        return false\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns true if the string\n    contains\
    \ only letters or false otherwise\n    Examples\n    >>> letters_only(\"Hello\"\
    )\n    true\n    >>> letters_only(\"abcdcba\")\n    false\n    >>> letters_only(\"\
    kittens\")\n    false\n    >>> letters_only(\"orange\")\n    false\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcyor91jx.jl:40\nin expression starting at\
    \ /tmp/tmpcyor91jx.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    if string == \"\" \n        prime_length = true \n    else \n  \
    \      \n        if string.length <= 1 \n            prime_length = true \n  \
    \      else \n            \n            if string.length == 2 \n             \
    \   prime_length = true \n            else \n                \n              \
    \  if string.length == 3 \n                    prime_length = true \n        \
    \        else \n                    \n                    if string.length ==\
    \ 4 \n                        prime_length = true \n                    else \n\
    \                        \n                        if string.length == 5 \n  \
    \                          prime_length = true \n                        else\
    \ \n                            \n                            if string.length\
    \ == 6 \n                                prime_length = true \n              \
    \              else \n                                \n                     \
    \           if string.length == 7 \n                                    prime_length\
    \ = true \n                                else \n                           \
    \         \n                                    if string.length == 8 \n     \
    \                                   prime_length = true \n                   \
    \                 else \n                                        \n          \
    \                              if string.length == 9 \n                      \
    \                      prime_length = true \n                                \
    \        else \n                                            \n               \
    \                             if string.length == 10 \n                      \
    \                          prime_length = true \n                            \
    \                else \n                                                \n   \
    \                                             if string.length == 11 \n      \
    \                                              prime_length = true \n        \
    \                                        else \n                             \
    \                       prime_length = false \n    return prime_length \nend \n\
    </cell>\n<code language=julia-1.3>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns true if the\
    \ string is a palindrome or false otherwise\nExamples\n>>> palindrome(\"Hello\"\
    )\ntrue\n>>> palindrome(\"hello\")\ntrue\n>>> palindrome(\"kittens\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> \nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyzavv702.jl:67\nin expression starting at\
    \ /tmp/tmpyzavv702.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string == i\n            return\
    \ true\n        else\n            return false\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite a function\
    \ that takes a string and returns true if the string\n    contains only letters\
    \ or false otherwise\n    Examples\n    >>> letters_only(\"Hello\")\n    true\n\
    \    >>> letters_only(\"abcdcba\")\n    false\n    >>> letters_only(\"kittens\"\
    )\n    false\n    >>> letters_only(\"orange\")\n    false\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp55ylo5n6.jl:23\nin expression starting at\
    \ /tmp/tmp55ylo5n6.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    for character in string:\n        if character == \" \":\n     \
    \       prime_length = true\n            break\n        if character == \"a\"\
    \ or character == \"e\" or character == \"i\" or character == \"o\" or character\
    \ == \"u\":\n            prime_length = true\n            break\n        if character\
    \ == \"A\" or character == \"E\" or character == \"I\" or character == \"O\" or\
    \ character == \"U\":\n            prime_length = true\n            break\n  \
    \      if character == \"0\":\n            prime_length = true\n            break\n\
    \        if character == \"1\":\n            prime_length = true\n           \
    \ break\n        if character == \"2\":\n            prime_length = true\n   \
    \         break\n        if character == \"3\":\n            prime_length = true\n\
    \            break\n        if character == \"4\":\n            prime_length =\
    \ true\n            break\n        if character == \"5\":\n            prime_length\
    \ = true\n            break\n        if character == \"6\":\n            prime_length\
    \ = true\n            break\n        if character == \"7\":\n            prime_length\
    \ = true\n            break\n        if character == \"8\":\n            prime_length\
    \ = true\n            break\n        if character == \"9\":\n            prime_length\
    \ = true\n            break\n        if character == \"+\" or character == \"\
    -\" or character == \"/\" or character == \"*\" or character == \"=\":\n     \
    \       prime_length = true\n            break\n        if character == \"<\"\
    \ or character == \">\" or character == \"{\" or character == \"}\":\n       \
    \     prime_length = true\n            break\n        if character == \".\" or\
    \ character == \"_\" or character == \"~\" or character == \"!\" or character\
    \ == \"@\" or character == \"#\" or character == \"$\" or character == \"%\" or\
    \ character == \"^\" or character == \"&\" or character == \"*\" or character\
    \ == \"(\" or character == \")\" or character == \"|\" or character == \";\" or\
    \ character == \",\" or character == \"/\" or character == \"?\" or character\
    \ == \"{\" or character == \"}\":\n            prime_length = true\n         \
    \   break\n        if character == \"\\\"\" or character == \"'\":\n         \
    \   prime_length = true\n            break\n        if character == \"{\" or character\
    \ == \"}\":\n            prime_length = true\n            break\n        if character\
    \ == \"[\" or character == \"]\":\n            prime_length = true\n         \
    \   break\n        if character == \"(\" or character == \")\":\n            prime_length\
    \ = true\n            break\n        if character == \"<\" or character == \"\
    >\":\n            prime_length = true\n            break\n        if character\
    \ == \"|\":\n            prime_length = true\n            break\n        if character\
    \ == \"\\\\\":\n            prime_length = true\n            break\n        if\
    \ character == \"\\\"\" or character == \"'\":\n            prime_length = true\n\
    \            break\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjo_cx79s.jl:18\nin expression starting at\
    \ /tmp/tmpjo_cx79s.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length = true\n\
    \    \n    for i in string.chars\n        if string.index(i) == 0 or string.index(i)\
    \ == string.size - 1\n            prime_length = false\n            break\n  \
    \      end\n    end\n    \n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns true if the string\n    contains\
    \ any uppercase letters or false otherwise\n    Examples\n    >>> contains_uppercase(\"\
    Hello\")\n    true\n    >>> contains_uppercase(\"abcdcba\")\n    false\n    >>>\
    \ contains_uppercase(\"kittens\")\n    false\n    >>> contains_uppercase(\"orange\"\
    )\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo6e26qh8.jl:18\nin expression starting at /tmp/tmpo6e26qh8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    if string == \"\"\n        return\
    \ true\n    \n    let n = string.len()\n    let primes = prime_numbers(n)\n  \
    \  \n    for i in 0..n-1\n        if primes[i]\n            return false\n   \
    \ \n    return true\nend\n</cell>\n<code language=julia-1.4>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.4>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string\n    length is greater than 10 or false\
    \ otherwise\n    Examples\n    >>> string_length(\"Hello\")\n    true\n    >>>\
    \ string_length(\"abcdcba\")\n    false\n    >>> string_length(\"kittens\")\n\
    \    false\n    >>> string_length(\"orange\")\n    false\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpseuuk3v2.jl:26\nin expression starting at\
    \ /tmp/tmpseuuk3v2.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    if string == \"\"\n        true\n\
    \    else\n        if string.length % 2 == 0\n            true\n        else\n\
    \            if string.length % 3 == 0\n                true\n            else\n\
    \                if string.length % 5 == 0\n                    true\n       \
    \         else\n                    false\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"Write a function that takes a string and returns\
    \ true if the string\n    length is a prime number or false otherwise\n    Examples\n\
    \    >>> prime_length(\"Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n\
    \    true\n    >>> prime_length(\"kittens\")\n    true\n    >>> prime_length(\"\
    orange\")\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp208gqwal.jl:30\nin expression starting at\
    \ /tmp/tmp208gqwal.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    if string == \"\"\n  \
    \      return true\n    \n    length::Int = string.len()\n    \n    if length\
    \ == 1\n        return true\n    \n    if length == 2\n        return true\n \
    \   \n    if length == 3\n        return true\n    \n    if length == 5\n    \
    \    return true\n    \n    if length == 7\n        return true\n    \n    if\
    \ length == 11\n        return true\n    \n    if length == 12\n        return\
    \ true\n    \n    if length == 13\n        return true\n    \n    if length ==\
    \ 17\n        return true\n    \n    if length == 19\n        return true\n  \
    \  \n    if length == 21 or length == 23\n        return true\n    \n    if length\
    \ == 25\n        return true\n    \n    if length == 27\n        return true\n\
    \    \n    if length == 29\n        return true\n    \n    if length == 31 or\
    \ length == 33\n        return true\n    \n    if length == 35\n        return\
    \ true\n    \n    if length == 37\n        return true\n    \n    if length ==\
    \ 39\n        return true\n    \n    if length == 41 or length == 43\n       \
    \ return true\n    \n    if length == 45\n        return true\n    \n    if length\
    \ == 47\n        return true\n    \n    if length == 49\n        return true\n\
    \    \n    if length == 51 or length == 53\n        return true\n    \n    if\
    \ length == 55\n        return true\n    \n    if length == 57\n        return\
    \ true\n    \n    if length == 59\n        return true\n    \n    if length ==\
    \ 61 or length == 63\n        return true\n    \n    if length == 65\n       \
    \ return true\n    \n    if length == 67\n        return true\n    \n    if length\
    \ == 69\n        return true\n    \n    if length == 71 or length == 73\n    \
    \    return true\n    \n    if length == 75\n        return true\n    \n    if\
    \ length == 77\n        return true\n    \n    if length == 79\n        return\
    \ true\n    \n    if length == 81 or length == 83\n        return true\n    \n\
    \    if length == 85\n        return true\n    \n    if length == 87\n       \
    \ return true\n    \n    if length == 89\n        return true\n    \n    if length\
    \ == 91 or length == 93\n        return true\n    \n    if length == 95\n    \
    \    return true\n    \n    if length == 97\n        return true\n    \n    if\
    \ length == 99\n        return true\n    \n    if length == 101\n        return\
    \ true\n    \n    if length == 103\n        return true\n    \n    if length ==\
    \ 105\n        return true\n    \n    if length == 107\n        return true\n\
    \    \n    if length == 109\n        return true\n    \n    if length == 111\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"length\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqw9q13m2.jl:50\nin expression starting at /tmp/tmpqw9q13m2.jl:50\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number = true\n\
    \    \n    for i in string:\n        if i == \"a\" or i == \"b\" or i == \"c\"\
    \ or i == \"d\" or i == \"e\" or i == \"f\" or i == \"g\" or i == \"h\" or i ==\
    \ \"i\" or i == \"j\" or i == \"k\" or i == \"l\" or i == \"m\" or i == \"n\"\
    \ or i == \"o\" or i == \"p\" or i == \"q\" or i == \"r\" or i == \"s\" or i ==\
    \ \"t\" or i == \"u\" or i == \"v\" or i == \"w\" or i == \"x\" or i == \"y\"\
    \ or i == \"z\":\n            prime_number = false\n            break\n      \
    \  \n    for i in string:\n        if i == \"a\" or i == \"b\" or i == \"c\" or\
    \ i == \"d\" or i == \"e\" or i == \"f\" or i == \"g\" or i == \"h\" or i == \"\
    i\" or i == \"j\" or i == \"k\" or i == \"l\" or i == \"m\" or i == \"n\" or i\
    \ == \"o\" or i == \"p\" or i == \"q\" or i == \"r\" or i == \"s\" or i == \"\
    t\" or i == \"u\" or i == \"v\" or i == \"w\" or i == \"x\" or i == \"y\" or i\
    \ == \"z\":\n            prime_number = false\n            break\n        \n \
    \   for i in string:\n        if i == \"a\" or i == \"b\" or i == \"c\" or i ==\
    \ \"d\" or i == \"e\" or i == \"f\" or i == \"g\" or i == \"h\" or i == \"i\"\
    \ or i == \"j\" or i == \"k\" or i == \"l\" or i == \"m\" or i == \"n\" or i ==\
    \ \"o\" or i == \"p\" or i == \"q\" or i == \"r\" or i == \"s\" or i == \"t\"\
    \ or i == \"u\" or i == \"v\" or i == \"w\" or i == \"x\" or i == \"y\" or i ==\
    \ \"z\":\n            prime_number = false\n            break\n        \n    for\
    \ i in string:\n        if i == \"a\" or i == \"b\" or i == \"c\" or i == \"d\"\
    \ or i == \"e\" or i == \"f\" or i == \"g\" or i == \"h\" or i == \"i\" or i ==\
    \ \"j\" or i == \"k\" or i == \"l\" or i == \"m\" or i == \"n\" or i == \"o\"\
    \ or i == \"p\" or i == \"q\" or i == \"r\" or i == \"s\" or i == \"t\" or i ==\
    \ \"u\" or i == \"v\" or i == \"w\" or i == \"x\" or i == \"y\" or i == \"z\"\
    :\n            prime_number = false\n            break\n        \n    for i in\
    \ string:\n        if i == \"a\" or i == \"b\" or i == \"c\" or i == \"d\" or\
    \ i == \"e\" or i == \"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg56oksfq.jl:18\nin expression starting at\
    \ /tmp/tmpg56oksfq.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length = true\n\
    \    \n    for i in string.chars:\n        if i == \"a\" or i == \"b\" or i ==\
    \ \"c\" or i == \"d\" or i == \"e\" or i == \"f\" or i == \"g\" or i == \"h\"\
    \ or i == \"i\" or i == \"j\" or i == \"k\" or i == \"l\" or i == \"m\" or i ==\
    \ \"n\" or i == \"o\" or i == \"p\" or i == \"q\" or i == \"r\" or i == \"s\"\
    \ or i == \"t\" or i == \"u\" or i == \"v\" or i == \"w\" or i == \"x\" or i ==\
    \ \"y\" or i == \"z\":\n            prime_length = false\n            break\n\
    \    \n    return prime_length\n\"\"\"\nWrite a function that takes a string and\
    \ returns true if the string\n    contains only letters or false otherwise\n \
    \   Examples\n    >>> letters_only(\"Hello\")\n    true\n    >>> letters_only(\"\
    abcdcba\")\n    false\n    >>> letters_only(\"kittens\")\n    false\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpni6krd93.jl:18\nin expression starting at\
    \ /tmp/tmpni6krd93.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    if string == \"\"\n        return prime_length\n    \n    for i\
    \ in string.chars\n        if string.chars.count(i) == 1 && string.chars.count(i)\
    \ == string.chars.count(i-1)\n            prime_length = true\n            break\n\
    \    end\n    return prime_length\nend\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.0>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nWrite a function that takes a string\
    \ and returns true if the string\n    contains only letters or false otherwise\n\
    \    Examples\n    >>> letters_only(\"Hello\")\n    true\n    >>> letters_only(\"\
    abcdcba\")\n    false\n    >>> letters_only(\"kittens\")\n    false\n    >>> letters_only(\"\
    orange\")\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgnzhwi8u.jl:27\nin expression starting at\
    \ /tmp/tmpgnzhwi8u.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = \n\
    \        true\n    \n    for i in string\n        if string.length % i == 0\n\
    \            prime_length = false\n            break\n        end\n    end\n \
    \   return prime_length\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns true if the string contains only letters a-z or A-Z or\
    \ both a-z and A-Z or false otherwise\nExamples\n>>> string_only_letters(\"Hello\"\
    )\ntrue\n>>> string_only_letters(\"abcdcba\")\ntrue\n>>> string_only_letters(\"\
    kittens\")\ntrue\n>>> string_only_letters(\"orange\")\nfalse\n>>> string_only_letters(\"\
    azerty\")\nfalse\n>>> string_only_letters(\"azertyuiop\")\nfalse\n>>> string_only_letters(\"\
    azertyuiop\")\nfalse\n>>> string_only_letters(\"azertyuiop\")\nfalse\n>>> string_only_letters(\"\
    azertyuiop\")\nfalse\n>>> string_only_letters(\"azertyuiop\")\nfalse\n>>> string_only_letters(\"\
    azertyuiop\")\nfalse\n>>> string_only_letters(\"azertyuiop\")\nfalse\n>>> string_only_letters(\"\
    azertyuiop\")\nfalse\n>>> string_only_letters(\"azertyuiop\")\nfalse\n>>> string_only_letters(\"\
    azertyuiop\")\nfalse\n>>> string_only_letters(\"azertyuiop\")\nfalse\n>>> string_only_letters(\"\
    azertyuiop\")\nfalse\n>>> string_only_letters(\"azertyuiop\")\nfalse\n>>> string_only_letters(\"\
    azertyuiop\")\nfalse\n>>> string_only_letters(\"azertyuiop\")\nfalse\n>>> string_only_letters(\"\
    azertyuiop\")\nfalse\n>>> string_only_letters(\"azertyuiop\")\nfalse\n>>> string_only_letters(\"\
    azertyuiop\")\nfalse\n>>> string_only_letters(\"azertyuiop\")\nfalse\n>>> string_only_letters(\"\
    azertyuiop\")\nfalse\n>>> string_only_letters(\"azertyuiop\")\nfalse\n>>> string_only_letters(\"\
    azertyuiop\")\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1bx28w2z.jl:26\nin expression starting at\
    \ /tmp/tmp1bx28w2z.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n\
    \    \n    string_length = len(string)\n    \n    if string_length < 2:\n    \
    \    return true\n    \n    if string_length == 2 or string_length == 3:\n   \
    \     return true\n    \n    if string_length < 5:\n        return false\n   \
    \ \n    if string_length < 7:\n        return false\n    \n    if string_length\
    \ < 11:\n        return false\n    \n    if string_length < 13:\n        return\
    \ false\n    \n    if string_length < 17:\n        return false\n    \n    if\
    \ string_length < 19:\n        return false\n    \n    for i in prime_numbers:\n\
    \        if string_length == i:\n            return true\n    \n    return false\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nWrite a function that takes a string and returns true\
    \ if the string\n    length is a prime number or false otherwise\n    Examples\n\
    \    >>> prime_length(\"Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n\
    \    true\n    >>> prime_length(\"kittens\")\n    true\n    >>> prime_length(\"\
    orange\")\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3u8ngkog.jl:20\nin expression starting at\
    \ /tmp/tmp3u8ngkog.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string == i\n            return\
    \ true\n        else\n            return false\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns true if the string is a palindrome\
    \ or false otherwise\nExamples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    race\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph5s0hw35.jl:23\nin expression starting at\
    \ /tmp/tmph5s0hw35.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    if string == \"\"\n  \
    \      true\n    else\n        if string.length % 2 == 0\n            false\n\
    \        else\n            if string.length % 3 == 0\n                true\n \
    \           else\n                if string.length % 5 == 0\n                \
    \    true\n                else\n                    if string.length % 7 == 0\n\
    \                        true\n                    else\n                    \
    \    false\n</code>\n<|/ a tags=haskell,primes |>\n<| c |>\nThis doesn't work.\
    \ Try it with `prime_length \"abc\"`.\n<|/ c |>\n<| c |>\nYes, I see that now.\
    \ Thanks for pointing that out. I will fix my answer.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I am new to haskell and I am still trying to understand your\
    \ code. Could you please explain to me what does this line mean?\n<|/ c |>\n<|\
    \ c |>\n`if string.length % 2 == 0\n            false\n        else\n        \
    \    if string.length % 3 == 0\n                true\n            else\n     \
    \           if string.length % 5 == 0\n                    true\n            \
    \    else\n                    if string.length % 7 == 0\n                   \
    \     true\n                    else\n                        false`\n<|/ c |>\n\
    <| c |>\nI added some comments to my answer. Hope that helps.\n<|/ c |>\n<| a\
    \ dscore=1 |>\nI wrote this simple function which checks if a number is prime\
    \ or not\n<code>\nisPrime :: Int -> Bool\nisPrime n = if n == 0 || n == 1 then\
    \ True else if n == 2 then True else if n == 3 then True else if n == 4 then True\
    \ else if n == 5 then True else if n == 6 then True else if n == 7 then True else\
    \ if n == 8 then True else if n == 9 then True else if n == 10 then True else\
    \ if n == 11 then True else if n == 12 then True else if n == 13 then True else\
    \ if n == 14 then True else if n == 15 then True else if n == 16 then True else\
    \ if n == 17 then True else if n == 18 then True else if n == 19 then True else\
    \ if n == 20 then True else if n == 21 then True else if n == 22 then True else\
    \ if n == 23 then True else if n == 24 then True else if n == 25 then True else\
    \ if n == 26 then True else if n == 27 then True else if n == 28 then True else\
    \ if n == 29 then True else if n:30 then True else if n:31 then True else if n\
    \ == 32 then True else if n == 33 then True else if n == 34 then True else if\
    \ n == 35 \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbzgbur1e.jl:31\nin expression starting at\
    \ /tmp/tmpbzgbur1e.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length = true\n\
    \    \n    for i in string:\n        if i == \"a\" or i == \"b\" or i == \"c\"\
    \ or i == \"d\" or i == \"e\" or i == \"f\" or i == \"g\" or i == \"h\" or i ==\
    \ \"i\" or i == \"j\" or i == \"k\" or i == \"l\" or i == \"m\" or i == \"n\"\
    \ or i == \"o\" or i == \"p\" or i == \"q\" or i == \"r\" or i == \"s\" or i ==\
    \ \"t\" or i == \"u\" or i == \"v\" or i == \"w\" or i == \"x\" or i == \"y\"\
    \ or i == \"z\":\n            prime_length = false\n            break\n      \
    \  \n    if prime_length == true:\n        return true\n    else:\n        return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns true if the string contains any letter 'a' or 'e' or 'i' or 'o' or 'u'\
    \ or 'y' or 'A' or 'E' or 'I' or 'O' or 'U' or 'Y'\nExamples\n>>> contains_vowel(\"\
    Hello\")\ntrue\n>>> contains_vowel(\"abcdcba\")\ntrue\n>>> contains_vowel(\"kittens\"\
    )\ntrue\n>>> contains_vowel(\"orange\")\nfalse\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_itzvbct.jl:18\nin expression starting at\
    \ /tmp/tmp_itzvbct.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length = true\n\
    \    \n    for i in string:\n        if i == \"a\" || i == \"e\" || i == \"i\"\
    \ || i == \"o\" || i == \"u\" || i == \"A\" || i == \"E\" || i == \"I\" || i ==\
    \ \"O\" || i == \"U\"\n            prime_length = false\n            break\n \
    \   \n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nWrite a function that takes a string\
    \ and returns true if the string\n    contains only letters or false otherwise\n\
    \    Examples\n    >>> letters_only(\"Hello\")\n    true\n    >>> letters_only(\"\
    abcdcba\")\n    false\n    >>> letters_only(\"kittens\")\n    false\n    >>> letters_only(\"\
    orange\")\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm1ip6wa8.jl:18\nin expression starting at\
    \ /tmp/tmpm1ip6wa8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\n\
    \    \n    if string == \"\"\n        prime_length = true\n    else\n        prime_length\
    \ = false\n        for i in string\n            if string[i] == string[i+1]\n\
    \                prime_length = false\n            else\n                prime_length\
    \ = true\n        end\n    end\n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns true if the string\n    length\
    \ is an even number or false otherwise\n    Examples\n    >>> even_length(\"Hello\"\
    )\n    true\n    >>> even_length(\"abcdcba\")\n    false\n    >>> even_length(\"\
    kittens\")\n    false\n    >>> even_length(\"orange\")\n    false\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjna9wmqr.jl:30\nin expression starting at\
    \ /tmp/tmpjna9wmqr.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    if string == \"\"\n  \
    \      true\n    else\n        if string.length % 2 == 0\n            true\n \
    \       else\n            if string.length % 3 == 0\n                true\n  \
    \          else\n                if string.length % 5 == 0\n                 \
    \   true\n                else\n                    false\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis is not an answer to the question. Also the code is not indented\
    \ properly.\n<|/ c |>\n<| c |>\nI fixed the indentation. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| c |>\nThe indentation is not the problem here. The problem\
    \ is that the code is not indented properly.\n<|/ c |>\n<| c |>\nI fixed the indentation.\
    \ Thanks for pointing that out.\n<|/ c |>\n<| c |>\nI fixed the indentation. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| a tags=haskell |>\n<code>\nprime_length\
    \ :: String -> Bool\nprime_length \"\" = True\nprime_length (x:xs) = x `mod` 2\
    \ == 0 || x `mod` 3 == 0 || x `mod` 5 == 0 || prime_length xs\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThis is not an answer to the question. Also the code is\
    \ not indented properly.\n<|/ c |>\n<| c |>\nI fixed the indentation. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| a tags=haskell |>\n<code>\nprime_length ::\
    \ String -> Bool\nprime_length \"\" = True\nprime_length (x:xs) = x `mod` 2 ==\
    \ 0 || x `mod` 3 == 0 || x `mod` 5 == 0 || prime_length xs\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis is not an answer to the question. Also the code is not indented\
    \ properly.\n<|/ c |>\n<| c |>\nI fixed the indentation. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| a tags=haskell |>\n<code>\nprime_length :: String -> Bool\n\
    prime_length \"\" = True\nprime_length (x:xs) = x `mod` 2 == 0 || x `mod` 3 ==\
    \ 0 || x `mod` 5 == 0 || prime_length xs\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This is not an answer to the question. Also the code is not indented properly.\n\
    <|/ c |>\n<| c |>\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2bwseu2n.jl:28\nin expression starting at\
    \ /tmp/tmp2bwseu2n.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\n\
    \    \n    if string == \"\"\n        return prime_length\n    \n    prime_length::Bool\
    \ = true\n    \n    length::Int = length(string)\n    \n    if length == 1\n \
    \       return prime_length\n    \n    if length <= 2\n        return prime_length\n\
    \    \n    prime_length::Bool = false\n    \n    prime_length::Bool = true\n \
    \   \n    for i in 2..length\n        if ((string[i]) == true)\n            prime_length::Bool\
    \ = false\n            break\n    \n    return prime_length\nend\n</cell>\n<code\
    \ language=julia-1.4>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"orange\")\n</cell>\n\
    <code language=julia-1.4>\nprime_length(\"orange\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"orange\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"\
    orange\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"orange\")\n</cell>\n\
    <code language=julia-1.4>\nprime_length(\"orange\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"orange\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"\
    orange\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"orange\")\n</cell>\n\
    <code language=julia-1.4>\nprime_length(\"orange\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"orange\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"\
    orange\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"orange\")\n</cell>\n\
    <code language=julia-1.4>\nprime_length(\"orange\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"orange\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"\
    orange\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"orange\")\n</cell>\n\
    <code language=julia-1.4>\nprime_length(\"orange\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"orange\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"\
    orange\")\n\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0z7y4d3w.jl:41\nin expression starting at\
    \ /tmp/tmp0z7y4d3w.jl:41\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers::Set{Int}=\
    \ Set()\n    \n    for i in string\n        prime_numbers.add(i)\n    end\n  \
    \  \n    for i in prime_numbers\n        if prime_numbers.count(i) == string.length\n\
    \            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp10xelm00.jl:28\nin expression starting at\
    \ /tmp/tmp10xelm00.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbg5o723y.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbg5o723y.jl:1\n\
    in expression starting at /tmp/tmpbg5o723y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number::Bool = false\
    \ \n    \n    for character in string:\n        if character == \"a\" || character\
    \ == \"b\" || character == \"c\" || character == \"d\" || character == \"e\" ||\
    \ character == \"f\" || character == \"g\" || character == \"h\" || character\
    \ == \"i\" || character == \"j\" || character == \"k\" || character == \"l\" ||\
    \ character == \"m\" || character == \"n\" || character == \"o\" || character\
    \ == \"p\" || character == \"q\" || character == \"r\" || character == \"s\" ||\
    \ character == \"t\" || character == \"u\" || character == \"v\" || character\
    \ == \"w\" || character == \"x\" || character == \"y\" || character == \"z\" :\n\
    \            prime_number = true\n            break\n        else :\n        \
    \    prime_number = false\n            break\n    return prime_number\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"Write a function that takes a string and returns\
    \ true if the string\n    contains only letters or false otherwise\n    Examples\n\
    \    >>> letters_only(\"Hello\")\n    true\n    >>> letters_only(\"abcdcba\")\n\
    \    false\n    >>> letters_only(\"kittens\")\n    false\n    >>> letters_only(\"\
    orange\")\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkvxpi443.jl:18\nin expression starting at\
    \ /tmp/tmpkvxpi443.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number::Bool = true\n\
    \    \n    for character in string:\n        if character == \"a\" || character\
    \ == \"e\" || character == \"i\" || character == \"o\" || character == \"u\" ||\
    \ character == \"A\" || character == \"E\" || character == \"I\" || character\
    \ == \"O\" || character == \"U\"\n            prime_number = false\n         \
    \   break\n    \n    if prime_number\n        return true\n    else\n        return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns true if the string contains only letters a-z or A-Z or only numbers\
    \ 0-9 or only special characters !@#$%^&*()_+-=?;:'\",.<>[]{}()/ or only spaces\
    \ \" \" otherwise false otherwise\nExamples\n>>> only_letters(\"Hello\")\ntrue\n\
    >>> only_letters(\"abcdcba\")\nfalse\n>>> only_letters(\"kittens\")\nfalse\n>>>\
    \ only_letters(\"orange\")\nfalse\n>>> only_letters(\"!@#$%^&*()_+-=?;:'\",.<>[]{}()/\"\
    )\nfalse\n>>> only_letters(\"   \")\nfalse\n>>> only_letters(\"   \")\nfalse\n\
    >>> only_letters(\"   \")\nfalse\n>>> only_letters(\"   \")\nfalse\n>>> only_letters(\"\
    \   \")\nfalse\n>>> only_letters(\"   \")\nfalse\n>>> only_letters(\"   \")\n\
    false\n>>> only_letters(\"   \")\nfalse\n>>> only_letters(\"   \")\nfalse\n>>>\
    \ only_letters(\"   \")\nfalse\n>>> only_letters(\"   \")\nfalse\n>>> only_letters(\"\
    \   \")\nfalse\n>>> only_letters(\"   \")\nfalse\n>>> only_letters(\"   \")\n\
    false\n>>> only_letters(\"   \")\nfalse\n>>> only_letters(\"   \")\nfalse\n>>>\
    \ only_letters(\"   \")\nfalse\n>>> only_letters(\"   \")\nfalse\n>>> only_letters(\"\
    \   \")\nfalse\n>>> only_letters(\"   \")\nfalse\n>>> only_letters(\"   \")\n\
    false\n>>> only_letters(\"   \")\nfalse\n>>> only_letters(\"   \")\nfalse\n>>>\
    \ only_letters(\"   \")\nfalse\n>>> only_letters(\"   \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp28swf8k0.jl:18\nin expression starting at\
    \ /tmp/tmp28swf8k0.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number = true\n\
    \    \n    for i in string\n        if i == \"a\"\n            prime_number =\
    \ false\n            break\n        if i == \"b\"\n            prime_number =\
    \ false\n            break\n        if i == \"c\"\n            prime_number =\
    \ false\n            break\n        if i == \"d\"\n            prime_number =\
    \ false\n            break\n        if i == \"e\"\n            prime_number =\
    \ false\n            break\n        if i == \"f\"\n            prime_number =\
    \ false\n            break\n        if i == \"g\"\n            prime_number =\
    \ false\n            break\n        if i == \"h\"\n            prime_number =\
    \ false\n            break\n        if i == \"i\"\n            prime_number =\
    \ false\n            break\n        if i == \"j\"\n            prime_number =\
    \ false\n            break\n        if i == \"k\"\n            prime_number =\
    \ false\n            break\n        if i == \"l\"\n            prime_number =\
    \ false\n            break\n        if i == \"m\"\n            prime_number =\
    \ false\n            break\n        if i == \"n\"\n            prime_number =\
    \ false\n            break\n        if i == \"o\"\n            prime_number =\
    \ false\n            break\n        if i == \"p\"\n            prime_number =\
    \ false\n            break\n        if i == \"q\"\n            prime_number =\
    \ false\n            break\n        if i == \"r\"\n            prime_number =\
    \ false\n            break\n        if i == \"s\"\n            prime_number =\
    \ false\n            break\n        if i == \"t\"\n            prime_number =\
    \ false\n            break\n        if i == \"u\"\n            prime_number =\
    \ false\n            break\n        if i == \"v\"\n            prime_number =\
    \ false\n            break\n        if i == \"w\"\n            prime_number =\
    \ false\n            break\n        if i == \"x\"\n            prime_number =\
    \ false\n            break\n        if i == \"y\"\n            prime_number =\
    \ false\n            break\n        if i == \"z\"\n            prime_number =\
    \ false\n            break\n        if i == \"A\"\n            prime_number =\
    \ false\n            break\n        if i == \"B\"\n            prime_number =\
    \ false\n            break\n        if i == \"C\"\n            prime_number =\
    \ false\n            break\n        if i == \"D\"\n            prime_number =\
    \ false\n            break\n        if i == \"E\"\n            prime_number =\
    \ false\n            break\n        if i == \"F\"\n            prime_number =\
    \ false\n            break\n        if i == \"G\"\n            prime_number =\
    \ false\n            break\n        if i == \"H\"\n            prime_number =\
    \ false\n            break\n        if i == \"I\"\n            prime_number =\
    \ false\n            break\n        if i == \"J\"\n            prime_number =\
    \ false\n            break\n        if i == \"K\"\n\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp21xrkow3.jl:1\nin expression starting at /tmp/tmp21xrkow3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = prime_numbers()\n\
    \    \n    for i in string\n        if prime_numbers.contains(i)\n           \
    \ return true\n        else\n            return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns true if the\
    \ string\n    contains only letters or false otherwise\n    Examples\n    >>>\
    \ letters_only(\"Hello\")\n    true\n    >>> letters_only(\"abcdcba\")\n    false\n\
    \    >>> letters_only(\"kittens\")\n    false\n    >>> letters_only(\"orange\"\
    )\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzburg26f.jl:24\nin expression starting at\
    \ /tmp/tmpzburg26f.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length_bool = string.length\
    \ % 2 == 0\n    \n    if prime_length_bool == true\n        prime_length_bool\
    \ = string.length % 3 == 0\n    \n    if prime_length_bool == true\n        prime_length_bool\
    \ = string.length % 5 == 0\n    \n    if prime_length_bool == true\n        prime_length_bool\
    \ = string.length % 7 == 0\n    \n    if prime_length_bool == true\n        prime_length_bool\
    \ = string.length % 11 == 0\n    \n    if prime_length_bool == true\n        prime_length_bool\
    \ = string.length % 13 == 0\n    \n    if prime_length_bool == true\n        prime_length_bool\
    \ = string.length % 17 == 0\n    \n    if prime_length_bool == true\n        prime_length_bool\
    \ = string.length % 19 == 0\n    \n    if prime_length_bool == true\n        prime_length_bool\
    \ = string.length % 23 == 0\n    \n    if prime_length_bool == true\n        prime_length_bool\
    \ = string.length % 29 == 0\n    \n    if prime_length_bool == true\n        prime_length_bool\
    \ = string.length % 31 == 0\n    \n    if prime_length_bool == true\n        prime_length_bool\
    \ = string.length % 37 == 0\n    \n    if prime_length_bool == true\n        prime_length_bool\
    \ = string.length % 41 == 0\n    \n    if prime_length_bool == true\n        prime_length_bool\
    \ = string.length % 43 == 0\n    \n    if prime_length_bool == true\n        prime_length_bool\
    \ = string.length % 47 == 0\n    \n    if prime_length_bool == true\n        prime_length_bool\
    \ = string.length % 53 == 0\n    \n    if prime_length_bool == true\n        prime_length_bool\
    \ = string.length % 59 == 0\n    \n    if prime_length_bool == true\n        prime_length_bool\
    \ = string.length % 61 == 0\n    \n    if prime_length_bool == true\n        prime_length_bool\
    \ = string.length % 67 == 0\n    \n    if prime_length_bool == true\n        prime_length_bool\
    \ = string.length % 73 == 0\n    \n    if prime_length_bool == true\n        prime_length_bool\
    \ = string.length % 79 == 0\n    \n    if prime_length_bool == true\n        prime_length_bool\
    \ = string.length % 83 == 0\n    \n    if prime_length_bool == true\n        prime_length_bool\
    \ = string.length % 89 == 0\n    \n    if prime_length_bool == true\n        prime_length_\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphf1ffwdm.jl:1\nin expression starting at /tmp/tmphf1ffwdm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n</cell>\n<cell>\nprime_length(\"Hello\")\n</cell>\n\
    <cell>\nprime_length(\"abcdcba\")\n</cell>\n<cell>\nprime_length(\"kittens\")\n\
    </cell>\n<cell>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns true if the string\n    length is\
    \ an even number or false otherwise\n    Examples\n    >>> even_length(\"Hello\"\
    )\n    true\n    >>> even_length(\"abcdcba\")\n    false\n    >>> even_length(\"\
    kittens\")\n    false\n    >>> even_length(\"orange\")\n    true\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp40bi9soz.jl:18\nin expression starting at\
    \ /tmp/tmp40bi9soz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\n\
    \    \n    prime_length::Bool = string.length % 2 == 0\n    \n    if prime_length\n\
    \        prime_length::Bool = string.length >= 2\n    end\n    \n    return prime_length\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns true if the string\n    length is an even number or false otherwise\n\
    \    Examples\n    >>> even_length(\"Hello\")\n    true\n    >>> even_length(\"\
    abcdcba\")\n    false\n    >>> even_length(\"kittens\")\n    false\n    >>> even_length(\"\
    orange\")\n    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: multiple type declarations for \"prime_length\"\
    \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp83i82vf2.jl:1\nin expression\
    \ starting at /tmp/tmp83i82vf2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    if string == \"\"\n        prime_length = true\n    else\n     \
    \   \n        for character in string\n            if character == \"a\"\n   \
    \             prime_length = true\n            else\n                if character\
    \ == \"b\"\n                    prime_length = true\n                else\n  \
    \                  if character == \"c\"\n                        prime_length\
    \ = true\n                    else\n                        if character == \"\
    d\"\n                            prime_length = true\n                       \
    \ else\n                            if character == \"e\"\n                  \
    \              prime_length = true\n                            else\n       \
    \                         if character == \"f\"\n                            \
    \        prime_length = true\n                                else\n         \
    \                           if character == \"g\"\n                          \
    \              prime_length = true\n                                    else\n\
    \                                        if character == \"h\"\n             \
    \                               prime_length = true\n                        \
    \                else\n                                            if character\
    \ == \"i\"\n                                                prime_length = true\n\
    \                                            else\n                          \
    \                      if character == \"j\"\n                               \
    \                     prime_length = true\n                                  \
    \              else\n                                                    if character\
    \ == \"k\"\n                                                        prime_length\
    \ = true\n                                                    else\n         \
    \                                               if character == \"l\"\n      \
    \                                                      prime_length = true\n \
    \                                                       else\n               \
    \                                             if character == \"m\"\n        \
    \                                                        prime_length = true\n\
    \                                                            else\n          \
    \                                                      if character == \"n\"\n\
    \                                                                    prime_length\
    \ = true\n                                                                else\n\
    \                                                                    if character\
    \ == \"o\"\n                                                                 \
    \       prime_length = true\n                                                \
    \                    else\n                                                  \
    \      if character == \"p\"\n                                               \
    \             prime_length = true\n                                          \
    \              else\n                                                        \
    \    if character == \"q\"\n                                                 \
    \               prime_length = true\n                                        \
    \                    else\n                                                  \
    \              if character == \"r\"\n                                       \
    \                             prime_length = true\n                          \
    \                                      else\n                                \
    \                                    if character == \"s\"\n                 \
    \                                                       prime_length = true\n\
    \                                                                    else\n  \
    \                                                      if character == \"t\"\n\
    \                                                            prime_length = true\n\
    \                                                        else\n              \
    \                                              if character == \"u\"\n       \
    \                                                         prime_length = true\n\
    \                                                            else\n          \
    \                                                      if character == \"v\"\n\
    \                                                                    prime_length\
    \ = true\n                                                                else\n\
    \                                                                    if character\
    \ == \"w\"\n                                                                 \
    \       prime_length = true\n                                                \
    \                    else\n                                                  \
    \      if character == \"x\"\n                                               \
    \             prime_length = true\n                                          \
    \              else\n                                                        \
    \    if character == \"y\"\n                                                 \
    \               prime_length = true\n                                        \
    \                    else\n                                                  \
    \              if character == \"z\"\n                                       \
    \                             prime_length = true\n                          \
    \                                      else\n                                \
    \                                    if character == \"A\"\n                 \
    \                                                       prime_length = true\n\
    \                                                                    else\n  \
    \                                                      if character == \"B\"\n\
    \                                                            prime_length = true\n\
    \                                                        else\n              \
    \                                              if character == \"C\"\n       \
    \                                                         prime_length = true\n\
    \                                                            else\n          \
    \                                                      if character == \"D\"\n\
    \                                                                    prime_length\
    \ = true\n                                                                else\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp4srujj48.jl:109\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4srujj48.jl:1\n\
    in expression starting at /tmp/tmp4srujj48.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length = true\n\
    \    \n    for i in string:\n        if i == \"a\" or i == \"b\" or i == \"c\"\
    \ or i == \"d\" or i == \"e\" or i == \"f\" or i == \"g\" or i == \"h\" or i ==\
    \ \"i\" or i == \"j\" or i == \"k\" or i == \"l\" or i == \"m\" or i == \"n\"\
    \ or i == \"o\" or i == \"p\" or i == \"q\" or i == \"r\" or i == \"s\" or i ==\
    \ \"t\" or i == \"u\" or i == \"v\" or i == \"w\" or i == \"x\" or i == \"y\"\
    \ or i == \"z\":\n            prime_length = false\n            break\n    \n\
    \    return prime_length\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd7f8pd4u.jl:18\nin expression starting at\
    \ /tmp/tmpd7f8pd4u.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = \n\
    \        true\n        for char in string\n            if char == \"a\"\n    \
    \            || char == \"e\"\n                || char == \"i\"\n            \
    \    || char == \"o\"\n                || char == \"u\"\n            else false\n\
    \        end\n    return prime_length\nend\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.3>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns true if the string\n    contains\
    \ only letters or false otherwise\n    Examples\n    >>> letter_only(\"Hello\"\
    )\n    true\n    >>> letter_only(\"abcdcba\")\n    false\n    >>> letter_only(\"\
    kittens\")\n    false\n    >>> letter_only(\"orange\")\n    false\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"||\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv60lpl7g.jl:19\nin expression starting at\
    \ /tmp/tmpv60lpl7g.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number::Bool = true\
    \ \n    \n    for char in string:\n        if char == \"a\" || char == \"e\" ||\
    \ char == \"i\" || char == \"o\" || char == \"u\" || char == \"A\" || char ==\
    \ \"E\" || char == \"I\" || char == \"O\" || char == \"U\"\n            prime_number\
    \ = false\n            break\n    return prime_number\nend\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.3>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns true if the string length is\
    \ even\nor false otherwise\nExamples\n>>> even_length(\"Hello\")\ntrue\n>>> even_length(\"\
    abcdcba\")\nfalse\n>>> even_length(\"kittens\")\ntrue\n>>> even_length(\"orange\"\
    )\nfalse\n</text>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\n\
    candidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2vbpkvha.jl:18\nin expression starting at\
    \ /tmp/tmp2vbpkvha.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string.len() == i\n            return\
    \ true\n    return false\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string contains any letter from A to Z\nExamples\n\
    >>> contains_letter(\"Hello\")\ntrue\n>>> contains_letter(\"abcdcba\")\ntrue\n\
    >>> contains_letter(\"kittens\")\ntrue\n>>> contains_letter(\"orange\")\nfalse\n\
    >>> contains_letter(\"a\")\nfalse\n>>> contains_letter(\"A\")\ntrue\n>>> contains_letter(\"\
    Z\")\ntrue\n>>> contains_letter(\"123\")\nfalse\n>>> contains_letter(\"abc\")\n\
    false\n>>> contains_letter(\"abcde\")\nfalse\n>>> contains_letter(\"abcdef\")\n\
    false\n>>> contains_letter(\"abcdefg\")\nfalse\n>>> contains_letter(\"abcdefgh\"\
    )\nfalse\n>>> contains_letter(\"abcdefghi\")\nfalse\n>>> contains_letter(\"abcdefghij\"\
    )\nfalse\n>>> contains_letter(\"abcdefghijk\")\nfalse\n>>> contains_letter(\"\
    abcdefghijkl\")\nfalse\n>>> contains_letter(\"abcdefghijklm\")\nfalse\n>>> contains_letter(\"\
    abcdefghijklmn\")\nfalse\n>>> contains_letter(\"abcdefghijklmn\")\nfalse\n>>>\
    \ contains_letter(\"abcdefghijklmn\")\nfalse\n>>> contains_letter(\"abcdefghijklmn\"\
    )\nfalse\n>>> contains_letter(\"abcdefghijklmn\")\nfalse\n>>> contains_letter(\"\
    abcdefghijklmn\")\nfalse\n>>> contains_letter(\"abcdefghijklmn\")\nfalse\n>>>\
    \ contains_letter(\"abcdefghijklmn\")\nfalse\n>>> contains_letter(\"abcdefghijklmn\"\
    )\nfalse\n>>> contains_letter(\"abcdefghijklmn\")\nfalse\n>>> contains_letter(\"\
    abcdefghijklmn\")\nfalse\n>>> contains_letter(\"abcdefghijklmn\")\nfalse\n>>>\
    \ contains_letter(\"abcdefghijkl\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa94sy9ok.jl:22\nin expression starting at\
    \ /tmp/tmpa94sy9ok.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    if string == \"\"\n  \
    \      return true\n    \n    if string.length % 2 == 0\n        return false\n\
    \    \n    \n    for i in 2..string.length - 1\n        if string.charAt(i) ==\
    \ string.charAt(i-1)\n            return false\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns true if the\
    \ string\n    contains any uppercase letters or false otherwise\n    Examples\n\
    \    >>> contains_uppercase(\"Hello\")\n    true\n    >>> contains_uppercase(\"\
    abcdcba\")\n    false\n    >>> contains_uppercase(\"kittens\")\n    false\n  \
    \  >>> contains_uppercase(\"orange\")\n    false\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzicpqvgx.jl:28\nin expression starting at\
    \ /tmp/tmpzicpqvgx.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number = true\n\
    \    \n    for i in string\n        if i == \"a\"\n            prime_number =\
    \ false\n            break\n        if i == \"b\"\n            prime_number =\
    \ false\n            break\n        if i == \"c\"\n            prime_number =\
    \ false\n            break\n        if i == \"d\"\n            prime_number =\
    \ false\n            break\n        if i == \"e\"\n            prime_number =\
    \ false\n            break\n        if i == \"f\"\n            prime_number =\
    \ false\n            break\n        if i == \"g\"\n            prime_number =\
    \ false\n            break\n        if i == \"h\"\n            prime_number =\
    \ false\n            break\n        if i == \"i\"\n            prime_number =\
    \ false\n            break\n        if i == \"j\"\n            prime_number =\
    \ false\n            break\n        if i == \"k\"\n            prime_number =\
    \ false\n            break\n        if i == \"l\"\n            prime_number =\
    \ false\n            break\n        if i == \"m\"\n            prime_number =\
    \ false\n            break\n        if i == \"n\"\n            prime_number =\
    \ false\n            break\n        if i == \"o\"\n            prime_number =\
    \ false\n            break\n        if i == \"p\"\n            prime_number =\
    \ false\n            break\n        if i == \"q\"\n            prime_number =\
    \ false\n            break\n        if i == \"r\"\n            prime_number =\
    \ false\n            break\n        if i == \"s\"\n            prime_number =\
    \ false\n            break\n        if i == \"t\"\n            prime_number =\
    \ false\n            break\n        if i == \"u\"\n            prime_number =\
    \ false\n            break\n        if i == \"v\"\n            prime_number =\
    \ false\n            break\n        if i == \"w\"\n            prime_number =\
    \ false\n            break\n        if i == \"x\"\n            prime_number =\
    \ false\n            break\n        if i == \"y\"\n            prime_number =\
    \ false\n            break\n        if i == \"z\"\n            prime_number =\
    \ false\n            break\n        if i == \"A\"\n            prime_number =\
    \ false\n            break\n        if i == \"B\"\n            prime_number =\
    \ false\n            break\n        if i == \"C\"\n            prime_number =\
    \ false\n            break\n        if i == \"D\"\n            prime_number =\
    \ false\n            break\n        if i == \"E\"\n            prime_number =\
    \ false\n            break\n        if i == \"F\"\n            prime_number =\
    \ false\n            break\n        if i == \"G\"\n            prime_number =\
    \ false\n            break\n        if i == \"H\"\n            prime_number =\
    \ false\n            break\n        if i == \"I\"\n            prime_number =\
    \ false\n            break\n        if i == \"J\"\n            prime_number =\
    \ false\n            break\n        if i == \"K\"\n\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp21xrkow3.jl:1\nin expression starting at /tmp/tmp21xrkow3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number = true\n\
    \    \n    for i in string:\n        if i == \"a\" || i == \"e\" || i == \"i\"\
    \ || i == \"o\" || i == \"u\" || i == \"A\" || i == \"E\" || i == \"I\" || i ==\
    \ \"O\" || i == \"U\"\n            prime_number = false\n            break\n \
    \       \n    return prime_number\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns true if the string\n    contains\
    \ only letters or false otherwise\n    Examples\n    >>> only_letters(\"Hello\"\
    )\n    true\n    >>> only_letters(\"abcdcba\")\n    false\n    >>> only_letters(\"\
    kittens\")\n    false\n    >>> only_letters(\"orange\")\n    false\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmparxy2la7.jl:18\nin expression starting at\
    \ /tmp/tmparxy2la7.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = true\
    \ \n    \n    for i in string\n        if prime_length::Bool = true \n       \
    \     for i in string\n                if string::String mod i::Int = 0 \n   \
    \                 prime_length::Bool = false \n                    break\n   \
    \             break\n            break\n    return prime_length::Bool\nend\n</cell>\n\
    <code language=julia-1.0>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns true if the\
    \ string\n    length is an even number or false otherwise\n    Examples\n    >>>\
    \ even_length(\"Hello\")\n    true\n    >>> even_length(\"abcdcba\")\n    false\n\
    \    >>> even_length(\"kittens\")\n    false\n    >>> even_length(\"orange\")\n\
    \    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv51o6spx.jl:18\nin expression starting at /tmp/tmpv51o6spx.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number::Bool = true\n\
    \    \n    for i in string\n        if prime_number == true\n            break\n\
    \        else\n            prime_number = false\n    end\n    \n    return prime_number\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns true if the string\n    contains any uppercase letters or false otherwise\n\
    \    Examples\n    >>> contains_uppercase(\"Hello\")\n    true\n    >>> contains_uppercase(\"\
    abcdcba\")\n    false\n    >>> contains_uppercase(\"kittens\")\n    false\n  \
    \  >>> contains_uppercase(\"orange\")\n    false\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprbccs27y.jl:26\nin expression starting at\
    \ /tmp/tmprbccs27y.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number::Bool = true\
    \ \n    \n    for i in string\n        \n        if prime_number == true\n   \
    \         \n            if string.length % i == 0\n                \n        \
    \        prime_number = false\n            \n            else\n              \
    \  prime_number = true\n        \n        else\n            prime_number = true\n\
    \    end\n    \n    return prime_number\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns true if the string contains any\
    \ uppercase letters or false otherwise\nExamples\n>>> contains_uppercase(\"Hello\"\
    )\ntrue\n>>> contains_uppercase(\"HELLO\")\ntrue\n>>> contains_uppercase(\"hello\"\
    )\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpyvtp9cjh.jl:21 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyvtp9cjh.jl:28\n\
    in expression starting at /tmp/tmpyvtp9cjh.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = \n\
    \        true\n        for n in string:\n            if n % 2 == 0 or n % 3 ==\
    \ 0\n                prime_length = false\n                break\n           \
    \ else\n                prime_length = true\n                break\n        end\n\
    \    end\n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string length is an even number or false otherwise\n\
    Examples\n>>> prime_length(\"Hello\")\ntrue\n>>> prime_length(\"abcdcba\")\nfalse\n\
    >>> prime_length(\"kittens\")\ntrue\n>>> prime_length(\"orange\")\nfalse\n</text>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwehil284.jl:18\nin expression starting at\
    \ /tmp/tmpwehil284.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    if string == \"\"\n  \
    \      return true\n    \n    prime_number::Int = 0\n    \n    for character in\
    \ string\n        if character == \"a\"\n            prime_number += 1\n     \
    \   elif character == \"b\"\n            prime_number += 1\n        elif character\
    \ == \"c\"\n            prime_number += 1\n        elif character == \"d\"\n \
    \           prime_number += 1\n        elif character == \"e\"\n            prime_number\
    \ += 1\n        elif character == \"f\"\n            prime_number += 1\n     \
    \   elif character == \"g\"\n            prime_number += 1\n        elif character\
    \ == \"h\"\n            prime_number += 1\n        elif character == \"i\"\n \
    \           prime_number += 1\n        elif character == \"j\"\n            prime_number\
    \ += 1\n        elif character == \"k\"\n            prime_number += 1\n     \
    \   elif character == \"l\"\n            prime_number += 1\n        elif character\
    \ == \"m\"\n            prime_number += 1\n        elif character == \"n\"\n \
    \           prime_number += 1\n        elif character == \"o\"\n            prime_number\
    \ += 1\n        elif character == \"p\"\n            prime_number += 1\n     \
    \   elif character == \"q\"\n            prime_number += 1\n        elif character\
    \ == \"r\"\n            prime_number += 1\n        elif character == \"s\"\n \
    \           prime_number += 1\n        elif character == \"t\"\n            prime_number\
    \ += 1\n        elif character == \"u\"\n            prime_number += 1\n     \
    \   elif character == \"v\"\n            prime_number += 1\n        elif character\
    \ == \"w\"\n            prime_number += 1\n        elif character == \"x\"\n \
    \           prime_number += 1\n        elif character == \"y\"\n            prime_number\
    \ += 1\n        elif character == \"z\"\n            prime_number += 1\n     \
    \   else\n            return false\n            \n    if prime_number == 0\n \
    \       return true\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns true if the string\n    contains\
    \ any uppercase letters or false otherwise\n    Examples\n    >>> contains_uppercase(\"\
    Hello\")\n    true\n    >>> contains_uppercase(\"abcdcba\")\n    false\n    >>>\
    \ contains_uppercase(\"kittens\")\n    false\n    >>> contains_uppercase(\"orange\"\
    )\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"character\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyslv97il.jl:23\nin expression starting at /tmp/tmpyslv97il.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers::Set{Int}\
    \ = (2..math.floor(sqrt(string.length)))\n    \n    for number in prime_numbers\n\
    \        if number == string.length\n            return true\n        \n     \
    \   if number % string.length == 0\n            return false\n    end\n    \n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string is a palindrome or false otherwise\n\
    Examples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palin\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm8738e1t.jl:27\nin expression starting at\
    \ /tmp/tmpm8738e1t.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers::Set{Int}\
    \ = Set()\n    \n    for character in string\n        prime_numbers.add(character)\n\
    \    end\n    \n    for number in prime_numbers\n        if number > string.length\n\
    \            return false\n        end\n    end\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns true if the\
    \ string is a palindrome or false otherwise\nExamples\n>>> palindrome(\"racecar\"\
    )\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindro\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3_k31inv.jl:29\nin expression starting at\
    \ /tmp/tmp3_k31inv.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number::Bool = false\n\
    \    \n    for i in string\n        if i == \"a\"\n            prime_number =\
    \ true\n            break\n        else if i == \"b\"\n            prime_number\
    \ = true\n            break\n        else if i == \"c\"\n            prime_number\
    \ = true\n            break\n        else if i == \"d\"\n            prime_number\
    \ = true\n            break\n        else if i == \"e\"\n            prime_number\
    \ = true\n            break\n        else if i == \"f\"\n            prime_number\
    \ = true\n            break\n        else if i == \"g\"\n            prime_number\
    \ = true\n            break\n        else if i == \"h\"\n            prime_number\
    \ = true\n            break\n        else if i == \"i\"\n            prime_number\
    \ = true\n            break\n        else if i == \"j\"\n            prime_number\
    \ = true\n            break\n        else if i == \"k\"\n            prime_number\
    \ = true\n            break\n        else if i == \"l\"\n            prime_number\
    \ = true\n            break\n        else if i == \"m\"\n            prime_number\
    \ = true\n            break\n        else if i == \"n\"\n            prime_number\
    \ = true\n            break\n        else if i == \"o\"\n            prime_number\
    \ = true\n            break\n        else if i == \"p\"\n            prime_number\
    \ = true\n            break\n        else if i == \"q\"\n            prime_number\
    \ = true\n            break\n        else if i == \"r\"\n            prime_number\
    \ = true\n            break\n        else if i == \"s\"\n            prime_number\
    \ = true\n            break\n        else if i == \"t\"\n            prime_number\
    \ = true\n            break\n        else if i == \"u\"\n            prime_number\
    \ = true\n            break\n        else if i == \"v\"\n            prime_number\
    \ = true\n            break\n        else if i == \"w\"\n            prime_number\
    \ = true\n            break\n        else if i == \"x\"\n            prime_number\
    \ = true\n            break\n        else if i == \"y\"\n            prime_number\
    \ = true\n            break\n        else if i == \"z\"\n            prime_number\
    \ = true\n            break\n        else if i == \"A\"\n            prime_number\
    \ = true\n            break\n        else if i == \"B\"\n            prime_number\
    \ = true\n            break\n        else if i == \"C\"\n            prime_number\
    \ = true\n            break\n        else if i == \"D\"\n            prime_number\
    \ = true\n            break\n        else if i == \"E\"\n            prime_number\
    \ = true\n            break\n        else if i == \"F\"\n            prime_number\
    \ = true\n            break\n        else if i == \"G\"\n            prime_number\
    \ = true\n            break\n        else if i == \"H\"\n            prime_number\
    \ = true\n            break\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxprcdef0.jl:21\nin expression starting at\
    \ /tmp/tmpxprcdef0.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = primes(string)\n\
    \    \n    if prime_numbers == []\n        true\n    else\n        false\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string and\
    \ returns true if the string\n    length is an even number or false otherwise\n\
    \    Examples\n    >>> even_length(\"Hello\")\n    true\n    >>> even_length(\"\
    abcdcba\")\n    false\n    >>> even_length(\"kittens\")\n    false\n    >>> even_length(\"\
    orange\")\n    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu22knb8x.jl:23\nin expression starting at\
    \ /tmp/tmpu22knb8x.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \    \n    string_length = len(string)\n    \n    if string_length == 0 \n   \
    \     true\n    elseif string_length == 1 \n        false\n    elseif string_length\
    \ == 2 \n        true\n    elseif string_length == 3 \n        true\n    elseif\
    \ string_length == 4 \n        true\n    elseif string_length == 5 \n        true\n\
    \    elseif string_length == 6 \n        true\n    elseif string_length == 7 \n\
    \        true\n    elseif string_length == 8 \n        true\n    elseif string_length\
    \ == 9 \n        true\n    elseif string_length == 10 \n        true\n    elseif\
    \ string_length == 11 \n        true\n    elseif string_length == 12 \n      \
    \  true\n    elseif string_length == 13 \n        true\n    elseif string_length\
    \ == 14 \n        true\n    elseif string_length == 15 \n        true\n    elseif\
    \ string_length == 16 \n        true\n    elseif string_length == 17 \n      \
    \  true\n    elseif string_length == 18 \n        true\n    elseif string_length\
    \ == 19 \n        true\n    elseif string_length == 20 \n        true\n    elseif\
    \ string_length == 21 \n        true\n    elseif string_length == 22 \n      \
    \  true\n    elseif string_length == 23 \n        true\n    elseif string_length\
    \ == 24 \n        true\n    elseif string_length == 25 \n        true\n    elseif\
    \ string_length == 26 \n        true\n    elseif string_length == 27 \n      \
    \  true\n    elseif string_length == 28 \n        true\n    elseif string_length\
    \ == 29 \n        true\n    elseif string_length == 30 \n        true\n    elseif\
    \ string_length == 31 \n        true\n    elseif string_length == 32 \n      \
    \  true\n    elseif string_length == 33 \n        true\n    elseif string_length\
    \ == 34 \n        true\n    elseif string_length == 35 \n        true\n    elseif\
    \ string_length == 36 \n        true\n    elseif string_length == 37 \n      \
    \  true\n    elseif string_length == 38 \n        true\n    elseif string_length\
    \ == 39 \n        true\n    elseif string_length == 40 \n        true\n    elseif\
    \ string_length == 41 \n        true\n    elseif string_length == 42 \n      \
    \  true\n    elseif string_length == 43 \n        true\n    elseif string_length\
    \ == 44 \n        true\n    elseif string_length == 45 \n        true\n    elseif\
    \ string_\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr4jx6bn7.jl:1\nin expression starting at /tmp/tmpr4jx6bn7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number::Bool\n \
    \   prime_number::Bool = false \n    \n    for i in string\n        if i == \"\
    a\"\n            prime_number = true\n            break\n        else\n      \
    \      prime_number = false\n            break\n    end\n    return prime_number\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns true if the string\n    length is a prime number or false otherwise\n\
    \    Examples\n    >>> prime_length(\"Hello\")\n    true\n    >>> prime_length(\"\
    abcdcba\")\n    true\n    >>> prime_length(\"kittens\")\n    true\n    >>> prime_length(\"\
    orange\")\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5smpk7f0.jl:28\nin expression starting at\
    \ /tmp/tmp5smpk7f0.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = true\n\
    \    \n    if string == \"\"\n        return prime_length\n    \n    string::String\
    \ = string.to_lowercase()\n    \n    length::Int = string.len()\n    \n    if\
    \ length == 2\n        return prime_length\n    \n    if length == 3\n       \
    \ return prime_length\n    \n    if length == 5\n        return prime_length\n\
    \    \n    if length == 7\n        return prime_length\n    \n    if length ==\
    \ 11\n        return prime_length\n    \n    if length == 12\n        return prime_length\n\
    \    \n    if length == 13\n        return prime_length\n    \n    if length ==\
    \ 17\n        return prime_length\n    \n    if length == 19\n        return prime_length\n\
    \    \n    if length == 21 or length == 23\n        return prime_length\n    \n\
    \    if length == 25\n        return prime_length\n    \n    if length == 27\n\
    \        return prime_length\n    \n    if length == 29\n        return prime_length\n\
    \    \n    if length == 31 or length == 33\n        return prime_length\n    \n\
    \    if length == 37\n        return prime_length\n    \n    if length == 43\n\
    \        return prime_length\n    \n    if length == 47\n        return prime_length\n\
    \    \n    if length == 53\n        return prime_length\n    \n    if length ==\
    \ 59\n        return prime_length\n    \n    if length == 61\n        return prime_length\n\
    \    \n    if length == 67\n        return prime_length\n    \n    if length ==\
    \ 73\n        return prime_length\n    \n    if length == 79\n        return prime_length\n\
    \    \n    if length == 93\n        return prime_length\n    \n    if length ==\
    \ 111\n        return prime_length\n    \n    if length == 127\n        return\
    \ prime_length\n    \n    if length == 131\n        return prime_length\n    \n\
    \    if length == 139\n        return prime_length\n    \n    if length == 147\n\
    \        return prime_length\n    \n    if length == 153\n        return prime_length\n\
    \    \n    if length == 159\n        return prime_length\n    \n    if length\
    \ == 161\n        return prime_length\n    \n    if length == 179\n        return\
    \ prime_length\n    \n    if length == 181\n        return prime_length\n    \n\
    \    if length == 191\n        return prime_length\n    \n    if length == 197\n\
    \        return prime_length\n    \n    if length == 269\n        return prime_length\n\
    \    \n    if length == 271\n        return prime_length\n    \n    if length\
    \ == 283\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"length\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl49qi616.jl:51\nin expression starting at /tmp/tmpl49qi616.jl:51\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = prime_numbers()\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n</cell>\n<cell>\nprime_length(\"Hello\")\n</cell>\n\
    <cell>\nprime_length(\"abcdcba\")\n</cell>\n<cell>\nprime_length(\"kittens\")\n\
    </cell>\n<cell>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns true if the string is a palindrome\
    \ or false otherwise\nExamples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"race\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpewfyyat2.jl:18\nin expression starting at\
    \ /tmp/tmpewfyyat2.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers::Set{Int}\
    \ = (2..string.length).filter(x -> string[x] == string[x+1] && string[x] == string[x+2])\n\
    \    \n    prime_numbers.length == 1\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns true if the string contains only\
    \ letters a-z or A-Z or false otherwise\nExamples\n>>> only_letters(\"Hello\"\
    )\ntrue\n>>> only_letters(\"abcdcba\")\nfalse\n>>> only_letters(\"kittens\")\n\
    false\n>>> only_letters(\"orange\")\ntrue\n>>> only_letters(\"123\")\nfalse\n\
    >>> only_letters(\"123abc\")\nfalse\n>>> only_letters(\"123abc456\")\nfalse\n\
    >>> only_letters(\"123abc456def\")\nfalse\n>>> only_letters(\"123abc456defg\"\
    )\nfalse\n>>> only_letters(\"123abc456defg123\")\nfalse\n>>> only_letters(\"123abc456defg123abc\"\
    )\nfalse\n>>> only_letters(\"123abc456defg123abc456\")\nfalse\n>>> only_letters(\"\
    123abc456defg123abc456def\")\nfalse\n>>> only_letters(\"123abc456defg123abc456defg\"\
    )\nfalse\n>>> only_letters(\"123abc456defg123abc456defg123\")\nfalse\n>>> only_letters(\"\
    123abc456defg123abc456defg123abc\")\nfalse\n>>> only_letters(\"123abc456defg123abc456defg123abc456\"\
    )\nfalse\n>>> only_letters(\"123abc456defg123abc456defg123abc456def\")\nfalse\n\
    >>> only_letters(\"123abc456defg123abc456defg123abc456defg\")\nfalse\n>>> only_letters(\"\
    123abc456defg123abc456defg123abc456defg123\")\nfalse\n>>> only_letters(\"123abc456defg123abc456defg123abc456defg123abc\"\
    )\nfalse\n>>> only_letters(\"123abc456defg123abc456defg123abc456defg123abc456\"\
    )\nfalse\n>>> only_letters(\"123abc456defg\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwuvwrh4k.jl:19\nin expression starting at\
    \ /tmp/tmpwuvwrh4k.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    if string == \"\"\n        return\
    \ false\n    \n    let n = string.len()\n    let primes = primes(n)\n    \n  \
    \  if primes.contains(string)\n        return true\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns true if the\
    \ string\n    contains any letter 'a' or 'b' or 'c' or 'd' or 'e' or 'f' or 'g'\
    \ or 'h' or 'i' or 'j' or 'k' or 'l' or 'm' or 'n' or 'o' or 'p' or 'q' or 'r'\
    \ or 's' or 't' or 'u' or 'v' or 'w' or 'x' or 'y' or 'z'\n    Examples\n    >>>\
    \ has_letter(\"Hello\")\n    true\n    >>> has_letter(\"abcdcba\")\n    false\n\
    \    >>> has_letter(\"kittens\")\n    false\n    >>> has_letter(\"orange\")\n\
    \    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq0w0zgv6.jl:25\nin expression starting at\
    \ /tmp/tmpq0w0zgv6.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers::Set{Int}=\
    \ Set()\n    for character in string\n        if character in prime_numbers\n\
    \            prime_numbers.add(character)\n        else\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string\n    length is even or false otherwise\n\
    \    Examples\n    >>> even_length(\"Hello\")\n    true\n    >>> even_length(\"\
    abcdcba\")\n    false\n    >>> even_length(\"kittens\")\n    false\n    >>> even_length(\"\
    orange\")\n    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwzeig281.jl:24\nin expression starting at\
    \ /tmp/tmpwzeig281.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nWrite a function that takes a string\
    \ and returns true if the string\n    contains only letters or false otherwise\n\
    \    Examples\n    >>> letter_only(\"Hello\")\n    true\n    >>> letter_only(\"\
    abcdcba\")\n    false\n    >>> letter_only(\"kittens\")\n    false\n    >>> letter_only(\"\
    orange\")\n    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy7um75k2.jl:18\nin expression starting at\
    \ /tmp/tmpy7um75k2.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    if string == \"\"\n        prime_length = true\n    else\n     \
    \   \n        prime_length = false\n        \n        for i in string\n      \
    \      if string[i] == string[i+1]\n                prime_length = false\n   \
    \         else\n                prime_length = true\n        end\n    end\n  \
    \  \n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string length is an even number or false otherwise\n\
    Examples\n>>> prime_length(\"Hello\")\ntrue\n>>> prime_length(\"abcdcba\")\nfalse\n\
    >>> prime_length(\"kittens\")\ntrue\n>>> prime_length(\"orange\")\nfalse\n</text>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppo32yohm.jl:33\nin expression starting at\
    \ /tmp/tmppo32yohm.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number = true\n\
    \    \n    for i in string:\n        if i == \"a\" or i == \"e\" or i == \"i\"\
    \ or i == \"o\" or i == \"u\":\n            prime_number = false\n           \
    \ break\n        \n    if prime_number:\n        return true\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns true if the string\n    length is greater than 10 or false otherwise\n\
    \    Examples\n    >>> prime_length_gt10(\"Hello\")\n    true\n    >>> prime_length_gt10(\"\
    abcdcba\")\n    false\n    >>> prime_length_gt10(\"kittens\")\n    false\n   \
    \ >>> prime_length_gt10(\"orange\")\n    false\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdoxihzxa.jl:18\nin expression starting at\
    \ /tmp/tmpdoxihzxa.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = prime_numbers()\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n</cell>\n<cell>\nprime_length(\"Hello\")\n</cell>\n\
    <cell>\nprime_length(\"abcdcba\")\n</cell>\n<cell>\nprime_length(\"kittens\")\n\
    </cell>\n<cell>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3: Write\
    \ a function that takes a string and returns true if the string\n    contains\
    \ any uppercase letters or false otherwise\n    Examples\n    >>> contains_uppercase(\"\
    Hello\")\n    true\n    >>> contains_uppercase(\"abcdcba\")\n    false\n    >>>\
    \ contains_uppercase(\"kittens\")\n    false\n    >>> contains_uppercase(\"orange\"\
    )\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5m4wck66.jl:18\nin expression starting at\
    \ /tmp/tmp5m4wck66.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers::Set[Int]\
    \ = Set()\n    \n    for character in string:\n        if character in prime_numbers:\n\
    \            return False\n        else:\n            prime_numbers.add(character)\n\
    \    return True\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string length is even\nor false otherwise\n\
    Examples\n>>> even_length(\"Hello\")\ntrue\n>>> even_length(\"abcdcba\")\nfalse\n\
    >>> even_length(\"kittens\")\nfalse\n>>> even_length(\"orange\")\ntrue\n</text>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwnx4ilr1.jl:18\nin expression starting at\
    \ /tmp/tmpwnx4ilr1.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number = 2\n   \
    \ \n    for char in string:\n        if char == \" \":\n            continue\n\
    \        if char == \"a\" or char == \"e\" or char == \"i\" or char == \"o\" or\
    \ char == \"u\":\n            continue\n        if char == \"n\":\n          \
    \  continue\n        if char == \"t\":\n            continue\n        if char\
    \ == \"s\":\n            continue\n        if char == \"d\":\n            continue\n\
    \        if char == \"r\":\n            continue\n        if char == \"c\":\n\
    \            continue\n        if char == \"h\":\n            continue\n     \
    \   if char == \"m\":\n            continue\n        if char == \"p\":\n     \
    \       continue\n        if char == \"f\":\n            continue\n        if\
    \ char == \"g\":\n            continue\n        if char == \"v\":\n          \
    \  continue\n        if char == \"b\":\n            continue\n        if char\
    \ == \"j\":\n            continue\n        if char == \"x\":\n            continue\n\
    \        if char == \"z\":\n            continue\n        if char == \"m\":\n\
    \            continue\n        if char == \"y\":\n            continue\n     \
    \   if char == \"k\":\n            continue\n        if char == \"l\":\n     \
    \       continue\n        if char == \"q\":\n            continue\n        if\
    \ char == \"w\":\n            continue\n        if char == \"v\":\n          \
    \  continue\n        if char == \"b\":\n            continue\n        if char\
    \ == \"s\":\n            continue\n        if char == \"d\":\n            continue\n\
    \        if char == \"r\":\n            continue\n        if char == \"c\":\n\
    \            continue\n        if char == \"h\":\n            continue\n     \
    \   if char == \"m\":\n            continue\n        if char == \"p\":\n     \
    \       continue\n        if char == \"f\":\n            continue\n        if\
    \ char == \"g\":\n            continue\n        if char == \"v\":\n          \
    \  continue\n        if char == \"b\":\n            continue\n        if char\
    \ == \"j\":\n            continue\n        if char == \"x\":\n            continue\n\
    \        if char == \"z\":\n            continue\n        if char == \"m\":\n\
    \            continue\n        if char == \"y\":\n            continue\n     \
    \   if char == \"k\":\n            continue\n        if char == \"l\":\n     \
    \       continue\n        if char == \"q\":\n            continue\n        if\
    \ char == \"w\":\n            continue\n        if char == \"v\":\n          \
    \  continue\n        if char == \"b\":\n            continue\n        if char\
    \ == \"s\":\n            continue\n        if char == \"d\":\n            continue\n\
    \        if char == \"r\":\n            continue\n        if char == \"c\":\n\
    \            continue\n        if char == \"h\":\n            continue\n     \
    \   if char == \"m\":\n            continue\n        if char == \"p\":\n     \
    \       continue\n        if char == \"f\":\n            continue\n        if\
    \ char == \"g\":\n            continue\n        if char == \"v\":\n          \
    \  continue\n        if char == \"b\":\n            continue\n        if char\
    \ == \"j\":\n            continue\n        if char == \"x\":\n            continue\n\
    \        if char == \"z\":\n            continue\n        if \nusing Test\n\n\
    @testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\
    \t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcd_9s_eb.jl:18\nin expression starting at\
    \ /tmp/tmpcd_9s_eb.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length_bool = false\n\
    \    \n    for i in string:\n        if i == \"a\" or i == \"e\" or i == \"i\"\
    \ or i == \"o\" or i == \"u\":\n            prime_length_bool = true\n       \
    \     break\n    \n    return prime_length_bool\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite a function\
    \ that takes a string and returns true if the string\n    contains any character\
    \ that is a prime number or false otherwise\n    Examples\n    >>> prime_contains(\"\
    Hello\")\n    true\n    >>> prime_contains(\"abcdcba\")\n    true\n    >>> prime_contains(\"\
    kittens\")\n    true\n    >>> prime_contains(\"orange\")\n    false\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkfzfnxtp.jl:18\nin expression starting at\
    \ /tmp/tmpkfzfnxtp.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\n\
    \    \n    if string == \"\"\n        prime_length::Bool = true\n    else\n  \
    \      \n        prime_length::Bool = is_prime(string)\n    end\n    \n    return\
    \ prime_length\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string length is even\nor false otherwise\n\
    Examples\n>>> is_even(\"Hello\")\ntrue\n>>> is_even(\"abcdcba\")\ntrue\n>>> is_even(\"\
    kittens\")\ntrue\n>>> is_even(\"orange\")\nfalse\n</text>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: multiple type declarations for \"prime_length\"\
    \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpipoqo4i8.jl:1\nin expression\
    \ starting at /tmp/tmpipoqo4i8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number = true\n\
    \    for char in string:\n        if char == \"a\" || char == \"e\" || char ==\
    \ \"i\" || char == \"o\" || char == \"u\":\n            prime_number = false\n\
    \            break\n    if prime_number == true:\n        return true\n    else:\n\
    \        return false\nend\n</cell>\n<code language=julia-1.3>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns true if the string has all letters capitalized\nExamples\n\
    >>> capitalized_string(\"Hello\")\ntrue\n>>> capitalized_string(\"hello\")\nfalse\n\
    >>> capitalized_string(\"HELLO\")\ntrue\n>>> capitalized_string(\"HELLO WORLD\"\
    )\nfalse\n>>> capitalized_string(\"HELLO WORLD HELLO WORLD\")\ntrue\n>>> capitalized_string(\"\
    HELLO WORLD HELLO WORLD HELLO WORLD\")\nfalse\n>>> capitalized_string(\"HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD\")\ntrue\n>>> capitalized_string(\"\
    HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\")\nfalse\n>>> capitalized_string(\"\
    HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\")\ntrue\n\
    >>> capitalized_string(\"HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgwbbs0u1.jl:17\nin expression starting at\
    \ /tmp/tmpgwbbs0u1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length = true\n\
    \    \n    for i in string.chars:\n        if i == \"a\" or i == \"b\" or i ==\
    \ \"c\" or i == \"d\" or i == \"e\" or i == \"f\" or i == \"g\" or i == \"h\"\
    \ or i == \"i\" or i == \"j\" or i == \"k\" or i == \"l\" or i == \"m\" or i ==\
    \ \"n\" or i == \"o\" or i == \"p\" or i == \"q\" or i == \"r\" or i == \"s\"\
    \ or i == \"t\" or i == \"u\" or i == \"v\" or i == \"w\" or i == \"x\" or i ==\
    \ \"y\" or i == \"z\":\n            prime_length = false\n            break\n\
    \    \n    return prime_length\n</code>\n<|/ a tags=julia,primes |>\n<| a dscore=2\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkf1wnzyb.jl:18\nin expression starting at\
    \ /tmp/tmpkf1wnzyb.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    if string == \"\"\n        return\
    \ false\n    else if string.length % 2 == 0\n        return true\n    else\n \
    \       return false\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string length is even\nor false otherwise\n\
    Examples\n>>> even_length(\"Hello\")\ntrue\n>>> even_length(\"abcdcba\")\nfalse\n\
    >>> even_length(\"kittens\")\ntrue\n>>> even_length(\"orange\")\nfalse\n\"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpds6oy_te.jl:16\nin expression starting at\
    \ /tmp/tmpds6oy_te.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = true\
    \ \n    \n    for i in string.chars\n        if prime_length == true\n       \
    \     break\n        if i == 'a'\n            prime_length = false\n         \
    \   break\n        if i == 'b'\n            prime_length = false\n           \
    \ break\n        if i == 'c'\n            prime_length = false\n            break\n\
    \        if i == 'd'\n            prime_length = false\n            break\n  \
    \      if i == 'e'\n            prime_length = false\n            break\n    \
    \    if i == 'f'\n            prime_length = false\n            break\n      \
    \  if i == 'g'\n            prime_length = false\n            break\n        if\
    \ i == 'h'\n            prime_length = false\n            break\n        if i\
    \ == 'i'\n            prime_length = false\n            break\n        if i ==\
    \ 'j'\n            prime_length = false\n            break\n        if i == 'k'\n\
    \            prime_length = false\n            break\n        if i == 'l'\n  \
    \          prime_length = false\n            break\n        if i == 'm'\n    \
    \        prime_length = false\n            break\n        if i == 'n'\n      \
    \      prime_length = false\n            break\n        if i == 'o'\n        \
    \    prime_length = false\n            break\n        if i == 'p'\n          \
    \  prime_length = false\n            break\n        if i == 'q'\n            prime_length\
    \ = false\n            break\n        if i == 'r'\n            prime_length =\
    \ false\n            break\n        if i == 's'\n            prime_length = false\n\
    \            break\n        if i == 't'\n            prime_length = false\n  \
    \          break\n        if i == 'u'\n            prime_length = false\n    \
    \        break\n        if i == 'v'\n            prime_length = false\n      \
    \      break\n        if i == 'w'\n            prime_length = false\n        \
    \    break\n        if i == 'x'\n            prime_length = false\n          \
    \  break\n        if i == 'y'\n            prime_length = false\n            break\n\
    \        if i == 'z'\n            prime_length = false\n            break\n  \
    \      if i == 'A'\n            prime_length = false\n            break\n    \
    \    if i == 'B'\n            prime_length = false\n            break\n      \
    \  if i == 'C'\n            prime_length = false\n            break\n        if\
    \ i == 'D'\n            prime_length = false\n            break\n        if i\
    \ == 'E'\n            prime_length = false\n            break\n        if i ==\
    \ 'F'\n            prime_length = false\n            break\n        if i == 'G'\n\
    \            prime_length = false\n            break\n        if i == 'H'\n  \
    \          prime_length = false\n            break\n        if i == 'I'\n    \
    \        prime_length = false\n            break\n        if i == 'J'\n      \
    \      prime_\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_sclyuu.jl:1\nin expression starting at /tmp/tmpw_sclyuu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = Set{Int}()\n\
    \    \n    for character in string\n        if character in prime_numbers\n  \
    \          return false\n        else\n            prime_numbers.add(character)\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns true if the string is a palindrome or false otherwise\n\
    Examples\n>>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecar\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecar\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps_f9m5th.jl:25\nin expression starting at\
    \ /tmp/tmps_f9m5th.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number = 2\n   \
    \ \n    for i in string:\n        if prime_number % i == 0:\n            return\
    \ False\n        prime_number += 1\n    return True\n</cell>\n<cell>\nprime_length(\"\
    Hello\")\n</cell>\n<cell>\nprime_length(\"abcdcba\")\n</cell>\n<cell>\nprime_length(\"\
    kittens\")\n</cell>\n<cell>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite\
    \ a function that takes a string and returns true if the string\n    length is\
    \ an even number or false otherwise\n    Examples\n    >>> even_length(\"Hello\"\
    )\n    true\n    >>> even_length(\"abcdcba\")\n    false\n    >>> even_length(\"\
    kittens\")\n    false\n    >>> even_length(\"orange\")\n    true\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn0l4yj10.jl:18\nin expression starting at\
    \ /tmp/tmpn0l4yj10.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = \n\
    \        if string.length == 0 \n        then false \n        else if string.length\
    \ == 1 \n        then true \n        else if string.length == 2 \n        then\
    \ string.length == 2 \n        else if string.length == 3 \n        then string.length\
    \ == 3 \n        else if string.length == 4 \n        then string.length == 4\
    \ \n        else if string.length == 5 \n        then string.length == 5 \n  \
    \      else if string.length == 6 \n        then string.length == 6 \n       \
    \ else if string.length == 7 \n        then string.length == 7 \n        else\
    \ if string.length == 8 \n        then string.length == 8 \n        else if string.length\
    \ == 9\n        then string.length == 9\n        else if string.length == 10\n\
    \        then string.length == 10\n        else if string.length == 11\n     \
    \   then string.length == 11\n        else if string.length == 12\n        then\
    \ string.length == 12\n        else if string.length == 13\n        then string.length\
    \ == 13\n        else if string.length == 14\n        then string.length == 14\n\
    \        else if string.length == 15\n        then string.length == 15\n     \
    \   else if string.length == 16\n        then string.length == 16\n        else\
    \ if string.length == 17\n        then string.length == 17\n        else if string.length\
    \ == 18\n        then string.length == 18\n        else if string.length == 19\n\
    \        then string.length == 19\n        else if string.length == 20\n     \
    \   then string.length == 20\n        else if string.length == 21\n        then\
    \ string.length == 21\n        else if string.length == 22\n        then string.length\
    \ == 22\n        else if string.length == 23\n        then string.length == 23\n\
    \        else if string.length == 24\n        then string.length == 24\n     \
    \   else if string.length == 25\n        then string.length == 25\n        else\
    \ if string.length == 26\n        then string.length == 26\n        else if string.length\
    \ == 27\n        then string.length == 27\n        else if string.length == 28\n\
    \        then string.length == 28\n        else if string.length == 29\n     \
    \   then string.length == 29\n        else if string.length == 30\n        then\
    \ string.length == 30\n        else if string.length == 31\n        then string.length\
    \ == 31\n        else if string.length == 32\n        then string.length == 32\n\
    \        else if string.length == 33\n        then string.length == 33\n     \
    \   else if string.length == 34\n        then string.length == 34\n        else\
    \ if string.length == 35\n        then string.length == 35\n        else if string.length\
    \ == 36\n        then string.length == 36\n        else if string.length == 37\n\
    \        then string.length == 37\n        else if string.length == 38\n     \
    \   then string\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t\
    @test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"false\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwnpqazoi.jl:17\nin expression starting at /tmp/tmpwnpqazoi.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length = true\n\
    \    \n    for char in string:\n        if char == \"a\" || char == \"e\" || char\
    \ == \"i\" || char == \"o\" || char == \"u\":\n            prime_length = false\n\
    \            break\n    \n    return prime_length\n</cell>\n<cell>\nprime_length(\"\
    Hello\")\n</cell>\n<cell>\nprime_length(\"abcdcba\")\n</cell>\n<cell>\nprime_length(\"\
    kittens\")\n</cell>\n<cell>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns true if the string\n   \
    \ contains any character that is a vowel\n    Examples\n    >>> vowel_contains(\"\
    Hello\")\n    true\n    >>> vowel_contains(\"abcdcba\")\n    true\n    >>> vowel_contains(\"\
    kittens\")\n    false\n    >>> vowel_contains(\"orange\")\n    false\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqw91a5bb.jl:18\nin expression starting at\
    \ /tmp/tmpqw91a5bb.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number::Bool = is_prime(string)\n\
    \    if prime_number == true\n        prime_length::Bool = is_prime(string.length)\n\
    \        return prime_length\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns true if the\
    \ string\n    length is an even number or false otherwise\n    Examples\n    >>>\
    \ even_length(\"Hello\")\n    true\n    >>> even_length(\"abcdcba\")\n    false\n\
    \    >>> even_length(\"kittens\")\n    false\n    >>> even_length(\"orange\")\n\
    \    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl9vkrr5u.jl:23\nin expression starting at\
    \ /tmp/tmpl9vkrr5u.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    if string == \"\"\n  \
    \      return true\n    \n    length::Int = string.length\n    \n    if length\
    \ == 1\n        return true\n    \n    prime::Int = 2\n    \n    while prime <\
    \ length\n        if string.charAt(prime) == string.charAt(prime + 1)\n      \
    \      return false\n        \n        prime += 1\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns true if the\
    \ string is a palindrome or false otherwise\nExamples\n>>> is_palindrome(\"racecar\"\
    )\ntrue\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecar\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecar\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecar\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecar\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecar\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecar\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecar\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecar\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvjc2mvu7.jl:33\nin expression starting at\
    \ /tmp/tmpvjc2mvu7.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number::Bool = true\
    \ \n    \n    for i in string\n        \n        if i == \"a\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"b\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"c\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"d\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"e\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"f\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"g\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"h\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"i\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"j\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"k\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"l\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"m\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"n\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"o\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"p\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"q\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"r\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"s\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"t\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"u\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"v\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"w\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"x\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"y\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"z\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"A\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"B\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"C\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"D\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"E\"\n            prime_number\
    \ = false\n            break\n        \n        if i == \"F\"\n            prime_\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpak6qdio8.jl:1\nin expression starting at /tmp/tmpak6qdio8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    if string == \"\"\n  \
    \      true\n    else\n        if string.length % 2 == 0\n            false\n\
    \        else\n            if string.length % 3 == 0\n                true\n \
    \           else\n                if string.length % 5 == 0\n                \
    \    true\n                else\n                    if string.length % 7 == 0\n\
    \                        true\n                    else\n                    \
    \    if string.length % 11 == 0\n                            true\n          \
    \              else\n                            if string.length % 13 == 0\n\
    \                                true\n                            else\n    \
    \                            if string.length % 17 == 0\n                    \
    \                true\n                                else\n                \
    \                    if string.length % 19 == 0\n                            \
    \            true\n                                    else\n                \
    \                        if string.length % 23 == 0\n                        \
    \                    true\n                                        else\n    \
    \                                        if string.length % 29 == 0\n        \
    \                                        true\n                              \
    \              else\n                                                if string.length\
    \ % 31 == 0\n                                                    true\n      \
    \                                          else\n                            \
    \                        if string.length % 37 == 0\n                        \
    \                                true\n                                      \
    \              else\n                                                        if\
    \ string.length % 41 == 0\n                                                  \
    \          true\n                                                        else\n\
    \                                                            if string.length\
    \ % 43 == 0\n                                                                true\n\
    \                                                            else\n          \
    \                                                      if string.length % 47 ==\
    \ 0\n                                                                    true\n\
    \                                                                else\n      \
    \                                                              if string.length\
    \ % 53 == 0\n                                                                \
    \        true\n                                                              \
    \      else\n                                                                \
    \        if string.length % 59 == 0\n                                        \
    \                                    true\n                                  \
    \                                      else\n                                \
    \                                            if string.length % 61 == 0\n    \
    \                                                                            true\n\
    \                                                                            else\n\
    \                                                                            \
    \    if string.length % 67 == 0\n                                            \
    \                                        true\n                              \
    \                                                  else\n                    \
    \                                                                if string.length\
    \ % 71 == 0\n                                                                \
    \                        true\n                                              \
    \                                      else\n                                \
    \                                                        if string.length % 73\
    \ == 0\n                                                                     \
    \                       true\n                                               \
    \                                         else\n                             \
    \                                                               if string.length\
    \ % 79 == 0\n                                                                \
    \                                true\n                                      \
    \                                                      else\n                \
    \                                                                            \
    \    if string.length % 83 == 0\n                                            \
    \                                                        true\n              \
    \                                                                            \
    \      else\n                                                                \
    \                                    if string.length % 89 == 0\n            \
    \                                                                            \
    \                true\n                                                      \
    \                                              else\n                        \
    \                                                                            \
    \    if string.length % 97 == 0\n                                            \
    \                                                                true\n      \
    \                                                                            \
    \                      else\n                                                \
    \                                                            if string.length\
    \ % 101 == 0\n                                                               \
    \                                                 true\n                     \
    \                                                                            \
    \           else\n                                                           \
    \                                                     if string.length % 103 ==\
    \ 0\n                                                                        \
    \                                            true\n                          \
    \                                                                            \
    \          else\n                                                            \
    \                                                        if string.length % 107\
    \ == 0\n                                                                     \
    \                                                   true\n                   \
    \                                                                            \
    \                     else\n                                                 \
    \                                                                       if string.length\
    \ % 111 == 0\n                                                               \
    \                                                             true\n         \
    \                                                                            \
    \                                   else\n                                   \
    \                                                                            \
    \             if string.length % 113 == 0\n                                  \
    \                                                                            \
    \                  true\n                                                    \
    \                                                                        else\n\
    \                                                                            \
    \                                                    if string.length % 117 ==\
    \ 0\n                                                                        \
    \                                                            true\n          \
    \                                                                            \
    \                                          else\n                            \
    \                                                                            \
    \                            if string.length % 121 == 0\n                   \
    \                                                                            \
    \                                         true\n                             \
    \                                                                            \
    \                           else\n                                           \
    \                                                                            \
    \                 if string\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwh8tm2de.jl:1\nin expression starting at /tmp/tmpwh8tm2de.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    if string == \"\"\n  \
    \      return true\n    \n    prime_number::Int64 = 1\n    \n    for i in string.chars\n\
    \        if prime_number == 1\n            return false\n        if i % prime_number\
    \ == 0\n            prime_number = prime_number + 1\n        end\n    end\n  \
    \  return true\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string and returns true if the string\n    length is a prime number or false\
    \ otherwise\n    Examples\n    >>> prime_length(\"Hello\")\n    true\n    >>>\
    \ prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"kittens\")\n   \
    \ true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\
    \t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpabjbhzty.jl:29\nin expression starting at\
    \ /tmp/tmpabjbhzty.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number::Bool = true\
    \ \n    \n    for character in string:\n        if character == \" \":\n     \
    \       prime_number = false\n            break\n        \n        if character\
    \ == \"a\" or character == \"e\" or character == \"i\" or character == \"o\" or\
    \ character == \"u\":\n            prime_number = false\n            break\n \
    \       \n        if character == \"b\" or character == \"c\" or character ==\
    \ \"d\" or character == \"f\" or character == \"g\" or character == \"h\" or character\
    \ == \"j\" or character == \"k\" or character == \"l\" or character == \"m\" or\
    \ character == \"n\" or character == \"p\" or character == \"q\" or character\
    \ == \"r\" or character == \"s\" or character == \"t\" or character == \"v\" or\
    \ character == \"x\" or character == \"z\":\n            prime_number = false\n\
    \            break\n        \n        if character == \"1\":\n            prime_number\
    \ = false\n            break\n        \n        if character == \"2\":\n     \
    \       prime_number = false\n            break\n        \n        if character\
    \ == \"3\":\n            prime_number = false\n            break\n        \n \
    \       if character == \"4\":\n            prime_number = false\n           \
    \ break\n        \n        if character == \"5\":\n            prime_number =\
    \ false\n            break\n        \n        if character == \"6\":\n       \
    \     prime_number = false\n            break\n        \n        if character\
    \ == \"7\":\n            prime_number = false\n            break\n        \n \
    \       if character == \"8\":\n            prime_number = false\n           \
    \ break\n        \n        if character == \"9\":\n            prime_number =\
    \ false\n            break\n        \n        if character == \"0\":\n       \
    \     prime_number = false\n            break\n        \n        if character\
    \ == \"!\":\n            prime_number = false\n            break\n        \n \
    \       if character == \"@\":\n            prime_number = false\n           \
    \ break\n        \n        if character == \"#\":\n            prime_number =\
    \ false\n            break\n        \n        if character == \"$\":\n       \
    \     prime_number = false\n            break\n        \n        if character\
    \ == \"%\":\n            prime_number = false\n            break\n        \n \
    \       if character == \"^\":\n            prime_number = false\n           \
    \ break\n        \n        if character == \"&\":\n            prime_number =\
    \ false\n            break\n        \n        if character == \"*\":\n       \
    \     prime_number = false\n            break\n        \n        if character\
    \ == \"(\":\n            prime_number = false\n            break\n        \n \
    \       if character == \")\":\n            prime_number = false\n           \
    \ break\n        \n        if character == \"+\":\n            prime_number =\
    \ false\n            break\n        \n        if character == \"=\":\n       \
    \     prime_number = false\n            break\n        \n        if character\
    \ == \"-\":\n            prime\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjn0izxzl.jl:18\nin expression starting at\
    \ /tmp/tmpjn0izxzl.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    for char in string:\n        if char == \"a\" || char == \"e\" ||\
    \ char == \"i\" || char == \"o\" || char == \"u\" || char == \"A\" || char ==\
    \ \"E\" || char == \"I\" || char == \"O\" || char == \"U\"\n            prime_length\
    \ = true\n        else\n            prime_length = false\n    end\n    return\
    \ prime_length\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string is a palindrome or false otherwise\n\
    Examples\n>>> palindrome(\"Hello\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n>>>\
    \ palindrome(\"kittens\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecar\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\"\
    ) == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv_dj03b0.jl:18\nin expression starting at\
    \ /tmp/tmpv_dj03b0.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    if string == \"\"\n  \
    \      true\n    else\n        if string.length % 2 == 0\n            true\n \
    \       else\n            if string.length % 3 == 0\n                true\n  \
    \          else\n                if string.length % 5 == 0\n                 \
    \   true\n                else\n                    false\n        end\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8b8qsbd7.jl:31\nin expression starting at\
    \ /tmp/tmp8b8qsbd7.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length = true\n\
    \    \n    for i in string:\n        if i == \"a\" || i == \"b\" || i == \"c\"\
    \ || i == \"d\" || i == \"e\" || i == \"f\" || i == \"g\" || i == \"h\" || i ==\
    \ \"i\" || i == \"j\" || i == \"k\" || i == \"l\" || i == \"m\" || i == \"n\"\
    \ || i == \"o\" || i == \"p\" || i == \"q\" || i == \"r\" || i == \"s\" || i ==\
    \ \"t\" || i == \"u\" || i == \"v\" || i == \"w\" || i == \"x\" || i == \"y\"\
    \ || i == \"z\":\n            prime_length = false\n            break\n    \n\
    \    return prime_length\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string length is even\nor false otherwise\n\
    Examples\n>>> even_length(\"Hello\")\ntrue\n>>> even_length(\"abcdcba\")\nfalse\n\
    >>> even_length(\"kittens\")\ntrue\n>>> even_length(\"orange\")\nfalse\n</text>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzec14qau.jl:18\nin expression starting at\
    \ /tmp/tmpzec14qau.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    if string == \"\"\n  \
    \      true\n    else\n        if string.length % 2 == 0\n            false\n\
    \        else\n            if string.length % 3 == 0\n                true\n \
    \           else\n                if string.length % 5 == 0\n                \
    \    true\n                else\n                    if string.length % 7 == 0\n\
    \                        true\n                    else\n                    \
    \    false\n    \nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string\n    length is greater than 10 or false\
    \ otherwise\n    Examples\n    >>> prime_length(\"Hello\")\n    true\n    >>>\
    \ prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"kittens\")\n   \
    \ true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\
    \t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3deyrzb1.jl:33\nin expression starting at\
    \ /tmp/tmp3deyrzb1.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = true\n\
    \    \n    for i in string:\n        if i == \"a\" || i == \"e\" || i == \"i\"\
    \ || i == \"o\" || i == \"u\" || i == \"A\" || i == \"E\" || i == \"I\" || i ==\
    \ \"O\" || i == \"U\"\n            prime_length = false\n            break\n \
    \       \n    return prime_length\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7uep8xyk.jl:18\nin expression starting at\
    \ /tmp/tmp7uep8xyk.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length_bool = false\n\
    \    \n    for char in string:\n        if char == \"a\" || char == \"e\" || char\
    \ == \"i\" || char == \"o\" || char == \"u\" || char == \"A\" || char == \"E\"\
    \ || char == \"I\" || char == \"O\" || char == \"U\"\n            prime_length_bool\
    \ = true\n            break\n        end\n    end\n    \n    return prime_length_bool\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns true if the string has all letters capitalized\nExamples\n>>> capitalized(\"\
    Hello\")\ntrue\n>>> capitalized(\"hello\")\nfalse\n>>> capitalized(\"HELLO\")\n\
    true\n>>> capitalized(\"HELLO WORLD\")\nfalse\n>>> capitalized(\"HELLO WORLD\"\
    )\ntrue\n>>> capitalized(\"HELLO WORLD HELLO WORLD\")\nfalse\n>>> capitalized(\"\
    HELLO WORLD HELLO WORLD HELLO WORLD\")\ntrue\n>>> capitalized(\"HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD\")\ntrue\n>>> capitalized(\"HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\"\
    ) == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpil2kvyum.jl:18\nin expression starting at\
    \ /tmp/tmpil2kvyum.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number::Bool = true\n\
    \    \n    for character in string:\n        if character == \" \" or character\
    \ == \"\\n\" or character == \"\\t\" or character == \"\\r\" or character == \"\
    \\0\":\n            continue\n        if character > \"9\":\n            prime_number\
    \ = false\n            break\n        if character < \"2\":\n            prime_number\
    \ = false\n            break\n        if character % 2 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 3 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 5 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 7 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 11 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 13 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 17 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 19 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 23 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 29 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 31 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 37 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 41 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 43 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 47 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 53 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 59 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 61 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 67 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 71 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 73 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 79 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 83 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 89 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 97 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 103 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 107 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 113 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 119 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 127 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 131 == 0:\n            prime_number\
    \ = false\n            break\n        if character % 137 == 0:\nusing Test\n\n\
    @testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\
    \t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9htsx9t6.jl:18\nin expression starting at\
    \ /tmp/tmp9htsx9t6.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length = true\n\
    \    \n    for i in string:\n        if i == \"a\" or i == \"e\" or i == \"i\"\
    \ or i == \"o\" or i == \"u\":\n            prime_length = false\n           \
    \ break\n    \n    return prime_length\n</cell>\n<cell>\nprime_length(\"Hello\"\
    )\n</cell>\n<cell>\nprime_length(\"abcdcba\")\n</cell>\n<cell>\nprime_length(\"\
    kittens\")\n</cell>\n<cell>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite\
    \ a function that takes a string and returns true if the string\n    contains\
    \ only letters (a-z) or false otherwise\n    Examples\n    >>> letter_only(\"\
    Hello\")\n    true\n    >>> letter_only(\"abcdcba\")\n    false\n    >>> letter_only(\"\
    kittens\")\n    false\n    >>> letter_only(\"orange\")\n    false\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphqcw8ig5.jl:18\nin expression starting at\
    \ /tmp/tmphqcw8ig5.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = string.len() > 1 \n    \n    if prime_length\
    \ \n        \n        prime::Bool = false \n        \n        for i in string.chars()\
    \ do \n            \n            if i == 'a' || i == 'e' || i == 'i' || i == 'o'\
    \ || i == 'u' \n                \n                prime::Bool = true \n      \
    \          \n            end \n            \n        end \n        \n        if\
    \ prime \n            \n            for i in string.chars() do \n            \
    \    \n                if i == 'a' || i == 'e' || i == 'i' || i == 'o' || i ==\
    \ 'u' \n                    \n                    prime::Bool = false \n     \
    \               \n                end \n                \n            end \n \
    \           \n        end \n        \n    end \n    \n    return prime_length\
    \ \nend \n</cell>\n<code language=julia-1.3>\nprime_length(\"Hello\")\n</cell>\n\
    <code language=julia-1.3>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nWrite a function that takes a string and returns true\
    \ if the string\n    contains only letters a-z or A-Z or false otherwise\n   \
    \ Examples\n    >>> letters_only(\"Hello\")\n    true\n    >>> letters_only(\"\
    abcdcba\")\n    false\n    >>> letters_only(\"kittens\")\n    false\n    >>> letters_only(\"\
    orange\")\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1jf15348.jl:51\nin expression starting at\
    \ /tmp/tmp1jf15348.jl:51\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\n\
    \    \n    for i in string.split(\"\")\n        if prime_length::Bool = true \n\
    \            prime_length::Bool = false \n        else \n            prime_length::Bool\
    \ = true \n        end\n    end\n    \n    return prime_length\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns true if the\
    \ string\n    contains only letters or false otherwise\n    Examples\n    >>>\
    \ letters_only(\"Hello\")\n    true\n    >>> letters_only(\"abcdcba\")\n    false\n\
    \    >>> letters_only(\"kittens\")\n    false\n    >>> letters_only(\"orange\"\
    )\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3x0_t75_.jl:18\nin expression starting at /tmp/tmp3x0_t75_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    if string == \"\"\n  \
    \      return true\n    \n    length::Int = string.len()\n    \n    if length\
    \ <= 1\n        return true\n    \n    if length % 2 == 0\n        return false\n\
    \    \n    for i in 2..length\n        if string % i == 0\n            return\
    \ false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string\n    contains any uppercase letters\
    \ or false otherwise\n    Examples\n    >>> contains_uppercase(\"Hello\")\n  \
    \  true\n    >>> contains_uppercase(\"abcdcba\")\n    false\n    >>> contains_uppercase(\"\
    kittens\")\n    false\n    >>> contains_uppercase(\"orange\")\n    false\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphh2x87lu.jl:32\nin expression starting at\
    \ /tmp/tmphh2x87lu.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number = true\n\
    \    \n    for i in string:\n        if i == \"a\" or i == \"b\" or i == \"c\"\
    \ or i == \"d\" or i == \"e\" or i == \"f\" or i == \"g\" or i == \"h\" or i ==\
    \ \"i\" or i == \"j\" or i == \"k\" or i == \"l\" or i == \"m\" or i == \"n\"\
    \ or i == \"o\" or i == \"p\" or i == \"q\" or i == \"r\" or i == \"s\" or i ==\
    \ \"t\" or i == \"u\" or i == \"v\" or i == \"w\" or i == \"x\" or i == \"y\"\
    \ or i == \"z\":\n            prime_number = false\n            break\n    \n\
    \    if prime_number:\n        return true\n    else:\n        return false\n\
    end\n</cell>\n<code language=julia-1.0>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.0>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns true if the string is a palindrome or false otherwise\nExamples\n>>>\
    \ palindrome(\"hello\")\ntrue\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palin\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfdqzrosz.jl:18\nin expression starting at\
    \ /tmp/tmpfdqzrosz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = prime_numbers()\n\
    \    \n    for i in string\n        if prime_numbers.contains(i)\n           \
    \ return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string and returns true if the string\n    contains any letter 'a' or 'e'\
    \ or 'i' or 'o' or 'u'\n    Examples\n    >>> contains_vowel(\"Hello\")\n    true\n\
    \    >>> contains_vowel(\"abcdcba\")\n    false\n    >>> contains_vowel(\"kittens\"\
    )\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdtn0s3ak.jl:22\nin expression starting at\
    \ /tmp/tmpdtn0s3ak.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = primes(string)\n\
    \    \n    for i in prime_numbers\n        if string.count(i) == string.count(i-1)\n\
    \            return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes a string and returns true if the string is a palindrome\
    \ or false otherwise\nExamples\n\"racecar\" is a palindrome\n\"racecarc\" is not\
    \ a palindrome\n\"racecarc\" is a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is not\
    \ a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\"\
    \ is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\"\
    \ is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\"\
    \ is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\"\
    \ is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\"\
    \ is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\"\
    \ is not a palindrome\n\"racecar\" \nusing Test\n\n@testset begin\n\ncandidate\
    \ = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxx8ym_vx.jl:22\nin expression starting at\
    \ /tmp/tmpxx8ym_vx.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    if string == \"\" \n        prime_length = true \n    else \n  \
    \      prime_length = false \n        \n        for i in string\n            if\
    \ i == \"a\"\n                prime_length = true \n            else \n      \
    \          prime_length = false \n                \n    return prime_length \n\
    end \n</cell>\n<code language=julia-1.0>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.0>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns true if the string\n    contains only letters or false otherwise\n \
    \   Examples\n    >>> only_letters(\"Hello\")\n    true\n    >>> only_letters(\"\
    abcdcba\")\n    false\n    >>> only_letters(\"kittens\")\n    false\n    >>> only_letters(\"\
    orange\")\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplxl5435l.jl:30\nin expression starting at\
    \ /tmp/tmplxl5435l.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length = true\n\
    \    \n    for i in string:\n        if i == \"a\" || i == \"e\" || i == \"i\"\
    \ || i == \"o\" || i == \"u\" || i == \"A\" || i == \"E\" || i == \"I\" || i ==\
    \ \"O\" || i == \"U\"\n            prime_length = false\n            break\n \
    \   return prime_length\n</code>\n<|/ a tags=julia,primes |>\n<| c |>\nI added\
    \ the code I wrote to my original post. I am not sure how to implement your suggestion.\n\
    <|/ c |>\n<| c |>\nI added the code I wrote to my original post. I am not sure\
    \ how to implement your suggestion.\n<|/ c |>\n<| c |>\nI added the code I wrote\
    \ to my original post. I am not sure how to implement your suggestion.\n<|/ c\
    \ |>\n<| c |>\nI added the code I wrote to my original post. I am not sure how\
    \ to implement your suggestion.\n<|/ c |>\n<| c |>\nI added the code I wrote to\
    \ my original post. I am not sure how to implement your suggestion.\n<|/ c |>\n\
    <| a tags=julia,primes |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu9vzmy8w.jl:18\nin expression starting at\
    \ /tmp/tmpu9vzmy8w.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = true\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2_9wiz2_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2_9wiz2_.jl:1\n\
    in expression starting at /tmp/tmp2_9wiz2_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = Set{Int}()\n\
    \    \n    for i in string.split(\"\")\n        prime_numbers.add(length(i))\n\
    \    \n    return prime_numbers.size == prime_numbers.cardinality\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns true if the\
    \ string\n    contains any uppercase letters or false otherwise\n    Examples\n\
    \    >>> contains_uppercase(\"Hello\")\n    true\n    >>> contains_uppercase(\"\
    abcdcba\")\n    false\n    >>> contains_uppercase(\"kittens\")\n    false\n  \
    \  >>> contains_uppercase(\"orange\")\n    false\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyboibzvd.jl:22\nin expression starting at\
    \ /tmp/tmpyboibzvd.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    if string == \"\"\n        true\n\
    \    else\n        if string.length % 2 == 0\n            false\n        else\n\
    \            if string.length % 3 == 0\n                true\n            else\n\
    \                if string.length % 5 == 0\n                    true\n       \
    \         else\n                    if string.length % 7 == 0\n              \
    \          true\n                    else\n                        false\n   \
    \ end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is not an answer to the\
    \ question. He wants to know why his code doesn't work, not how to fix it.\n<|/\
    \ c |>\n<| c |>\nI agree with you, however I believe that my answer does answer\
    \ the question and I believe that it is an answer to the question as well.\n<|/\
    \ c |>\n<| c |>\nI agree with you but your answer doesn't answer the question.\
    \ He wants to know why his code doesn't work, not how to fix it.\n<|/ c |>\n<|\
    \ c |>\nI agree with you but your answer doesn't answer the question. He wants\
    \ to know why his code doesn't work, not how to fix it.\n<|/ c |>\n<| c |>\nI\
    \ agree with you but your answer doesn't answer the question. He wants to know\
    \ why his code doesn't work, not how to fix it.\n<|/ c |>\n<| a tags=julia,string\
    \ |>\nThe reason your code doesn't work is that you are trying to call a method\
    \ on a string that doesn't have that method. \nThe method you are trying to call\
    \ is length. \n<code>\njulia> \"Hello\".length\nERROR: MethodError: no method\
    \ matching length(::String)\nClosest candidates are:\n  length(::AbstractString)\
    \ at strings/abstractstring.jl:39\n  length(::String) at strings/string.jl:29\n\
    \  length(::Symbol) at strings/string.jl:29\n  length(::Int64) at strings/string.jl:29\n\
    \  length(::Float64) at strings/string.jl:29\n  length(::Array{String,1}) at strings/string.jl:29\n\
    \  length(::Array{Int64,1}) at strings/string.jl:29\n  length(::Array{Float64,1})\
    \ at strings/string.jl:29\n  length(::Array{Any,1}) at strings/string.jl:29\n\
    \  length(::Any) at strings/string.jl:29\n  length(::Nothing) at strings/string.jl:29\n\
    </code>\nTo fix your code, you need to change your if statements to use the length\
    \ method on the string itself. \n<code>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmbly5jos.jl:32\nin expression starting at\
    \ /tmp/tmpmbly5jos.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = true\n\
    \    \n    for i in string.chars\n        if string.chars.count(i) == 1 && string.chars.count(i)\
    \ == string.chars.count(i-1) == false\n            prime_length = false\n    \
    \        break\n        end\n    end\n    \n    return prime_length\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns true if the\
    \ string\n    contains only letters or false otherwise\n    Examples\n    >>>\
    \ letter_only(\"Hello\")\n    true\n    >>> letter_only(\"abcdcba\")\n    false\n\
    \    >>> letter_only(\"kittens\")\n    false\n    >>> letter_only(\"orange\")\n\
    \    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpljcnr29s.jl:26\nin expression starting at\
    \ /tmp/tmpljcnr29s.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    if string == \"\"\n  \
    \      return true\n    \n    if string.length % 2 == 0\n        return false\n\
    \    \n    for i in 2..string.length - 1\n        if string.charAt(i) == string.charAt(i-1)\n\
    \            return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns true if the string\n    contains\
    \ only letters or false otherwise\n    Examples\n    >>> only_letters(\"Hello\"\
    )\n    true\n    >>> only_letters(\"abcdcba\")\n    false\n    >>> only_letters(\"\
    kittens\")\n    false\n    >>> only_letters(\"orange\")\n    false\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9maf6bxl.jl:26\nin expression starting at\
    \ /tmp/tmp9maf6bxl.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers::Set{Int}\
    \ = (2..math.floor(sqrt(string)))\n    \n    for i in prime_numbers\n        if\
    \ string mod i == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns true if the\
    \ string\n    contains only letters or false otherwise\n    Examples\n    >>>\
    \ letters_only(\"Hello\")\n    true\n    >>> letters_only(\"abcdcba\")\n    false\n\
    \    >>> letters_only(\"kittens\")\n    false\n    >>> letters_only(\"orange\"\
    )\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"i\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvlbwehxd.jl:18\nin expression starting at /tmp/tmpvlbwehxd.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    if string == \"\"\n  \
    \      return true\n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjq60l7s4.jl:1\nin expression starting at /tmp/tmpjq60l7s4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number = 2\n   \
    \ \n    for i in string:\n        if prime_number % i == 0:\n            return\
    \ False\n        prime_number += 1\n    return True\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns true if the string is a\
    \ palindrome or false otherwise\nExamples\n>>> palindrome(\"racecar\")\ntrue\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecar\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvng0me3t.jl:18\nin expression starting at\
    \ /tmp/tmpvng0me3t.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number = true\n\
    \    \n    for i in string.split(\"\")\n        if prime_number == true\n    \
    \        prime_number = false\n        end\n    end\n    \n    return prime_number\n\
    end\n</cell>\n<code language=julia-1.0>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.0>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns true if the string\n    length is greater than 10 or false otherwise\n\
    \    Examples\n    >>> prime_length_gt10(\"Hello\")\n    true\n    >>> prime_length_gt10(\"\
    abcdcba\")\n    false\n    >>> prime_length_gt10(\"kittens\")\n    false\n   \
    \ >>> prime_length_gt10(\"orange\")\n    false\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi8er4zr2.jl:25\nin expression starting at\
    \ /tmp/tmpi8er4zr2.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    if string == \"\"\n        true\n\
    \    else\n        if string.length % 2 == 0\n            true\n        else\n\
    \            if string.length % 3 == 0\n                true\n            else\n\
    \                if string.length % 5 == 0\n                    true\n       \
    \         else\n                    false\n</code>\n<|/ a tags=primes,haskell,functional-programming\
    \ |>\n<| c |>\nThis is not the most efficient solution. `string.length % 2 ==\
    \ 0` can be replaced by `mod string 2 == 0`. And `string.length % 3 == 0` can\
    \ be replaced by `mod string 3 == 0`. And so on. Furthermore, `mod string 5 ==\
    \ 0` can be replaced by `mod string 5 == 1`.\n<|/ c |>\n<| c |>\nI agree with\
    \ your comment, but I wanted to show a more efficient solution. Also I wanted\
    \ to show that `mod string 5 == 1` can be replaced by `mod string 5 == 0`.\n<|/\
    \ c |>\n<| c |>\nI agree with your comment, but I wanted to show a more efficient\
    \ solution. Also I wanted to show that `mod string 5 == 1` can be replaced by\
    \ `mod string 5 == 0`.\n<|/ c |>\n<| c |>\nI agree with your comment, but I wanted\
    \ to show a more efficient solution. Also I wanted to show that `mod string 5\
    \ == 1` can be replaced by `mod string 5 == 0`.\n<|/ c |>\n<| c |>\nI agree with\
    \ your comment, but I wanted to show a more efficient solution. Also I wanted\
    \ to show that `mod string 5 == 1` can be replaced by `mod string 5 == 0`.\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\nprimes :: [Integer]\nprimes = 2 : filter isPrime\
    \ [3..]\n</code>\n<|/ a tags=primes,haskell,functional-programming |>\n<| c |>\n\
    This is not the most efficient solution. `filter` can be replaced by `takeWhile`.\n\
    <|/ c |>\n<| c |>\n`takeWhile` can be replaced by `filter ((>1) . snd) [2..]`\n\
    <|/ c |>\n<| c |>\n`takeWhile` can be replaced by `filter ((>1) . snd) [2..]`\n\
    <|/ c |>\n<| c |>\n`takeWhile` can be replaced by `filter ((>1) . snd) [2..]`\n\
    <|/ c |>\n<| c |>\n`takeWhile` can be replaced by `filter (\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcuszc4xf.jl:27\nin expression starting at\
    \ /tmp/tmpcuszc4xf.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    if string == \"\"\n        prime_length = true\n    else \n    \
    \    if string.length % 2 == 0\n            prime_length = false\n        else\n\
    \            prime_length = true\n            for i in 2..string.length\n    \
    \            if string.charAt(i) == string.charAt(i-1)\n                    prime_length\
    \ = false\n                    break\n        end\n    end\n    return prime_length\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nWrite a function that takes a string and returns true\
    \ if the string\n    contains only letters or false otherwise\n    Examples\n\
    \    >>> letters_only(\"Hello\")\n    true\n    >>> letters_only(\"abcdcba\")\n\
    \    false\n    >>> letters_only(\"kittens\")\n    false\n    >>> letters_only(\"\
    orange\")\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwjeblhtj.jl:32\nin expression starting at\
    \ /tmp/tmpwjeblhtj.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\
    \ \n    \n    for i in string\n        if prime_length::Bool = false \n      \
    \      for i in string\n                if string::Int % string::Int == 0\n  \
    \                  prime_length::Bool = true \n                else\n        \
    \            prime_length::Bool = false \n        end\n    end\n    \n    return\
    \ prime_length::Bool\nend\n</cell>\n<code language=julia-1.4>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.4>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns true if the string length is even\nor false otherwise\n\
    Examples\n>>> even_length(\"Hello\")\ntrue\n>>> even_length(\"abcdcba\")\nfalse\n\
    >>> even_length(\"kittens\")\nfalse\n>>> even_length(\"orange\")\ntrue\n</text>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdzk_2hv8.jl:18\nin expression starting at /tmp/tmpdzk_2hv8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    if string == \"\"\n  \
    \      true\n    else\n        \n        if string.length % 2 == 0\n         \
    \   true\n        else\n            false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns true if the string\n    length\
    \ is an even number or false otherwise\n    Examples\n    >>> even_length(\"Hello\"\
    )\n    true\n    >>> even_length(\"abcdcba\")\n    false\n    >>> even_length(\"\
    kittens\")\n    false\n    >>> even_length(\"orange\")\n    true\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpech6gjc7.jl:25\nin expression starting at\
    \ /tmp/tmpech6gjc7.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers::Set{Int}=\
    \ Set()\n    \n    for character in string\n        if character == \"a\"\n  \
    \          prime_numbers.add(1)\n        else if character == \"b\"\n        \
    \    prime_numbers.add(2)\n        else if character == \"c\"\n            prime_numbers.add(3)\n\
    \        else if character == \"d\"\n            prime_numbers.add(4)\n      \
    \  else if character == \"e\"\n            prime_numbers.add(5)\n        else\
    \ if character == \"f\"\n            prime_numbers.add(6)\n        else if character\
    \ == \"g\"\n            prime_numbers.add(7)\n        else if character == \"\
    h\"\n            prime_numbers.add(8)\n        else if character == \"i\"\n  \
    \          prime_numbers.add(9)\n        else if character == \"j\"\n        \
    \    prime_numbers.add(10)\n        else if character == \"k\"\n            prime_numbers.add(11)\n\
    \        else if character == \"l\"\n            prime_numbers.add(12)\n     \
    \   else if character == \"m\"\n            prime_numbers.add(13)\n        else\
    \ if character == \"n\"\n            prime_numbers.add(14)\n        else if character\
    \ == \"o\"\n            prime_numbers.add(15)\n        else if character == \"\
    p\"\n            prime_numbers.add(16)\n        else if character == \"q\"\n \
    \           prime_numbers.add(17)\n        else if character == \"r\"\n      \
    \      prime_numbers.add(18)\n        else if character == \"s\"\n           \
    \ prime_numbers.add(19)\n        else if character == \"t\"\n            prime_numbers.add(20)\n\
    \        else if character == \"u\"\n            prime_numbers.add(21)\n     \
    \   else if character == \"v\"\n            prime_numbers.add(22)\n        else\
    \ if character == \"w\"\n            prime_numbers.add(23)\n        else if character\
    \ == \"x\"\n            prime_numbers.add(24)\n        else if character == \"\
    y\"\n            prime_numbers.add(25)\n        else if character == \"z\"\n \
    \           prime_numbers.add(26)\n        else if character == \"A\"\n      \
    \      prime_numbers.add(27)\n        else if character == \"B\"\n           \
    \ prime_numbers.add(28)\n        else if character == \"C\"\n            prime_numbers.add(29)\n\
    \        else if character == \"D\"\n            prime_numbers.add(30)\n     \
    \   else if character == \"E\"\n            prime_numbers.add(31)\n        else\
    \ if character == \"F\"\n            prime_numbers.add(32)\n        else if character\
    \ == \"G\"\n            prime_numbers.add(33)\n        else if character == \"\
    H\"\n            prime_numbers.add(34)\n        else if character == \"I\"\n \
    \           prime_numbers.add(35)\n        else if \nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzgfpzy4a.jl:20\nin expression starting at\
    \ /tmp/tmpzgfpzy4a.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    if string == \"\"\n        true\n\
    \    else\n        if string.length % 2 == 0\n            false\n        else\n\
    \            if string.length % 3 == 0\n                true\n            else\n\
    \                if string.length % 5 == 0\n                    true\n       \
    \         else\n                    if string.length % 7 == 0\n              \
    \          true\n                    else\n                        false\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Write a function that takes a string\
    \ and returns true if the string\n    length is less than or equal to 10 or false\
    \ otherwise\n    Examples\n    >>> prime_length_less_than_10(\"Hello\")\n    true\n\
    \    >>> prime_length_less_than_10(\"abcdcba\")\n    true\n    >>> prime_length_less_than_10(\"\
    kittens\")\n    true\n    >>> prime_length_less_than_10(\"orange\")\n    false\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptm51tme_.jl:31\nin expression starting at\
    \ /tmp/tmptm51tme_.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    if string == \"\"\n  \
    \      return true\n    \n    prime_number::Int = 0\n    \n    for i in string.chars\n\
    \        if i \u2209 string.chars.drop(prime_number)\n            prime_number\
    \ += 1\n            \n    if prime_number == 0\n        return false\n    \n \
    \   for i in string.chars.drop(prime_number)\n        if i \u2209 string.chars.drop(prime_number\
    \ + 1)\n            prime_number += 1\n            \n    if prime_number == 0\n\
    \        return false\n    \n    for i in string.chars.drop(prime_number + 1)\n\
    \        if i \u2209 string.chars.drop(prime_number + 2)\n            prime_number\
    \ += 2\n            \n    if prime_number == 0\n        return false\n    \n \
    \   for i in string.chars.drop(prime_number + 2)\n        if i \u2209 string.chars.drop(prime_number\
    \ + 3)\n            prime_number += 3\n            \n    if prime_number == 0\n\
    \        return false\n    \n    for i in string.chars.drop(prime_number + 3)\n\
    \        if i \u2209 string.chars.drop(prime_number + 4)\n            prime_number\
    \ += 4\n            \n    if prime_number == 0\n        return false\n    \n \
    \   for i in string.chars.drop(prime_number + 4)\n        if i \u2209 string.chars.drop(prime_number\
    \ + 5)\n            prime_number += 5\n            \n    if prime_number == 0\n\
    \        return false\n    \n    for i in string.chars.drop(prime_number + 5)\n\
    \        if i \u2209 string.chars.drop(prime_number + 6)\n            prime_number\
    \ += 6\n            \n    if prime_number == 0\n        return false\n    \n \
    \   for i in string.chars.drop(prime_number + 6)\n        if i \u2209 string.chars.drop(prime_number\
    \ + 7)\n            prime_number += 7\n            \n    if prime_number == 0\n\
    \        return false\n    \n    for i in string.chars.drop(prime_number + 7)\n\
    \        if i \u2209 string.chars.drop(prime_number + 8)\n            prime_number\
    \ += 8\n            \n    if prime_number == 0\n        return false\n    \n \
    \   for i in string.chars.drop(prime_number + 8)\n        if i \u2209 string.chars.drop(prime_number\
    \ + 9)\n            prime_number += 9\n            \n    if prime_number == 0\n\
    \        return false\n    \n    for i in string.chars.drop(prime_number + 9)\n\
    \        if i \uFFFD\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid character \"\uFFFD\" near column 14\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpv0dyz_p7.jl:91\nin expression\
    \ starting at /tmp/tmpv0dyz_p7.jl:91\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers = prime_numbers()\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n</cell>\n<cell>\nprime_length(\"Hello\")\n</cell>\n\
    <cell>\nprime_length(\"abcdcba\")\n</cell>\n<cell>\nprime_length(\"kittens\")\n\
    </cell>\n<cell>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite a function that\
    \ takes a string and returns true if the string\n    contains only letters or\
    \ false otherwise\n    Examples\n    >>> letters_only(\"Hello\")\n    true\n \
    \   >>> letters_only(\"abcdcba\")\n    false\n    >>> letters_only(\"kittens\"\
    )\n    false\n    >>> letters_only(\"orange\")\n    false\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5og2_q8g.jl:18\nin expression starting at\
    \ /tmp/tmp5og2_q8g.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_numbers::Set{Int}=\
    \ Set()\n    \n    for i in string.split(\"\")\n        prime_numbers.add(Int(i))\n\
    \    \n    for i in prime_numbers\n        if prime_numbers.count(i) == Int(string.count(i))\n\
    \            return false\n    return true\nend\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.0>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.0>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns true if the string is a palindrome\
    \ or false otherwise\nExamples\n>>> palindrome(\"Hello\")\ntrue\n>>> palindrome(\"\
    abba\")\ntrue\n>>> palindrome(\"kittens\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    race\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwz_6j4g0.jl:25\nin expression starting at\
    \ /tmp/tmpwz_6j4g0.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number::Bool = true\n\
    \    \n    for i in string.chars:\n        if i == \"a\" || i == \"b\" || i ==\
    \ \"c\" || i == \"d\" || i == \"e\" || i == \"f\" || i == \"g\" || i == \"h\"\
    \ || i == \"i\" || i == \"j\" || i == \"k\" || i == \"l\" || i == \"m\" || i ==\
    \ \"n\" || i == \"o\" || i == \"p\" || i == \"q\" || i == \"r\" || i == \"s\"\
    \ || i == \"t\" || i == \"u\" || i == \"v\" || i == \"w\" || i == \"x\" || i ==\
    \ \"y\" || i == \"z\":\n            prime_number = false\n            break\n\
    \        \n    if prime_number:\n        return true\n    else:\n        return\
    \ false\nend\n</cell>\n<code language=julia-1.0>\nprime_length(\"Hello\")\n</cell>\n\
    <code language=julia-1.0>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    orange\")\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\n\
    candidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprq1cdruw.jl:18\nin expression starting at\
    \ /tmp/tmprq1cdruw.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    if string == \"\"\n  \
    \      return true\n    \n    length::Int = string.len()\n    \n    for i in 2..length\n\
    \        if string.slice(0,i).contains(string[i])\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string\n    contains only letters a-z or A-Z\
    \ or false otherwise\n    Examples\n    >>> is_alphanumeric(\"Hello\")\n    true\n\
    \    >>> is_alphanumeric(\"abcdcba\")\n    false\n    >>> is_alphanumeric(\"kittens\"\
    )\n    false\n    >>> is_alphanumeric(\"orange\")\n    false\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\"\
    ) == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5h7o9p8n.jl:25\nin expression starting at\
    \ /tmp/tmp5h7o9p8n.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    if string == \"\"\n  \
    \      return true\n    \n    length::Int = string.len()\n    \n    for i in 2..length\n\
    \        if string.sub(i, i).count() == length\n            return false\n   \
    \ end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string\n    contains only letters and false\
    \ otherwise\n    Examples\n    >>> letters_only(\"Hello\")\n    true\n    >>>\
    \ letters_only(\"abcdcba\")\n    false\n    >>> letters_only(\"kittens\")\n  \
    \  false\n    >>> letters_only(\"orange\")\n    false\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpinh909va.jl:26\nin expression starting at\
    \ /tmp/tmpinh909va.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_length::Bool = false\n\
    \    \n    if string == \"\"\n        return prime_length\n    \n    length::Int\
    \ = string.length\n    \n    for i in 2..length\n        if string.substring(i,i+1).contains(\"\
    \ \")\n            return false\n    \n    if string.substring(i,i+1).contains(\"\
    ,\")\n        return false\n    \n    if string.substring(i,i+1).contains(\".\"\
    )\n        return false\n    \n    if string.substring(i,i+1).contains(\"-\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\"/\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\"(\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\")\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\"[\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\"]\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\"{\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\"}\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\":\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\";\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\"'\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\"#\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\"&\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\"%\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\"$\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\"@\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\"~\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\"^\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\"+\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\"=\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\"<\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\">\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\"/\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\"+\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\"*\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\"?\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\":\")\n\
    \        return false\n    \n    if string.substring(i,i+1).contains(\";\")\n\
    \        return \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t\
    @test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnyu8_so3.jl:74\nin expression starting at\
    \ /tmp/tmpnyu8_so3.jl:74\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number::Int64 =\
    \ 1\n    \n    for i in string.split(\"\")\n        if prime_number == 1\n   \
    \         return false\n        prime_number = prime_number * i\n    end\n   \
    \ return true\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string has all letters capitalized\nExamples\n\
    >>> capitalized(\"Hello\")\ntrue\n>>> capitalized(\"Hello World\")\nfalse\n>>>\
    \ capitalized(\"Hello World!\")\ntrue\n>>> capitalized(\"Hello World!?\")\nfalse\n\
    >>> capitalized(\"Hello World!?!\")\ntrue\n>>> capitalized(\"Hello World!?!?\"\
    )\nfalse\n>>> capitalized(\"Hello World!?!?!\")\ntrue\n>>> capitalized(\"Hello\
    \ World!?!?!?\")\nfalse\n>>> capitalized(\"Hello World!?!?!?!\")\ntrue\n>>> capitalized(\"\
    Hello World!?!?!?!?\")\nfalse\n>>> capitalized(\"Hello World!?!?!?!?!\")\ntrue\n\
    >>> capitalized(\"Hello World!?!?!?!?!?\")\nfalse\n>>> capitalized(\"Hello World!?!?!?!?!?!\"\
    )\ntrue\n>>> capitalized(\"Hello World!?!?!?!?!?!?\")\nfalse\n>>> capitalized(\"\
    Hello World!?!?!?!?!?!?!\")\ntrue\n>>> capitalized(\"Hello World!?!?!?!?!?!?!\"\
    )\nfalse\n>>> capitalized(\"Hello World!?!?!?!?!?!?!?\")\nfalse\n>>> capitalized(\"\
    Hello World!?!?!?!?!?!?!?!\")\ntrue\n>>> capitalized(\"Hello World!?!?!?!?!?!?!?!\"\
    )\nfalse\n>>> capitalized(\"Hello World!?!?!?!?!?!?!?!?\")\nfalse\n>>> capitalized(\"\
    Hello World!?!?!?!?!?!?!?!?!\")\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpij1_8iki.jl:24\nin expression starting at\
    \ /tmp/tmpij1_8iki.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that takes a string and returns true if the string\n\
    \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
    function prime_length(string::String)::Bool \n    \n    prime_number::Bool = true\n\
    \    \n    for i in string\n        if i == \"a\"\n            prime_number =\
    \ false\n            break\n        else\n            if i == \"b\"\n        \
    \        prime_number = false\n                break\n            else\n     \
    \           if i == \"c\"\n                    prime_number = false\n        \
    \            break\n                else\n                    if i == \"d\"\n\
    \                        prime_number = false\n                        break\n\
    \                    else\n                        if i == \"e\"\n           \
    \                 prime_number = false\n                            break\n  \
    \                      else\n                            if i == \"f\"\n     \
    \                           prime_number = false\n                           \
    \     break\n                            else\n                              \
    \  if i == \"g\"\n                                    prime_number = false\n \
    \                                   break\n                                else\n\
    \                                    if i == \"h\"\n                         \
    \               prime_number = false\n                                       \
    \ break\n                                    else\n                          \
    \              if i == \"i\"\n                                            prime_number\
    \ = false\n                                            break\n               \
    \                         else\n                                            if\
    \ i == \"j\"\n                                                prime_number = false\n\
    \                                                break\n                     \
    \                       else\n                                               \
    \ if i == \"k\"\n                                                    prime_number\
    \ = false\n                                                    break\n       \
    \                                         else\n                             \
    \                       if i == \"l\"\n                                      \
    \                  prime_number = false\n                                    \
    \                    break\n                                                 \
    \   else\n                                                        if i == \"m\"\
    \n                                                            prime_number = false\n\
    \                                                            break\n         \
    \                                               else\n                       \
    \                                     if i == \"n\"\n                        \
    \                                        prime_number = false\n              \
    \                                                  break\n                   \
    \                                         else\n                             \
    \                                   if i == \"o\"\n                          \
    \                                          prime_number = false\n            \
    \                                                        break\n             \
    \                                                   else\n                   \
    \                                                 if i == \"p\"\n            \
    \                                                            prime_number = false\n\
    \                                                                        break\n\
    \                                                                    else\n  \
    \                                                                            \
    \          if i == \"q\"\n                                                   \
    \         prime_number = false\n                                             \
    \               break\n                                                      \
    \  else\n                                                            if i == \"\
    r\"\n                                                                prime_number\
    \ = false\n                                                                break\n\
    \                                                            else\n          \
    \                                                      if i == \"s\"\n       \
    \                                                             prime_number = false\n\
    \                                                                    break\n \
    \                                                               else\n       \
    \                                                             if i == \"t\"\n\
    \                                                                        prime_number\
    \ = false\n                                                                  \
    \      break\n                                                               \
    \     else\n                                                        if i == \"\
    u\"\n                                                            prime_number\
    \ = false\n                                                            break\n\
    \                                                        else\n              \
    \                                              if i == \"v\"\n               \
    \                                                 prime_number = false\n     \
    \                                                           break\n          \
    \                                                  else\n                    \
    \                                            if i == \"w\"\n                 \
    \                                                   prime_number = false\n   \
    \                                                                 break\n    \
    \                                                            else\n          \
    \                                                          if i == \"x\"\n   \
    \                                                                     prime_number\
    \ = false\n                                                                  \
    \      break\n                                                               \
    \     else\n                                                        if i == \"\
    y\"\n                                                            prime_number\
    \ = false\n                                                            break\n\
    \                                                        else\n              \
    \                                              if i == \"z\"\n               \
    \                                                 prime_number = false\n     \
    \                                                           break\n          \
    \                                                  else\n                    \
    \                                            prime_number = true\n    end\n\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpv7ea05ql.jl:114\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv7ea05ql.jl:1\n\
    in expression starting at /tmp/tmpv7ea05ql.jl:1\n"
  stdout: ''
