name: HumanEval_20_find_closest_elements
language: jl
prompt: "\"\"\" From a supplied vector of numbers (of length at least two) select\
  \ and return two that are the closest to each\n    other and return them in order\
  \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
  \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
  \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
  \ Float64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0,\
  \ 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0,\
  \ 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
  \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
completions: ["    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function by comparing\
    \ it to our old function and see how they compare.", "    \n    minimum = numbers[1]\n\
    \    maximum = numbers[1]\n    for i in 2:length(numbers)\n        if numbers[i]\
    \ < minimum\n            minimum = numbers[i]\n        elseif numbers[i] > maximum\n\
    \            maximum = numbers[i]\n        else\n            return minimum, maximum\n\
    \        end\n    end\n    return minimum, maximum\nend\n</cell>\n<text>\nExercise\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in that vector. Test it on some vectors.", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    smallest = numbers[1]\n    largest =\
    \ numbers[1]\n    for n in numbers[2:end]\n        if n < smallest\n         \
    \   smallest = n\n        elseif n > largest\n            largest = n\n      \
    \  else\n            break\n    end\n    return (smallest, largest)\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function", "    \n\
    \    smallest_diff = Float64(0.0)\n    smallest_element = numbers[1]\n    \n \
    \   for element in numbers[2:end]\n        diff = abs(element - smallest_element)\n\
    \        if diff < smallest_diff\n            smallest_diff = diff\n         \
    \   smallest_element = element\n        end\n    end\n    \n    return (smallest_element,\
    \ smallest_element)\nend\n</cell>\n<text>\nNow let's try it out on some vectors.",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    smallest_index\
    \ = 1\n    largest_index = 2\n    \n    for number in numbers[2:end]\n       \
    \ if number < smallest_number\n            smallest_number = number\n        \
    \    smallest_index = largest_index\n        elseif number > largest_number\n\
    \            largest_number = number\n            largest_index = smallest_index\n\
    \        else\n            smallest_index = largest_index\n        end\n    end\n\
    \    \n    return (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\n\
    Write a function called find_closest_elements_2 that does the same thing as find_closest_elements\
    \ but returns the two numbers in order of the smallest number and the largest\
    \ number.", "    \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for\
    \ i in numbers[2:end]\n        if i < minimum\n            minimum = i\n     \
    \   elseif i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ (minimum, maximum)\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_distance\
    \ = Float64(0)\n    largest_distance = Float64(0)\n    \n    for number in numbers\n\
    \        if number < smallest_distance\n            smallest_distance = number\n\
    \        elseif number > largest_distance\n            largest_distance = number\n\
    \        end\n    end\n    \n    return (smallest_distance, largest_distance)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    smallest = numbers[1]\n \
    \   largest = numbers[1]\n    for number in numbers[2:end]\n        if number\
    \ < smallest \n            smallest = number\n        elseif number > largest\n\
    \            largest = number\n        end\n    end\n    return (smallest, largest)\n\
    end\n</cell>\n<code language=julia-1.3>\nfind_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n</cell>\n<code language=julia-1.3>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ will find the closest element to a given number in a vector. Test it on some\
    \ examples. Write a function that will find the closest element to a given number\
    \ in a vector. Test it on some examples. Write a function that will find the closest\
    \ element to a given number in a vector. Test it on some examples.", "    minimum\
    \ = minimum(numbers)\n    maximum = maximum(numbers)\n    minimum_index = findfirst(minimum\
    \ == numbers)\n    maximum_index = findfirst(maximum == numbers)\n    \n    if\
    \ minimum_index == maximum_index\n        return (minimum, minimum)\n    else\n\
    \        return (minimum[minimum_index], maximum[maximum_index])\n    end\nend\n\
    </cell>\n<text>\nExercise\nWrite a function that takes in a list of numbers and\
    \ returns the index of the two numbers that are closest to each other. Test it\
    \ by calling it on a list with two numbers and see what happens.", "    \n   \
    \ smallest = numbers[1]\n    largest = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest \n            smallest = number\n        elseif\
    \ number > largest\n            largest = number\n        end\n    end\n    \n\
    \    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function with\
    \ some test cases:", "    \n    smallest = numbers[1]\n    largest = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest\n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test the function by comparing\
    \ it to our previous implementation", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[end]\n    smallest_index = 2\n    largest_index\
    \ = end\n    \n    for index in 2:end\n        if numbers[index] < smallest_number\n\
    \            smallest_number = numbers[index]\n            smallest_index = index\n\
    \        end\n        if numbers[index] > largest_number\n            largest_number\
    \ = numbers[index]\n            largest_index = index\n        end\n    end\n\
    \    \n    return (smallest_number, largest_number)\nend\n</cell>\n<text>\nNow\
    \ let's test our new function by comparing it to our old function and see how\
    \ they compare:", "    \n    closest_elements = Vector{Float64}(undef, 0)\n  \
    \  closest_elements_distance = Float64(0)\n    \n    for number in numbers\n \
    \       \n        distance = abs(number - numbers[1])\n        \n        if closest_elements_distance\
    \ < distance\n            closest_elements_distance = distance\n            closest_elements\
    \ = [numbers[1], number]\n        elseif closest_elements_distance == distance\n\
    \            closest_elements = [number, numbers[1]]\n        end\n    end\n \
    \   \n    return closest_elements\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in numbers[2:end]\n\
    \        if i < minimum\n            minimum = i\n        elseif i > maximum\n\
    \            maximum = i\n        end\n    end\n    return minimum, maximum\n\
    end\n</cell>\n<text>\nNow let's test our new function by comparing it to our old\
    \ function and see how they compare.", "    minimum = numbers[1]\n    maximum\
    \ = numbers[1]\n    for i in numbers[2:end]\n        if i < minimum\n        \
    \    minimum = i\n        elseif i > maximum\n            maximum = i\n      \
    \  else\n            break\n    end\n    return (minimum, maximum)\nend\n</cell>\n\
    <text>\nNow let's test the function by comparing it to our previous implementation:",
  "    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for n in numbers[2:end]\n\
    \        if n < smallest\n            smallest = n\n        elseif n > largest\n\
    \            largest = n\n        end\n    end\n    return (smallest, largest)\n\
    end\n</cell>\n<text>\nNow let's test our new function by comparing it to our old\
    \ function and see how they compare.", "    \n    smallest = numbers[1]\n    largest\
    \ = numbers[1]\n    for i in 2:length(numbers)\n        if numbers[i] < smallest\
    \ \n            smallest = numbers[i]\n        elseif numbers[i] > largest\n \
    \           largest = numbers[i]\n        end\n    end\n    return smallest, largest\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes in a vector of numbers\
    \ and returns the sum of the squares of the numbers in that vector. \nThe function\
    \ should only take in a vector of numbers and return a number.", "    \n    smallest\
    \ = numbers[1]\n    largest = numbers[1]\n    for i in 2:length(numbers)\n   \
    \     if numbers[i] < smallest \n            smallest = numbers[i]\n        elseif\
    \ numbers[i] > largest\n            largest = numbers[i]\n        end\n    end\n\
    \    return smallest, largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for both real and complex numbers. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ both real and complex numbers. \nThe function should work for both real and\
    \ complex numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for both real and complex numbers. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ both real and complex numbers. \nThe function should work for both real and\
    \ complex numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for both real and complex numbers. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ both real and complex numbers. \nThe function should work for both real and\
    \ complex numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for both real and complex numbers. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ both real and complex numbers. \nThe function should work for both real and\
    \ complex numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for both real and complex numbers. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ both real and complex numbers. \nThe function should work for both real and\
    \ complex numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for both real and complex numbers. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ both real and complex numbers. \nThe function should work for both real and\
    \ complex numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for both real and complex numbers. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ both real and complex numbers. \nThe function should work for both real and\
    \ complex numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for both real and complex numbers. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ both real and ", "    \n    closest_elements = Vector{Float64}(undef, 0)\n \
    \   closest_elements_distance = Float64(0)\n    \n    for number in numbers\n\
    \        \n        distance = abs(number - numbers[1])\n        \n        if closest_elements_distance\
    \ > distance\n            closest_elements_distance = distance\n            closest_elements\
    \ = number\n        else\n            if closest_elements_distance == distance\n\
    \                closest_elements = closest_elements + [number]\n            end\n\
    \        end\n    end\n    \n    return closest_elements, closest_elements_distance\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    closest_numbers = Vector{Float64}(undef,\
    \ 0)\n    closest_numbers_distance = Float64(0)\n    \n    for number in numbers\n\
    \        \n        distance = abs(number - numbers[1])\n        \n        if closest_numbers_distance\
    \ > distance\n            closest_numbers_distance = distance\n            closest_numbers\
    \ = [numbers[1], number]\n        elseif closest_numbers_distance == distance\n\
    \            closest_numbers = [number, numbers[1]]\n        end\n    end\n  \
    \  \n    return closest_numbers\nend\n</cell>\n<code language=julia-1.5>", " \
    \   smallest_number = numbers[1]\n    largest_number = numbers[end]\n    for number\
    \ in numbers[2:end]\n        if number < smallest_number\n            smallest_number\
    \ = number\n        elseif number > largest_number\n            largest_number\
    \ = number\n        end\n    end\n    return (smallest_number, largest_number)\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis code doesn't work. `smallest_number`\
    \ and `largest_number` are not initialized.\n<|/ c |>\n<| c |>\nYes, I forgot\
    \ to add that to the code. Thanks for pointing that out.\n<|/ c |>\n<| a tags=julia,arrays\
    \ |>\n<code>", "    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.0>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector.\
    \ \nFor example, if the input vector is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2], the output\
    \ should be 14.0. \nThe function should take an input vector of numbers of length\
    \ at least two.", "    \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    \n    if minimum == maximum\n        return (minimum, minimum)\n    end\n\
    \    \n    middle = minimum + maximum/2.0\n    \n    if middle == minimum\n  \
    \      return (minimum, middle)\n    end\n    \n    if middle == maximum\n   \
    \     return (middle, maximum)\n    end\n    \n    left_half = find_closest_elements(numbers[minimum:middle])\n\
    \    right_half = find_closest_elements(numbers[middle:maximum])\n    \n    if\
    \ left_half[1] == right_half[1]\n        return (left_half[1], middle)\n    end\n\
    \    \n    if left_half[1] < right_half[1]\n        return (left_half[1], left_half[1])\n\
    \    end\n    \n    return (right_half[1], right_half[1])\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    smallest = numbers[1]\n    largest = numbers[1]\n\
    \    for n in numbers[2:end]\n        if n < smallest\n            smallest =\
    \ n\n        elseif n > largest\n            largest = n\n        else\n     \
    \       break\n    end\n    return (smallest, largest)\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| c |>\nThis doesn't work if there are two numbers that are equidistant\
    \ from each other. For example, `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])` returns `(2.0, 2.0)` instead of `(2.0, 2.2)`.\n<|/ c |>\n<| c |>\nI see\
    \ what you mean. I've updated my answer to account for that case.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if there are two numbers that are equidistant from\
    \ each other. For example, `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])`\
    \ returns `(2.0, 2.0)` instead of `(2.0, 2.2)`.\n<|/ c |>\n<| a tags=julia,arrays\
    \ |>\nI believe that this is what you are looking for:\n<code>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n</cell>\n<text>\nExercise: Write a function that\
    \ will take in a vector of numbers and return a new vector with only the numbers\
    \ that are greater than the mean of the original vector. Test it on the following\
    \ vectors:", "    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest \n           \
    \ smallest = number\n        elseif number > largest\n            largest = number\n\
    \        end\n    end\n    \n    return (smallest, largest)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and ", "    \n   \
    \ smallest_number = numbers[1]\n    largest_number = numbers[end]\n    \n    for\
    \ i in 2:length(numbers)\n        if numbers[i] < smallest_number\n          \
    \  smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take in a vector of numbers and return a new vector\
    \ with only the numbers that are greater than the mean of the original vector.\n\
    The mean of the vector is given by:", "    \n    smallest = numbers[1]\n    largest\
    \ = numbers[1]\n    \n    for i in 2:length(numbers)\n        if numbers[i] <\
    \ smallest \n            smallest = numbers[i]\n        elseif numbers[i] > largest\n\
    \            largest = numbers[i]\n        end\n    end\n    \n    return (smallest,\
    \ largest)\nend\n</cell>\n<text>\nNow let's test our new function with some test\
    \ cases:", "    \n    closest_numbers = numbers[1]\n    closest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < closest_number\n\
    \            closest_number = number\n        elseif number > closest_number\n\
    \            closest_numbers = number\n        end\n    end\n    \n    return\
    \ closest_numbers, closest_number\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes in a vector of numbers and returns the sum of the squares of the\
    \ numbers in that vector. \nThe function should raise an error if the vector is\
    \ empty or has less than two elements.", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[end]\n    smallest_index = 1\n    largest_index\
    \ = end\n    \n    while smallest_index <= largest_index\n        \n        mid_index\
    \ = (smallest_index + largest_index) / 2\n        \n        if numbers[mid_index]\
    \ < smallest_number\n            smallest_number = numbers[mid_index]\n      \
    \      smallest_index = mid_index\n        elseif numbers[mid_index] > largest_number\n\
    \            largest_number = numbers[mid_index]\n            largest_index =\
    \ mid_index\n        else\n            smallest_index = mid_index + 1\n      \
    \      largest_index = mid_index\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ in a list of numbers and returns the sum of the squares of the numbers in the\
    \ list.", "    \n    closest_elements = numbers[1]\n    closest_elements_index\
    \ = 2\n    \n    for index in 2:length(numbers)\n        if numbers[index] < closest_elements\n\
    \            closest_elements = numbers[index]\n            closest_elements_index\
    \ = index\n        end\n    end\n    \n    return closest_elements, closest_elements_index\n\
    end\n</cell>\n<text>\nNow let's test our function", "    smallest = numbers[1]\n\
    \    largest = numbers[1]\n    for i in numbers[2:end]\n        if i < smallest\n\
    \            smallest = i\n        elseif i > largest\n            largest = i\n\
    \        end\n    end\n    return (smallest, largest)\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThis does not work for me. `smallest` and `largest` are always\
    \ `1.0` and `1.0` no matter what input I give it.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works for me. Maybe you have a typo or something else in your code?\n\
    <|/ c |>\n<| c |>\nI see what you're saying now. I was using an older version\
    \ of Julia. Your code works perfectly in 0.4.\n<|/ c |>\n<| a dscore=2 |>\nI wrote\
    \ a package for this:\nhttps://github.com/franziska/ClosestPair\n<code>\nusing\
    \ ClosestPair", "    \n    smallest_number = numbers[1]\n    largest_number =\
    \ numbers[1]\n    \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for i in numbers[2:end]\n\
    \        if i < smallest\n            smallest = i\n        elseif i > largest\n\
    \            largest = i\n        end\n    end\n    return (smallest, largest)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    closest_elements = numbers[1]\n\
    \    closest_elements_2 = numbers[2]\n    \n    if numbers[1] < numbers[2]\n \
    \       closest_elements = numbers[1]\n        closest_elements_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] > numbers[2]\n        closest_elements = numbers[1]\n\
    \        closest_elements_2 = numbers[2]\n    end\n    \n    if numbers[1] ==\
    \ numbers[2]\n        closest_elements = numbers[1]\n        closest_elements_2\
    \ = numbers[1]\n    end\n    \n    if numbers[1] < numbers[2]\n        closest_elements\
    \ = numbers[1]\n        closest_elements_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] > numbers[2]\n        closest_elements = numbers[1]\n        closest_elements_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n        closest_elements\
    \ = numbers[1]\n        closest_elements_2 = numbers[1]\n    end\n    \n    if\
    \ numbers[1] < numbers[2]\n        closest_elements = numbers[1]\n        closest_elements_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n        closest_elements\
    \ = numbers[1]\n        closest_elements_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] == numbers[2]\n        closest_elements = numbers[1]\n        closest_elements_2\
    \ = numbers[1]\n    end\n    \n    if numbers[1] < numbers[2]\n        closest_elements\
    \ = numbers[1]\n        closest_elements_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] > numbers[2]\n        closest_elements = numbers[1]\n        closest_elements_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n        closest_elements\
    \ = numbers[1]\n        closest_elements_2 = numbers[1]\n    end\n    \n    if\
    \ numbers[1] < numbers[2]\n        closest_elements = numbers[1]\n        closest_elements_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n        closest_elements\
    \ = numbers[1]\n        closest_elements_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] == numbers[2]\n        closest_elements = numbers[1]\n        closest_elements_2\
    \ = numbers[1]\n    end\n    \n    if numbers[1] < numbers[2]\n        closest_elements\
    \ = numbers[1]\n        closest_elements_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] > numbers[2]\n        closest_elements = numbers[1]\n        closest_elements_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n        closest_elements\
    \ = numbers[1]\n        closest_elements_2 = numbers[1]\n    end\n    \n    if\
    \ numbers[1] < numbers[2]\n        closest_elements = numbers[1]\n        closest_elements_2\
    \ = numbers[2]\n    end\n    ", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest\
    \ = numbers[1]\n    largest = numbers[1]\n    for i in numbers[2:end]\n      \
    \  if i < smallest \n            smallest = i\n        elseif i > largest\n  \
    \          largest = i\n        end\n    end\n    return smallest, largest\nend\n\
    </cell>\n<code language=julia-1.3>", "    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        else\n            smallest_number\
    \ = numbers[i]\n            largest_number = numbers[i]\n        end\n    end\n\
    \    return (smallest_number, largest_number)\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=julia,arrays |>\nI wrote a function that returns the closest element\
    \ to the given number in O(log(n)) time. \n<code>", "    \n    smallest = numbers[1]\n\
    \    largest = numbers[1]\n    \n    for n in numbers[2:end]\n        if n < smallest\n\
    \            smallest = n\n        elseif n > largest\n            largest = n\n\
    \        end\n    end\n    \n    return (smallest, largest)\nend\n</cell>\n<text>\n\
    Now let's test our new function with some test cases:", "    \n    smallest =\
    \ numbers[1]\n    largest = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest \n            smallest = number\n        elseif\
    \ number > largest\n            largest = number\n        end\n    end\n    \n\
    \    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   smallest = numbers[1]\n    largest = numbers[1]\n    for number in numbers[2:end]\n\
    \        if number < smallest \n            smallest = number\n        elseif\
    \ number > largest\n            largest = number\n        else\n            return\
    \ smallest, largest\n        end\n    end\n    return smallest, largest\nend\n\
    </code>\n<|/ a tags=julia,arrays |>\n<| a tags=julia,arrays |>\nHere's a solution\
    \ using sort!:\n<code>", "    smallest = numbers[1]\n    largest = numbers[1]\n\
    \    for i in 2:length(numbers)\n        if numbers[i] < smallest \n         \
    \   smallest = numbers[i]\n        elseif numbers[i] > largest\n            largest\
    \ = numbers[i]\n        end\n    end\n    return (smallest, largest)\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    \n    for number in numbers[2:end]\n        if number <\
    \ smallest_number\n            smallest_number = number\n        elseif number\
    \ > largest_number\n            largest_number = number\n        end\n    end\n\
    \    \n    return (smallest_number, largest_number)\nend\n</cell>\n<text>\nNow\
    \ let's test our new function with some test cases:", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    return (smallest_number, largest_number)\nend\n</cell>\n\
    <text>\nNow let's test the function by comparing it to our manual implementation:",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n   \
    \         smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>",
  "    minimum = numbers[1]\n    maximum = numbers[1]\n    for number in numbers[2:end]\n\
    \        if number < minimum\n            minimum = number\n        elseif number\
    \ > maximum\n            maximum = number\n        else\n            return minimum,\
    \ maximum\n    end\n    return minimum, maximum\nend\n</cell>\n<text>\nNow let's\
    \ test our new function by comparing it to our old function and seeing how they\
    \ compare.", "    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n\
    \    for n in numbers[2:end]\n        if n < smallest\n            smallest =\
    \ n\n        elseif n > largest\n            largest = n\n        end\n    end\n\
    \    \n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.0>\n\
    find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\n\
    Write a function that takes a vector of numbers and returns the index of the two\
    \ numbers that are closest to each other. \nThe function should return -1 if the\
    \ two numbers are the same.\nThe function should return 0 if the two numbers are\
    \ the same.\nThe function should return 1 if the two numbers are different.\n\
    The function should return 2 if the two numbers are different.\nThe function should\
    \ return 3 if the two numbers are different.\nThe function should return 4 if\
    \ the two numbers are different.\nThe function should return 5 if the two numbers\
    \ are different.\nThe function should return 6 if the two numbers are different.\n\
    The function should return 7 if the two numbers are different.\nThe function should\
    \ return 8 if the two numbers are different.\nThe function should return 9 if\
    \ the two numbers are different.\nThe function should return 10 if the two numbers\
    \ are different.\nThe function should return 11 if the two numbers are different.\n\
    The function should return 12 if the two numbers are different.\nThe function\
    \ should return 13 if the two numbers are different.\nThe function should return\
    \ 14 if the two numbers are different.\nThe function should return 15 if the two\
    \ numbers are different.\nThe function should return 16 if the two numbers are\
    \ different.\nThe function should return 17 if the two numbers are different.\n\
    The function should return 18 if the two numbers are different.\nThe function\
    \ should return 19 if the two numbers are different.\nThe function should return\
    \ 20 if the two numbers are different.\nThe function should return 21 if the two\
    \ numbers are different.\nThe function should return 22 if the two numbers are\
    \ different.\nThe function should return 23 if the two numbers are different.\n\
    The function should return 24 if the two numbers are different.\nThe function\
    \ should return 25 if the two numbers are different.\nThe function should return\
    \ 26 if the two numbers are different.\nThe function should return 27 if the two\
    \ numbers are different.\nThe function should return 28 if the two numbers are\
    \ different.\nThe function should return 29 if the two numbers are different.\n\
    The function should return 30 if the two numbers are different.\nThe function\
    \ should return 31 if the two numbers are different.\nThe function should return\
    \ 32 if the ", "    \n    smallest = numbers[1]\n    largest = numbers[1]\n  \
    \  \n    for n in numbers[2:end]\n        if n < smallest\n            smallest\
    \ = n\n        elseif n > largest\n            largest = n\n        end\n    end\n\
    \    \n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.3>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. Test it by passing it a vector of numbers and printing the result.",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n   \
    \         smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that will take in a vector of numbers and return a new vector that\
    \ is the same size as the original but with each element being the square of the\
    \ original number. For example, if the input vector is [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 6.0] the output vector should be [1.0, 4.0, 9.0, 16.0, 25.0, 36.0, 49.0]", " \
    \   \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n    for number\
    \ in numbers[2:end]\n        if number < smallest \n            smallest = number\n\
    \        elseif number > largest\n            largest = number\n        end\n\
    \    end\n    \n    return (smallest, largest)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take in a vector of numbers and return a new vector\
    \ with only the numbers that are greater than the mean of the original vector.\
    \ \nFor example, if the input vector is [1.0, 2.0, 3.0, 4.0, 5.0, 2.0] the output\
    \ vector should be [2.0, 3.0].", "    minimum = numbers[1]\n    maximum = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < minimum\n            minimum\
    \ = number\n        elseif number > maximum\n            maximum = number\n  \
    \      else\n            return minimum, maximum\n    end\n    return minimum,\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    smallest_index = 2\n  \
    \  largest_index = end\n    \n    for index in 2:end\n        if numbers[index]\
    \ < smallest_number\n            smallest_number = numbers[index]\n          \
    \  smallest_index = index\n        elseif numbers[index] > largest_number\n  \
    \          largest_number = numbers[index]\n            largest_index = index\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nNow let's test our function by comparing it to our expectation",
  "    \n    closest_number = numbers[1]\n    closest_number = numbers[1]\n    for\
    \ i in 2:length(numbers)\n        if numbers[i] < closest_number\n           \
    \ closest_number = numbers[i]\n        end\n    end\n    return (closest_number,\
    \ numbers[2])\nend\n</cell>\n<code language=julia-1.0>", "    \n    minimum =\
    \ numbers[1]\n    maximum = numbers[1]\n    for i in 2:length(numbers)\n     \
    \   if numbers[i] < minimum\n            minimum = numbers[i]\n        elseif\
    \ numbers[i] > maximum\n            maximum = numbers[i]\n        else\n     \
    \       minimum = minimum\n            maximum = maximum\n        end\n    end\n\
    \    return (minimum, maximum)\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest_number\n            smallest_number\
    \ = number\n        elseif number > largest_number\n            largest_number\
    \ = number\n        end\n    end\n    return (smallest_number, largest_number)\n\
    end\n</cell>\n<text>\nNow let's test our function by comparing it to our known\
    \ answers:", "    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n   \
    \         smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        else\n            smallest_number\
    \ = numbers[i]\n            largest_number = numbers[i]\n        end\n    end\n\
    \    return (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.0>",
  "    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for i in 2:length(numbers)\n\
    \        if numbers[i] < smallest \n            smallest = numbers[i]\n      \
    \  elseif numbers[i] > largest\n            largest = numbers[i]\n        end\n\
    \    end\n    return smallest, largest\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that will return the square root of a number. \nThe function should\
    \ take a single number as an argument and return the square root of that number.\n\
    The function should raise an error if the input is not a number.\nThe function\
    \ should raise an error if the input is a negative number.\nThe function should\
    \ raise an error if the input is a number that is less than 0.", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest = numbers[1]\n    largest\
    \ = numbers[1]\n    for i in 2:length(numbers)\n        if numbers[i] < smallest\n\
    \            smallest = numbers[i]\n        elseif numbers[i] > largest\n    \
    \        largest = numbers[i]\n        else\n            smallest = numbers[i]\n\
    \            largest = numbers[i]\n        end\n    end\n    return smallest,\
    \ largest\nend\n</cell>\n<text>\nNow let's test the function by comparing it to\
    \ our previous implementation", "    \n    smallest = numbers[1]\n    largest\
    \ = numbers[1]\n    for i in 2:length(numbers)\n        if numbers[i] < smallest\
    \ \n            smallest = numbers[i]\n        elseif numbers[i] > largest\n \
    \           largest = numbers[i]\n        end\n    end\n    return (smallest,\
    \ largest)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum", "    \n    closest_elements = Vector{Float64}(undef,\
    \ 2)\n    \n    closest_elements[1] = numbers[1]\n    closest_elements[2] = numbers[2]\n\
    \    \n    smallest_distance = Float64(0)\n    \n    for number in numbers[2:end]\n\
    \        \n        distance = abs(number - closest_elements[1])\n        \n  \
    \      if distance < smallest_distance\n            smallest_distance = distance\n\
    \            closest_elements[1] = number\n        end\n        \n        distance\
    \ = abs(number - closest_elements[2])\n        \n        if distance < smallest_distance\n\
    \            smallest_distance = distance\n            closest_elements[2] = number\n\
    \        end\n    end\n    \n    return closest_elements\nend", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nThe function above is called find_closest_elements and it takes\
    \ a vector of numbers as an argument. The function returns two numbers that are\
    \ the closest to each other and in order (smaller number, larger number).", " \
    \   \n    smallest = numbers[1]\n    largest = numbers[1]\n    for i in 2:length(numbers)\n\
    \        if numbers[i] < smallest \n            smallest = numbers[i]\n      \
    \  elseif numbers[i] > largest\n            largest = numbers[i]\n        end\n\
    \    end\n    return (smallest, largest)\nend\n</cell>\n<text>\nNow let's test\
    \ our new function with some test cases:", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nNow let's test our new function with some test cases:", "   \
    \ \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest_number\n            smallest_number\
    \ = number\n        elseif number > largest_number\n            largest_number\
    \ = number\n        end\n    end\n    return smallest_number, largest_number\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers in the list.\nFor example,\
    \ the list [1,2,3] should return 9.\nHint: use the sum function.", "    \n   \
    \ smallest = numbers[1]\n    largest = numbers[1]\n    for number in numbers[2:end]\n\
    \        if number < smallest \n            smallest = number\n        elseif\
    \ number > largest\n            largest = number\n        end\n    end\n    return\
    \ smallest, largest\nend\n</cell>\n<text>\nNow let's test the function by finding\
    \ the closest elements to each of the numbers in the list we created earlier:",
  "    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for i in 2:length(numbers)\n\
    \        if numbers[i] < smallest then\n            smallest = numbers[i]\n  \
    \      elseif numbers[i] > largest then\n            largest = numbers[i]\n  \
    \      end\n    end\n    return (smallest, largest)\nend\n</cell>\n<text>\nNow\
    \ let's test our function by comparing it to our known answers:", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nFor example, if the input vector is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2] the function\
    \ should return 25.0", "    minimum = numbers[1]\n    maximum = numbers[1]\n \
    \   for i in numbers[2:end]\n        if i < minimum\n            minimum = i\n\
    \        elseif i > maximum\n            maximum = i\n        else\n         \
    \   return minimum, maximum\n    end\n    return minimum, maximum\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work if there are two numbers that are equidistant\
    \ from each other. For example, `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])` returns `(2.0, 2.0)` instead of `(2.0, 2.2)`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I've updated the answer to fix the problem.\n<|/ c |>\n\
    <| a tags=julia |>\nHere's a solution using sort!:\n<code>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in that vector. \nThe function\
    \ should raise an error if the vector is empty.\nThe function should raise an\
    \ error if the vector has less than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than two numbers.\nThe function should raise an\
    \ error if the vector has more than ", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nNow let's test our new function by finding the closest element\
    \ to each of the numbers in the previous example.", "    \n    smallest = numbers[1]\n\
    \    largest = numbers[1]\n    \n    for number in numbers[2:end]\n        if\
    \ number < smallest \n            smallest = number\n        elseif number > largest\n\
    \            largest = number\n        end\n    end\n    \n    return (smallest,\
    \ largest)\nend\n</cell>\n<text>\nNow let's test the function by comparing it\
    \ to our previous results.", "    \n    smallest_distance = Float64(0.0)\n   \
    \ largest_distance = Float64(0.0)\n    \n    for number in numbers\n        if\
    \ number < smallest_distance\n            smallest_distance = number\n       \
    \ elseif number > largest_distance\n            largest_distance = number\n  \
    \      end\n    end\n    \n    return (smallest_distance, largest_distance)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nThe function above takes in a list of numbers and returns the\
    \ two numbers that are closest to each other. Let's see how it works:", "    smallest\
    \ = numbers[1]\n    largest = numbers[1]\n    for i in 2:length(numbers)\n   \
    \     if numbers[i] < smallest\n            smallest = numbers[i]\n        elseif\
    \ numbers[i] > largest\n            largest = numbers[i]\n        else\n     \
    \       smallest = numbers[i]\n            largest = numbers[i]\n        end\n\
    \    end\n    return (smallest, largest)\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a dscore=0 |>\n<code>", "    \n    smallest_distance = Float64(0.0)\n\
    \    largest_distance = Float64(0.0)\n    \n    for number in numbers\n      \
    \  if number < smallest_distance\n            smallest_distance = number\n   \
    \     elseif number > largest_distance\n            largest_distance = number\n\
    \        end\n    end\n    \n    return (smallest_distance, largest_distance)\n\
    end\n</cell>\n<text>\nNow let's test our function by running it on a few examples:",
  "    \n    smallest_distance = Float64(0.0)\n    largest_distance = Float64(0.0)\n\
    \    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n   \
    \ for number in numbers[2:end]\n        \n        distance = abs(number - smallest_number)\n\
    \        if distance < smallest_distance\n            smallest_distance = distance\n\
    \            smallest_number = number\n        end\n        \n        distance\
    \ = abs(number - largest_number)\n        if distance > largest_distance\n   \
    \         largest_distance = distance\n            largest_number = number\n \
    \       end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    closest_elements = numbers[1]\n\
    \    closest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < closest_number\n            closest_number = number\n      \
    \      closest_elements = number\n        elseif number > closest_number\n   \
    \         closest_number = number\n            closest_elements = number\n   \
    \     end\n    end\n    \n    return (closest_elements, closest_number)\nend\n\
    </cell>\n<code language=julia-1.4>\nfind_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2])\n</cell>\n<code language=julia-1.4>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of ", "    smallest_diff\
    \ = Float64(0.0)\n    smallest_number = numbers[1]\n    largest_diff = Float64(0.0)\n\
    \    largest_number = numbers[1]\n    for number in numbers[2:end]\n        diff\
    \ = abs(number - smallest_number)\n        if diff < smallest_diff\n         \
    \   smallest_diff = diff\n            smallest_number = number\n        end\n\
    \        diff = abs(number - largest_number)\n        if diff > largest_diff\n\
    \            largest_diff = diff\n            largest_number = number\n      \
    \  end\n    end\n    return (smallest_number, largest_number)\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    smallest = numbers[1]\n    largest = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest \n           \
    \ smallest = number\n        elseif number > largest\n            largest = number\n\
    \        end\n    end\n    return smallest, largest\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes in a list of numbers and returns the two numbers\
    \ that are closest to each other. \nThe function should return them in order (smaller\
    \ number, larger number).", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test the function by comparing\
    \ it to our original function and see how it compares.", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nNow let's test our new function with some test cases:", "   \
    \ \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    \n    for i in 2:length(numbers)\n\
    \        if numbers[i] < smallest_number\n            smallest_number = numbers[i]\n\
    \        elseif numbers[i] > largest_number\n            largest_number = numbers[i]\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nThe function above is called find_closest_elements and is defined\
    \ in the file find_closest_elements.jl.", "    \n    smallest = numbers[1]\n \
    \   largest = numbers[1]\n    for i in 2:length(numbers)\n        if numbers[i]\
    \ < smallest \n            smallest = numbers[i]\n        elseif numbers[i] >\
    \ largest\n            largest = numbers[i]\n        end\n    end\n    return\
    \ smallest, largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ in a vector of numbers and returns the sum of the squares of the numbers in\
    \ that vector. \nThe function should raise an error if the vector is empty or\
    \ if the vector contains more than one element.", "    smallest = numbers[1]\n\
    \    largest = numbers[1]\n    for i in 2:length(numbers)\n        if numbers[i]\
    \ < smallest \n            smallest = numbers[i]\n        elseif numbers[i] >\
    \ largest\n            largest = numbers[i]\n        else\n            smallest\
    \ = numbers[i]\n            largest = numbers[i]\n        end\n    end\n    return\
    \ smallest, largest\nend\n</code>\n<|/ a dscore=1 |>\n<| a |>\nI wrote a function\
    \ that does this in Julia. \n<code>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    closest_numbers = numbers[1]\n\
    \    closest_numbers_2 = numbers[2]\n    \n    if numbers[1] < numbers[2]\n  \
    \      closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    ", "    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n   \
    \         smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        else\n            smallest_number\
    \ = numbers[i]\n            largest_number = numbers[i]\n        end\n    end\n\
    \    return (smallest_number, largest_number)\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work if there are two numbers that are equally close, e.g.\
    \ `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])` returns `(2.0, 2.0)`\
    \ instead of `(2.0, 2.2)`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I\
    \ fixed the code so that it now works.\n<|/ c |>\n<| a dscore=1 |>\nI wrote a\
    \ function that does this in Julia 1.0 and 1.1. I believe it works in both Julia\
    \ 0.6.2 and 0.6.3. \n<code>", "    \n    smallest_distance = Float64(0)\n    largest_distance\
    \ = Float64(0)\n    smallest_number = Float64(0)\n    largest_number = Float64(0)\n\
    \    \n    for number in numbers\n        if number < smallest_number\n      \
    \      smallest_number = number\n        elseif number > largest_number\n    \
    \        largest_number = number\n        elseif number < smallest_distance\n\
    \            smallest_distance = number\n        elseif number > largest_distance\n\
    \            largest_distance = number\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that takes a vector of numbers and returns the sum of the squares of\
    \ the numbers in the vector. Test it on a few examples. What happens if you call\
    \ it on a vector of length zero? What happens if you call it on a vector of length\
    \ one? What happens if you call it on a vector of length two?", "    \n    closest_number\
    \ = numbers[1]\n    closest_element = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < closest_number\n            closest_number = number\n   \
    \         closest_element = number\n        elseif number > closest_number\n \
    \           closest_number = number\n            closest_element = number\n  \
    \      end\n    end\n    \n    return (closest_number, closest_element)\nend\n\
    </cell>\n<code language=julia-1.3>", "    smallest = numbers[1]\n    largest =\
    \ numbers[1]\n    for i in numbers[2:end]\n        if i < smallest \n        \
    \    smallest = i\n        elseif i > largest\n            largest = i\n     \
    \   end\n    end\n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nThe function above is called find_closest_elements\
    \ and takes in an array of numbers (of length at least two) and returns two numbers\
    \ that are closest to each other and in order (smaller number, larger number).",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in the vector, ignoring any non-numeric values.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector, ignoring any non-numeric values, where the vector\
    \ is sorted in ascending order.\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector, ignoring any\
    \ non-numeric values, where the vector is sorted in descending order.\nWrite a\
    \ function that takes a vector of numbers and returns the sum of the squares of\
    \ the numbers in the vector, ignoring any non-numeric values, where the vector\
    \ is sorted in ascending order and all negative numbers are removed.\nWrite a\
    \ function that takes a vector of numbers and returns the sum of the squares of\
    \ the numbers in the vector, ignoring any non-numeric values, where the vector\
    \ is sorted in descending order and all negative numbers are removed.", "    \n\
    \    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    smallest_index\
    \ = 2\n    largest_index = 2\n    for index in 2:length(numbers)\n        if numbers[index]\
    \ < smallest_number\n            smallest_number = numbers[index]\n          \
    \  smallest_index = index\n        elseif numbers[index] > largest_number\n  \
    \          largest_number = numbers[index]\n            largest_index = index\n\
    \        end\n    end\n    return (smallest_number, largest_number)\nend\n</cell>\n\
    <text>\nNow let's test our new function with some test cases:", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[0]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nNow let's test our function by calling it with the numbers we\
    \ created earlier", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    \n    minimum\
    \ = numbers[1]\n    maximum = numbers[1]\n    for i in numbers[2:end]\n      \
    \  if i < minimum\n            minimum = i\n        elseif i > maximum\n     \
    \       maximum = i\n        end\n    end\n    return minimum, maximum\nend\n\
    </cell>\n<text>\nNow let's test the function by comparing it to our previous implementation:",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest_number\n            smallest_number\
    \ = number\n        elseif number > largest_number\n            largest_number\
    \ = number\n        end\n    end\n    return (smallest_number, largest_number)\n\
    end\n</cell>\n<code language=julia-1.0>", "    smallest = numbers[1]\n    largest\
    \ = numbers[1]\n    for i in 2:length(numbers)\n        if numbers[i] < smallest\n\
    \            smallest = numbers[i]\n        elseif numbers[i] > largest\n    \
    \        largest = numbers[i]\n        end\n    end\n    return (smallest, largest)\n\
    end\n</code>\n<|/ a tags=julia |>\n<| c |>\nThank you for sharing your solution!\
    \ I like how you used `findfirst` instead of `findlast`. I also like how you used\
    \ `sort!` instead of `sort`.\n<|/ c |>\n<| c |>\nI used `sort!` because I wanted\
    \ to preserve the original order. `sort` would not preserve the original order.\
    \ `sort!` would preserve the original order. `sort!` would preserve the original\
    \ order. `sort!` would preserve the original order. `sort!` would preserve the\
    \ original order. `sort!` would preserve the original order. `sort!` would preserve\
    \ the original order. `sort!` would preserve the original order. `sort!` would\
    \ preserve the original order. `sort!` would preserve the original order. `sort!`\
    \ would preserve the original order. `sort!` would preserve the original order.\
    \ `sort!` would preserve the original order. `sort!` would preserve the original\
    \ order. `sort!` would preserve the original order. `sort!` would preserve the\
    \ original order. `sort!` would preserve the original order. `sort!` would preserve\
    \ the original order. `sort!` would preserve the original order. `sort!` would\
    \ preserve the original order. `sort!` would preserve the original order. `sort!`\
    \ would preserve the original order. `sort!` would preserve the original order.\
    \ `sort!` would preserve the original order. `sort!` would preserve the original\
    \ order. `sort!` would preserve the original order. `sort!` would preserve the\
    \ original order. `sort!` would preserve the original order. `sort!` would preserve\
    \ the original order. `sort!` would preserve the original order. `sort!` would\
    \ preserve the original order. `sort!` would preserve the original order. `sort!`\
    \ would preserve the original order. `sort!` would preserve the original order.\
    \ `sort!` would preserve the original order. `sort!` would preserve the original\
    \ order. `sort!` would preserve the original order. `sort!` would preserve ",
  "    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n    for number\
    \ in numbers[2:end]\n        if number < smallest \n            smallest = number\n\
    \        elseif number > largest\n            largest = number\n        end\n\
    \    end\n    \n    return (smallest, largest)\nend\n</cell>\n<text>\nNow let's\
    \ test our function by comparing it to our original vector:", "    \n    smallest_distance\
    \ = Float64(0)\n    largest_distance = Float64(0)\n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     distance = abs(number - smallest_number)\n        if distance < smallest_distance\n\
    \            smallest_distance = distance\n            smallest_number = number\n\
    \        end\n        \n        distance = abs(number - largest_number)\n    \
    \    if distance > largest_distance\n            largest_distance = distance\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function by comparing\
    \ it to our old function.", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function by comparing\
    \ it to our old function and see how they compare:", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2])\n</cell>\n<text>\nExercise\nWrite a function that takes a vector\
    \ of numbers and returns the index of the two numbers that are closest to each\
    \ other. \nThe function should return two numbers in the order that they are closest\
    \ to each other (smaller number, larger number).\nThe function should return nothing\
    \ if the vector is empty.\nThe function should return nothing if the vector has\
    \ less than two elements.\nThe function should return nothing if the vector has\
    \ two or more elements.", "    minimum = numbers[1]\n    maximum = numbers[1]\n\
    \    for i in numbers[2:end]\n        if i < minimum\n            minimum = i\n\
    \        elseif i > maximum\n            maximum = i\n        else\n         \
    \   break\n    end\n    return (minimum, maximum)\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| c |>\nThanks for your answer. Your code works but it is slower than the\
    \ other solutions posted here. I think it is because of the `if` statements. I\
    \ tested it on a vector of length 10000 and it took about 10 seconds. I tested\
    \ it on a vector of length 100000 and it took about 2 minutes. I tested it on\
    \ a vector of length 1000000 and it took about 1 minute. I am not sure why it\
    \ is so slow but I think it is because of the `if` statements. Do you know why\
    \ it is so slow?\n<|/ c |>\n<| c |>\nI tested it on a vector of length 1000000\
    \ and it took about 1 minute. I am not sure why it is so slow but I think it is\
    \ because of the `if` statements. Do you know why it is so slow?\n<|/ c |>\n<|\
    \ c |>\nI tested it on a vector of length 1000000 and it took about 1 minute.\
    \ I am not sure why it is so slow but I think it is because of the `if` statements.\
    \ Do you know why it is so slow?\n<|/ c |>\n<| c |>\nI tested it on a vector of\
    \ length 1000000 and it took about 1 minute. I am not sure why it is so slow but\
    \ I think it is because of the `if` statements. Do you know why it is so slow?\n\
    <|/ c |>\n<| c |>\nI tested it on a vector of length 1000000 and it took about\
    \ 1 minute. I am not sure why it is so slow but I think it is because of the `if`\
    \ statements. Do you know why it is so slow?\n<|/ c |>\n<| a tags=julia,arrays\
    \ |>\n<code>", "    minimum = numbers[1]\n    maximum = numbers[1]\n    for number\
    \ in numbers[2:end]\n        if number < minimum\n            minimum = number\n\
    \        elseif number > maximum\n            maximum = number\n        else\n\
    \            return minimum, maximum\n    end\n    return minimum, maximum\nend\n\
    </cell>\n<text>\nNow let's test our function", "    smallest = numbers[1]\n  \
    \  largest = numbers[1]\n    for i in numbers[2:end]\n        if i < smallest\n\
    \            smallest = i\n        elseif i > largest\n            largest = i\n\
    \        end\n    end\n    return smallest, largest\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in that vector. Test it by passing it a vector of numbers from\
    \ 1 to 10. Test it by passing it a vector of numbers from 1 to 100. Test it by\
    \ passing it a vector of numbers from 1 to 1,000. Test it by passing it a vector\
    \ of numbers from 1 to 10,000. Test it by passing it a vector of numbers from\
    \ 1 to 100,000. Test it by passing it a vector of numbers from 1 to 1,000,000.\
    \ Test it by passing it a vector of numbers from 1 to 10,000,000. Test it by passing\
    \ it a vector of numbers from 1 to 100,000,000. Test it by passing it a vector\
    \ of numbers from 1 to 1,000,000,000. Test it by passing it a vector of numbers\
    \ from 1 to 10,000,000,000. Test it by passing it a vector of numbers from 1 to\
    \ 100,000,000,000. Test it by passing it a vector of numbers from 1 to 1,000,000,000,000.\
    \ Test it by passing it a vector of numbers from 1 to 10,000,000,000,000. Test\
    \ it by passing it a vector of numbers from 1 to 100,000,000,000,000. Test it\
    \ by passing it a vector of numbers from 1 to 1,000,000,000,000,000. Test it by\
    \ passing it a vector of numbers from 1 to 10,000,000,000,000,000. Test it by\
    \ passing it a vector of numbers from 1 to 100,000,000,000,000,000. Test it by\
    \ passing it a vector of numbers from 1 to 1,000,000,000,000,000,000. Test it\
    \ by passing it a vector of numbers from 1 to 10,000,000,000,000,000,000. Test\
    \ it by passing it a vector of numbers from 1 to 100,000,000,000,000,000,000.\
    \ Test it by passing it a vector of numbers from 1 to 1,000,000,000,000,000,000,000.\
    \ Test it by passing it a vector of numbers from 1 to 10,000,000,000,000,000,000,000.\
    \ Test it by passing it a vector of numbers from 1 to 100,000,000,000,000,000,000,000.\
    \ Test it by passing it a vector of numbers from 1 to 1,000,000,000,000,000,000,000,000.\
    \ Test it by passing it a vector of numbers from 1 to 10,000,000,000,000,000,000,000,000,000.\
    \ Test it by passing it a vector of numbers from 1 to 100,000,000,000,000,000,000,000,000,000,000.\
    \ Test it by passing it a vector of numbers from 1 to ", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2])\n</cell>\n<text>\nExercise\nWrite a function that takes in a list\
    \ of numbers and returns the two numbers that are closest to each other. Test\
    \ it by calling it on a few different lists.", "    minimum = numbers[1]\n   \
    \ maximum = numbers[1]\n    for number in numbers[2:end]\n        if number <\
    \ minimum\n            minimum = number\n        elseif number > maximum\n   \
    \         maximum = number\n        else\n            return minimum, maximum\n\
    \    end\n    return minimum, maximum\nend\n</code>\n<|/ a tags=julia,arrays |>\n\
    <| a |>\nThe answer by is correct, but I wanted to add an alternative solution\
    \ that is more efficient and does not require the use of any packages.\n<code>",
  "    \n    closest_number = numbers[1]\n    closest_index = 2\n    \n    for index\
    \ in 2:length(numbers)\n        if numbers[index] < closest_number\n         \
    \   closest_number = numbers[index]\n            closest_index = index\n     \
    \   end\n    end\n    \n    return (closest_number, numbers[closest_index])\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2])\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the squares of the numbers in a vector\n    given as a parameter.\n    \n\
    \    >>> sum_square_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    25.0\n    \n\
    \    \"\"\"", "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by comparing\
    \ it to our expectations.", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    smallest = numbers[1]\n\
    \    largest = numbers[1]\n    for number in numbers[2:end]\n        if number\
    \ < smallest\n            smallest = number\n        elseif number > largest\n\
    \            largest = number\n        else\n            return smallest, largest\n\
    \        end\n    end\n    return smallest, largest\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThis doesn't work if there are two numbers that are equally close.\
    \ For example, `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])` returns\
    \ `(2.0, 2.0)` instead of `(2.0, 2.2)`.\n<|/ c |>\n<| c |>\nYes, I noticed that\
    \ and fixed it now. Thanks.\n<|/ c |>\n<| a tags=julia |>\n<code>", "    \n  \
    \  smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n    for\
    \ number in numbers[2:end]\n        if number < smallest_number\n            smallest_number\
    \ = number\n        elseif number > largest_number\n            largest_number\
    \ = number\n        end\n    end\n    \n    return (smallest_number, largest_number)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    closest_elements = numbers[1]\n\
    \    closest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < closest_number\n            closest_number = number\n      \
    \      closest_elements = number\n        elseif number > closest_number\n   \
    \         closest_number = number\n            closest_elements = number\n   \
    \     end\n    end\n    \n    return closest_elements, closest_number\nend\n</cell>\n\
    <code language=julia-1.5>", "    smallest = numbers[1]\n    largest = numbers[1]\n\
    \    for i in 2:length(numbers)\n        if numbers[i] < smallest \n         \
    \   smallest = numbers[i]\n        elseif numbers[i] > largest\n            largest\
    \ = numbers[i]\n        else\n            return numbers[i], numbers[i]\n    \
    \    end\n    end\n    return smallest, largest\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\nI came up with a simple solution that is similar to what was proposed\
    \ in the comments. I used the sort function and sorted the vector in descending\
    \ order and selected the first two elements. \n<code>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nNow let's test the function by comparing it to the built-in function\
    \ min.", "    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    \n    closest_elements\
    \ = numbers[1]\n    closest_distance = numbers[1]\n    for element in numbers[2:end]\n\
    \        distance = abs(element - closest_elements)\n        if distance < closest_distance\n\
    \            closest_elements = element\n            closest_distance = distance\n\
    \        end\n    end\n    return closest_elements, closest_distance\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    closest_elements = numbers[1]\n    closest_number\
    \ = numbers[1]\n    \n    for element in numbers[2:end]\n        if element <\
    \ closest_number\n            closest_number = element\n            closest_elements\
    \ = element\n        elseif element > closest_number\n            closest_number\
    \ = element\n            closest_elements = element\n        end\n    end\n  \
    \  \n    return (closest_elements, closest_number)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    closest_numbers = Vector{Float64}(undef, 0)\n    closest_numbers_distance\
    \ = Float64(0)\n    \n    for number in numbers\n        \n        if closest_numbers_distance\
    \ == 0\n            closest_numbers_distance = number\n            closest_numbers\
    \ = [number]\n        elseif closest_numbers_distance > number\n            closest_numbers_distance\
    \ = number\n            closest_numbers = [number]\n        else\n           \
    \ closest_numbers_distance = closest_numbers_distance + number\n            closest_numbers\
    \ = closest_numbers + [number]\n        end\n    end\n    \n    return closest_numbers[1],\
    \ closest_numbers[2]\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers in the list.\n>>> square_of_numbers([1,\
    \ 2, 3, 4])\n25\n>>> square_of_numbers([1, 2, 3, 5])\n25\n>>> square_of_numbers([1,\
    \ 2, 3, 5])\n25\n>>> square_of_numbers([1, 2, 3, 5])\n25\n>>> square_of_numbers([1,\
    \ 2, 3, 5])\n25\n>>> square_of_numbers([1, 2, 3, 5])\n25\n>>> square_of_numbers([1,\
    \ 2, 3, 5])\n25\n>>> square_of_numbers([1, 2, 3, 5])\n25\n>>> square_of_numbers([1,\
    \ 2, 3, 5])\n25\n>>> square_of_numbers([1, 2, 3, 5])\n25\n>>> square_of_numbers([1,\
    \ 2, 3, 5])\n25\n>>> square_of_numbers([1, 2, 3, 5])\n25\n>>> square_of_numbers([1,\
    \ 2, 3, 5])\n25\n>>> square_of_numbers([1, 2, 3, 5])\n25\n>>> square_of_numbers([1,\
    \ 2, 3, 5])\n25\n>>> square_of_numbers([1, 2, 3, 5])\n25\n>>> square_of_numbers([1,\
    \ 2, 3, 5])\n25\n>>> square_of_numbers([1, 2, 3, 5])\n25\n>>> square_of_numbers([1,\
    \ 2, 3, 5])\n25\n>>> square_of_numbers([1, 2, 3, 5])\n25\n>>> square_of_numbers([1,\
    \ 2, 3, 5])\n25\n>>> square_of_numbers([1, 2, 3, 5])\n25\n>>> square_of_numbers([1,\
    \ 2, 3, 5])\n25\n>>> square_of_numbers([1, 2, 3, 5])\n25\n>>> square_of_numbers([1,\
    \ 2, 3, 5])\n25\n>>> square_of_numbers([1, 2, 3, 5])\n25\n>>> square_of_numbers([1,\
    \ 2, 3, 5])\n25\n>>> square_of_numbers([1, 2, 3, 5])\n25\n>>> square_of_numbers([1,\
    \ 2, 3, 5])\n25\n>>> square_of_numbers([1, 2, 3, 5])\n25\n>>> square_of_numbers([1,\
    \ 2, 3, 5])\n25\n>>> square_of_numbers([1, 2, 3, 5])\n25\n>>> square_of_numbers([1,\
    \ 2, 3, 5])\n25\n>>> square_of_numbers([1, 2, 3, 5])\n25\n>>> square_of_numbers([1,\
    \ 2, 3, ", "    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest\n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    return smallest, largest\nend\n</cell>\n<text>\nNow let's\
    \ test our new function with some test cases:", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    smallest_index = 2\n    largest_index =\
    \ 2\n    for index in 2:length(numbers)\n        if numbers[index] < smallest_number\n\
    \            smallest_number = numbers[index]\n            smallest_index = index\n\
    \        elseif numbers[index] > largest_number\n            largest_number =\
    \ numbers[index]\n            largest_index = index\n        end\n    end\n  \
    \  return (smallest_number, largest_number)\nend\n</cell>\n<text>\nNow let's test\
    \ our new function by comparing it to our old find_closest_elements function.",
  "    minimum = numbers[1]\n    maximum = numbers[1]\n    for number in numbers[2:end]\n\
    \        if number < minimum\n            minimum = number\n        elseif number\
    \ > maximum\n            maximum = number\n        else\n            return minimum,\
    \ maximum\n    end\n    return minimum, maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by running\
    \ it on a few examples:", "    \n    closest_elements = Vector{Float64}(undef,\
    \ 0)\n    closest_elements[1] = numbers[1]\n    closest_elements[2] = numbers[2]\n\
    \    \n    for element in numbers[2:end]\n        if element < closest_elements[1]\n\
    \            closest_elements[1] = element\n        elseif element > closest_elements[2]\n\
    \            closest_elements[2] = element\n        end\n    end\n    \n    return\
    \ closest_elements\nend\n</cell>\n<text>\nNow let's test our new function with\
    \ some test cases:", "    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n   \
    \         smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function by comparing\
    \ it to our old function and see how they compare!", "    minimum = minimum(numbers)\n\
    \    maximum = maximum(numbers)\n    \n    if minimum == maximum\n        return\
    \ (minimum, minimum)\n    end\n    \n    minimum = minimum - maximum\n    maximum\
    \ = maximum - minimum\n    \n    if minimum == maximum\n        return (minimum,\
    \ minimum)\n    end\n    \n    minimum = minimum + maximum\n    maximum = maximum\
    \ + minimum\n    \n    if minimum == maximum\n        return (minimum, minimum)\n\
    \    end\n    \n    minimum = minimum - maximum\n    maximum = maximum - minimum\n\
    \    \n    if minimum == maximum\n        return (minimum, minimum)\n    end\n\
    \    \n    minimum = minimum + maximum\n    maximum = maximum + minimum\n    \n\
    \    if minimum == maximum\n        return (minimum, minimum)\n    end\n    \n\
    \    minimum = minimum - maximum\n    maximum = maximum - minimum\n    \n    if\
    \ minimum == maximum\n        return (minimum, minimum)\n    end\n    \n    minimum\
    \ = minimum + maximum\n    maximum = maximum + minimum\n    \n    if minimum ==\
    \ maximum\n        return (minimum, minimum)\n    end\n    \n    minimum = minimum\
    \ - maximum\n    maximum = maximum - minimum\n    \n    if minimum == maximum\n\
    \        return (minimum, minimum)\n    end\n    \n    minimum = minimum + maximum\n\
    \    maximum = maximum + minimum\n    \n    if minimum == maximum\n        return\
    \ (minimum, minimum)\n    end\n    \n    minimum = minimum - maximum\n    maximum\
    \ = maximum - minimum\n    \n    if minimum == maximum\n        return (minimum,\
    \ minimum)\n    end\n    \n    minimum = minimum + maximum\n    maximum = maximum\
    \ + minimum\n    \n    if minimum == maximum\n        return (minimum, minimum)\n\
    \    end\n    \n    minimum = minimum - maximum\n    maximum = maximum - minimum\n\
    \    \n    if minimum == maximum\n        return (minimum, minimum)\n    end\n\
    \    \n    minimum = minimum + maximum\n    maximum = maximum + minimum\n    \n\
    \    if minimum == maximum\n        return (minimum, minimum)\n    end\n    \n\
    \    minimum = minimum - maximum\n    maximum = maximum - minimum\n    \n    if\
    \ minimum == maximum\n        return (minimum, minimum)\n    end\n    \n    minimum\
    \ = minimum + maximum\n    maximum = maximum + minimum\n    \n    if minimum ==\
    \ maximum\n        return (minimum, minimum)\n    end\n    \n    minimum = minimum\
    \ - maximum\n    maximum = maximum - minimum\n    \n    if minimum == maximum\n\
    \        return (minimum, minimum)\n    end\n    \n    minimum = minimum + maximum\n\
    \    maximum = maximum + minimum\n    ", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    for number in numbers[2:end]\n        if\
    \ number < smallest_number\n            smallest_number = number\n        elseif\
    \ number > largest_number\n            largest_number = number\n        end\n\
    \    end\n    return (smallest_number, largest_number)\nend\n</cell>\n<text>\n\
    Now let's test our function by comparing it to our original vector:", "    \n\
    \    smallest = numbers[1]\n    largest = numbers[1]\n    for i in 2:length(numbers)\n\
    \        if numbers[i] < smallest\n            smallest = numbers[i]\n       \
    \ elseif numbers[i] > largest\n            largest = numbers[i]\n        else\n\
    \            smallest = numbers[i]\n            largest = numbers[i]\n       \
    \ end\n    end\n    return smallest, largest\nend\n</cell>\n<text>\nNow let's\
    \ test our new function with some test cases:", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n \
    \       if number < smallest_number\n            smallest_number = number\n  \
    \      elseif number > largest_number\n            largest_number = number\n \
    \       end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a vector of numbers\
    \ and returns the sum of the squares of the numbers in that vector. \nFor example:\
    \ \n>>> square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]))\n25.0\n>>>\
    \ square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]))\n\
    25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]))\n25.0\n\
    >>> square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]))\n\
    25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]))\n25.0\n\
    >>> square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]))", "    \n    smallest\
    \ = numbers[1]\n    largest = numbers[1]\n    for n in numbers[2:end]\n      \
    \  if n < smallest\n            smallest = n\n        elseif n > largest\n   \
    \         largest = n\n        end\n    end\n    return (smallest, largest)\n\
    end\n</cell>\n<code language=julia-1.5>", "    minimum = numbers[1]\n    maximum\
    \ = numbers[1]\n    for number in numbers[2:end]\n        if number < minimum\n\
    \            minimum = number\n        elseif number > maximum\n            maximum\
    \ = number\n        else\n            return minimum, maximum\n    end\n    return\
    \ minimum, maximum\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work\
    \ if there are two numbers that are equidistant from each other.\n<|/ c |>\n<|\
    \ c |>\nYes, it does. I tested it before posting it. The function returns the\
    \ two numbers that are equidistant from each other. Try it yourself and see for\
    \ yourself.\n<|/ c |>\n<| c |>\nI tested it myself and it doesn't work. Try it\
    \ yourself and see for yourself.\n<|/ c |>\n<| c |>\nI tested it myself and it\
    \ does work. Try it yourself and see for yourself.\n<|/ c |>\n<| c |>\nI tested\
    \ it myself and it does work. Try it yourself and see for yourself.\n<|/ c |>\n\
    <| a tags=julia,arrays |>\nThe answer by is correct but can be improved. \n<code>",
  "    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n    for number\
    \ in numbers[2:end]\n        if number < smallest\n            smallest = number\n\
    \        elseif number > largest\n            largest = number\n        end\n\
    \    end\n    \n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n    for number\
    \ in numbers[2:end]\n        if number < smallest \n            smallest = number\n\
    \        elseif number > largest\n            largest = number\n        end\n\
    \    end\n    \n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.0>\n\
    find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of elements in a vector that are\
    \ less than a given value", "    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        else\n            smallest_number\
    \ = number\n            largest_number = number\n        end\n    end\n    return\
    \ (smallest_number, largest_number)\nend\n</code>\n<|/ a tags=julia,arrays |>\n\
    <| a dscore=2 |>\n<code>", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function by comparing\
    \ it to our old function and see how they compare.", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the number",
  "    smallest = numbers[1]\n    largest = numbers[1]\n    for i in numbers[2:end]\n\
    \        if i < smallest \n            smallest = i\n        elseif i > largest\n\
    \            largest = i\n        else\n            smallest = largest\n     \
    \       largest = i\n        end\n    end\n    return (smallest, largest)\nend\n\
    </code>\n<|/ a tags=julia,arrays |>\n<| a tags=julia,arrays |>\nThe answer by\
    \ is correct, but I thought I'd add some explanation as to why it works.\nThe\
    \ reason why it works is because Julia's sort function sorts its input in place.\
    \ \nThe function returns a sorted array of the same length as the input. \nThe\
    \ reason why it works is because Julia is smart enough to know that sorting an\
    \ array in place is cheaper than sorting a copy and returning the copy. \nThe\
    \ reason why it works is because Julia is smart enough to know that sorting an\
    \ array in place is cheaper than sorting a copy and returning the copy. \nThe\
    \ reason why it works is because Julia is smart enough to know that sorting an\
    \ array in place is cheaper than sorting a copy and returning the copy. \nThe\
    \ reason why it works is because Julia is smart enough to know that sorting an\
    \ array in place is cheaper than sorting a copy and returning the copy. \nThe\
    \ reason why it works is because Julia is smart enough to know that sorting an\
    \ array in place is cheaper than sorting a copy and returning the copy. \nThe\
    \ reason why it works is because Julia is smart enough to know that sorting an\
    \ array in place is cheaper than sorting a copy and returning the copy. \nThe\
    \ reason why it works is because Julia is smart enough to know that sorting an\
    \ array in place is cheaper than sorting a copy and returning the copy. \nThe\
    \ reason why it works is because Julia is smart enough to know that sorting an\
    \ array in place is cheaper than sorting a copy and returning the copy. \nThe\
    \ reason why it works is because Julia is smart enough to know that sorting an\
    \ array in place is cheaper than sorting a copy and returning the copy. \nThe\
    \ reason why it works is because Julia is smart enough to know that sorting an\
    \ array in place is cheaper than sorting a copy and returning the copy. \nThe\
    \ reason why it works is because Julia is smart enough to know that sorting an\
    \ array in place is cheaper than sorting a copy and returning the copy. \nThe\
    \ reason why it works is because Julia is ", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nNow let's test our function by comparing it to our expectations.",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nNow let's try it out on some random numbers:", "    \n    closest_elements\
    \ = numbers[1]\n    closest_elements_index = 2\n    \n    for index in 2:length(numbers)\n\
    \        if numbers[index] < closest_elements\n            closest_elements =\
    \ numbers[index]\n            closest_elements_index = index\n        end\n  \
    \  end\n    \n    return closest_elements, closest_elements_index\nend\n</cell>\n\
    <text>\nNow let's try it out on some random numbers:", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    return smallest_number, largest_number\nend\n</cell>\n\
    <code language=julia-1.5>", "    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        else\n            smallest_number\
    \ = number\n            largest_number = number\n        end\n    end\n    return\
    \ (smallest_number, largest_number)\nend\n</code>\n<|/ a tags=julia,arrays |>\n\
    <| a tags=julia,arrays |>\n<code>", "    \n    closest_elements = numbers[1]\n\
    \    closest_elements_index = 2\n    \n    for element in numbers[2:end]\n   \
    \     if element < closest_elements\n            closest_elements = element\n\
    \            closest_elements_index = closest_elements_index + 1\n        elseif\
    \ element > closest_elements\n            closest_elements = element\n       \
    \     closest_elements_index = closest_elements_index + 1\n        end\n    end\n\
    \    \n    return (closest_elements, closest_elements_index)\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    \n    closest_numbers = numbers[minimum < numbers]\n    closest_numbers =\
    \ closest_numbers[maximum > closest_numbers]\n    \n    return minimum, maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    minimum = minimum(numbers)\n  \
    \  maximum = maximum(numbers)\n    minimum_index = get_index(minimum, numbers)\n\
    \    maximum_index = get_index(maximum, numbers)\n    return (numbers[minimum_index],\
    \ numbers[maximum_index])\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n    for\
    \ number in numbers[2:end]\n        if number < smallest_number\n            smallest_number\
    \ = number\n        elseif number > largest_number\n            largest_number\
    \ = number\n        end\n    end\n    \n    return (smallest_number, largest_number)\n\
    end\n</cell>\n<text>\nNow let's test our new function with some test cases:",
  "    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for number in numbers[2:end]\n\
    \        if number < smallest \n            smallest = number\n        elseif\
    \ number > largest\n            largest = number\n        end\n    end\n    return\
    \ smallest, largest\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n</cell>\n<text>\nExercise: Write a function that\
    \ finds the closest element to a given number in a given vector. Test it by comparing\
    \ the results of your function with those of the built-in function abs.", "  \
    \  \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest_number\n            smallest_number\
    \ = number\n        elseif number > largest_number\n            largest_number\
    \ = number\n        end\n    end\n    return (smallest_number, largest_number)\n\
    end\n</cell>\n<code language=julia-1.3>\nfind_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\nWrite a function that will take\
    \ in a vector of numbers and return a new vector with all the numbers that are\
    \ closest to each other in order (smaller number, larger number).", "    \n  \
    \  smallest = numbers[1]\n    largest = numbers[1]\n    for i in numbers[2:end]\n\
    \        if i < smallest \n            smallest = i\n        elseif i > largest\n\
    \            largest = i\n        end\n    end\n    return (smallest, largest)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    closest_numbers = numbers[1]\n\
    \    closest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < closest_number\n            closest_number = number\n      \
    \  elseif number > closest_number\n            closest_numbers = number\n    \
    \    end\n    end\n    \n    return closest_numbers, closest_number\nend\n</cell>\n\
    <code language=julia-1.3>\nfind_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the square root of a\
    \ number. Test it on $x$ and $y$ and $z$. Test it on $x$ and $y$ and $z$ and $w$.\
    \ Test it on $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$\
    \ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and\
    \ $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$\
    \ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and\
    \ $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$\
    \ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and\
    \ $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$\
    \ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and\
    \ $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$\
    \ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x", "    \n   \
    \ smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n    for\
    \ number in numbers[2:end]\n        if number < smallest_number\n            smallest_number\
    \ = number\n        elseif number > largest_number\n            largest_number\
    \ = number\n        end\n    end\n    \n    return (smallest_number, largest_number)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    smallest = numbers[1]\n \
    \   largest = numbers[1]\n    \n    for number in numbers[2:end]\n        if number\
    \ < smallest \n            smallest = number\n        elseif number > largest\n\
    \            largest = number\n        end\n    end\n    \n    return (smallest,\
    \ largest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a vector of numbers and a number as inputs and will return the index of the\
    \ number in the vector that is closest to it.", "    minimum = numbers[1]\n  \
    \  maximum = numbers[1]\n    for i in numbers[2:end]\n        if i < minimum\n\
    \            minimum = i\n        elseif i > maximum\n            maximum = i\n\
    \        end\n    end\n    return minimum, maximum\nend\n</code>\n<|/ a |>\n<|\
    \ c |>\nI like this answer because it doesn't require any additional packages.\
    \ However, it does require a little more memory than my answer. My answer uses\
    \ `sort!`, which sorts the entire array in place. Your answer uses `sort!` twice,\
    \ which sorts the entire array twice. My answer uses `sort!` three times, which\
    \ sorts the entire array three times. My answer uses `sort!` four times, which\
    \ sorts the entire array four times. My answer uses `sort!` five times, which\
    \ sorts the entire array five times. My answer uses `sort!` six times, which sorts\
    \ the entire array six times. My answer uses `sort!` seven times, which sorts\
    \ the entire array seven times. My answer uses `sort!` eight times, which sorts\
    \ the entire array eight times. My answer uses `sort!` nine times, which sorts\
    \ the entire array nine times. My answer uses `sort!` ten times, which sorts the\
    \ entire array ten times. My answer uses `sort!` eleven times, which sorts the\
    \ entire array eleven times. My answer uses `sort!` twelve times, which sorts\
    \ the entire array twelve times. My answer uses `sort!` thirteen times, which\
    \ sorts the entire array thirteen times. My answer uses `sort!` fourteen times,\
    \ which sorts the entire array fourteen times. My answer uses `sort!` fifteen\
    \ times, which sorts the entire array fifteen times. My answer uses `sort!` sixteen\
    \ times, which sorts the entire array sixteen times. My answer uses `sort!` seventeen\
    \ times, which sorts the entire array seventeen times. My answer uses `sort!`\
    \ eighteen times, which sorts the entire array eighteen times. My answer uses\
    \ `sort!` nineteen times, which sorts the entire array nineteen times. My answer\
    \ uses `sort!` twenty times, which sorts the entire array twenty times. My answer\
    \ uses `sort!` twenty-one times, which sorts the entire array twenty-one times.\
    \ My answer uses `sort!` twenty-two times, which sorts the entire ", "    \n \
    \   smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n    for\
    \ number in numbers[2:end]\n        if number < smallest_number\n            smallest_number\
    \ = number\n        elseif number > largest_number\n            largest_number\
    \ = number\n        end\n    end\n    \n    return (smallest_number, largest_number)\n\
    end\n</cell>\n<text>\nNow let's test our function by running it on a few examples:",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n   \
    \ \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<text>\nNow let's test our\
    \ function by comparing it to our known answers:", "    \n    minimum = numbers[1]\n\
    \    maximum = numbers[1]\n    \n    for number in numbers[2:end]\n        if\
    \ number < minimum\n            minimum = number\n        elseif number > maximum\n\
    \            maximum = number\n        end\n    end\n    \n    return (minimum,\
    \ maximum)\nend\n</cell>\n<text>\nNow let's test our new function by running it\
    \ on some test data.", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by comparing\
    \ it to our expectation", "    \n    closest_numbers = numbers[1]\n    closest_numbers_2\
    \ = numbers[2]\n    \n    smallest_diff = closest_numbers_2 - closest_numbers\n\
    \    \n    if smallest_diff == 0\n        return (closest_numbers, closest_numbers_2)\n\
    \    end\n    \n    smallest_diff_abs = abs(smallest_diff)\n    \n    if smallest_diff_abs\
    \ < smallest_diff\n        closest_numbers = closest_numbers_2\n        closest_numbers_2\
    \ = closest_numbers\n    else\n        closest_numbers = closest_numbers\n   \
    \     closest_numbers_2 = closest_numbers_2\n    end\n    \n    return (closest_numbers,\
    \ closest_numbers_2)\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest\
    \ = numbers[1]\n    largest = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest \n            smallest = number\n        elseif\
    \ number > largest\n            largest = number\n        end\n    end\n    \n\
    \    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    smallest = numbers[1]\n    largest = numbers[1]\n    for i in numbers[2:end]\n\
    \        if i < smallest\n            smallest = i\n        elseif i > largest\n\
    \            largest = i\n        end\n    end\n    return (smallest, largest)\n\
    end\n</cell>\n<text>\nNow let's test our function", "    minimum = minimum(numbers)\n\
    \    maximum = maximum(numbers)\n    \n    if minimum == maximum\n        return\
    \ (minimum, minimum)\n    end\n    \n    closest_index = findfirst(isequal(minimum),\
    \ numbers)\n    \n    if closest_index == length(numbers)\n        return (maximum,\
    \ maximum)\n    end\n    \n    closest_value = numbers[closest_index]\n    \n\
    \    index_of_maximum = findfirst(isequal(maximum), numbers)\n    \n    if index_of_maximum\
    \ == length(numbers)\n        return (minimum, minimum)\n    end\n    \n    maximum_value\
    \ = numbers[index_of_maximum]\n    \n    if maximum == minimum\n        return\
    \ (closest_value, closest_value)\n    end\n    \n    minimum_value = numbers[minimum]\n\
    \    \n    if closest_value == minimum_value\n        return (closest_value, closest_value)\n\
    \    end\n    \n    if closest_value == maximum_value\n        return (closest_value,\
    \ closest_value)\n    end\n    \n    if closest_value < minimum_value\n      \
    \  return (closest_value, closest_value)\n    end\n    \n    if closest_value\
    \ > maximum_value\n        return (closest_value, closest_value)\n    end\n  \
    \  \n    return (closest_value, closest_value)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in that list.\nWrite a function that takes in a list of numbers and returns\
    \ the sum of the squares of the numbers in that list.\nWrite a function that takes\
    \ in a list of numbers and returns the sum of the squares of the numbers in that\
    \ list.\nWrite a function that takes in a list of numbers and returns the sum\
    \ of the squares of the numbers in that list.\nWrite a function that takes in\
    \ a list of numbers and returns the sum of the squares of the numbers in that\
    \ list.\nWrite a function that takes in a list of numbers and returns the sum\
    \ of the squares of the numbers in that list.\nWrite a function that takes in\
    \ a list of numbers and returns the sum of the squares of the numbers in that\
    \ list.\nWrite a function that takes in a list of numbers and returns the sum\
    \ of the squares of the numbers in that list.\nWrite a function that takes in\
    \ a list of numbers and returns the sum of the squares of the numbers in that\
    \ list.\nWrite a function that takes in a list of numbers and returns the sum\
    \ of the squares of the numbers in that list.\nWrite a function that takes in\
    \ a list of numbers and returns the sum of the squares of the numbers in that\
    \ list.\nWrite a function that takes in a list of numbers and returns the sum\
    \ of the squares of the numbers in that list.\nWrite a function that takes in\
    \ a list of numbers and returns the sum of the squares of the numbers in that\
    \ list.\nWrite a function that takes in a list of numbers and returns the sum\
    \ of the squares of the numbers in that list.\nWrite a function that takes in\
    \ a list of numbers and returns the sum of the squares of the numbers in that\
    \ list.\nWrite a function that takes in a list of numbers and returns the sum\
    \ of the squares of the numbers in that list.\nWrite a function that takes in\
    \ a list of numbers and returns the sum of the squares of the numbers in that\
    \ list.\nWrite a function that takes in a list of numbers and returns the sum\
    \ of the squares of the numbers in that list.\nWrite a function that takes in\
    \ a list of numbers and returns the sum of the squares of the numbers in that\
    \ list.\nWrite a function that takes in a list of numbers and returns the sum\
    \ of the squares of the numbers in that list.\nWrite a function that takes in\
    \ a list of numbers and returns the sum of the squares of the numbers in that\
    \ list.\nWrite a function that takes in a list of numbers and returns the sum",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns the number of elements in a vector that are less than a given value.\
    \  For example if the vector is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2] and you call your\
    \ function with value = 2.0 then your function should return 3.", "    \n    smallest\
    \ = numbers[1]\n    largest = numbers[1]\n    \n    for n in numbers[2:end]\n\
    \        if n < smallest\n            smallest = n\n        elseif n > largest\n\
    \            largest = n\n        end\n    end\n    \n    return (smallest, largest)\n\
    end\n</cell>\n<code language=julia-1.3>\nfind_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n</cell>\n<code language=julia-1.3>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite ", "    minimum\
    \ = numbers[1]\n    maximum = numbers[1]\n    for i in numbers[2:end]\n      \
    \  if i < minimum\n            minimum = i\n        elseif i > maximum\n     \
    \       maximum = i\n        else\n            minimum = minimum if minimum <\
    \ i else i\n            maximum = maximum if maximum > i else i\n        end\n\
    \    end\n    return minimum, maximum\nend\n</code>\n<|/ a tags=julia,sorting,arrays\
    \ |>\n<| c |>\nI like your solution, but I wonder if there is a way to do this\
    \ without looping through all the elements. I suspect there is, but I haven't\
    \ been able to figure it out yet.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ doesn't loop through all the elements. I hope it helps.\n<|/ c |>\n<| c |>\n\
    Thank you for the solution! I really appreciate it. I was able to get it to work\
    \ by modifying your solution a little bit. I added a comment to my question to\
    \ explain what I did. Thanks again!\n<|/ c |>\n<| a tags=julia,sorting,arrays\
    \ |>\nI wanted to add my own solution that I came up with. I'm sure it could be\
    \ improved, but I think it gets the job done. \n<code>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in the vector.\nThe function should\
    \ raise an error if the vector is empty.\nThe function should raise an error if\
    \ the vector has less than two elements.\nThe function should raise an error if\
    \ the vector has more than two elements.\nThe function should raise an error if\
    \ the vector has two or more elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.\nThe function should raise an error if\
    \ the vector has non-numeric elements.", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.1>", "    \n    closest_elements = Vector{Float64}(undef,\
    \ 0)\n    closest_elements_distance = Float64(0)\n    \n    for number in numbers\n\
    \        \n        distance = sqrt(sum((number - closest_elements_distance).^2))\n\
    \        \n        if distance < closest_elements_distance\n            closest_elements_distance\
    \ = distance\n            closest_elements = number\n        end\n    end\n  \
    \  \n    return closest_elements, closest_elements_distance\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    \n    smallest = numbers[1]\n    largest = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest \n           \
    \ smallest = number\n        elseif number > largest\n            largest = number\n\
    \        end\n    end\n    return smallest, largest\nend\n</cell>\n<code language=julia-1.4>\n\
    find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of numbers and return the sum of the\
    \ squares of the numbers in the list. \nThe function should take a list of numbers\
    \ of any length and return a single number.", "    smallest = numbers[1]\n   \
    \ largest = numbers[1]\n    for i in 2:length(numbers)\n        if numbers[i]\
    \ < smallest \n            smallest = numbers[i]\n        elseif numbers[i] >\
    \ largest\n            largest = numbers[i]\n        else\n            smallest\
    \ = numbers[i]\n            largest = numbers[i]\n        end\n    end\n    return\
    \ (smallest, largest)\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\nThis\
    \ doesn't seem to work. `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])`\
    \ returns `(2.0, 2.2)` instead of `(2.0, 2.0)`.\n<|/ c |>\n<| c |>\nIt does work,\
    \ just not in the way you intended. `find_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2])` returns `(2.0, 2.2)` instead of `(2.0, 2.0)`.\n<|/ c |>\n<| c |>\n\
    Ah, I see. Thanks for pointing that out. I've edited my answer to fix it.\n<|/\
    \ c |>\n<| a dscore=2 |>\nHere's a solution using sort!:\n<code>", "    \n   \
    \ smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n    for\
    \ number in numbers[2:end]\n        if number < smallest_number\n            smallest_number\
    \ = number\n        elseif number > largest_number\n            largest_number\
    \ = number\n        end\n    end\n    \n    return (smallest_number, largest_number)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    smallest_index = 2\n    largest_index =\
    \ 2\n    for index in 2:length(numbers)\n        if numbers[index] < smallest_number\n\
    \            smallest_number = numbers[index]\n            smallest_index = index\n\
    \        elseif numbers[index] > largest_number\n            largest_number =\
    \ numbers[index]\n            largest_index = index\n        end\n    end\n  \
    \  return (smallest_number, largest_number)\nend\n</cell>\n<text>\nNow let's test\
    \ our function", "    \n    smallest = numbers[1]\n    largest = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest \n     \
    \       smallest = number\n        elseif number > largest\n            largest\
    \ = number\n        end\n    end\n    \n    return (smallest, largest)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2])\n</cell>\n<text>\nExercise\nWrite a function that takes in a vector\
    \ of numbers and returns the index of the two numbers that are closest to each\
    \ other (i.e. the index of the two numbers in the vector that are the closest\
    \ to each other).", "    \n    smallest = numbers[1]\n    largest = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest \n     \
    \       smallest = number\n        elseif number > largest\n            largest\
    \ = number\n        end\n    end\n    \n    return (smallest, largest)\nend\n\
    </cell>\n<code language=julia-1.4>\nfind_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a vector\
    \ of numbers and returns the mean of the numbers. If the vector is empty return\
    \ NaN.", "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_diff = Float64(0.0)\n\
    \    smallest_number = numbers[1]\n    \n    for number in numbers[2:end]\n  \
    \      diff = abs(number - smallest_number)\n        if diff < smallest_diff\n\
    \            smallest_diff = diff\n            smallest_number = number\n    \
    \    end\n    end\n    \n    return (smallest_number, smallest_diff)\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    minimum = numbers[1]\n    maximum = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < minimum\n       \
    \     minimum = number\n        elseif number > maximum\n            maximum =\
    \ number\n        end\n    end\n    \n    return (minimum, maximum)\nend\n</cell>\n\
    <text>\nNow let's test our new function by comparing it to our old function.",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    smallest_index\
    \ = 2\n    largest_index = 2\n    \n    for number in numbers[2:end]\n       \
    \ if number < smallest_number\n            smallest_number = number\n        \
    \    smallest_index = 2\n        elseif number > largest_number\n            largest_number\
    \ = number\n            largest_index = 2\n        else\n            smallest_index\
    \ += 1\n            largest_index += 1\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<text>\nNow let's test our\
    \ new function with some test cases:", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nNow let's test our new function by comparing it to our old function.",
  "    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for i in 2:length(numbers)\n\
    \        if numbers[i] < smallest \n            smallest = numbers[i]\n      \
    \  elseif numbers[i] > largest\n            largest = numbers[i]\n        end\n\
    \    end\n    return (smallest, largest)\nend\n</cell>\n<text>\nNow let's try\
    \ it out on some random numbers:", "    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</code>\n<|/ a |>\n<| a dscore=2 |>\nThe accepted answer\
    \ works well for small arrays, but for large arrays, it is better to use a binary\
    \ search to find the two closest numbers. \n<code>", "    \n    smallest = numbers[1]\n\
    \    largest = numbers[1]\n    for number in numbers[2:end]\n        if number\
    \ < smallest\n            smallest = number\n        elseif number > largest\n\
    \            largest = number\n        else\n            return smallest, largest\n\
    \        end\n    end\n    return smallest, largest\nend\n</cell>\n<code language=julia-1.3>\n\
    find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\n\
    Write a function that takes a vector of numbers and returns the index of the two\
    \ numbers that are closest to each other. \nFor example, if the input vector is\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2] the function should return 2 for the first element\
    \ and 3 for the second element.", "    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[0]\n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nThe simplest\
    \ way is to use sort!:\n<code>\njulia> sort!([1,4,5,2,3])\n3-element Array{Int64,1}:\n\
    \ 1\n 4\n 5\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/19806154)\n\
    <|/ c |>\n<| c |>\nThe question was \"how do I find the closest element in a vector?\"\
    \ The answer is \"use sort!\".\n<|/ c |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/19806154)\n\
    <|/ c |>\n<| c |>\nThe question was \"how do I find the closest element in a vector?\"\
    \ The answer is \"use sort!\".\n<|/ c |>\n<| c |>\nThe question was \"how do I\
    \ find the closest element in a vector?\" The answer is \"use sort!\".\n<|/ c\
    \ |>\n<| a tags=julia |>\n<code>", "    \n    smallest_number = numbers[1]\n \
    \   largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n  \
    \      if number < smallest_number\n            smallest_number = number\n   \
    \     elseif number > largest_number\n            largest_number = number\n  \
    \      end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nNow let's test the function by giving it a vector with some numbers\
    \ in it."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
