name: HumanEval_20_find_closest_elements
language: jl
prompt: "\"\"\" From a supplied vector of numbers (of length at least two) select\
  \ and return two that are the closest to each\n    other and return them in order\
  \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
  \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
  \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
  \ Float64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0,\
  \ 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0,\
  \ 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
  \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
completions: ["    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function by comparing\
    \ it to our old function and see how they compare.", "    \n    minimum = numbers[1]\n\
    \    maximum = numbers[1]\n    for i in 2:length(numbers)\n        if numbers[i]\
    \ < minimum\n            minimum = numbers[i]\n        elseif numbers[i] > maximum\n\
    \            maximum = numbers[i]\n        else\n            return minimum, maximum\n\
    \        end\n    end\n    return minimum, maximum\nend\n</cell>\n<text>\nExercise\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in that vector. Test it on some vectors.", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    smallest = numbers[1]\n    largest =\
    \ numbers[1]\n    for n in numbers[2:end]\n        if n < smallest\n         \
    \   smallest = n\n        elseif n > largest\n            largest = n\n      \
    \  else\n            break\n    end\n    return (smallest, largest)\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function", "    \n\
    \    smallest_diff = Float64(0.0)\n    smallest_element = numbers[1]\n    \n \
    \   for element in numbers[2:end]\n        diff = abs(element - smallest_element)\n\
    \        if diff < smallest_diff\n            smallest_diff = diff\n         \
    \   smallest_element = element\n        end\n    end\n    \n    return (smallest_element,\
    \ smallest_element)\nend\n</cell>\n<text>\nNow let's try it out on some vectors.",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    smallest_index\
    \ = 1\n    largest_index = 2\n    \n    for number in numbers[2:end]\n       \
    \ if number < smallest_number\n            smallest_number = number\n        \
    \    smallest_index = largest_index\n        elseif number > largest_number\n\
    \            largest_number = number\n            largest_index = smallest_index\n\
    \        else\n            smallest_index = largest_index\n        end\n    end\n\
    \    \n    return (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\n\
    Write a function called find_closest_elements_2 that does the same thing as find_closest_elements\
    \ but returns the two numbers in order of the smallest number and the largest\
    \ number.", "    \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for\
    \ i in numbers[2:end]\n        if i < minimum\n            minimum = i\n     \
    \   elseif i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ (minimum, maximum)\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_distance\
    \ = Float64(0)\n    largest_distance = Float64(0)\n    \n    for number in numbers\n\
    \        if number < smallest_distance\n            smallest_distance = number\n\
    \        elseif number > largest_distance\n            largest_distance = number\n\
    \        end\n    end\n    \n    return (smallest_distance, largest_distance)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    smallest = numbers[1]\n \
    \   largest = numbers[1]\n    for number in numbers[2:end]\n        if number\
    \ < smallest \n            smallest = number\n        elseif number > largest\n\
    \            largest = number\n        end\n    end\n    return (smallest, largest)\n\
    end\n</cell>\n<code language=julia-1.3>\nfind_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n</cell>\n<code language=julia-1.3>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ will find the closest element to a given number in a vector. Test it on some\
    \ examples. Write a function that will find the closest element to a given number\
    \ in a vector. Test it on some examples. Write a function that will find the closest\
    \ element to a given number in a vector. Test it on some examples.", "    minimum\
    \ = minimum(numbers)\n    maximum = maximum(numbers)\n    minimum_index = findfirst(minimum\
    \ == numbers)\n    maximum_index = findfirst(maximum == numbers)\n    \n    if\
    \ minimum_index == maximum_index\n        return (minimum, minimum)\n    else\n\
    \        return (minimum[minimum_index], maximum[maximum_index])\n    end\nend\n\
    </cell>\n<text>\nExercise\nWrite a function that takes in a list of numbers and\
    \ returns the index of the two numbers that are closest to each other. Test it\
    \ by calling it on a list with two numbers and see what happens.", "    \n   \
    \ smallest = numbers[1]\n    largest = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest \n            smallest = number\n        elseif\
    \ number > largest\n            largest = number\n        end\n    end\n    \n\
    \    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function with\
    \ some test cases:", "    \n    smallest = numbers[1]\n    largest = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest\n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test the function by comparing\
    \ it to our previous implementation", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[end]\n    smallest_index = 2\n    largest_index\
    \ = end\n    \n    for index in 2:end\n        if numbers[index] < smallest_number\n\
    \            smallest_number = numbers[index]\n            smallest_index = index\n\
    \        end\n        if numbers[index] > largest_number\n            largest_number\
    \ = numbers[index]\n            largest_index = index\n        end\n    end\n\
    \    \n    return (smallest_number, largest_number)\nend\n</cell>\n<text>\nNow\
    \ let's test our new function by comparing it to our old function and see how\
    \ they compare:", "    \n    closest_elements = Vector{Float64}(undef, 0)\n  \
    \  closest_elements_distance = Float64(0)\n    \n    for number in numbers\n \
    \       \n        distance = abs(number - numbers[1])\n        \n        if closest_elements_distance\
    \ < distance\n            closest_elements_distance = distance\n            closest_elements\
    \ = [numbers[1], number]\n        elseif closest_elements_distance == distance\n\
    \            closest_elements = [number, numbers[1]]\n        end\n    end\n \
    \   \n    return closest_elements\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in numbers[2:end]\n\
    \        if i < minimum\n            minimum = i\n        elseif i > maximum\n\
    \            maximum = i\n        end\n    end\n    return minimum, maximum\n\
    end\n</cell>\n<text>\nNow let's test our new function by comparing it to our old\
    \ function and see how they compare.", "    minimum = numbers[1]\n    maximum\
    \ = numbers[1]\n    for i in numbers[2:end]\n        if i < minimum\n        \
    \    minimum = i\n        elseif i > maximum\n            maximum = i\n      \
    \  else\n            break\n    end\n    return (minimum, maximum)\nend\n</cell>\n\
    <text>\nNow let's test the function by comparing it to our previous implementation:",
  "    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for n in numbers[2:end]\n\
    \        if n < smallest\n            smallest = n\n        elseif n > largest\n\
    \            largest = n\n        end\n    end\n    return (smallest, largest)\n\
    end\n</cell>\n<text>\nNow let's test our new function by comparing it to our old\
    \ function and see how they compare."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
