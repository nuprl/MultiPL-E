name: HumanEval_107_even_odd_palindrome
language: jl
prompt: "\"\"\"\n    Given a positive integer n, return a tuple that has the number\
  \ of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\
  \n    Example 1:\n\n    >>> even_odd_palindrome(3)\n    (1, 2)\n        Explanation:\n\
  \        Integer palindrome are 1, 2, 3. one of them is even, and two of them are\
  \ odd.\n\n    Example 2:\n\n    >>> even_odd_palindrome(12)\n    (4, 6)\n      \
  \  Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four\
  \ of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n\
  \        2. returned tuple has the number of even and odd integer palindromes respectively.\n\
  \    \"\"\"\nfunction even_odd_palindrome(n::Int64)::Tuple{Int64, Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = even_odd_palindrome;\n\t@test(candidate(123)\
  \ == (8, 13))\n\t@test(candidate(12) == (4, 6))\n\t@test(candidate(3) == (1, 2))\n\
  \t@test(candidate(63) == (6, 8))\n\t@test(candidate(25) == (5, 6))\n\t@test(candidate(19)\
  \ == (4, 6))\n\t@test(candidate(9) == (4, 5))\n\t@test(candidate(1) == (0, 1))\n\
  end\n"
completions: ["    if n < 1\n        error(\"n should be positive\")\n    end\n  \
    \  if n < 2\n        return (1, 1)\n    end\n    even_palindromes = even_odd_palindromes(n)\n\
    \    odd_palindromes = even_odd_palindromes(n - 1)\n    return (sum(even_palindromes),\
    \ sum(odd_palindromes))\nend\n</cell>\n<code language=julia-1.5>", "    if n <\
    \ 1\n        return (0, 0)\n    even_palindrome = 0\n    odd_palindrome = 0\n\
    \    for x in 1:n\n        if x == rev(x)\n            even_palindrome += 1\n\
    \        else\n            odd_palindrome += 1\n    return (even_palindrome, odd_palindrome)\n\
    end\n</cell>\n<code language=julia-1.3>", "    if n < 1\n        error(\"n should\
    \ be positive\")\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for i = 2 to n\n        if isPalindrome(i)\n\
    \            even_palindrome += 1\n        else\n            odd_palindrome +=\
    \ 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n < 1\n        error(\"n must be\
    \ positive\")\n    end\n    even_palindrome = 0\n    odd_palindrome = 0\n    for\
    \ i = 1:n\n        if isPalindrome(i)\n            if isEven(i)\n            \
    \    even_palindrome += 1\n            else\n                odd_palindrome +=\
    \ 1\n        end\n    end\n    return even_palindrome, odd_palindrome\nend\n</cell>\n\
    <code language=julia-1.4>", "    if n < 1\n        return 0, 0\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for x in 1:n\n        if x == reverse(String(x))\n\
    \            even_palindrome += 1\n        else\n            odd_palindrome +=\
    \ 1\n    return even_palindrome, odd_palindrome\nend", "    if n < 1\n       \
    \ return 0, 0\n    even_palindromes = 0\n    odd_palindromes = 0\n    for x in\
    \ 1:n\n        if x == rev(x)\n            even_palindromes += 1\n        else\n\
    \            odd_palindromes += 1\n    end\n    return even_palindromes, odd_palindromes\n\
    end", "    if n < 1\n        error(\"n should be positive\")\n    end\n    if\
    \ n < 2\n        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome\
    \ = 0\n    for i = 2 to n\n        if isPalindrome(i)\n            even_palindrome\
    \ += 1\n        else\n            odd_palindrome += 1\n        end\n    end\n\
    \    return (even_palindrome, odd_palindrome)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a positive integer n and returns the number of\
    \ palindromes that fall within the range(1, n), inclusive.", "    if n < 1\n \
    \       error(\"n should be positive\")\n    end\n    if n < 2\n        return\
    \ (1, 1)\n    end\n    even_palindromes = 0\n    odd_palindromes = 0\n    for\
    \ palindrome in palindromes(n)\n        if palindrome % 2 == 0\n            even_palindromes\
    \ += 1\n        else\n            odd_palindromes += 1\n        end\n    end\n\
    \    return (even_palindromes, odd_palindromes)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a positive integer n and returns the number of\
    \ palindromes less than or equal to n.", "    if n < 1\n        error(\"n must\
    \ be positive\")\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for x in 1:n\n        if x == reverse(String(x))\n\
    \            even_palindrome += 1\n        else\n            odd_palindrome +=\
    \ 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n < 1\n        error(\"n must be\
    \ positive\")\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for i = 2 to n\n        if isPalindrome(i)\n\
    \            even_palindrome += 1\n        else\n            odd_palindrome +=\
    \ 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend",
  "    if n < 1\n        return (0, 0)\n    even_palindromes = 0\n    odd_palindromes\
    \ = 0\n    for x in 1:n\n        if isPalindrome(x)\n            even_palindromes\
    \ += 1\n        else\n            odd_palindromes += 1\n    return (even_palindromes,\
    \ odd_palindromes)\nend", "    if n < 1\n        error(\"n must be positive\"\
    )\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindromes\
    \ = even_odd_palindromes(n)\n    odd_palindromes = even_odd_palindromes(n - 1)\n\
    \    return (even_palindromes.even, odd_palindromes.odd)\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    if n < 1\n        error(\"n must be positive\")\n\
    \    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindrome =\
    \ 0\n    odd_palindrome = 0\n    for x in 1:n\n        if x == reverse(String(x))\n\
    \            even_palindrome += 1\n        else\n            odd_palindrome +=\
    \ 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n < 1 \n        return (1, 1) \n\
    \    else if n < 2 \n        return (1, 1) \n    else if n % 2 == 0 \n       \
    \ return (even_odd_palindrome(n / 2), even_odd_palindrome(n / 2 + 1)) \n    else\
    \ \n        return (even_odd_palindrome(n / 2 + 1), even_odd_palindrome(n / 2))\
    \ \nend\n</cell>\n<code language=julia-1.0>", "    if n < 1\n        error(\"\
    n should be positive\")\n    end\n    if n < 2\n        return (1, 1)\n    end\n\
    \    even_palindromes = 0\n    odd_palindromes = 0\n    for palindrome in palindromes(n)\n\
    \        if palindrome % 2 == 0\n            even_palindromes += palindrome\n\
    \        else\n            odd_palindromes += palindrome\n        end\n    end\n\
    \    return (even_palindromes, odd_palindromes)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1 \n        error(\"n should be positive\")\n    end\n    if n < 2\n\
    \        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome =\
    \ 0\n    for i = 2 to n\n        if isPalindrome(i)\n            even_palindrome\
    \ += 1\n        else\n            odd_palindrome += 1\n        end\n    end\n\
    \    return (even_palindrome, odd_palindrome)\nend\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes a positive integer n and returns the number of palindromes\
    \ that fall within the range(1, n), inclusive.", "    if n < 1\n        return\
    \ 0, 0\n    even_palindromes = 0\n    odd_palindromes = 0\n    for x in 1:n\n\
    \        if x == rev(x)\n            even_palindromes += 1\n        else\n   \
    \         odd_palindromes += 1\n    return even_palindromes, odd_palindromes\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n < 1\n        error(\"n should\
    \ be positive\")\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for i = 2 to n\n        if isPalindrome(i)\n\
    \            even_palindrome += 1\n        else\n            odd_palindrome +=\
    \ 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n < 1\n        return 0, 0\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for x in 1:n\n        if x == rev(x)\n    \
    \        even_palindrome += 1\n        else\n            odd_palindrome += 1\n\
    \    return even_palindrome, odd_palindrome\nend", "    if n < 1\n        return\
    \ (0, 0)\n    even_palindrome = 0\n    odd_palindrome = 0\n    for x in 1:n\n\
    \        if x == rev(x)\n            even_palindrome += 1\n        else\n    \
    \        odd_palindrome += 1\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n < 1 \n        error(\"n should\
    \ be positive\")\n    end\n    if n < 2 \n        return (1, 1)\n    end\n   \
    \ even_palindrome = 0\n    odd_palindrome = 0\n    for x in 1:n\n        if x\
    \ == n \n            odd_palindrome += 1\n        elseif x == n-1 \n         \
    \   even_palindrome += 1\n        elseif x % 2 == 0 \n            even_palindrome\
    \ += 1\n        elseif x % 2 == 1 \n            odd_palindrome += 1\n        end\n\
    \    end\n    return (even_palindrome, odd_palindrome)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1\n        return (0, 0)\n    even_palindromes = 0\n    odd_palindromes\
    \ = 0\n    for x in 1:n\n        if x == rev(x)\n            even_palindromes\
    \ += 1\n        else\n            odd_palindromes += 1\n    return (even_palindromes,\
    \ odd_palindromes)\nend\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ a positive integer n and returns the number of palindromes that fall within\
    \ the range(1, n), inclusive.", "    if n < 1\n        return (0, 0)\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for x in 1:n\n        if x == rev(x)\n    \
    \        even_palindrome += 1\n        else\n            odd_palindrome += 1\n\
    \    return (even_palindrome, odd_palindrome)\nend\n</cell>\n<code language=julia-1.0>",
  "    if n < 1\n        error(\"n must be positive\")\n    end\n    if n < 2\n  \
    \      return (1, 1)\n    end\n    even_palindromes = even_odd_palindromes(n)\n\
    \    odd_palindromes = even_odd_palindromes(n-1)\n    return (even_palindromes[1]\
    \ + odd_palindromes[1], even_palindromes[0] + odd_palindromes[0])\nend", "   \
    \ if n < 1\n        error(\"n should be positive\")\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for i = 1 to n\n        if isPalindrome(i)\n\
    \            if isEven(i)\n                even_palindrome += 1\n            else\n\
    \                odd_palindrome += 1\n        end\n    end\n    return (even_palindrome,\
    \ odd_palindrome)\nend\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ a positive integer n and returns the number of palindromes that fall within\
    \ the range(1, n), inclusive.", "    if n < 1 \n        error(\"n must be positive\"\
    )\n    end\n    if n < 2 \n        return (1, 1)\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for x in 1:n\n        if x == reverse(String(x))\
    \ \n            even_palindrome += 1\n        else\n            odd_palindrome\
    \ += 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<code language=julia-1.0>", "    if n < 1 \n        return (0, 0) \n\
    \    even_palindrome = 0\n    odd_palindrome = 0\n    for x in 1:n\n        if\
    \ x == rev(x)\n            even_palindrome += 1\n        else\n            odd_palindrome\
    \ += 1\n    return (even_palindrome, odd_palindrome)\nend", "    if n < 1 \n \
    \       error(\"n should be positive\")\n    end\n    if n == 1 \n        return\
    \ (1, 1)\n    end\n    even_palindromes = even_odd_palindrome(n - 1)\n    odd_palindromes\
    \ = even_odd_palindrome(n - 2)\n    return (even_palindromes[1] + odd_palindromes[1],\
    \ even_palindromes[0] + odd_palindromes[0])\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1 \n        error(\"n should be positive\")\n    end\n    if n < 2\n\
    \        return (1, 1)\n    end\n    even_palindromes = 0\n    odd_palindromes\
    \ = 0\n    for i = 2 to n\n        if isPalindrome(i)\n            even_palindromes\
    \ += 1\n        else\n            odd_palindromes += 1\n        end\n    end\n\
    \    return (even_palindromes, odd_palindromes)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1\n        error(\"n should be positive\")\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for x in 1:n\n        even_palindrome += isPalindrome(x)\n\
    \        odd_palindrome += !isPalindrome(x)\n    end\n    return even_palindrome,\
    \ odd_palindrome\nend\n</cell>\n<text>\nQuestion 3\nWrite a Julia function that\
    \ takes an integer n and returns the number of palindromes that fall within the\
    \ range(1, n), inclusive.", "    if n < 1\n        return 0, 0\n    even_palindromes\
    \ = 0\n    odd_palindromes = 0\n    for palindrome in palindromes(n)\n       \
    \ if palindrome % 2 == 0\n            even_palindromes += 1\n        else\n  \
    \          odd_palindromes += 1\n    return even_palindromes, odd_palindromes\n\
    end\n</cell>\n<code language=julia-1.4>", "    if n < 1\n        error(\"n should\
    \ be positive\")\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for i = 2 to n\n        if isPalindrome(i)\n\
    \            even_palindrome += 1\n        else\n            odd_palindrome +=\
    \ 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n < 1\n        return (0, 0)\n  \
    \  even_palindromes = 0\n    odd_palindromes = 0\n    for palindrome in palindromes(n)\n\
    \        if palindrome % 2 == 0\n            even_palindromes += 1\n        else\n\
    \            odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n\
    end\n</cell>\n<code language=julia-1.0>", "    if n < 1\n        error(\"n should\
    \ be positive\")\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for i = 2 to n\n        if isPalindrome(i)\n\
    \            if isEven(i)\n                even_palindrome += 1\n            else\n\
    \                odd_palindrome += 1\n            end\n        end\n    end\n\
    \    return (even_palindrome, odd_palindrome)\nend\n</cell>\n<text>\nProblem 3\n\
    Write a Julia function that takes a positive integer n and returns the number\
    \ of palindromes less than or equal to n.", "    if n < 1 \n        error(\"n\
    \ should be positive\")\n    end\n    if n == 1 \n        return (1, 1)\n    end\n\
    \    even_palindromes = even_odd_palindrome(n - 1)\n    odd_palindromes = even_odd_palindrome(n\
    \ - 1)\n    even_palindromes[1] += 1\n    odd_palindromes[1] += 1\n    return\
    \ (even_palindromes[1], odd_palindromes[1])\nend\n</cell>\n<code language=julia-1.0>",
  "    if n < 1\n        error(\"n should be positive\")\n    end\n    if n < 2\n\
    \        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome =\
    \ 0\n    for x in 1:n\n        if x == reverse(String(x))\n            even_palindrome\
    \ += 1\n        else\n            odd_palindrome += 1\n        end\n    end\n\
    \    return (even_palindrome, odd_palindrome)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1\n        error(\"n should be positive\")\n    end\n    if n < 2\n\
    \        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome =\
    \ 0\n    for i = 2 to n\n        if isPalindrome(i)\n            even_palindrome\
    \ += 1\n        else\n            odd_palindrome += 1\n        end\n    end\n\
    \    return (even_palindrome, odd_palindrome)\nend\n</cell>\n<code language=julia-1.0>",
  "    if n < 1\n        error(\"n should be positive\")\n    end\n    if n < 2\n\
    \        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome =\
    \ 0\n    for x in 1:n\n        even_palindrome += isPalindrome(x)\n        odd_palindrome\
    \ += !isPalindrome(x)\n    end\n    return (even_palindrome, odd_palindrome)\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a Julia function that takes a positive\
    \ integer n and returns the number of palindromes that fall within the range(1,\
    \ n), inclusive.", "    if n < 1\n        error(\"n must be positive\")\n    end\n\
    \    if n < 2\n        return (1, 1)\n    end\n    even_palindromes = even_odd_palindromes(n\
    \ - 1)\n    odd_palindromes = even_odd_palindromes(n - 2)\n    return (even_palindromes[1]\
    \ + odd_palindromes[1], even_palindromes[0] + odd_palindromes[0])\nend", "   \
    \ if n < 1\n        error(\"n must be positive\")\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for x in 1:n\n        if x == rev(x)\n    \
    \        even_palindrome += 1\n        else\n            odd_palindrome += 1\n\
    \        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n < 1 \n        return (1, 1) \n    else if\
    \ n < 2 \n        return (1, 1) \n    else if n < 3 \n        return (1, 1) \n\
    \    else if n < 4 \n        return (1, 1) \n    else if n < 5 \n        return\
    \ (1, 1) \n    else if n < 6 \n        return (1, 1) \n    else if n < 7 \n  \
    \      return (1, 1) \n    else if n < 8 \n        return (1, 1) \n    else if\
    \ n < 9 \n        return (1, 1) \n    else if n < 10 \n        return (1, 1) \n\
    \    else if n < 11 \n        return (1, 1) \n    else if n < 12 \n        return\
    \ (1, 1) \n    else if n < 13 \n        return (1, 1) \n    else if n < 14 \n\
    \        return (1, 1) \n    else if n < 15 \n        return (1, 1) \n    else\
    \ if n < 16 \n        return (1, 1) \n    else if n < 17 \n        return (1,\
    \ 1) \n    else if n < 18 \n        return (1, 1) \n    else if n < 19 \n    \
    \    return (1, 1) \n    else if n < 20 \n        return (1, 1) \n    else if\
    \ n < 21 \n        return (1, 1) \n    else if n < 22 \n        return (1, 1)\
    \ \n    else if n < 23 \n        return (1, 1) \n    else if n < 24 \n       \
    \ return (1, 1) \n    else if n < 25 \n        return (1, 1) \n    else if n <\
    \ 26 \n        return (1, 1) \n    else if n < 27 \n        return (1, 1) \n \
    \   else if n < 28 \n        return (1, 1) \n    else if n < 29 \n        return\
    \ (1, 1) \n    else if n < 30 \n        return (1, 1) \n    else if n < 31 \n\
    \        return (1, 1) \n    else if n < 32 \n        return (1, 1) \n    else\
    \ if n < 33 \n        return (1, 1) \n    else if n < 34 \n        return (1,\
    \ 1) \n    else if n < 35 \n        return (1, 1) \n    else if n < 36 \n    \
    \    return (1, 1) \n    else if n < 37 \n        return (1, 1) \n    else if\
    \ n < 38 \n        return (1, 1) \n    else if n < 39 \n        return (1, 1)\
    \ \n    else if n < 40 \n        return (1, 1) \n    else if n < 41 \n       \
    \ return (1, 1) \n    else if n < 42 \n        return (1, 1) \n    else if n <\
    \ 43 \n        return (1, 1) \n    else if n < 44 \n        return (1, 1) \n \
    \   else if n < 45 \n        return (1, 1) \n    else if n < 46 \n        return\
    \ (1, 1) \n    else if n < 47 \n        return (1, 1) \n    else if n < 48 \n\
    \        return (1, 1) \n    else if n < 49 \n        return (1, 1) \n    else\
    \ if n < 50 \n        return (1, 1) \n    else if n < ", "    if n < 1 \n    \
    \    return (0, 0)\n    even_palindrome = 0\n    odd_palindrome = 0\n    for x\
    \ in 1:n\n        if x == reverse(String(x))\n            even_palindrome += 1\n\
    \        else\n            odd_palindrome += 1\n    return (even_palindrome, odd_palindrome)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n < 1\n        error(\"n must\
    \ be positive\")\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for i = 2 to n\n        if isPalindrome(i)\n\
    \            even_palindrome += 1\n        else\n            odd_palindrome +=\
    \ 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<text>\nQuestion 3\nWrite a Julia function that takes a positive integer\
    \ n and returns the number of palindromes that fall within the range(1, n), inclusive.",
  "    if n < 1\n        error(\"n should be positive\")\n    end\n    if n < 2\n\
    \        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome =\
    \ 0\n    for x in 1:n\n        if x == reverse(String(x))\n            even_palindrome\
    \ += 1\n        else\n            odd_palindrome += 1\n        end\n    end\n\
    \    return (even_palindrome, odd_palindrome)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1\n        return (0, 0)\n    even_palindrome = 0\n    odd_palindrome\
    \ = 0\n    for palindrome in palindromes(n)\n        if palindrome % 2 == 0\n\
    \            even_palindrome += 1\n        else\n            odd_palindrome +=\
    \ 1\n    return (even_palindrome, odd_palindrome)\nend\n</cell>\n<text>\nProblem\
    \ 4\nWrite a function that takes in a list of integers and returns the number\
    \ of palindromes in the list.", "    if n < 1 \n        error(\"n should be positive\"\
    )\n    end\n    if n < 2 \n        return (1, 1)\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for x in 1:n\n        if x == n \n        \
    \    return even_palindrome, odd_palindrome\n        end\n        if x % 2 ==\
    \ 0 \n            even_palindrome += x\n        else\n            odd_palindrome\
    \ += x\n        end\n    end\n    return even_palindrome, odd_palindrome\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n < 1\n        error(\"n must be\
    \ positive\")\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindromes\
    \ = even_odd_palindromes(n)\n    odd_palindromes = even_odd_palindromes(n - 1)\n\
    \    return (sum(even_palindromes), sum(odd_palindromes))\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n < 1 \n        error(\"n should be positive\"\
    )\n    end\n    if n < 2 \n        return (1, 1)\n    end\n    even_palindromes\
    \ = even_odd_palindromes(n)\n    odd_palindromes = even_odd_palindromes(n - 1)\n\
    \    return (length(even_palindromes), length(odd_palindromes))\nend", "    if\
    \ n < 1 \n        error(\"n should be positive\")\n    end\n    if n < 2 \n  \
    \      return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome = 0\n\
    \    for x in 1:n\n        if x % 2 == 0\n            even_palindrome += 1\n \
    \       else\n            odd_palindrome += 1\n        end\n    end\n    return\
    \ (even_palindrome, odd_palindrome)\nend\n</cell>\n<text>\nQ. Write a Julia function\
    \ that takes a positive integer n and returns the number of palindromes less than\
    \ or equal to n.", "    if n < 1\n        error(\"n must be positive\")\n    end\n\
    \    if n < 2\n        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome\
    \ = 0\n    for i = 2 to n\n        if isPalindrome(i)\n            even_palindrome\
    \ += 1\n        else\n            odd_palindrome += 1\n        end\n    end\n\
    \    return (even_palindrome, odd_palindrome)\nend", "    if n < 1\n        error(\"\
    n should be positive\")\n    end\n    if n < 2\n        return (1, 1)\n    end\n\
    \    even_palindrome = 0\n    odd_palindrome = 0\n    for i = 2 to n\n       \
    \ if isPalindrome(i)\n            even_palindrome += 1\n        else\n       \
    \     odd_palindrome += 1\n        end\n    end\n    return (even_palindrome,\
    \ odd_palindrome)\nend", "    if n < 1\n        error(\"n must be positive\")\n\
    \    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindrome =\
    \ 0\n    odd_palindrome = 0\n    for i = 2 to n\n        if isPalindrome(i)\n\
    \            even_palindrome += 1\n        else\n            odd_palindrome +=\
    \ 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n < 1\n        return (0, 0)\n  \
    \  even_palindrome = 0\n    odd_palindrome = 0\n    for num in 1:n\n        if\
    \ num == reverse(num)\n            even_palindrome += 1\n        else\n      \
    \      odd_palindrome += 1\n    return (even_palindrome, odd_palindrome)\nend",
  "    if n < 1\n        return (0, 0)\n    even_palindromes = 0\n    odd_palindromes\
    \ = 0\n    for palindrome in palindromes(n)\n        if palindrome % 2 == 0\n\
    \            even_palindromes += 1\n        else\n            odd_palindromes\
    \ += 1\n    return (even_palindromes, odd_palindromes)\nend\n</cell>\n<text>\n\
    Problem 3\nWrite a function that takes in a positive integer n and returns the\
    \ number of palindromes that fall within the range(1, n), inclusive.", "    if\
    \ n < 1 \n        error(\"n should be positive\")\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for x in 1:n\n        if x == reverse(String(x))\n\
    \            even_palindrome += 1\n        else\n            odd_palindrome +=\
    \ 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<code language=julia-1.3>", "    if n < 1\n        return (0, 0)\n  \
    \  even_palindrome = 0\n    odd_palindrome = 0\n    for palindrome in palindromes(n)\n\
    \        if palindrome % 2 == 0\n            even_palindrome += 1\n        else\n\
    \            odd_palindrome += 1\n    return (even_palindrome, odd_palindrome)\n\
    end\n</cell>\n<code language=julia-1.0>", "    if n < 1\n        return (0, 0)\n\
    \    even_palindromes = 0\n    odd_palindromes = 0\n    for x in 1:n\n       \
    \ if x == rev(x)\n            even_palindromes += 1\n        else\n          \
    \  odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\nend\n\
    </cell>\n<code language=julia-1.0>", "    if n < 1\n        return (0, 0)\n  \
    \  even_palindromes = 0\n    odd_palindromes = 0\n    for x in 1:n\n        if\
    \ x == rev(x)\n            even_palindromes += 1\n        else\n            odd_palindromes\
    \ += 1\n    return (even_palindromes, odd_palindromes)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1\n        error(\"n should be positive\")\n    end\n    if n < 2\n\
    \        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome =\
    \ 0\n    for i = 2 to n\n        if isPalindrome(i)\n            even_palindrome\
    \ += 1\n        else\n            odd_palindrome += 1\n        end\n    end\n\
    \    return (even_palindrome, odd_palindrome)\nend\n</cell>\n<code language=julia-1.3>",
  "    if n < 1\n        error(\"n should be positive\")\n    end\n    if n < 2\n\
    \        return (1, 1)\n    end\n    even_palindromes = even_odd_palindromes(n\
    \ - 1)\n    odd_palindromes = even_odd_palindromes(n - 2)\n    return (sum(even_palindromes),\
    \ sum(odd_palindromes))\nend\n</cell>\n<code language=julia-1.3>", "    if n <\
    \ 1\n        return (0, 0)\n    even_palindromes = 0\n    odd_palindromes = 0\n\
    \    for x in 1:n\n        if x == rev(x)\n            even_palindromes += 1\n\
    \        else\n            odd_palindromes += 1\n    return (even_palindromes,\
    \ odd_palindromes)\nend\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ a positive integer n and returns the number of palindromes less than or equal\
    \ to n.", "    if n < 1\n        error(\"n must be positive\")\n    end\n    if\
    \ n < 2\n        return (1, 1)\n    end\n    even_palindromes = even_odd_palindromes(n)\n\
    \    odd_palindromes = even_odd_palindromes(n - 1)\n    return (sum(even_palindromes),\
    \ sum(odd_palindromes))\nend", "    if n < 1\n        return (0, 0)\n    even_palindromes\
    \ = 0\n    odd_palindromes = 0\n    for palindrome in palindromes(n)\n       \
    \ if palindrome % 2 == 0\n            even_palindromes += 1\n        else\n  \
    \          odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert even_odd_palindrome(3) == (1,\
    \ 2)\n@assert even_odd_palindrome(12) == (4, 6)\n</cell>\n<text>\nProblem 3\n\
    Write a Julia function palindromes(n) that returns the number of palindromes that\
    \ fall within the range(1, n), inclusive.", "    if n < 1\n        error(\"n should\
    \ be positive\")\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for i in 1:n\n        even_palindrome += isPalindrome(i)\n\
    \        odd_palindrome += !isPalindrome(i)\n    end\n    return (even_palindrome,\
    \ odd_palindrome)\nend\n</cell>\n<text>\nQuestion 3\nWrite a function that takes\
    \ a positive integer n and returns the number of palindromes that fall within\
    \ the range(1, n), inclusive.", "    if n < 1 \n        error(\"n should be positive\"\
    )\n    end\n    if n < 2 \n        return (1, 1)\n    end\n    even_palindromes\
    \ = even_odd_palindromes(n)\n    odd_palindromes = even_odd_palindromes(n - 1)\n\
    \    return (sum(even_palindromes), sum(odd_palindromes))\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n < 1\n        return (0, 0)\n    even_palindromes\
    \ = 0\n    odd_palindromes = 0\n    for palindrome in palindromes(n)\n       \
    \ if palindrome % 2 == 0\n            even_palindromes += 1\n        else\n  \
    \          odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n < 1\n        error(\"n should\
    \ be positive\")\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindromes\
    \ = even_odd_palindromes(n)\n    odd_palindromes = even_odd_palindromes(n-1)\n\
    \    return (length(even_palindromes), length(odd_palindromes))\nend", "    if\
    \ n < 1\n        error(\"n must be positive\")\n    end\n    if n < 2\n      \
    \  return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome = 0\n \
    \   for i = 2 to n\n        if isPalindrome(i)\n            even_palindrome +=\
    \ 1\n        else\n            odd_palindrome += 1\n        end\n    end\n   \
    \ return (even_palindrome, odd_palindrome)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1 \n        return (1, 1) \n    \n    if n == 1 \n        return (1,\
    \ 1) \n    \n    if n == 2 \n        return (1, 2) \n    \n    if n % 2 == 0 \n\
    \        even_palindromes = even_odd_palindrome(n / 2) \n        return even_palindromes\
    \ + even_palindromes[1] \n    \n    odd_palindromes = even_odd_palindrome(n /\
    \ 2) \n    return odd_palindromes[1] + odd_palindromes \nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1 \n        error(\"n should be positive\")\n    else if n < 2 \n  \
    \      return (1, 1)\n    else if n < 10 \n        return (1, 1)\n    else if\
    \ n < 100 \n        return (1, 2)\n    else if n < 1000 \n        return (2, 2)\n\
    \    else if n < 10000 \n        return (2, 3)\n    else if n < 100000 \n    \
    \    return (2, 4)\n    else if n < 1000000 \n        return (2, 5)\n    else\
    \ if n < 10000000 \n        return (2, 6)\n    else if n < 100000000 \n      \
    \  return (2, 7)\n    else if n < 1000000000 \n        return (2, 8)\n    else\
    \ if n < 10000000000 \n        return (2, 9)\n    else if n < 100000000000 \n\
    \        return (2, 10)\n    else if n < 1000000000000 \n        return (2, 11)\n\
    \    else if n < 10000000000000 \n        return (2, 12)\n    else if n < 100000000000000\
    \ \n        return (2, 13)\n    else if n < 1000000000000000 \n        return\
    \ (2, 14)\n    else if n < 10000000000000000 \n        return (2, 15)\n    else\
    \ if n < 100000000000000000 \n        return (2, 16)\n    else if n < 1000000000000000000\
    \ \n        return (2, 17)\n    else if n < 10000000000000000000 \n        return\
    \ (2, 18)\n    else if n < 100000000000000000000 \n        return (2, 19)\n  \
    \  else if n < 1000000000000000000000 \n        return (2, 20)\n    else if n\
    \ < 10000000000000000000000 \n        return (2, 21)\n    else if n < 100000000000000000000000\
    \ \n        return (2, 22)\n    else if n < 1000000000000000000000000 \n     \
    \   return (2, 23)\n    else if n < 10000000000000000000000000 \n        return\
    \ (2, 24)\n    else if n < 100000000000000000000000000 \n        return (2, 25)\n\
    \    else if n < 1000000000000000000000000000 \n        return (2, 26)\n    else\
    \ if n < 10000000000000000000000000000 \n        return (2, 27)\n    else if n\
    \ < 100000000000000000000000000000 \n        return (2, 28)\n    else if n < 1000000000000000000000000000000\
    \ \n        return (2, 29)\n    else if n < 10000000000000000000000000000000 \n\
    \        return (2, 30)\n    else if n < 100000000000000000000000000000000 \n\
    \        return (2, 31)\n    else if n < 1000000000000000000000000000000000 \n\
    \        return (2, 32)\n    else if n < 10000000000000000000000000000000000 \n\
    \        return (2, 33)\n    else if n < 100000000000000000000000000000000000\
    \ \n        return (2, 34)\n    else if n < 1000000000000000000000000000000000000\
    \ \n        return (2, 35)\n    else if n < 10000000000000000000000000000000000000\
    \ \n        return (2, 36)\n    else if n < 100000000000000000000000000000000000000\
    \ \n        return (2, 37)\n    else if n < 100000000000000000000000000", "  \
    \  if n < 1\n        return (0, 0)\n    even_palindrome = 0\n    odd_palindrome\
    \ = 0\n    for x in 1:n\n        if x == rev(x)\n            even_palindrome +=\
    \ 1\n        else\n            odd_palindrome += 1\n    return (even_palindrome,\
    \ odd_palindrome)\nend\n</cell>\n<text>\nProblem 3\nWrite a function that returns\
    \ the number of palindromes within a given range.", "    if n < 1 \n        error(\"\
    n should be positive\")\n    end\n    even_palindrome = 0\n    odd_palindrome\
    \ = 0\n    for x in 1:n\n        if x == reverse(String(x))\n            even_palindrome\
    \ += 1\n        else\n            odd_palindrome += 1\n        end\n    end\n\
    \    return (even_palindrome, odd_palindrome)\nend\n</cell>\n<text>\nProblem 3\n\
    Given a positive integer n, return a tuple that has the number of palindromes\
    \ less than or equal to n.", "    if n < 1\n        error(\"n should be positive\"\
    )\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for i = 2 to n\n        if isPalindrome(i)\n\
    \            even_palindrome += 1\n        else\n            odd_palindrome +=\
    \ 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<text>\nProblem 3\nWrite a Julia function that takes a positive integer\
    \ n and returns the number of palindromes that fall within the range(1, n), inclusive.",
  "    if n < 1\n        return 0, 0\n    even_palindrome = 0\n    odd_palindrome\
    \ = 0\n    for x in 1:n\n        if x == rev(x)\n            even_palindrome +=\
    \ 1\n        else\n            odd_palindrome += 1\n    return even_palindrome,\
    \ odd_palindrome\nend\n</cell>\n<code language=julia-1.3>", "    if n < 1 \n \
    \       error(\"n should be positive\")\n    else if n < 2\n        return (1,1)\n\
    \    else if n == 2\n        return (1,0)\n    else if n % 2 == 0\n        return\
    \ (0,1)\n    else if n % 2 == 1\n        return (1,0)\n    else\n        even_palindromes\
    \ = even_odd_palindrome(n - 2)\n        odd_palindromes = even_odd_palindrome(n\
    \ - 1)\n        return (even_palindromes[0] + odd_palindromes[0], even_palindromes[1]\
    \ + odd_palindromes[1])\nend", "    if n < 1 \n        return (1, 1) \n    else\
    \ if n < 2 \n        return (1, 1) \n    else if n % 2 == 0 \n        return (even_odd_palindrome(n\
    \ - 1), even_odd_palindrome(n - 2)) \n    else \n        return (even_odd_palindrome(n\
    \ - 1), even_odd_palindrome(n - 2)) \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1\n        error(\"n must be positive\")\n    end\n    if n < 2\n  \
    \      return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome = 0\n\
    \    for i in 1:n\n        if isPalindrome(i)\n            even_palindrome +=\
    \ 1\n        else\n            odd_palindrome += 1\n        end\n    end\n   \
    \ return (even_palindrome, odd_palindrome)\nend\n</cell>\n<code language=julia-1.3>",
  "    if n < 1 \n        error(\"n should be positive\")\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for x in 1:n\n        if x == reverse(String(x))\
    \ \n            even_palindrome += 1\n        else\n            odd_palindrome\
    \ += 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n < 1\n        error(\"n should be\
    \ positive\")\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindromes\
    \ = 0\n    odd_palindromes = 0\n    for i = 2 to n\n        if isPalindrome(i)\n\
    \            even_palindromes += 1\n        else\n            odd_palindromes\
    \ += 1\n        end\n    end\n    return (even_palindromes, odd_palindromes)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n < 1 \n        error(\"n should\
    \ be positive\")\n    else if n < 2 \n        return (1, 1)\n    else if n < 3\
    \ \n        return (1, 2)\n    else if n < 4 \n        return (1, 3)\n    else\
    \ if n < 5 \n        return (1, 4)\n    else if n < 6 \n        return (1, 5)\n\
    \    else if n < 7 \n        return (1, 6)\n    else if n < 8 \n        return\
    \ (1, 7)\n    else if n < 9 \n        return (1, 8)\n    else if n < 10 \n   \
    \     return (1, 9)\n    else if n < 11 \n        return (1, 10)\n    else if\
    \ n < 12 \n        return (1, 11)\n    else if n < 13 \n        return (1, 12)\n\
    \    else if n < 14 \n        return (1, 13)\n    else if n < 15 \n        return\
    \ (1, 14)\n    else if n < 16 \n        return (1, 15)\n    else if n < 17 \n\
    \        return (1, 16)\n    else if n < 18 \n        return (1, 17)\n    else\
    \ if n < 19 \n        return (1, 18)\n    else if n < 20 \n        return (1,\
    \ 19)\n    else if n < 21 \n        return (1, 20)\n    else if n < 22 \n    \
    \    return (1, 21)\n    else if n < 23 \n        return (1, 22)\n    else if\
    \ n < 24 \n        return (1, 23)\n    else if n < 25 \n        return (1, 24)\n\
    \    else if n < 26 \n        return (1, 25)\n    else if n < 27 \n        return\
    \ (1, 26)\n    else if n < 28 \n        return (1, 27)\n    else if n < 29 \n\
    \        return (1, 28)\n    else if n < 30 \n        return (1, 29)\n    else\
    \ if n < 31 \n        return (1, 30)\n    else if n < 32 \n        return (1,\
    \ 31)\n    else if n < 33 \n        return (1, 32)\n    else if n < 34 \n    \
    \    return (1, 33)\n    else if n < 35 \n        return (1, 34)\n    else if\
    \ n < 36 \n        return (1, 35)\n    else if n < 37 \n        return (1, 36)\n\
    \    else if n < 38 \n        return (1, 37)\n    else if n < 39 \n        return\
    \ (1, 38)\n    else if n < 40 \n        return (1, 39)\n    else if n < 41 \n\
    \        return (1, 40)\n    else if n < 42 \n        return (1, 41)\n    else\
    \ if n < 43 \n        return (1, 42)\n    else if n < 44 \n        return (1,\
    \ 43)\n    else if n < 45 \n        return (1, 44)\n    else if n < 46 \n    \
    \    return (1, 45)\n    else if n < 47 \n        return (1, 46)\n    else if\
    \ n < 48 \n        return (1, 47)\n    else if ", "    if n < 1 \n        error(\"\
    n should be positive\")\n    end\n    if n == 1 \n        return (1, 1)\n    end\n\
    \    even_palindromes = even_odd_palindrome(n - 1)\n    odd_palindromes = even_odd_palindrome(n\
    \ - 2)\n    return (even_palindromes[1] + odd_palindromes[1], even_palindromes[0]\
    \ + odd_palindromes[0])\nend\n</cell>\n<code language=julia-1.5>", "    if n <\
    \ 1 \n        error(\"n must be positive\")\n    end\n    if n < 2 \n        return\
    \ (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome = 0\n    for x\
    \ in 1:n\n        if x == n \n            return even_palindrome, odd_palindrome\n\
    \        end\n        if x % 2 == 0 \n            even_palindrome += x\n     \
    \   else\n            odd_palindrome += x\n        end\n    end\n    return even_palindrome,\
    \ odd_palindrome\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a positive integer n and returns the number of palindromes that fall within\
    \ the range(1, n), inclusive.", "    if n < 1 \n        error(\"n should be positive\"\
    )\n    end\n    if n == 1 \n        return (1, 1)\n    end\n    even_palindromes\
    \ = even_odd_palindrome(n/2)\n    odd_palindromes = even_odd_palindrome(n/2) \n\
    \    even_palindromes[1] += 1\n    odd_palindromes[1] += 1\n    return (even_palindromes[1],\
    \ odd_palindromes[1])\nend\n</cell>\n<code language=julia-1.5>", "    if n < 1\n\
    \        return (0, 0)\n    even_palindromes = 0\n    odd_palindromes = 0\n  \
    \  for x in 1:n\n        if x == rev(x)\n            even_palindromes += 1\n \
    \       else\n            odd_palindromes += 1\n    return (even_palindromes,\
    \ odd_palindromes)\nend\n</cell>\n<code language=julia-1.5>", "    if n < 1\n\
    \        error(\"n must be positive\")\n    end\n    if n < 2\n        return\
    \ (1, 1)\n    end\n    even_palindromes = even_odd_palindromes(n)\n    odd_palindromes\
    \ = even_odd_palindromes(n-1)\n    return (sum(even_palindromes), sum(odd_palindromes))\n\
    end", "    if n < 1\n        error(\"n must be positive\")\n    end\n    if n\
    \ < 2\n        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome\
    \ = 0\n    for i = 2 to n\n        if isPalindrome(i)\n            even_palindrome\
    \ += 1\n        else\n            odd_palindrome += 1\n        end\n    end\n\
    \    return (even_palindrome, odd_palindrome)\nend\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes a positive integer n and returns the number of palindromes\
    \ that fall within the range(1, n), inclusive.", "    if n < 1\n        return\
    \ 0, 0\n    even_palindromes = 0\n    odd_palindromes = 0\n    for palindrome\
    \ in palindromes(n)\n        if palindrome % 2 == 0\n            even_palindromes\
    \ += 1\n        else\n            odd_palindromes += 1\n    end\n    return even_palindromes,\
    \ odd_palindromes\nend\n</cell>\n<code language=julia-1.5>", "    if n < 1\n \
    \       error(\"n should be positive\")\n    end\n    even_palindrome = 0\n  \
    \  odd_palindrome = 0\n    for i in 1:n\n        if isPalindrome(i)\n        \
    \    even_palindrome += 1\n        else\n            odd_palindrome += 1\n   \
    \     end\n    end\n    return (even_palindrome, odd_palindrome)\nend", "    if\
    \ n < 1\n        return (0, 0)\n    even_palindrome = 0\n    odd_palindrome =\
    \ 0\n    for x in 1:n\n        if x == rev(x)\n            even_palindrome +=\
    \ 1\n        else\n            odd_palindrome += 1\n    return (even_palindrome,\
    \ odd_palindrome)\nend\n</cell>\n<code language=julia-1.0>", "    if n < 1\n \
    \       return (0, 0)\n    even_palindromes = 0\n    odd_palindromes = 0\n   \
    \ for x in 1:n\n        if x == rev(x)\n            even_palindromes += 1\n  \
    \      else\n            odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n < 1\n        error(\"n should\
    \ be positive\")\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for i = 2 to n\n        if isPalindrome(i)\n\
    \            even_palindrome += 1\n        else\n            odd_palindrome +=\
    \ 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n < 1\n        return 0, 0\n    if\
    \ n == 1\n        return 1, 0\n    if n == 2\n        return 1, 1\n    if n %\
    \ 2 == 0\n        return even_odd_palindrome(n - 2) + 1, even_odd_palindrome(n\
    \ - 1)\n    else\n        return even_odd_palindrome(n - 2) + 1, even_odd_palindrome(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.3>", "    if n < 1\n        return\
    \ 0, 0\n    if n == 1\n        return 1, 0\n    if n == 2\n        return 1, 1\n\
    \    if n % 2 == 0\n        even, odd = even_odd_palindrome(n / 2)\n        return\
    \ even + odd, even + odd\n    even, odd = even_odd_palindrome(n / 2)\n    even,\
    \ odd = even + odd, even + odd\n    even, odd = even + odd, even + odd\n    even,\
    \ odd = even + odd, even + odd\n    even, odd = even + odd, even + odd\n    even,\
    \ odd = even + odd, even + odd\n    even, odd = even + odd, even + odd\n    even,\
    \ odd = even + odd, even + odd\n    even, odd = even + odd, even + odd\n    even,\
    \ odd = even + odd, even + odd\n    even, odd = even + odd, even + odd\n    even,\
    \ odd = even + odd, even + odd\n    even, odd = even + odd, even + odd\n    even,\
    \ odd = even + odd, even + odd\n    even, odd = even + odd, even + odd\n    even,\
    \ odd = even + odd, even + odd\n    even, odd = even + odd, even + odd\n    even,\
    \ odd = even + odd, even + odd\n    even, odd = even + odd, even + odd\n    even,\
    \ odd = even + odd, even + odd\n    even, odd = even + odd, even + odd\n    even,\
    \ odd = even + odd, even + odd\n    even, odd = even + odd, even + odd\n    even,\
    \ odd = even + odd, even + odd\n    even, odd = even + odd, even + odd\n    even,\
    \ odd = even + odd, even + odd\n    even, odd = even + odd, even + odd\n    even,\
    \ odd = even + odd, even + odd\n    even, odd = even + odd, even + odd\n    even,\
    \ odd = even + odd, even + odd\n    even, odd = even + odd, even + odd\n    even,\
    \ odd = even + odd, even + odd\n    even, odd = even + odd, even + odd\n    even,\
    \ odd = even + odd, even + odd\n    even, odd = even + odd, even ", "    if n\
    \ < 1\n        error(\"n must be positive\")\n    end\n    even_palindrome = 0\n\
    \    odd_palindrome = 0\n    for x in 1:n\n        if x == reverse(String(x))\n\
    \            even_palindrome += 1\n        else\n            odd_palindrome +=\
    \ 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<code language=julia-1.0>", "    if n < 1\n        return (0, 0)\n  \
    \  even_palindromes = 0\n    odd_palindromes = 0\n    for x in 1:n\n        if\
    \ x == rev(x)\n            even_palindromes += 1\n        else\n            odd_palindromes\
    \ += 1\n    return (even_palindromes, odd_palindromes)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1 \n        return (1, 1)\n    even_palindromes = 0\n    odd_palindromes\
    \ = 0\n    for x in 1:n\n        if x == rev(x)\n            even_palindromes\
    \ += 1\n        else\n            odd_palindromes += 1\n    return (even_palindromes,\
    \ odd_palindromes)\nend\n</cell>\n<text>\nQuestion 9\nWrite a function that takes\
    \ a positive integer n and returns the number of palindromes that fall within\
    \ the range(1, n), inclusive.", "    if n < 1\n        error(\"n must be positive\"\
    )\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindromes\
    \ = 0\n    odd_palindromes = 0\n    for palindrome in reverse(range(1, n))\n \
    \       if palindrome == palindrome[::-1]\n            even_palindromes += 1\n\
    \        else\n            odd_palindromes += 1\n        end\n    end\n    return\
    \ (even_palindromes, odd_palindromes)\nend", "    if n < 1\n        error(\"n\
    \ should be positive\")\n    end\n    if n < 2\n        return (1, 1)\n    end\n\
    \    even_palindrome = 0\n    odd_palindrome = 0\n    for i = 2 to n\n       \
    \ if isPalindrome(i)\n            if isEven(i)\n                even_palindrome\
    \ += 1\n            else\n                odd_palindrome += 1\n            end\n\
    \        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a positive integer n and returns\
    \ the number of palindromes that fall within the range(1, n), inclusive.", " \
    \   if n < 1\n        error(\"n should be positive\")\n    end\n    if n < 2\n\
    \        return (1, 1)\n    end\n    even_palindromes = even_odd_palindromes(n\
    \ - 1)\n    odd_palindromes = even_odd_palindromes(n - 2)\n    return (sum(even_palindromes),\
    \ sum(odd_palindromes))\nend\n</cell>\n<code language=julia-1.5>", "    if n <\
    \ 1\n        error(\"n should be positive\")\n    end\n    even_palindrome = 0\n\
    \    odd_palindrome = 0\n    for x in 1:n\n        if x == reverse(String(x))\n\
    \            even_palindrome += 1\n        else\n            odd_palindrome +=\
    \ 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<code language=julia-1.4>", "    if n < 1 \n        return (1, 1)\n \
    \   \n    if n == 1 \n        return (1, 1)\n    \n    if n == 2 \n        return\
    \ (1, 2)\n    \n    if n % 2 == 0 \n        return (even_odd_palindrome(n / 2),\
    \ even_odd_palindrome(n / 2) + 1)\n    \n    return (even_odd_palindrome(n / 2)\
    \ + 1, even_odd_palindrome(n / 2))\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1\n        return (0, 0)\n    even_palindrome = 0\n    odd_palindrome\
    \ = 0\n    for x in 1:n\n        if x == rev(x)\n            even_palindrome +=\
    \ 1\n        else\n            odd_palindrome += 1\n    return (even_palindrome,\
    \ odd_palindrome)\nend\n</cell>\n<code language=julia-1.0>", "    if n < 1\n \
    \       error(\"n must be positive\")\n    end\n    even_palindrome = 0\n    odd_palindrome\
    \ = 0\n    for x in 1:n\n        if x == rev(x)\n            even_palindrome +=\
    \ 1\n        else\n            odd_palindrome += 1\n        end\n    end\n   \
    \ return (even_palindrome, odd_palindrome)\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive integer n and returns the number of palindromes\
    \ that fall within the range(1, n), inclusive.", "    if n < 1 \n        error(\"\
    n should be positive\")\n    else if n == 1 \n        return (1, 1)\n    else\
    \ \n        even_palindromes = even_odd_palindrome(n/2)\n        odd_palindromes\
    \ = even_odd_palindrome(n/2) + even_odd_palindrome(n/2) + even_odd_palindrome(n/2)\
    \ + even_odd_palindrome(n/2) + even_odd_palindrome(n/2) + even_odd_palindrome(n/2)\
    \ + even_odd_palindrome(n/2) + even_odd_palindrome(n/2) + even_odd_palindrome(n/2)\
    \ + even_odd_palindrome(n/2) + even_odd_palindrome(n/2) + even_odd_palindrome(n/2)\
    \ + even_odd_palindrome(n/2) + even_odd_palindrome(n/2) + even_odd_palindrome(n/2)\
    \ + even_odd_palindrome(n/2) + even_odd_palindrome(n/2) + even_odd_palindrome(n/2)\
    \ + even_odd_palindrome(n/2) + even_odd_palindrome(n/2) + even_odd_palindrome(n/2)\
    \ + even_odd_palindrome(n/2) + even_odd_palindrome(n/2) + even_odd_palindrome(n/2)\
    \ + even_odd_palindrome(n/2) + even_odd_palindrome(n/2) + even_odd_palindrome(n/2)\
    \ + even_odd_palindrome(n/2) + even_odd_palindrome(n/2) + even_odd_palindrome(n/2)\
    \ + even_odd_palindrome(n/2) + even_odd_palindrome(n/2) + even_odd_palindrome(n/2)\
    \ + even_odd_palindrome(n/2) + even_odd_palindrome(n/2) + even_odd_palindrome(n/2)\
    \ + even_odd_palindrome(n/2) + even_odd_palindrome(n/2) + even_odd_palindrome(n/2)\
    \ + even_odd_palindrome(n/2) + even_odd_palindrome(n/2) + even_odd_palindrome(n/2)\
    \ + ", "    if n < 1 \n        error(\"n must be positive\")\n    end\n    if\
    \ n < 2\n        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome\
    \ = 0\n    for palindrome in reverse(range(1, n))\n        if palindrome == palindrome[::-1]\n\
    \            even_palindrome += 1\n        else\n            odd_palindrome +=\
    \ 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<code language=julia-1.0>", "    if n < 1\n        return 0, 0\n    even_palindromes\
    \ = 0\n    odd_palindromes = 0\n    for palindrome in palindromes(n)\n       \
    \ if palindrome % 2 == 0\n            even_palindromes += 1\n        else\n  \
    \          odd_palindromes += 1\n    return even_palindromes, odd_palindromes\n\
    end\n</cell>\n<code language=julia-1.0>", "    if n < 1\n        error(\"n must\
    \ be positive\")\n    end\n    even_palindrome = 0\n    odd_palindrome = 0\n \
    \   for palindrome in 1:n\n        if palindrome == reverse(convert(palindrome))\n\
    \            even_palindrome += 1\n        else\n            odd_palindrome +=\
    \ 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<code language=julia-1.0>", "    if n < 1 \n        error(\"n must be\
    \ positive\")\n    end\n    if n == 1 \n        return (1, 1)\n    end\n    if\
    \ n == 2 \n        return (1, 2)\n    end\n    if n % 2 == 0 \n        return\
    \ even_odd_palindrome(n / 2), (n / 2)\n    end\n    even_palindromes, odd_palindromes\
    \ = even_odd_palindrome(n / 2), even_odd_palindrome(n / 2)\n    even_palindromes\
    \ += (n / 2)\n    odd_palindromes += (n / 2)\n    return even_palindromes, odd_palindromes\n\
    end", "    if n < 1 \n        error(\"n should be positive\")\n    else if n <\
    \ 2 \n        return (1, 1)\n    else if n < 3 \n        return (1, 2)\n    else\
    \ if n < 4 \n        return (1, 3)\n    else if n < 5 \n        return (2, 2)\n\
    \    else if n < 6 \n        return (2, 3)\n    else if n < 7 \n        return\
    \ (2, 4)\n    else if n < 8 \n        return (2, 5)\n    else if n < 9 \n    \
    \    return (2, 6)\n    else if n < 10 \n        return (2, 7)\n    else if n\
    \ < 11 \n        return (2, 8)\n    else if n < 12 \n        return (2, 9)\n \
    \   else if n < 13 \n        return (2, 10)\n    else if n < 14 \n        return\
    \ (2, 11)\n    else if n < 15 \n        return (2, 12)\n    else if n < 16 \n\
    \        return (2, 13)\n    else if n < 17 \n        return (2, 14)\n    else\
    \ if n < 18 \n        return (2, 15)\n    else if n < 19 \n        return (2,\
    \ 16)\n    else if n < 20 \n        return (2, 17)\n    else if n < 21 \n    \
    \    return (2, 18)\n    else if n < 22 \n        return (2, 19)\n    else if\
    \ n < 23 \n        return (2, 20)\n    else if n < 24 \n        return (2, 21)\n\
    \    else if n < 25 \n        return (2, 22)\n    else if n < 26 \n        return\
    \ (2, 23)\n    else if n < 27 \n        return (2, 24)\n    else if n < 28 \n\
    \        return (2, 25)\n    else if n < 29 \n        return (2, 26)\n    else\
    \ if n < 30 \n        return (2, 27)\n    else if n < 31 \n        return (2,\
    \ 28)\n    else if n < 32 \n        return (2, 29)\n    else if n < 33 \n    \
    \    return (2, 30)\n    else if n < 34 \n        return (2, 31)\n    else if\
    \ n < 35 \n        return (2, 32)\n    else if n < 36 \n        return (2, 33)\n\
    \    else if n < 37 \n        return (2, 34)\n    else if n < 38 \n        return\
    \ (2, 35)\n    else if n < 39 \n        return (2, 36)\n    else if n < 40 \n\
    \        return (2, 37)\n    else if n < 41 \n        return (2, 38)\n    else\
    \ if n < 42 \n        return (2, 39)\n    else if n < 43 \n        return (2,\
    \ 40)\n    else if n < 44 \n        return (2, 41)\n    else if n < 45 \n    \
    \    return (2, 42)\n    else if n < 46 \n        return (2, 43)\n    else if\
    \ n < 47 \n        return (2, 44)\n    else if n < 48 \n        return (2, 45)\n\
    \    else if n < 49", "    if n < 1\n        error(\"n must be positive\")\n \
    \   end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindrome = 0\n\
    \    odd_palindrome = 0\n    for i = 2 to n\n        if isPalindrome(i)\n    \
    \        even_palindrome += 1\n        else\n            odd_palindrome += 1\n\
    \        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n < 1\n        error(\"n should be positive\"\
    )\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindromes\
    \ = 0\n    odd_palindromes = 0\n    for palindrome in palindromes(n)\n       \
    \ if palindrome % 2 == 0\n            even_palindromes += 1\n        else\n  \
    \          odd_palindromes += 1\n        end\n    end\n    return (even_palindromes,\
    \ odd_palindromes)\nend\n</cell>\n<code language=julia-1.3>", "    if n < 1\n\
    \        error(\"n must be positive\")\n    end\n    if n < 2\n        return\
    \ (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome = 0\n    for i\
    \ = 2 to n\n        if isPalindrome(i)\n            if isEven(i)\n           \
    \     even_palindrome += 1\n            else\n                odd_palindrome +=\
    \ 1\n            end\n        end\n    end\n    return (even_palindrome, odd_palindrome)\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that takes in a positive integer\
    \ n and returns the number of palindromes that fall within the range(1, n), inclusive.",
  "    if n < 1\n        error(\"n must be positive\")\n    end\n    if n < 2\n  \
    \      return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome = 0\n\
    \    for i = 2 to n\n        if isPalindrome(i)\n            even_palindrome +=\
    \ 1\n        else\n            odd_palindrome += 1\n        end\n    end\n   \
    \ return (even_palindrome, odd_palindrome)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1\n        error(\"n should be positive\")\n    end\n    if n < 2\n\
    \        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome =\
    \ 0\n    for i = 2 to n\n        if isPalindrome(i)\n            even_palindrome\
    \ += 1\n        else\n            odd_palindrome += 1\n        end\n    end\n\
    \    return (even_palindrome, odd_palindrome)\nend\n</cell>\n<text>\nProblem 3\n\
    Write a Julia function that takes in an integer n and returns the number of palindromes\
    \ that fall within the range(1, n), inclusive.", "    if n < 1\n        error(\"\
    n should be positive\")\n    end\n    even_palindrome = 0\n    odd_palindrome\
    \ = 0\n    for x in 1:n\n        if x == rev(x)\n            even_palindrome +=\
    \ 1\n        else\n            odd_palindrome += 1\n        end\n    end\n   \
    \ return (even_palindrome, odd_palindrome)\nend\n</cell>\n<text>\nQ. Write a Julia\
    \ function to check whether a number is palindrome or not.", "    if n < 1\n \
    \       error(\"n should be positive\")\n    end\n    if n < 2\n        return\
    \ (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome = 0\n    for x\
    \ in 1:n\n        if x == reverse(String(x))\n            even_palindrome += 1\n\
    \        else\n            odd_palindrome += 1\n        end\n    end\n    return\
    \ (even_palindrome, odd_palindrome)\nend\n</cell>\n<code language=julia-1.4>",
  "    if n < 1\n        return (0, 0)\n    even_palindromes = 0\n    odd_palindromes\
    \ = 0\n    for palindrome in even_odd_palindromes(n)\n        if palindrome %\
    \ 2 == 0\n            even_palindromes += 1\n        else\n            odd_palindromes\
    \ += 1\n    return (even_palindromes, odd_palindromes)\nend", "    if n < 1\n\
    \        return (0, 0)\n    even_palindromes = 0\n    odd_palindromes = 0\n  \
    \  for palindrome in palindromes(n)\n        if palindrome % 2 == 0\n        \
    \    even_palindromes += 1\n        else\n            odd_palindromes += 1\n \
    \   return (even_palindromes, odd_palindromes)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1 \n        error(\"n should be positive\")\n    else if n < 2 \n  \
    \      return (1, 1)\n    else if n < 3 \n        return (1, 2)\n    else if n\
    \ < 4 \n        return (1, 3)\n    else if n < 5 \n        return (1, 4)\n   \
    \ else if n < 6 \n        return (1, 5)\n    else if n < 7 \n        return (1,\
    \ 6)\n    else if n < 8 \n        return (1, 7)\n    else if n < 9 \n        return\
    \ (1, 8)\n    else if n < 10 \n        return (1, 9)\n    else if n < 11 \n  \
    \      return (1, 10)\n    else if n < 12 \n        return (1, 11)\n    else if\
    \ n < 13 \n        return (1, 12)\n    else if n < 14 \n        return (1, 13)\n\
    \    else if n < 15 \n        return (1, 14)\n    else if n < 16 \n        return\
    \ (1, 15)\n    else if n < 17 \n        return (1, 16)\n    else if n < 18 \n\
    \        return (1, 17)\n    else if n < 19 \n        return (1, 18)\n    else\
    \ if n < 20 \n        return (1, 19)\n    else if n < 21 \n        return (1,\
    \ 20)\n    else if n < 22 \n        return (1, 21)\n    else if n < 23 \n    \
    \    return (1, 22)\n    else if n < 24 \n        return (1, 23)\n    else if\
    \ n < 25 \n        return (1, 24)\n    else if n < 26 \n        return (1, 25)\n\
    \    else if n < 27 \n        return (1, 26)\n    else if n < 28 \n        return\
    \ (1, 27)\n    else if n < 29 \n        return (1, 28)\n    else if n < 30 \n\
    \        return (1, 29)\n    else if n < 31 \n        return (1, 30)\n    else\
    \ if n < 32 \n        return (1, 31)\n    else if n < 33 \n        return (1,\
    \ 32)\n    else if n < 34 \n        return (1, 33)\n    else if n < 35 \n    \
    \    return (1, 34)\n    else if n < 36 \n        return (1, 35)\n    else if\
    \ n < 37 \n        return (1, 36)\n    else if n < 38 \n        return (1, 37)\n\
    \    else if n < 39 \n        return (1, 38)\n    else if n < 40 \n        return\
    \ (1, 39)\n    else if n < 41 \n        return (1, 40)\n    else if n < 42 \n\
    \        return (1, 41)\n    else if n < 43 \n        return (1, 42)\n    else\
    \ if n < 44 \n        return (1, 43)\n    else if n < 45 \n        return (1,\
    \ 44)\n    else if n < 46 \n        return (1, 45)\n    else if n < 47 \n    \
    \    return (1, 46)\n    else if n < 48 \n        return (1, 47)\n    else if ",
  "    if n < 1\n        return (0, 0)\n    even_palindromes = 0\n    odd_palindromes\
    \ = 0\n    for palindrome in palindromes(n)\n        if palindrome % 2 == 0\n\
    \            even_palindromes += 1\n        else\n            odd_palindromes\
    \ += 1\n    return (even_palindromes, odd_palindromes)\nend\n</cell>\n<code language=julia-1.0>",
  "    if n < 1\n        error(\"n should be positive\")\n    end\n    if n < 2\n\
    \        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome =\
    \ 0\n    for x in 1:n\n        if x == reverse(tostring(x))\n            even_palindrome\
    \ += 1\n        else\n            odd_palindrome += 1\n        end\n    end\n\
    \    return (even_palindrome, odd_palindrome)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1 \n        error(\"n must be positive\")\n    end\n    if n < 2 \n\
    \        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome =\
    \ 0\n    for x in 1:n\n        if x == n\n            even_palindrome += 1\n \
    \       elseif x % 2 == 0\n            even_palindrome += 1\n        else\n  \
    \          odd_palindrome += 1\n        end\n    end\n    return (even_palindrome,\
    \ odd_palindrome)\nend", "    if n < 1\n        return 0, 0\n    even_palindromes\
    \ = 0\n    odd_palindromes = 0\n    for x in 1:n\n        if x == rev(x)\n   \
    \         even_palindromes += 1\n        else\n            odd_palindromes +=\
    \ 1\n    return even_palindromes, odd_palindromes\nend\n</cell>\n<code language=julia-1.3>",
  "    if n < 1\n        return (0, 0)\n    even_palindrome = 0\n    odd_palindrome\
    \ = 0\n    for palindrome in even_odd_palindrome_range(n)\n        if palindrome\
    \ % 2 == 0\n            even_palindrome += 1\n        else\n            odd_palindrome\
    \ += 1\n    return (even_palindrome, odd_palindrome)\nend", "    if n < 1\n  \
    \      return (0, 0)\n    even_palindrome = 0\n    odd_palindrome = 0\n    for\
    \ x in 1:n\n        if x == rev(x)\n            even_palindrome += 1\n       \
    \ else\n            odd_palindrome += 1\n    return (even_palindrome, odd_palindrome)\n\
    end", "    if n < 1\n        error(\"n must be positive\")\n    end\n    if n\
    \ < 2\n        return (1, 1)\n    end\n    even_palindromes = even_odd_palindromes(n)\n\
    \    odd_palindromes = even_odd_palindromes(n - 1)\n    return (even_palindromes[1],\
    \ odd_palindromes[1])\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a positive integer n and returns the number of palindromes that fall within\
    \ the range(1, n), inclusive.", "    if n < 1\n        error(\"n should be positive\"\
    )\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindromes\
    \ = even_odd_palindromes(n)\n    odd_palindromes = even_odd_palindromes(n - 1)\n\
    \    return (sum(even_palindromes), sum(odd_palindromes))\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n < 1\n        error(\"n should be positive\"\
    )\n    end\n    even_palindrome = 0\n    odd_palindrome = 0\n    for x in 1:n\n\
    \        if x == reverse(String(x))\n            even_palindrome += 1\n      \
    \  else\n            odd_palindrome += 1\n        end\n    end\n    return (even_palindrome,\
    \ odd_palindrome)\nend\n</cell>\n<code language=julia-1.0>", "    if n < 1\n \
    \       return (0, 0)\n    even_palindromes = 0\n    odd_palindromes = 0\n   \
    \ for x in 1:n\n        if x == rev(x)\n            even_palindromes += 1\n  \
    \      else\n            odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n\
    end", "    if n < 1 \n        return (1, 1) \n    else if n == 1 \n        return\
    \ (1, 1) \n    else if n == 2 \n        return (1, 2) \n    else if n % 2 == 0\
    \ \n        return even_odd_palindrome(n - 1) \n    else \n        return even_odd_palindrome(n\
    \ - 2) \nend\n</cell>\n<text>\nProblem 3\nGiven a positive integer n, return a\
    \ tuple that has the number of palindromes that fall within the range(1, n), inclusive.",
  "    if n < 1 \n        error(\"n should be positive\")\n    end\n    if n < 2\n\
    \        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome =\
    \ 0\n    for i = 2 to n\n        if isPalindrome(i)\n            even_palindrome\
    \ += 1\n        else\n            odd_palindrome += 1\n        end\n    end\n\
    \    return (even_palindrome, odd_palindrome)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1 \n        error(\"n should be positive\")\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for x in 1:n\n        if x == reverse(String(x))\n\
    \            even_palindrome += 1\n        else\n            odd_palindrome +=\
    \ 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a Julia function that takes a positive integer\
    \ n and returns the number of palindromes that fall within the range(1, n), inclusive.",
  "    if n < 1\n        error(\"n should be positive\")\n    end\n    if n < 2\n\
    \        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome =\
    \ 0\n    for x in 1:n\n        if x == reverse(String(x))\n            even_palindrome\
    \ += 1\n        else\n            odd_palindrome += 1\n        end\n    end\n\
    \    return (even_palindrome, odd_palindrome)\nend\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes a positive integer n and returns the number of palindromes\
    \ less than or equal to n.", "    if n < 1\n        error(\"n should be positive\"\
    )\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for x in 1:n\n        if x == reverse(String(x))\n\
    \            even_palindrome += 1\n        else\n            odd_palindrome +=\
    \ 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n < 1\n        return (0, 0)\n  \
    \  even_palindrome = 0\n    odd_palindrome = 0\n    for x in 1:n\n        if x\
    \ == reverse(toInt(x))\n            even_palindrome += 1\n        else\n     \
    \       odd_palindrome += 1\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n < 1\n        error(\"n must be\
    \ positive\")\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for i in 1:n\n        if isPalindrome(i)\n\
    \            even_palindrome += 1\n        else\n            odd_palindrome +=\
    \ 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend",
  "    if n < 1\n        error(\"n should be positive\")\n    end\n    if n < 2\n\
    \        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome =\
    \ 0\n    for i = 2 to n\n        if isPalindrome(i)\n            if isEven(i)\n\
    \                even_palindrome += 1\n            else\n                odd_palindrome\
    \ += 1\n            end\n        end\n    end\n    return (even_palindrome, odd_palindrome)\n\
    end", "    if n < 1\n        error(\"n must be positive\")\n    end\n    if n\
    \ < 2\n        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome\
    \ = 0\n    for i in 1:n\n        if isPalindrome(i)\n            even_palindrome\
    \ += 1\n        else\n            odd_palindrome += 1\n        end\n    end\n\
    \    return (even_palindrome, odd_palindrome)\nend\n</cell>\n<code language=julia-1.3>",
  "    if n < 1\n        error(\"n should be positive\")\n    end\n    if n < 2\n\
    \        return (1, 1)\n    end\n    even_palindromes = 0\n    odd_palindromes\
    \ = 0\n    for i = 2 to n\n        if isPalindrome(i)\n            even_palindromes\
    \ += 1\n        else\n            odd_palindromes += 1\n        end\n    end\n\
    \    return (even_palindromes, odd_palindromes)\nend\n</cell>\n<code language=julia-1.0>",
  "    if n < 1\n        return (0, 0)\n    even_palindromes = 0\n    odd_palindromes\
    \ = 0\n    for x in 1:n\n        if x == rev(x)\n            even_palindromes\
    \ += 1\n        else\n            odd_palindromes += 1\n    return (even_palindromes,\
    \ odd_palindromes)\nend\n</cell>\n<code language=julia-1.5>", "    if n < 1\n\
    \        error(\"n must be positive\")\n    end\n    if n < 2\n        return\
    \ (1, 1)\n    end\n    even_palindromes = 0\n    odd_palindromes = 0\n    for\
    \ p in prime_range(n)\n        if isPalindrome(p)\n            even_palindromes\
    \ += 1\n        else\n            odd_palindromes += 1\n        end\n    end\n\
    \    return (even_palindromes, odd_palindromes)\nend", "    if n < 1\n       \
    \ return 0, 0\n    even_palindrome = 0\n    odd_palindrome = 0\n    for palindrome\
    \ in even_odd_palindrome_helper(n)\n        if palindrome % 2 == 0\n         \
    \   even_palindrome += 1\n        else\n            odd_palindrome += 1\n    return\
    \ even_palindrome, odd_palindrome\nend", "    if n < 1\n        return (0, 0)\n\
    \    even_palindromes = 0\n    odd_palindromes = 0\n    for palindrome in palindromes(n)\n\
    \        if palindrome % 2 == 0\n            even_palindromes += 1\n        else\n\
    \            odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n\
    end\n</cell>\n<code language=julia-1.3>\n@assert even_odd_palindrome(3) == (1,\
    \ 2)\n@assert even_odd_palindrome(12) == (4, 6)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive integer n and returns the number of palindromes\
    \ that fall within the range(1, n), inclusive.", "    if n < 1\n        error(\"\
    n should be positive\")\n    end\n    if n < 2\n        return (1, 1)\n    end\n\
    \    even_palindrome = 0\n    odd_palindrome = 0\n    for i = 2 to n\n       \
    \ if isPalindrome(i)\n            even_palindrome += 1\n        else\n       \
    \     odd_palindrome += 1\n        end\n    end\n    return (even_palindrome,\
    \ odd_palindrome)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive integer n and returns the number of palindromes less than or equal\
    \ to n.", "    if n < 1\n        error(\"n should be positive\")\n    end\n  \
    \  if n < 2\n        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome\
    \ = 0\n    for i = 2 to n\n        if isPalindrome(i)\n            even_palindrome\
    \ += 1\n        else\n            odd_palindrome += 1\n        end\n    end\n\
    \    return (even_palindrome, odd_palindrome)\nend\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes a positive integer n and returns the number of palindromes\
    \ that fall within the range(1, n), inclusive.", "    if n < 1\n        return\
    \ 0, 0\n    even_palindromes = 0\n    odd_palindromes = 0\n    for num in 1:n\n\
    \        if num == reverse(num)\n            even_palindromes += 1\n        else\n\
    \            odd_palindromes += 1\n    return even_palindromes, odd_palindromes\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n < 1 \n        error(\"n should\
    \ be positive\")\n    end\n    if n < 2 \n        return (1, 1)\n    end\n   \
    \ even_palindrome = 0\n    odd_palindrome = 0\n    for x in 1:n\n        if x\
    \ == n \n            return even_palindrome, odd_palindrome\n        end\n   \
    \     if x % 2 == 0 \n            even_palindrome += x\n        else\n       \
    \     odd_palindrome += x\n        end\n    end\n    return even_palindrome, odd_palindrome\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer\
    \ n and returns the number of palindromes less than or equal to n.", "    if n\
    \ < 1 \n        error(\"n should be positive\")\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for i = 1 to n \n        if isPalindrome(i)\
    \ \n            even_palindrome += 1 \n        else \n            odd_palindrome\
    \ += 1 \n        end \n    end \n    return (even_palindrome, odd_palindrome)\n\
    end ", "    if n < 1\n        error(\"n should be positive\")\n    end\n    if\
    \ n < 2\n        return (1, 1)\n    end\n    even_palindromes = 0\n    odd_palindromes\
    \ = 0\n    for x in 1:n\n        if x == reverse(String(x))\n            even_palindromes\
    \ += 1\n        else\n            odd_palindromes += 1\n        end\n    end\n\
    \    return (even_palindromes, odd_palindromes)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1 \n        error(\"n should be positive\")\n    end\n    if n < 2 \n\
    \        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome =\
    \ 0\n    for x in 1:n\n        if x == n\n            continue\n        end\n\
    \        if x == n-1\n            break\n        end\n        if x % 2 == 0\n\
    \            even_palindrome += 1\n        else\n            odd_palindrome +=\
    \ 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<code language=julia-1.4>", "    if n < 1\n        return (0, 0)\n  \
    \  if n == 1\n        return (1, 0)\n    if n == 2\n        return (0, 1)\n  \
    \  if n % 2 == 0\n        return (even_odd_palindrome(n / 2), even_odd_palindrome(n\
    \ / 2) + 1)\n    else\n        return (even_odd_palindrome(n / 2) + 1, even_odd_palindrome(n\
    \ / 2))\nend", "    if n < 1\n        error(\"n should be positive\")\n    end\n\
    \    even_palindrome = 0\n    odd_palindrome = 0\n    for x in 1:n\n        if\
    \ x == rev(x)\n            even_palindrome += 1\n        else\n            odd_palindrome\
    \ += 1\n        end\n    end\n    return even_palindrome, odd_palindrome\nend\n\
    </cell>\n<code language=julia-1.3>", "    if n < 1\n        return (0, 0)\n  \
    \  even_palindrome = 0\n    odd_palindrome = 0\n    for x in 1:n\n        if x\
    \ == rev(x)\n            even_palindrome += 1\n        else\n            odd_palindrome\
    \ += 1\n    return (even_palindrome, odd_palindrome)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1\n        error(\"n should be positive\")\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for palindrome in palindromes(n)\n        if\
    \ palindrome % 2 == 0\n            even_palindrome += 1\n        else\n      \
    \      odd_palindrome += 1\n        end\n    end\n    return (even_palindrome,\
    \ odd_palindrome)\nend\n</cell>\n<code language=julia-1.5>", "    if n < 1\n \
    \       return 0, 0\n    even_palindrome = 0\n    odd_palindrome = 0\n    for\
    \ x in 1:n\n        even_palindrome += x % 2 == 0\n        odd_palindrome += x\
    \ % 2 != 0\n    return even_palindrome, odd_palindrome\nend", "    if n < 1 \n\
    \        return (1, 1)\n    \n    if n < 2 \n        return (1, 2)\n    \n   \
    \ if n % 2 == 0 \n        return even_odd_palindrome(n - 1), (n - 1)\n    \n \
    \   odd_palindromes = even_odd_palindrome(n - 2)\n    \n    even_palindromes =\
    \ odd_palindromes[1]\n    \n    return even_palindromes, odd_palindromes[1]\n\
    end\n</cell>\n<code language=julia-1.3>", "    if n < 1\n        error(\"n should\
    \ be positive\")\n    end\n    even_palindrome = 0\n    odd_palindrome = 0\n \
    \   for i = 2 to n\n        if isPalindrome(i)\n            even_palindrome +=\
    \ 1\n        else\n            odd_palindrome += 1\n        end\n    end\n   \
    \ return (even_palindrome, odd_palindrome)\nend\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes a positive integer n and returns the number of palindromes\
    \ that fall within the range(1, n), inclusive.", "    if n < 1\n        return\
    \ (0, 0)\n    even_palindrome = 0\n    odd_palindrome = 0\n    for x in 1:n\n\
    \        if x == rev(x)\n            even_palindrome += 1\n        else\n    \
    \        odd_palindrome += 1\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<code language=julia-1.0>", "    if n < 1\n        return 0, 0\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for palindrome in palindromes(n)\n        if\
    \ palindrome % 2 == 0\n            even_palindrome += 1\n        else\n      \
    \      odd_palindrome += 1\n    return even_palindrome, odd_palindrome\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n < 1\n        return 0, 0\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for i in 1:n\n        if isPalindrome(i)\n\
    \            even_palindrome += 1\n        else\n            odd_palindrome +=\
    \ 1\n    return even_palindrome, odd_palindrome\nend", "    if n < 1 \n      \
    \  error(\"n must be positive\")\n    end\n    if n < 2 \n        return (1, 1)\n\
    \    end\n    even_palindromes = 0\n    odd_palindromes = 0\n    for palindrome\
    \ in palindromes(n) \n        if palindrome % 2 == 0 \n            even_palindromes\
    \ += 1 \n        else \n            odd_palindromes += 1 \n        end\n    end\n\
    \    return (even_palindromes, odd_palindromes)\nend\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes in a positive integer n and returns the number\
    \ of palindromes less than or equal to n.", "    if n < 1\n        error(\"n must\
    \ be positive\")\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindromes\
    \ = even_odd_palindromes(n)\n    odd_palindromes = even_odd_palindromes(n-1)\n\
    \    return (even_palindromes.even, odd_palindromes.odd)\nend", "    if n < 1\n\
    \        return 0, 0\n    even_palindrome = 0\n    odd_palindrome = 0\n    for\
    \ x in 1:n\n        if x == rev(x)\n            even_palindrome += 1\n       \
    \ else\n            odd_palindrome += 1\n    return even_palindrome, odd_palindrome\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n < 1\n        return (0, 0)\n\
    \    even_palindromes = 0\n    odd_palindromes = 0\n    for palindrome in palindromes(n)\n\
    \        if palindrome % 2 == 0\n            even_palindromes += 1\n        else\n\
    \            odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n\
    end\n</cell>\n<code language=julia-1.3>", "    if n < 1\n        return 0, 0\n\
    \    even_palindromes = 0\n    odd_palindromes = 0\n    for x in 1:n\n       \
    \ if x == rev(x)\n            even_palindromes += 1\n        else\n          \
    \  odd_palindromes += 1\n    return even_palindromes, odd_palindromes\nend", " \
    \   if n < 1 \n        error(\"n must be positive\")\n    end\n    if n < 2 \n\
    \        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome =\
    \ 0\n    for palindrome in reverse(range(1, n)) \n        if palindrome == palindrome[::-1]\
    \ \n            even_palindrome += 1 \n        else \n            odd_palindrome\
    \ += 1 \n        end\n    end\n    return (even_palindrome, odd_palindrome)\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that takes in an integer n and\
    \ returns the number of palindromes less than or equal to n.", "    if n < 1\n\
    \        error(\"n should be positive\")\n    end\n    even_palindrome = 0\n \
    \   odd_palindrome = 0\n    for palindrome in palindromes(n)\n        if palindrome\
    \ % 2 == 0\n            even_palindrome += 1\n        else\n            odd_palindrome\
    \ += 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of palindromes that fall within the range(1, n), inclusive.",
  "    if n < 1 \n        return (0, 0) \n    else if n < 2 \n        return (1, 1)\
    \ \n    else if n < 3 \n        return (1, 2) \n    else if n < 4 \n        return\
    \ (2, 2) \n    else if n < 5 \n        return (2, 3) \n    else if n < 6 \n  \
    \      return (3, 3) \n    else if n < 7 \n        return (3, 4) \n    else if\
    \ n < 8 \n        return (4, 4) \n    else if n < 9 \n        return (4, 5) \n\
    \    else if n < 10 \n        return (5, 5) \n    else if n < 11 \n        return\
    \ (5, 6) \n    else \n        return (6, 6) \nend \n</cell>\n<code language=julia-1.0>",
  "    if n < 1\n        error(\"n must be positive\")\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for palindrome in palindromes(n)\n        if\
    \ palindrome % 2 == 0\n            even_palindrome += 1\n        else\n      \
    \      odd_palindrome += 1\n        end\n    end\n    return even_palindrome,\
    \ odd_palindrome\nend\n</cell>\n<text>\nExercise 2\nWrite a function called palindromes(n)\
    \ that returns a list of all positive integer palindromes less than or equal to\
    \ n.", "    if n < 1 \n        error(\"n must be positive\")\n    end\n    if\
    \ n < 2 \n        return (1, 1)\n    end\n    even_palindromes = even_odd_palindromes(n)\n\
    \    odd_palindromes = even_odd_palindromes(n - 1)\n    return (length(even_palindromes),\
    \ length(odd_palindromes))\nend", "    if n < 1\n        error(\"n should be positive\"\
    )\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for i in 1:n\n        even_palindrome += i\n\
    \        odd_palindrome += i\n    end\n    return (even_palindrome, odd_palindrome)\n\
    end\n</cell>\n<text>\nProblem 3\nGiven a positive integer n, return a tuple that\
    \ has the number of palindromes that fall within the range(1, n), inclusive.",
  "    if n < 1\n        error(\"n must be positive\")\n    end\n    if n < 2\n  \
    \      return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome = 0\n\
    \    for x in 1:n\n        if x == reverse(String(x))\n            even_palindrome\
    \ += 1\n        else\n            odd_palindrome += 1\n        end\n    end\n\
    \    return (even_palindrome, odd_palindrome)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1\n        error(\"n should be positive\")\n    end\n    if n < 2\n\
    \        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome =\
    \ 0\n    for i = 2 to n\n        if isPalindrome(i)\n            even_palindrome\
    \ += 1\n        else\n            odd_palindrome += 1\n        end\n    end\n\
    \    return (even_palindrome, odd_palindrome)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1\n        error(\"n should be positive\")\n    end\n    if n < 2\n\
    \        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome =\
    \ 0\n    for x in 1:n\n        if x == rev(x)\n            even_palindrome +=\
    \ 1\n        else\n            odd_palindrome += 1\n        end\n    end\n   \
    \ return (even_palindrome, odd_palindrome)\nend\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes a positive integer n and returns the number of palindromes\
    \ that fall within the range(1, n), inclusive.", "    if n < 1\n        error(\"\
    n must be positive\")\n    end\n    if n < 2\n        return (1, 1)\n    end\n\
    \    even_palindrome = 0\n    odd_palindrome = 0\n    for i = 2 to n\n       \
    \ if isPalindrome(i)\n            even_palindrome += 1\n        else\n       \
    \     odd_palindrome += 1\n        end\n    end\n    return (even_palindrome,\
    \ odd_palindrome)\nend\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ in a positive integer n and returns the number of palindromes less than or equal\
    \ to n.", "    if n < 1\n        error(\"n must be positive\")\n    end\n    if\
    \ n < 2\n        return (1, 1)\n    end\n    even_palindromes = even_odd_palindromes(n)\n\
    \    odd_palindromes = even_odd_palindromes(n-1)\n    return (length(even_palindromes),\
    \ length(odd_palindromes))\nend\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that takes in a positive integer n and returns the number of palindromes that\
    \ fall within the range(1, n), inclusive.", "    if n < 1\n        error(\"n should\
    \ be positive\")\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindromes\
    \ = even_odd_palindromes(n)\n    odd_palindromes = even_odd_palindromes(n - 1)\n\
    \    return (sum(even_palindromes), sum(odd_palindromes))\nend", "    if n < 1\
    \ \n        error(\"n should be positive\")\n    end\n    if n < 2 \n        return\
    \ (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome = 0\n    for x\
    \ in 1:n\n        if x == reverse(String(x)) \n            even_palindrome +=\
    \ 1\n        else\n            odd_palindrome += 1\n        end\n    end\n   \
    \ return (even_palindrome, odd_palindrome)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1\n        error(\"n should be positive\")\n    end\n    if n < 2\n\
    \        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome =\
    \ 0\n    for x in 1:n\n        if x == rev(x)\n            even_palindrome +=\
    \ 1\n        else\n            odd_palindrome += 1\n        end\n    end\n   \
    \ return (even_palindrome, odd_palindrome)\nend\n</cell>\n<code language=julia-1.3>",
  "    if n < 1\n        error(\"n must be positive\")\n    end\n    if n < 2\n  \
    \      return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome = 0\n\
    \    for i = 2 to n\n        if isPalindrome(i)\n            even_palindrome +=\
    \ 1\n        else\n            odd_palindrome += 1\n        end\n    end\n   \
    \ return (even_palindrome, odd_palindrome)\nend\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes a positive integer n and returns the number of palindromes\
    \ less than or equal to n.", "    if n < 1\n        error(\"n should be positive\"\
    )\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindromes\
    \ = 0\n    odd_palindromes = 0\n    for x in 1:n\n        if x == reverse(String(x))\n\
    \            even_palindromes += 1\n        else\n            odd_palindromes\
    \ += 1\n        end\n    end\n    return (even_palindromes, odd_palindromes)\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that takes a positive integer\
    \ n and returns the number of palindromes that fall within the range(1, n), inclusive.",
  "    if n < 1 \n        error(\"n should be positive\")\n    else if n < 2 \n  \
    \      return (1, 1)\n    else if n < 3 \n        return (1, 2)\n    else if n\
    \ < 4 \n        return (2, 2)\n    else if n < 5 \n        return (2, 3)\n   \
    \ else if n < 6 \n        return (2, 4)\n    else if n < 7 \n        return (2,\
    \ 5)\n    else if n < 8 \n        return (2, 6)\n    else if n < 9 \n        return\
    \ (2, 7)\n    else if n < 10 \n        return (2, 8)\n    else if n < 11 \n  \
    \      return (2, 9)\n    else if n < 12 \n        return (3, 9)\n    else if\
    \ n < 13 \n        return (3, 10)\n    else if n < 14 \n        return (3, 11)\n\
    \    else if n < 15 \n        return (3, 12)\n    else if n < 16 \n        return\
    \ (3, 13)\n    else if n < 17 \n        return (3, 14)\n    else if n < 18 \n\
    \        return (3, 15)\n    else if n < 19 \n        return (3, 16)\n    else\
    \ if n < 20 \n        return (3, 17)\n    else if n < 21 \n        return (3,\
    \ 18)\n    else if n < 22 \n        return (3, 19)\n    else if n < 23 \n    \
    \    return (3, 20)\n    else if n < 24 \n        return (3, 21)\n    else if\
    \ n < 25 \n        return (3, 22)\n    else if n < 26 \n        return (3, 23)\n\
    \    else if n < 27 \n        return (3, 24)\n    else if n < 28 \n        return\
    \ (3, 25)\n    else if n < 29 \n        return (3, 26)\n    else if n < 30 \n\
    \        return (3, 27)\n    else if n < 31 \n        return (3, 28)\n    else\
    \ if n < 32 \n        return (3, 29)\n    else if n < 33 \n        return (3,\
    \ 30)\n    else if n < 34 \n        return (3, 31)\n    else if n < 35 \n    \
    \    return (3, 32)\n    else if n < 36 \n        return (3, 33)\n    else if\
    \ n < 37 \n        return (3, 34)\n    else if n < 38 \n        return (3, 35)\n\
    \    else if n < 39 \n        return (3, 36)\n    else if n < 40 \n        return\
    \ (3, 37)\n    else if n < 41 \n        return (3, 38)\n    else if n < 42 \n\
    \        return (3, 39)\n    else if n < 43 \n        return (3, 40)\n    else\
    \ if n < 44 \n        return (3, 41)\n    else if n < 45 \n        return (3,\
    \ 42)\n    else if n < 46 \n        return (3, 43)\n    else if n < 47 \n    \
    \    return (3, 44)\n    else if n < 48 \n        return (3, 45)\n    else if\
    \ n < 49", "    if n < 1 \n        error(\"n must be positive\")\n    end\n  \
    \  if n < 2 \n        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome\
    \ = 0\n    for x in 1:n\n        if x == n \n            return even_palindrome,\
    \ odd_palindrome\n        end\n        if x % 2 == 0 \n            even_palindrome\
    \ += x\n        else\n            odd_palindrome += x\n        end\n    end\n\
    \    return even_palindrome, odd_palindrome\nend\n</cell>\n<text>\nQuestion 7:\
    \ Write a Julia function that takes a positive integer n and returns the number\
    \ of palindromes that fall within the range(1, n), inclusive.", "    if n < 1\n\
    \        return (0, 0)\n    \n    even_palindromes = 0\n    odd_palindromes =\
    \ 0\n    \n    for palindrome in palindromes(n)\n        if palindrome % 2 ==\
    \ 0\n            even_palindromes += 1\n        else\n            odd_palindromes\
    \ += 1\n    end\n    \n    return (even_palindromes, odd_palindromes)\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n < 1\n        error(\"n should be positive\"\
    )\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindromes\
    \ = even_odd_palindromes(n)\n    odd_palindromes = even_odd_palindromes(n - 1)\n\
    \    return (sum(even_palindromes), sum(odd_palindromes))\nend\n</cell>\n<text>\n\
    Problem 3\nWrite a Julia function that takes a positive integer n and returns\
    \ the number of palindromes that fall within the range(1, n), inclusive.", " \
    \   if n < 1 \n        error(\"n must be positive\")\n    else if n < 2 \n   \
    \     return (1, 1)\n    else if n == 2 \n        return (1, 2)\n    else \n \
    \       even_palindromes = even_odd_palindrome(n - 2)\n        odd_palindromes\
    \ = even_odd_palindrome(n - 1)\n        return (even_palindromes[0] + odd_palindromes[0],\
    \ even_palindromes[1] + odd_palindromes[1])\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1\n        return 0, 0\n    even_palindromes = 0\n    odd_palindromes\
    \ = 0\n    for palindrome in palindromes(n)\n        if palindrome % 2 == 0\n\
    \            even_palindromes += 1\n        else\n            odd_palindromes\
    \ += 1\n    return even_palindromes, odd_palindromes\nend", "    if n < 1\n  \
    \      error(\"n must be positive\")\n    end\n    if n < 2\n        return (1,\
    \ 1)\n    end\n    even_palindrome = 0\n    odd_palindrome = 0\n    for i = 2\
    \ to n\n        if isPalindrome(i)\n            even_palindrome += 1\n       \
    \ else\n            odd_palindrome += 1\n        end\n    end\n    return (even_palindrome,\
    \ odd_palindrome)\nend\n</cell>\n<text>\nProblem 3\nGiven a positive integer n,\
    \ return a tuple that has the number of palindromes that fall within the range(1,\
    \ n), inclusive.", "    if n < 1\n        return 0, 0\n    if n == 1\n       \
    \ return 1, 0\n    if n == 2\n        return 0, 1\n    if n % 2 == 0\n       \
    \ return even_odd_palindrome(n - 1), 1\n    else\n        return even_odd_palindrome(n\
    \ - 1), 0\nend\n</cell>\n<code language=julia-1.5>", "    if n < 1\n        return\
    \ (0, 0)\n    even_palindrome = 0\n    odd_palindrome = 0\n    for palindrome\
    \ in palindromes(n)\n        if palindrome % 2 == 0\n            even_palindrome\
    \ += 1\n        else\n            odd_palindrome += 1\n    return (even_palindrome,\
    \ odd_palindrome)\nend", "    if n < 1\n        error(\"n must be positive\")\n\
    \    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindromes =\
    \ 0\n    odd_palindromes = 0\n    for i = 2 to n\n        if isPalindrome(i)\n\
    \            even_palindromes += 1\n        else\n            odd_palindromes\
    \ += 1\n        end\n    end\n    return (even_palindromes, odd_palindromes)\n\
    end", "    if n < 1\n        error(\"n must be positive\")\n    end\n    if n\
    \ < 2\n        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome\
    \ = 0\n    for i = 2 to n\n        if isPalindrome(i)\n            even_palindrome\
    \ += 1\n        else\n            odd_palindrome += 1\n        end\n    end\n\
    \    return (even_palindrome, odd_palindrome)\nend", "    if n < 1\n        error(\"\
    n must be positive\")\n    end\n    if n < 2\n        return (1, 1)\n    end\n\
    \    even_palindrome = 0\n    odd_palindrome = 0\n    for i in 1:n\n        if\
    \ i%2 == 0\n            even_palindrome += 1\n        else\n            odd_palindrome\
    \ += 1\n        end\n    end\n    return (even_palindrome, odd_palindrome)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n < 1\n        error(\"n must be\
    \ positive\")\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindromes\
    \ = 0\n    odd_palindromes = 0\n    for palindrome in palindromes(n)\n       \
    \ if palindrome % 2 == 0\n            even_palindromes += 1\n        else\n  \
    \          odd_palindromes += 1\n        end\n    end\n    return (even_palindromes,\
    \ odd_palindromes)\nend\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ in an integer n and returns the number of palindromes that fall within the range(1,\
    \ n), inclusive.", "    if n < 1 \n        return (1, 1) \n    \n    even_palindromes\
    \ = 0\n    odd_palindromes = 0\n    \n    for x in 1:n\n        if x == rev(x)\n\
    \            even_palindromes += 1\n        else\n            odd_palindromes\
    \ += 1\n    end\n    \n    return (even_palindromes, odd_palindromes)\nend", " \
    \   if n < 1\n        return 0, 0\n    even_palindrome = 0\n    odd_palindrome\
    \ = 0\n    for x in 1:n\n        if x == rev(x)\n            even_palindrome +=\
    \ 1\n        else\n            odd_palindrome += 1\n    return even_palindrome,\
    \ odd_palindrome\nend\n</cell>\n<code language=julia-1.0>", "    if n < 1\n  \
    \      return (0, 0)\n    even_palindromes = 0\n    odd_palindromes = 0\n    for\
    \ x in 1:n\n        if x == rev(x)\n            even_palindromes += 1\n      \
    \  else\n            odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n\
    end\n</cell>\n<text>\nProblem 3\nGiven a positive integer n, return a tuple that\
    \ has the number of palindromes that fall within the range(1, n), inclusive.",
  "    if n < 1\n        error(\"n should be positive\")\n    end\n    if n < 2\n\
    \        return (1, 1)\n    end\n    even_palindrome = 0\n    odd_palindrome =\
    \ 0\n    for i = 2 to n\n        if isPalindrome(i)\n            even_palindrome\
    \ += 1\n        else\n            odd_palindrome += 1\n        end\n    end\n\
    \    return (even_palindrome, odd_palindrome)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 1\n        error(\"n must be positive\")\n    end\n    if n < 2\n  \
    \      return (1, 1)\n    end\n    even_palindromes = even_odd_palindrome_helper(n)\n\
    \    odd_palindromes = even_odd_palindrome_helper(n - 1)\n    return (even_palindromes[1],\
    \ odd_palindromes[1])\nend", "    if n < 1\n        error(\"n should be positive\"\
    )\n    end\n    if n < 2\n        return (1, 1)\n    end\n    even_palindrome\
    \ = 0\n    odd_palindrome = 0\n    for i in 1:n\n        even_palindrome += isPalindrome(i)\n\
    \        odd_palindrome += isPalindrome(n - i)\n    end\n    return (even_palindrome,\
    \ odd_palindrome)\nend\n</cell>\n<code language=julia-1.0>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
