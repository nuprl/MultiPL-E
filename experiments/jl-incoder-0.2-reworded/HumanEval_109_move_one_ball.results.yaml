language: jl
name: HumanEval_109_move_one_ball
results:
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length==0\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp82akzdvi.jl:1\nin expression starting at /tmp/tmp82akzdvi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length==0\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukcx6fxv.jl:1\nin expression starting at /tmp/tmpukcx6fxv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length==0 \n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuuczc4cr.jl:1\nin expression starting at /tmp/tmpuuczc4cr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyryoq7y9.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyryoq7y9.jl:1\n\
    in expression starting at /tmp/tmpyryoq7y9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp42w1bx7p.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp42w1bx7p.jl:1\n\
    in expression starting at /tmp/tmp42w1bx7p.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqttbgc6_.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqttbgc6_.jl:1\n\
    in expression starting at /tmp/tmpqttbgc6_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 1\n        return true\n    else\n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpwv2nfa26.jl:30\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwv2nfa26.jl:1\n\
    in expression starting at /tmp/tmpwv2nfa26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7ef0rxie.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7ef0rxie.jl:1\n\
    in expression starting at /tmp/tmp7ef0rxie.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdmhpu74_.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdmhpu74_.jl:1\n\
    in expression starting at /tmp/tmpdmhpu74_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length==0\n        return true\n    end\n    \n    arr1=arr\n \
    \   arr2=arr\n    \n    for i in 1:length(arr)-1\n        arr2[i]=arr2[i+1]\n\
    \    end\n    \n    arr3=arr2\n    \n    for i in 1:length(arr)-1\n        arr3[i]=arr3[i+1]\n\
    \    end\n    \n    arr4=arr3\n    \n    for i in 1:length(arr)-1\n        arr4[i]=arr4[i+1]\n\
    \    end\n    \n    arr5=arr4\n    \n    for i in 1:length(arr)-1\n        arr5[i]=arr5[i+1]\n\
    \    end\n    \n    arr6=arr5\n    \n    for i in 1:length(arr)-1\n        arr6[i]=arr6[i+1]\n\
    \    end\n    \n    arr7=arr6\n    \n    for i in 1:length(arr)-1\n        arr7[i]=arr7[i+1]\n\
    \    end\n    \n    arr8=arr7\n    \n    for i in 1:length(arr)-1\n        arr8[i]=arr8[i+1]\n\
    \    end\n    \n    arr9=arr8\n    \n    for i in 1:length(arr)-1\n        arr9[i]=arr9[i+1]\n\
    \    end\n    \n    arr10=arr9\n    \n    for i in 1:length(arr)-1\n        arr10[i]=arr10[i+1]\n\
    \    end\n    \n    arr11=arr10\n    \n    for i in 1:length(arr)-1\n        arr11[i]=arr11[i+1]\n\
    \    end\n    \n    arr12=arr11\n    \n    for i in 1:length(arr)-1\n        arr12[i]=arr12[i+1]\n\
    \    end\n    \n    arr13=arr12\n    \n    for i in 1:length(arr)-1\n        arr13[i]=arr13[i+1]\n\
    \    end\n    \n    arr14=arr13\n    \n    for i in 1:length(arr)-1\n        arr14[i]=arr14[i+1]\n\
    \    end\n    \n    arr15=arr14\n    \n    for i in 1:length(arr)-1\n        arr15[i]=arr15[i+1]\n\
    \    end\n    \n    arr16=arr15\n    \n    for i in 1:length(arr)-1\n        arr16[i]=arr16[i+1]\n\
    \    end\n    \n    arr17=arr16\n    \n    for i in 1:length(arr)-1\n        arr17[i]=arr17[i+1]\n\
    \    end\n    \n    arr18=arr17\n    \n    for i in 1:length(arr)-1\n        arr18[i]=arr18[i+1]\n\
    \    end\n    \n    arr19=arr18\n    \n    for i in 1:length(arr)-1\n        arr19[i]=arr\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpfsa4rtdw.jl:139\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfsa4rtdw.jl:1\n\
    in expression starting at /tmp/tmpfsa4rtdw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27h09o0c.jl:1\nin expression starting at /tmp/tmp27h09o0c.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 1\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp89p7j5iu.jl:1\nin expression starting at /tmp/tmp89p7j5iu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    arr = sort(arr)\n \
    \   \n    if arr[1] == arr[2]\n        return true\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzsn4b40r.jl:1\nin expression starting at /tmp/tmpzsn4b40r.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp25chop45.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp25chop45.jl:1\n\
    in expression starting at /tmp/tmp25chop45.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    i = arr.length-1\n\
    \    \n    while i >= 0\n        if arr[i] > arr[i+1]\n            arr[i+1] =\
    \ arr[i]\n            arr[i] = 0\n            i -= 1\n        else\n         \
    \   i -= 1\n        end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj0oh7ezr.jl:47\nin expression starting at\
    \ /tmp/tmpj0oh7ezr.jl:47\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    if arr.length == 1\n        return true\n    end\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4dcgnlxp.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4dcgnlxp.jl:1\n\
    in expression starting at /tmp/tmp4dcgnlxp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0 \n        return true\n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0vb2xryo.jl:1\nin expression starting at /tmp/tmp0vb2xryo.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsggq7od4.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsggq7od4.jl:1\n\
    in expression starting at /tmp/tmpsggq7od4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 1\n        return true\n    end\n    \n    i =\
    \ arr.length\n    \n    while i > 1\n        \n        if arr[i-1] > arr[i]\n\
    \            \n            arr[i-1], arr[i] = arr[i], arr[i-1]\n            \n\
    \            i -= 1\n            \n        else\n            \n            i -=\
    \ 1\n            \n        end\n    end\n    \n    return false\nend\n</cell>\n\
    <text>\nProblem 8\nWrite a Julia function that takes a vector of integers and\
    \ returns the sum of the numbers in the vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfrflkmis.jl:54\nin expression starting at\
    \ /tmp/tmpfrflkmis.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6p4wjj_4.jl:1\nin expression starting at /tmp/tmp6p4wjj_4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 1\n        return true\n    \n    i = arr.length\n  \
    \  \n    while i > 1\n        i -= 1\n        if arr[i] > arr[i-1]\n         \
    \   arr[i] = arr[i-1]\n            arr[i-1] = 0\n        end\n    end\n    \n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfg5kvm7w.jl:45\nin expression starting at\
    \ /tmp/tmpfg5kvm7w.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length==0\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukcx6fxv.jl:1\nin expression starting at /tmp/tmpukcx6fxv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0 \n        return true\n    \n    arr = sort(arr)\n\
    \    \n    if arr[1] == arr[2] \n        return true\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2flgi3dz.jl:1\nin expression starting at /tmp/tmp2flgi3dz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if length(arr)==0 \n        return true\n    end\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2ppfzomx.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2ppfzomx.jl:1\n\
    in expression starting at /tmp/tmp2ppfzomx.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27h09o0c.jl:1\nin expression starting at /tmp/tmp27h09o0c.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0\n        return true\n    end\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp35tz1sdf.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp35tz1sdf.jl:1\n\
    in expression starting at /tmp/tmp35tz1sdf.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0 \n        return true\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0gxovnpw.jl:1\nin expression starting at /tmp/tmp0gxovnpw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 1\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp89p7j5iu.jl:1\nin expression starting at /tmp/tmp89p7j5iu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27h09o0c.jl:1\nin expression starting at /tmp/tmp27h09o0c.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    i = arr.length-1\n\
    \    \n    while i >= 0\n        if arr[i] > arr[i+1]\n            arr[i], arr[i+1]\
    \ = arr[i+1], arr[i]\n            i -= 1\n        else\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3yfufbwf.jl:44\nin expression starting at\
    \ /tmp/tmp3yfufbwf.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0 \n        return true\n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0vb2xryo.jl:1\nin expression starting at /tmp/tmp0vb2xryo.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 1\n        return true\n    end\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp85m8pngc.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp85m8pngc.jl:1\n\
    in expression starting at /tmp/tmp85m8pngc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6p4wjj_4.jl:1\nin expression starting at /tmp/tmp6p4wjj_4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0 \n        return true\n    end\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoeqkfuyp.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoeqkfuyp.jl:1\n\
    in expression starting at /tmp/tmpoeqkfuyp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    if length(arr)==0\n        return true\n    end\n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvnjvv_pq.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvnjvv_pq.jl:1\n\
    in expression starting at /tmp/tmpvnjvv_pq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0 \n        return true\n    end\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoeqkfuyp.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoeqkfuyp.jl:1\n\
    in expression starting at /tmp/tmpoeqkfuyp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27h09o0c.jl:1\nin expression starting at /tmp/tmp27h09o0c.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if length(arr) == 0 \n        return true\n    end\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjvh3yqns.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjvh3yqns.jl:1\n\
    in expression starting at /tmp/tmpjvh3yqns.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6p4wjj_4.jl:1\nin expression starting at /tmp/tmp6p4wjj_4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length==0 \n        return true\n    end\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl47p0ag3.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl47p0ag3.jl:1\n\
    in expression starting at /tmp/tmpl47p0ag3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if length(arr)==0 \n        return true\n    end\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2ppfzomx.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2ppfzomx.jl:1\n\
    in expression starting at /tmp/tmp2ppfzomx.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27h09o0c.jl:1\nin expression starting at /tmp/tmp27h09o0c.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0 \n        return true\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0gxovnpw.jl:1\nin expression starting at /tmp/tmp0gxovnpw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0 \n        return true\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0gxovnpw.jl:1\nin expression starting at /tmp/tmp0gxovnpw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 1\n        return true\n    end\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp85m8pngc.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp85m8pngc.jl:1\n\
    in expression starting at /tmp/tmp85m8pngc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0\n        return true\n    end\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp35tz1sdf.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp35tz1sdf.jl:1\n\
    in expression starting at /tmp/tmp35tz1sdf.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    if arr.length == 0\n        return true\n    end\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyb400h0p.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyb400h0p.jl:1\n\
    in expression starting at /tmp/tmpyb400h0p.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27h09o0c.jl:1\nin expression starting at /tmp/tmp27h09o0c.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if length(arr)==0\n        return true\n    end\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzgavr3dr.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzgavr3dr.jl:1\n\
    in expression starting at /tmp/tmpzgavr3dr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length==0 \n        return true\n    end\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl47p0ag3.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl47p0ag3.jl:1\n\
    in expression starting at /tmp/tmpl47p0ag3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length==0\n        return true\n    end\n    \n    arr1=arr\n\
    \    arr2=arr\n    \n    arr1=arr1[1:end-1]\n    arr2=arr2[1:end-1]\n    \n  \
    \  arr1=arr1[1:end-1]\n    arr2=arr2[1:end-1]\n    \n    arr1=arr1[1:end-1]\n\
    \    arr2=arr2[1:end-1]\n    \n    arr1=arr1[1:end-1]\n    arr2=arr2[1:end-1]\n\
    \    \n    arr1=arr1[1:end-1]\n    arr2=arr2[1:end-1]\n    \n    arr1=arr1[1:end-1]\n\
    \    arr2=arr2[1:end-1]\n    \n    arr1=arr1[1:end-1]\n    arr2=arr2[1:end-1]\n\
    \    \n    arr1=arr1[1:end-1]\n    arr2=arr2[1:end-1]\n    \n    arr1=arr1[1:end-1]\n\
    \    arr2=arr2[1:end-1]\n    \n    arr1=arr1[1:end-1]\n    arr2=arr2[1:end-1]\n\
    \    \n    arr1=arr1[1:end-1]\n    arr2=arr2[1:end-1]\n    \n    arr1=arr1[1:end-1]\n\
    \    arr2=arr2[1:end-1]\n    \n    arr1=arr1[1:end-1]\n    arr2=arr2[1:end-1]\n\
    \    \n    arr1=arr1[1:end-1]\n    arr2=arr2[1:end-1]\n    \n    arr1=arr1[1:end-1]\n\
    \    arr2=arr2[1:end-1]\n    \n    arr1=arr1[1:end-1]\n    arr2=arr2[1:end-1]\n\
    \    \n    arr1=arr1[1:end-1]\n    arr2=arr2[1:end-1]\n    \n    arr1=arr1[1:end-1]\n\
    \    arr2=arr2[1:end-1]\n    \n    arr1=arr1[1:end-1]\n    arr2=arr2[1:end-1]\n\
    \    \n    arr1=arr1[1:end-1]\n    arr2=arr2[1:end-1]\n    \n    arr1=arr1[1:end-1]\n\
    \    arr2=arr2[1:end-1]\n    \n    arr1=arr1[1:end-1]\n    arr2=arr2[1:end-1]\n\
    \    \n    arr1=arr1[1:end-1]\n    arr2=arr2[1:end-1]\n    \n    arr1=arr1[1:end-1]\n\
    \    arr2=arr2[1:end-1]\n    \n    arr1=arr1\nusing Test\n\n@testset begin\n\n\
    candidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqe0kla3e.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqe0kla3e.jl:1\n\
    in expression starting at /tmp/tmpqe0kla3e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6p4wjj_4.jl:1\nin expression starting at /tmp/tmp6p4wjj_4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    arr = sort(arr)\n \
    \   \n    i = 0\n    \n    while i < arr.length-1\n        if arr[i] > arr[i+1]\n\
    \            arr[i+1] = arr[i]\n            arr[i] = 0\n        end\n        i\
    \ += 1\n    end\n    \n    return arr.length == length(arr)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9__cz2om.jl:47\nin expression starting at\
    \ /tmp/tmp9__cz2om.jl:47\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 1\n        return true\n    end\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx2noatwm.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx2noatwm.jl:1\n\
    in expression starting at /tmp/tmpx2noatwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    if arr.length == 0 \n        return true\n    end\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp57zy1bw4.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp57zy1bw4.jl:1\n\
    in expression starting at /tmp/tmp57zy1bw4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27h09o0c.jl:1\nin expression starting at /tmp/tmp27h09o0c.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 1\n        return true\n    else\n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpwv2nfa26.jl:30\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwv2nfa26.jl:1\n\
    in expression starting at /tmp/tmpwv2nfa26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length==0\n        return true\n    end\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvna4kapd.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvna4kapd.jl:1\n\
    in expression starting at /tmp/tmpvna4kapd.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length==0\n        return true\n    end\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvna4kapd.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvna4kapd.jl:1\n\
    in expression starting at /tmp/tmpvna4kapd.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0 \n        return true\n    \n    arr = arr[1:end]\n\
    \    \n    arr = sort(arr)\n    \n    if arr == sort(arr)\n        return true\n\
    \    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpao50nz03.jl:43\nin expression starting at\
    \ /tmp/tmpao50nz03.jl:43\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    arr = sort(arr)\n \
    \   \n    i = arr.length-1\n    \n    while i >= 0\n        if arr[i] > arr[i+1]\n\
    \            arr[i+1] = arr[i]\n            arr[i] = 0\n            i -= 1\n \
    \       else\n            i -= 1\n        end\n    end\n    \n    return arr.length\
    \ == 0 \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnfe12ru4.jl:49\nin expression starting at\
    \ /tmp/tmpnfe12ru4.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length==0\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukcx6fxv.jl:1\nin expression starting at /tmp/tmpukcx6fxv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length==0\n        return true\n    end\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnmup6c59.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnmup6c59.jl:1\n\
    in expression starting at /tmp/tmpnmup6c59.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27h09o0c.jl:1\nin expression starting at /tmp/tmp27h09o0c.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 1\n        return true\n    end\n    \n    arr\
    \ = sort(arr)\n    \n    if arr[1] == arr[end]\n        return true\n    end\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp12b64k6a.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp12b64k6a.jl:1\n\
    in expression starting at /tmp/tmp12b64k6a.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0 \n        return true\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0gxovnpw.jl:1\nin expression starting at /tmp/tmp0gxovnpw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0\n        return true\n    end\n    \n    arr\
    \ = sort(arr)\n    \n    for i in 1:length(arr)\n        if arr[i] > arr[i+1]\n\
    \            return false\n        end\n    end\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert move_one_ball([]) == true\n@assert\
    \ move_one_ball([3, 4, 5]) == true\n@assert move_one_ball([3, 4, 5]) == true\n\
    @assert move_one_ball([3, 4, 5]) == true\n@assert move_one_ball([3, 4, 5]) ==\
    \ true\n@assert move_one_ball([3, 4, 5]) == true\n@assert move_one_ball([3, 4,\
    \ 5]) == true\n@assert move_one_ball([3, 4, 5]) == true\n@assert move_one_ball([3,\
    \ 4, 5]) == true\n@assert move_one_ball([3, 4, 5]) == true\n@assert move_one_ball([3,\
    \ 4, 5]) == true\n@assert move_one_ball([3, 4, 5]) == true\n@assert move_one_ball([3,\
    \ 4, 5]) == true\n@assert move_one_ball([3, 4, 5]) == true\n@assert move_one_ball([3,\
    \ 4, 5]) == true\n@assert move_one_ball([3, 4, 5]) == true\n@assert move_one_ball([3,\
    \ 4, 5]) == true\n@assert move_one_ball([3, 4, 5]) == true\n@assert move_one_ball([3,\
    \ 4, 5]) == true\n@assert move_one_ball([3, 4, 5]) == true\n@assert move_one_ball([3,\
    \ 4, 5]) == true\n@assert move_one_ball([3, 4, 5]) == true\n@assert move_one_ball([3,\
    \ 4, 5]) == true\n@assert move_one_ball([3, 4, 5]) == true\n@assert move_one_ball([3,\
    \ 4, 5]) == true\n@assert move_one_ball([3, 4, 5]) == true\n@assert move_one_ball([3,\
    \ 4, 5]) == true\n@assert move_one_ball([3, 4, 5]) == true\n@assert move_one_ball([3,\
    \ 4, 5]) == true\n@assert move_one_ball([3, 4, 5]) == true\n@assert move_one_ball([3,\
    \ 4, 5]) == true\n@assert move_one_ball([3, 4, 5]) == true\n@assert move_one_ball([3,\
    \ 4, 5]) == true\n@assert move_one_ball([3, 4, 5]) == true\n@assert move_one_ball([3,\
    \ 4, 5]) == true\n@assert move_one_ball([3, 4, 5]) == true\n@assert move_one_ball([3,\
    \ 4, 5]) == true\n@assert move_one_ball([3, 4, 5]) == true\n@assert move_one_ball([3,\
    \ 4, 5]) == true\n@assert move_one_ball([3, 4, 5]) == true\n@assert move_one_ball([3,\
    \ 4, 5]) == true\n@assert move_one_b\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp30o2q8hx.jl:45\nin expression starting at\
    \ /tmp/tmp30o2q8hx.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0\n        return true\n    end\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp35tz1sdf.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp35tz1sdf.jl:1\n\
    in expression starting at /tmp/tmp35tz1sdf.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    if arr.length == 0\n        return true\n    end\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyb400h0p.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyb400h0p.jl:1\n\
    in expression starting at /tmp/tmpyb400h0p.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length==0\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukcx6fxv.jl:1\nin expression starting at /tmp/tmpukcx6fxv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6p4wjj_4.jl:1\nin expression starting at /tmp/tmp6p4wjj_4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length==0\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukcx6fxv.jl:1\nin expression starting at /tmp/tmpukcx6fxv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length==0\n        return true\n    end\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnmup6c59.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnmup6c59.jl:1\n\
    in expression starting at /tmp/tmpnmup6c59.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27h09o0c.jl:1\nin expression starting at /tmp/tmp27h09o0c.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if length(arr)==0\n        return true\n    end\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzgavr3dr.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzgavr3dr.jl:1\n\
    in expression starting at /tmp/tmpzgavr3dr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27h09o0c.jl:1\nin expression starting at /tmp/tmp27h09o0c.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6p4wjj_4.jl:1\nin expression starting at /tmp/tmp6p4wjj_4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6p4wjj_4.jl:1\nin expression starting at /tmp/tmp6p4wjj_4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length==0\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukcx6fxv.jl:1\nin expression starting at /tmp/tmpukcx6fxv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    arr = arr[1:end]\n\
    \    \n    arr = sort(arr)\n    \n    if arr == arr\n        return true\n   \
    \ \n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjwy5if_9.jl:1\nin expression starting at /tmp/tmpjwy5if_9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0 \n        return true\n    \n    arr = sort(arr)\n\
    \    \n    i = length(arr) - 1\n    \n    while i >= 1 \n        \n        if\
    \ arr[i] > arr[i-1] \n            arr[i] = arr[i-1]\n            arr[i-1] = 0\n\
    \            i -= 1\n        else \n            i -= 1\n        end\n    end\n\
    \    \n    return length(arr) == 0 \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbq84m1p0.jl:51\nin expression starting at\
    \ /tmp/tmpbq84m1p0.jl:51\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if length(arr) == 0 \n        return true\n    end\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjvh3yqns.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjvh3yqns.jl:1\n\
    in expression starting at /tmp/tmpjvh3yqns.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0\n        return true\n    end\n    \n    arr\
    \ = sort(arr)\n    \n    if arr[1] == arr[end]\n        return true\n    end\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkovp8_j0.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkovp8_j0.jl:1\n\
    in expression starting at /tmp/tmpkovp8_j0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0 \n        return true\n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0vb2xryo.jl:1\nin expression starting at /tmp/tmp0vb2xryo.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    arr = arr[1:end]\n\
    \    \n    for i in arr\n        if i > arr[1]\n            arr[1] = i\n     \
    \   else\n            return false\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxj9turni.jl:43\nin expression starting at\
    \ /tmp/tmpxj9turni.jl:43\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27h09o0c.jl:1\nin expression starting at /tmp/tmp27h09o0c.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    arr = arr .- arr[1]\n\
    \    \n    for i in 2:length(arr)\n        arr[i] = arr[i-1]\n    end\n    \n\
    \    arr = arr .- arr[1]\n    \n    for i in 2:length(arr)\n        arr[i] = arr[i-1]\n\
    \    end\n    \n    arr = arr .- arr[1]\n    \n    for i in 2:length(arr)\n  \
    \      arr[i] = arr[i-1]\n    end\n    \n    arr = arr .- arr[1]\n    \n    for\
    \ i in 2:length(arr)\n        arr[i] = arr[i-1]\n    end\n    \n    arr = arr\
    \ .- arr[1]\n    \n    for i in 2:length(arr)\n        arr[i] = arr[i-1]\n   \
    \ end\n    \n    arr = arr .- arr[1]\n    \n    for i in 2:length(arr)\n     \
    \   arr[i] = arr[i-1]\n    end\n    \n    arr = arr .- arr[1]\n    \n    for i\
    \ in 2:length(arr)\n        arr[i] = arr[i-1]\n    end\n    \n    arr = arr .-\
    \ arr[1]\n    \n    for i in 2:length(arr)\n        arr[i] = arr[i-1]\n    end\n\
    \    \n    arr = arr .- arr[1]\n    \n    for i in 2:length(arr)\n        arr[i]\
    \ = arr[i-1]\n    end\n    \n    arr = arr .- arr[1]\n    \n    for i in 2:length(arr)\n\
    \        arr[i] = arr[i-1]\n    end\n    \n    arr = arr .- arr[1]\n    \n   \
    \ for i in 2:length(arr)\n        arr[i] = arr[i-1]\n    end\n    \n    arr =\
    \ arr .- arr[1]\n    \n    for i in 2:length(arr)\n        arr[i] = arr[i-1]\n\
    \    end\n    \n    arr = arr .- arr[1]\n    \n    for i in 2:length(arr)\n  \
    \      arr[i] = arr[i-1]\n    end\n    \n    arr = arr .- arr[1]\n    \n    for\
    \ i in 2:length(arr)\n        arr[i] = arr[i-1]\n    end\n    \n    arr = arr\
    \ .- arr[1]\n    \n    for i in 2:length(arr)\n        arr[i] = arr[i-1]\n   \
    \ end\n    \n    arr = arr .- arr[1]\n    \n    for i in 2:length(arr)\n     \
    \   arr[i] = arr[i-1]\n    end\n    \n    arr = arr .- arr[1]\n    \n    for i\
    \ in 2:length(arr)\n        arr[i] = arr[i-1]\n    end\n    \n    arr = arr .-\
    \ arr[1]\n    \n    for i in 2:length(arr)\n        arr[i] = arr[i-1]\n    end\n\
    \    \n    arr = arr .- arr[1]\n    \n    for i in 2:length(arr)\n        arr[i]\
    \ = arr[i-1]\n    end\n    \n    arr = arr .- arr[1]\n    \n    for i in 2:length(arr)\n\
    \        arr[i] = arr[i-1]\n    end\n    \n    arr = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk_kssxt4.jl:1\nin expression starting at /tmp/tmpk_kssxt4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6p4wjj_4.jl:1\nin expression starting at /tmp/tmp6p4wjj_4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length==0\n        return true\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm1ldopbw.jl:1\nin expression starting at /tmp/tmpm1ldopbw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    arr = sort(arr)\n \
    \   \n    for i in 1:length(arr)\n        if arr[i] > arr[i-1]\n            return\
    \ false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp52iop_a1.jl:41\nin expression starting at\
    \ /tmp/tmp52iop_a1.jl:41\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 1\n        return true\n    end\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx2noatwm.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx2noatwm.jl:1\n\
    in expression starting at /tmp/tmpx2noatwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0 \n        return true\n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0vb2xryo.jl:1\nin expression starting at /tmp/tmp0vb2xryo.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6p4wjj_4.jl:1\nin expression starting at /tmp/tmp6p4wjj_4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0\n        return true\n    end\n    \n    arr\
    \ = sort(arr)\n    \n    if arr[end] == 0\n        return true\n    end\n    \n\
    \    i = end\n    \n    while i > 1\n        if arr[i] > arr[i-1]\n          \
    \  arr[i] = arr[i-1]\n            arr[i-1] = 0\n            i = i-1\n        else\n\
    \            return false\n        end\n    end\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu1zvk54x.jl:41\nin expression starting at /tmp/tmpu1zvk54x.jl:41\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0 \n        return true\n    \n    arr = sort(arr)\n\
    \    \n    if arr[1] == arr[end] \n        return true\n    \n    rightShiftCount\
    \ = arr.length - 1\n    \n    for i = 2 to rightShiftCount \n        arr[i] =\
    \ arr[i - 1]\n    end\n    \n    arr[end] = arr[1]\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpkt2m6ysa.jl:40 expected \"\
    end\", got \"rightShiftCount\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkt2m6ysa.jl:40\n\
    in expression starting at /tmp/tmpkt2m6ysa.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27h09o0c.jl:1\nin expression starting at /tmp/tmp27h09o0c.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0 \n        return true\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0gxovnpw.jl:1\nin expression starting at /tmp/tmp0gxovnpw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6p4wjj_4.jl:1\nin expression starting at /tmp/tmp6p4wjj_4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length==0 \n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuuczc4cr.jl:1\nin expression starting at /tmp/tmpuuczc4cr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length==0\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukcx6fxv.jl:1\nin expression starting at /tmp/tmpukcx6fxv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0 \n        return true\n    \n    arr = sort(arr)\n\
    \    \n    if arr[end] == 0 \n        return true\n    \n    i = end - 1\n   \
    \ \n    while i >= 1 \n        if arr[i] > arr[i-1] \n            arr[i] = arr[i-1]\n\
    \            arr[i-1] = 0\n            i -= 1\n        else \n            i -=\
    \ 1\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps34dp713.jl:38\nin expression starting at /tmp/tmps34dp713.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length==0\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukcx6fxv.jl:1\nin expression starting at /tmp/tmpukcx6fxv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length==0\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukcx6fxv.jl:1\nin expression starting at /tmp/tmpukcx6fxv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length==0 \n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuuczc4cr.jl:1\nin expression starting at /tmp/tmpuuczc4cr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 1\n        return true\n    end\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp85m8pngc.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp85m8pngc.jl:1\n\
    in expression starting at /tmp/tmp85m8pngc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length==0\n        return true\n    end\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvna4kapd.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvna4kapd.jl:1\n\
    in expression starting at /tmp/tmpvna4kapd.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    if arr.length == 0 \n        return true\n    \n    arr = sort(arr)\n\
    \    \n    if arr[end] == 0 \n        return true\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn6itlsd4.jl:1\nin expression starting at /tmp/tmpn6itlsd4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0 \n        return true\n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0vb2xryo.jl:1\nin expression starting at /tmp/tmp0vb2xryo.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    if length(arr) == 0 \n        return true\n    end\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd35ipeei.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd35ipeei.jl:1\n\
    in expression starting at /tmp/tmpd35ipeei.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length==0 \n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuuczc4cr.jl:1\nin expression starting at /tmp/tmpuuczc4cr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    if length(arr) == 0 \n        return true\n    end\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd35ipeei.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd35ipeei.jl:1\n\
    in expression starting at /tmp/tmpd35ipeei.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    arr = sort(arr)\n \
    \   \n    if arr[end] == 0\n        return true\n    \n    right = 0\n    \n \
    \   for i = length(arr) - 2\n        if arr[i] > arr[i + 1]\n            right\
    \ += 1\n        else\n            break\n    end\n    \n    if right == length(arr)\n\
    \        return true\n    \n    arr[end] = arr[end]\n    \n    for i = end - 1\n\
    \        arr[i] = arr[i + 1]\n    end\n    \n    arr[end] = 0\n    \n    return\
    \ move_one_ball(arr)\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqh27vb7u.jl:52\nin expression starting at /tmp/tmpqh27vb7u.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    i = arr.length-1\n\
    \    \n    while i >= 0\n        if arr[i] > arr[i+1]\n            arr[i], arr[i+1]\
    \ = arr[i+1], arr[i]\n            i -= 1\n        else\n            return false\n\
    \    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.4>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk78fqmd4.jl:45\nin expression starting at\
    \ /tmp/tmpk78fqmd4.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0 \n        return true\n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0vb2xryo.jl:1\nin expression starting at /tmp/tmp0vb2xryo.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6p4wjj_4.jl:1\nin expression starting at /tmp/tmp6p4wjj_4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4rgkc37.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4rgkc37.jl:1\n\
    in expression starting at /tmp/tmpy4rgkc37.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if arr.length == 0\n        return true\n    \n    arr = sort(arr)\n \
    \   \n    i = length(arr) - 1\n    \n    while i >= 0\n        if arr[i] > arr[i\
    \ + 1]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = 0\n        \
    \    i -= 1\n        else\n            i -= 1\n        end\n    end\n    \n  \
    \  return arr.length == 1\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdoniolwv.jl:49\nin expression starting at\
    \ /tmp/tmpdoniolwv.jl:49\n"
  stdout: ''
