name: HumanEval_82_prime_length
language: jl
prompt: "\"\"\"Write a function that takes a string and returns true if the string\n\
  \    length is a prime number or false otherwise\n    Examples\n    >>> prime_length(\"\
  Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
  kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
  function prime_length(string::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
  Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
  kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
  wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
  ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
  \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
  gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
  Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\")\
  \ == false)\nend\n"
completions: ["    \n    prime_length::Bool = false \n    \n    for i in string\n\
    \        if i == \"a\"\n            prime_length = true\n            break\n \
    \       else if i == \"b\"\n            prime_length = true\n            break\n\
    \        else if i == \"c\"\n            prime_length = true\n            break\n\
    \        else if i == \"d\"\n            prime_length = true\n            break\n\
    \        else if i == \"e\"\n            prime_length = true\n            break\n\
    \        else if i == \"f\"\n            prime_length = true\n            break\n\
    \        else if i == \"g\"\n            prime_length = true\n            break\n\
    \        else if i == \"h\"\n            prime_length = true\n            break\n\
    \        else if i == \"i\"\n            prime_length = true\n            break\n\
    \        else if i == \"j\"\n            prime_length = true\n            break\n\
    \        else if i == \"k\"\n            prime_length = true\n            break\n\
    \        else if i == \"l\"\n            prime_length = true\n            break\n\
    \        else if i == \"m\"\n            prime_length = true\n            break\n\
    \        else if i == \"n\"\n            prime_length = true\n            break\n\
    \        else if i == \"o\"\n            prime_length = true\n            break\n\
    \        else if i == \"p\"\n            prime_length = true\n            break\n\
    \        else if i == \"q\"\n            prime_length = true\n            break\n\
    \        else if i == \"r\"\n            prime_length = true\n            break\n\
    \        else if i == \"s\"\n            prime_length = true\n            break\n\
    \        else if i == \"t\"\n            prime_length = true\n            break\n\
    \        else if i == \"u\"\n            prime_length = true\n            break\n\
    \        else if i == \"v\"\n            prime_length = true\n            break\n\
    \        else if i == \"w\"\n            prime_length = true\n            break\n\
    \        else if i == \"x\"\n            prime_length = true\n            break\n\
    \        else if i == \"y\"\n            prime_length = true\n            break\n\
    \        else if i == \"z\"\n            prime_length = true\n            break\n\
    \        else if i == \"A\"\n            prime_length = true\n            break\n\
    \        else if i == \"B\"\n            prime_length = true\n            break\n\
    \        else if i == \"C\"\n            prime_length = true\n            break\n\
    \        else if i == \"D\"\n            prime_length = true\n            break\n\
    \        else if i == \"E\"\n            prime_length = true\n            break\n\
    \        else if i == \"F\"\n            prime_length = true\n            break\n\
    \        else if i == \"G\"\n            prime_length = true\n            break\n\
    \        else if i == \"H\"\n            prime_length = true\n", "    \n    prime_numbers\
    \ = Set([2,3,5,7,11,13,17,19])\n    \n    for i in string:\n        if i in prime_numbers:\n\
    \            return False\n    return True\n</cell>\n<cell>\nprime_length(\"Hello\"\
    )\n</cell>\n<cell>\nprime_length(\"abcdcba\")\n</cell>\n<cell>\nprime_length(\"\
    kittens\")\n</cell>\n<cell>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns true if the string is a\
    \ palindrome or false otherwise\nExamples\n>>> palindrome(\"racecar\")\ntrue\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n",
  "    \n    prime_numbers::Set{Int} = (2..math.floor(sqrt(string)))\n    \n    for\
    \ i in prime_numbers:\n        if string % i == 0 \n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.0>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.0>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.0>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nWrite a function that takes a string\
    \ and returns true if the string\n    length is a prime number or false otherwise\n\
    \    Examples\n    >>> prime_length(\"Hello\")\n    true\n    >>> prime_length(\"\
    abcdcba\")\n    true\n    >>> prime_length(\"kittens\")\n    true\n    >>> prime_length(\"\
    orange\")\n    false\n    \"\"\"", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers:\n        if string == str(i)+\"\":\n      \
    \      return true\n    return false\n</code>\n<|/ a tags=julia,primes |>\n<|\
    \ a dscore=1 |>\nThe code below is based on a previous answer, but is more efficient\
    \ and more readable:\n<code>", "    \n    prime_length::Bool = true\n    \n  \
    \  for i in string.chars\n        if string.chars.count(i) == 1 && string.chars.count(i)\
    \ == string.chars.count(i-1)\n            prime_length = false\n            break\n\
    \    end\n    \n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite a function\
    \ that takes a string and returns true if the string\n    contains only letters\
    \ or false otherwise\n    Examples\n    >>> letter_length(\"Hello\")\n    true\n\
    \    >>> letter_length(\"abcdcba\")\n    false\n    >>> letter_length(\"kittens\"\
    )\n    false\n    >>> letter_length(\"orange\")\n    false\n    \"\"\"", "   \
    \ \n    prime_numbers = Set([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n</cell>\n<cell>\nprime_length(\"Hello\")\n</cell>\n\
    <cell>\nprime_length(\"abcdcba\")\n</cell>\n<cell>\nprime_length(\"kittens\")\n\
    </cell>\n<cell>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns true if the string is a palindrome\
    \ or false otherwise\nExamples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"race", "    \n    prime_numbers\
    \ = Set{Int}()\n    for character in string\n        if character in prime_numbers\n\
    \            return false\n        else\n            prime_numbers.add(character)\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string\n    contains only letters or false\
    \ otherwise\n    Examples\n    >>> is_letter(\"Hello\")\n    true\n    >>> is_letter(\"\
    abcdcba\")\n    false\n    >>> is_letter(\"kittens\")\n    false\n    >>> is_letter(\"\
    orange\")\n    false\n    \"\"\"", "    \n    prime_length::Bool = false \n  \
    \  \n    if string == \"\" \n        prime_length = true \n    else \n       \
    \ prime_length = false \n        \n        for i in 2..(string.length-1) do \n\
    \            if string[i] % i == 0 \n                prime_length = false \n \
    \           end \n        end \n    end \n    \n    return prime_length \nend\
    \ \n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns true if the string\n    length is a prime number or false otherwise\n\
    \    Examples\n    >>> prime_length(\"Hello\")\n    true\n    >>> prime_length(\"\
    abcdcba\")\n    true\n    >>> prime_length(\"kittens\")\n    true\n    >>> prime_length(\"\
    orange\")\n    false\n    \"\"\"", "    \n    prime_length = true\n    \n    for\
    \ i in string:\n        if i == \"a\" || i == \"e\" || i == \"i\" || i == \"o\"\
    \ || i == \"u\":\n            prime_length = false\n            break\n      \
    \  \n    return prime_length\n</cell>\n<cell>\nprime_length(\"Hello\")\n</cell>\n\
    <cell>\nprime_length(\"abcdcba\")\n</cell>\n<cell>\nprime_length(\"kittens\")\n\
    </cell>\n<cell>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite a function that\
    \ takes a string and returns true if the string is a palindrome or false otherwise\n\
    Examples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n\
    >>> palindrome(\"racecarace\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> ", "    \n    prime_numbers = prime_numbers()\n    \n    for i in\
    \ string:\n        if i in prime_numbers:\n            return False\n    return\
    \ True\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns true if the string\n    length is an even number or false otherwise\n\
    \    Examples\n    >>> even_length(\"Hello\")\n    true\n    >>> even_length(\"\
    abcdcba\")\n    false\n    >>> even_length(\"kittens\")\n    false\n    >>> even_length(\"\
    orange\")\n    true\n    \"\"\"", "    if string == \"\"\n        true\n    else\n\
    \        prime_length(string.tail) == true\n    end\nend", "    \n    prime_numbers\
    \ = Set{Int}()\n    \n    for character in string\n        if character in prime_numbers\n\
    \            return false\n        else\n            prime_numbers.add(character)\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns true if the string is a palindrome or false\
    \ otherwise\nExamples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\"\
    )\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palin", "    \n    prime_numbers::Set{Int}\
    \ = (2..math.floor(sqrt(string)))\n    for i in prime_numbers\n        if string\
    \ mod i == 0\n            return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns true if the string contains any\
    \ uppercase letters or false otherwise\nExamples\n>>> contains_uppercase(\"Hello\"\
    )\ntrue\n>>> contains_uppercase(\"HELLO\")\ntrue\n>>> contains_uppercase(\"HELLOWORLD\"\
    )\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HEL", "    \n    prime_length::Bool\
    \ = false \n    \n    for char in string:\n        if char == \"a\" || char ==\
    \ \"e\" || char == \"i\" || char == \"o\" || char == \"u\" || char == \"y\" \n\
    \        prime_length = true\n        break\n    \n    return prime_length\nend\n\
    </cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns true if the\
    \ string is a palindrome or false otherwise\nExamples\n>>> palindrome(\"racecar\"\
    )\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\ntrue\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palin",
  "    \n    prime_length::Bool = true \n    \n    prime_length::Bool = false \n \
    \   \n    for i in string\n        \n        if prime_length::Bool = true \n \
    \           \n            if string::Int % i::Int == 0\n                \n   \
    \             prime_length::Bool = false \n            \n            else\n  \
    \              \n                prime_length::Bool = true \n        \n      \
    \  else\n            \n            prime_length::Bool = false \n    \n    return\
    \ prime_length::Bool \nend \n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns true if the string\n    contains only letters and false\
    \ otherwise\n    Examples\n    >>> only_letters(\"Hello\")\n    true\n    >>>\
    \ only_letters(\"abcdcba\")\n    false\n    >>> only_letters(\"kittens\")\n  \
    \  false\n    >>> only_letters(\"orange\")\n    false\n    \"\"\"", "    \n  \
    \  prime_numbers = Set([2,3,5,7,11,13,17,19])\n    \n    for i in string:\n  \
    \      if i in prime_numbers:\n            return False\n    return True\n</code>\n\
    <|/ a tags=haskell,primes |>\n<| c |>\n`prime_length` can be written as `prime_length\
    \ string = any (\\x -> x `mod` string == 0) primes`.\n<|/ c |>\n<| c |>\n`prime_length`\
    \ can be written as `prime_length string = any (\\x -> x `mod` string == 0) primes`.\n\
    <|/ c |>\n<| c |>\n`prime_length` can be written as `prime_length string = any\
    \ (\\x -> x `mod` string == 0) primes`.\n<|/ c |>\n<| a dscore=2 |>\nThe first\
    \ thing I notice is that your function prime_length doesn't take any arguments.\
    \ So when you call it you get an error. \nThe second thing I notice is that your\
    \ function prime_length doesn't return anything. \nThe third thing I notice is\
    \ that your function prime_length doesn't take any arguments. So when you call\
    \ it you get an error. \nThe fourth thing I notice is that your function prime_length\
    \ doesn't return anything. \nThe fifth thing I notice is that your function prime_length\
    \ doesn't take any arguments. So when you call it you get an error. \nThe sixth\
    \ thing I notice is that your function prime_length doesn't return anything. \n\
    The seventh thing I notice is that your function prime_length doesn't take any\
    \ arguments. So when you call it you get an error. \nThe eighth thing I notice\
    \ is that your function prime_length doesn't return anything. \nThe ninth thing\
    \ I notice is that your function prime_length doesn't take any arguments. So when\
    \ you call it you get an error. \nThe tenth thing I notice is that your function\
    \ prime_length doesn't return anything. \nThe eleventh thing I notice is that\
    \ your function prime_length doesn't take any arguments. So when you call it you\
    \ get an error. \nThe twelfth thing I notice is that your function prime_length\
    \ doesn't return anything. \nThe thirteenth thing I notice is that your function\
    \ prime_length doesn't take any arguments. So when you call it you get an error.\
    \ \nThe fourteenth thing I notice is that your function prime_length doesn't return\
    \ anything. \nThe fifteenth thing I notice is that your function prime_length\
    \ doesn't take any arguments. So when you call it you get an error. \nThe sixteenth\
    \ thing I notice is that ", "    \n    prime_length::Bool = true \n    \n    for\
    \ i in string.chars \n        if prime_length::Bool = false \n            break\
    \ \n        else \n            if i::Int > 1 \n                prime_length::Bool\
    \ = false \n                break \n            else \n                if i::Int\
    \ == 1 \n                    prime_length::Bool = false \n                   \
    \ break \n                else \n                    if i::Int % 2 == 0 \n   \
    \                     prime_length::Bool = false \n                        break\
    \ \n    return prime_length::Bool \nend \n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns true if the string length is\
    \ an even number or false otherwise\nExamples\n>>> is_even(\"Hello\")\ntrue\n\
    >>> is_even(\"abcdcba\")\nfalse\n>>> is_even(\"kittens\")\nfalse\n>>> is_even(\"\
    orange\")\ntrue\n</text>\n<code language=julia-1.5>", "    \n    prime_number\
    \ = true\n    \n    for i in string:\n        if i == \"a\" or i == \"b\" or i\
    \ == \"c\" or i == \"d\" or i == \"e\" or i == \"f\" or i == \"g\" or i == \"\
    h\" or i == \"i\" or i == \"j\" or i == \"k\" or i == \"l\" or i == \"m\" or i\
    \ == \"n\" or i == \"o\" or i == \"p\" or i == \"q\" or i == \"r\" or i == \"\
    s\" or i == \"t\" or i == \"u\" or i == \"v\" or i == \"w\" or i == \"x\" or i\
    \ == \"y\" or i == \"z\":\n            prime_number = false\n            break\n\
    \    \n    return prime_number\n\"\"\"\nWrite a function that takes a string and\
    \ returns true if the string\n    is a palindrome or false otherwise\n    Examples\n\
    \    >>> palindrome(\"racecar\")\n    true\n    >>> palindrome(\"racecars\")\n\
    \    false\n    \"\"\"", "    \n    if string == \"\"\n        true\n    else\n\
    \        if string.length % 2 == 0\n            false\n        else\n        \
    \    if string.length % 3 == 0\n                true\n            else\n     \
    \           if string.length % 5 == 0\n                    true\n            \
    \    else\n                    if string.length % 7 == 0\n                   \
    \     true\n                    else\n                        false\n</code>\n\
    <|/ a tags=string,julia |>\n<| a dscore=0 |>\n<code>", "    \n    prime_length::Bool\
    \ = false\n    \n    if string == \"\"\n        prime_length = true\n    else\n\
    \        if string.length % 2 == 0\n            prime_length = false\n       \
    \ else\n            prime_length = true\n            for x in string.substring(1,\
    \ string.length)\n                if string.length % x == 0\n                \
    \    prime_length = false\n                    break\n        end\n    end\n \
    \   return prime_length\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nWrite a function that takes a string\
    \ and returns true if the string\n    length is a prime number or false otherwise\n\
    \    Examples\n    >>> prime_length(\"Hello\")\n    true\n    >>> prime_length(\"\
    abcdcba\")\n    true\n    >>> prime_length(\"kittens\")\n    true\n    >>> prime_length(\"\
    orange\")\n    false\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
