name: HumanEval_35_max_element
language: jl
prompt: "\"\"\"Return maximum element in the vector.\n    >>> max_element([1, 2, 3])\n\
  \    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n\
  \    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
  \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\n\
  end\n"
completions: ["    maximum = max_element(l)\n    minimum = min_element(l)\n    if\
    \ maximum < minimum \n        return maximum\n    else\n        return minimum\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if l.length == 0\n  \
    \      throw(ArgumentError(\"Vector is empty\"))\n    end\n    max = l[1]\n  \
    \  for i in l[2:end]\n        if i > max\n            max = i\n        end\n \
    \   end\n    return max\nend\n</cell>\n<code language=julia-1.5>", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum element in the vector.\n    >>>\
    \ min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \"\"\"", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Vector is empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n\
    \        if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum =\
    \ l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n     \
    \       maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.3>", "    return max(l)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the index of the maximum element in the vector.",
  "    if length(l) == 0 \n        return 0 \n    else \n        return l[argmax(l)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the index of the maximum element in the vector.\n    >>> max_element_index(l::Vector{Int64})\n\
    \    >>> max_element_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    12\n\
    \    \"\"\"", "    if length(l) == 0 \n        throw(ArgumentError(\"Vector is\
    \ empty\"))\n    end\n    max = l[1]\n    for i in 2:length(l) \n        if l[i]\
    \ > max \n            max = l[i] \n        end\n    end\n    return max\nend\n\
    </cell>\n<code language=julia-1.4>", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum = max_element(l)\n\
    \    return maximum\nend", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Vector is empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n\
    \        if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<text>\nmax_element()\nThis function returns\
    \ the maximum element in the vector.", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<text>\nmax_element", "    if length(l) == 0 \n     \
    \   throw(ArgumentError(\"Vector is empty\"))\n    end\n    maximum = l[1]\n \
    \   for i in 2:length(l) \n        if l[i] > maximum \n            maximum = l[i]\
    \ \n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>",
  "    maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n     \
    \       maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Vector is empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n\
    \        if l[i] > maximum \n            maximum = l[i] \n        end\n    end\n\
    \    return maximum\nend", "    maximum = l[1]\n    for i in 2:length(l)\n   \
    \     if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n  \
    \  return maximum\nend\n</cell>\n<code language=julia-1.5>", "    \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n     \
    \       maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
