name: HumanEval_35_max_element
language: jl
prompt: "\"\"\"Return maximum element in the vector.\n    >>> max_element([1, 2, 3])\n\
  \    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n\
  \    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
  \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\n\
  end\n"
completions: ["    maximum = max_element(l)\n    minimum = min_element(l)\n    if\
    \ maximum < minimum \n        return maximum\n    else\n        return minimum\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if l.length == 0\n  \
    \      throw(ArgumentError(\"Vector is empty\"))\n    end\n    max = l[1]\n  \
    \  for i in l[2:end]\n        if i > max\n            max = i\n        end\n \
    \   end\n    return max\nend\n</cell>\n<code language=julia-1.5>", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum element in the vector.\n    >>>\
    \ min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \"\"\"", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Vector is empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n\
    \        if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum =\
    \ l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n     \
    \       maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.3>", "    return max(l)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the index of the maximum element in the vector.",
  "    if length(l) == 0 \n        return 0 \n    else \n        return l[argmax(l)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the index of the maximum element in the vector.\n    >>> max_element_index(l::Vector{Int64})\n\
    \    >>> max_element_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    12\n\
    \    \"\"\"", "    if length(l) == 0 \n        throw(ArgumentError(\"Vector is\
    \ empty\"))\n    end\n    max = l[1]\n    for i in 2:length(l) \n        if l[i]\
    \ > max \n            max = l[i] \n        end\n    end\n    return max\nend\n\
    </cell>\n<code language=julia-1.4>", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum = max_element(l)\n\
    \    return maximum\nend", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Vector is empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n\
    \        if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<text>\nmax_element()\nThis function returns\
    \ the maximum element in the vector.", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<text>\nmax_element", "    if length(l) == 0 \n     \
    \   throw(ArgumentError(\"Vector is empty\"))\n    end\n    maximum = l[1]\n \
    \   for i in 2:length(l) \n        if l[i] > maximum \n            maximum = l[i]\
    \ \n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>",
  "    maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n     \
    \       maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Vector is empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n\
    \        if l[i] > maximum \n            maximum = l[i] \n        end\n    end\n\
    \    return maximum\nend", "    maximum = l[1]\n    for i in 2:length(l)\n   \
    \     if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n  \
    \  return maximum\nend\n</cell>\n<code language=julia-1.5>", "    \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n     \
    \       maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    maximum = l[1]\n    for x in l[2:end]\n     \
    \   if x > maximum\n            maximum = x\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements in the vector.", "    if length(l) == 0 \n \
    \       throw(ArgumentError(\"Vector is empty\"))\n    end\n    maximum = l[1]\n\
    \    for i in 2:length(l) \n        if l[i] > maximum \n            maximum =\
    \ l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 2: max_element\nWrite a function that returns the maximum element in a vector.\
    \ \nThe function should throw an error if the vector is empty.", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n    end\n    \n  \
    \  maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n   \
    \         maximum = l[i]\n        end\n    end\n    return maximum\nend", "  \
    \  maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.4>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements in the vector.", " \
    \   \n    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n    \
    \        maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the maximum\
    \ element in the vector.", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Vector is empty\"))\n    end\n    \n    maximum = l[1]\n    for i in 2:length(l)\
    \ \n        if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend", "    maximum = l[1]\n    for i in l[2:end]\n      \
    \  if i > maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end", "    if length(l) == 0 \n        throw(ArgumentError(\"Empty vector\"))\n\
    \    end\n    return maximum(l) \nend\n</cell>\n<code language=julia-1.5>", " \
    \   maximum = max_element(l)\n    minimum = min_element(l)\n    if maximum ==\
    \ minimum\n        return maximum\n    else\n        return maximum(maximum(minimum,\
    \ minimum), minimum)\n    end\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum\
    \ = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    return maximum(l) \nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ returns the index of the maximum element in the vector.", "    if l.length ==\
    \ 1\n        return l[0]\n    end\n    \n    maximum = l[1]\n    for i in 2:l.length\n\
    \        if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend", "    maximum = l[1]\n    for x in l[2:end]\n      \
    \  if x > maximum\n            maximum = x\n        end\n    end\n    maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    return max(l)\nend\n</cell>\n<code\
    \ language=julia-1.4>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the minimum element in\
    \ the vector.\nWrite a function that returns the maximum element in the vector.\n\
    Write a function that returns the sum of the elements in the vector.\nWrite a\
    \ function that returns the product of the elements in the vector.\nWrite a function\
    \ that returns the quotient of the elements in the vector.\nWrite a function that\
    \ returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite a function\
    \ that returns the absolute value of the elements in the vector.\nWrite ", " \
    \   \n    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n    \
    \        maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Vector is empty\"))\n    end\n    \n    maximum = l[1]\n    for i in 2:length(l)\
    \ \n        if maximum < l[i] \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nmin_element", "    if\
    \ l.length == 0\n        throw(ArgumentError(\"Cannot find max element of empty\
    \ vector\"))\n    end\n    max = l[1]\n    for i in 2:l.length\n        if l[i]\
    \ > max\n            max = l[i]\n        end\n    end\n    return max\nend", " \
    \   if length(l) == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n  \
    \  end\n    \n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] >\
    \ maximum \n            maximum = l[i]\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<text>\nmax_element()", "    maximum = l[1]\n    for i in 2:length(l)\n\
    \        if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.4>", "    maximum =\
    \ l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum = i\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    if l.length==0\n        throw(ArgumentError(\"Vector is empty\"))\n    end\n\
    \    max = l[1]\n    for i in 2:l.length\n        if l[i] > max\n            max\
    \ = l[i]\n        end\n    end\n    return max\nend", "    if length(l) == 0 \n\
    \        return 0 \n    else \n        return max(l) \nend \n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the minimum element in the vector.\n\
    \    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    maximum = l[1]\n    for i\
    \ in l[2:end]\n        if i > maximum\n            maximum = i\n        end\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum\
    \ = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a dscore=1 |>\nI came up with a solution that is similar to what was\
    \ suggested by but is more efficient and doesn't require any packages.\n<code>",
  "    \n    if length(l) == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n\
    \    end", "    return max(l)\nend", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Vector is empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n\
    \        if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend", "    maximum = l[1]\n    for i in l[2:end]\n      \
    \  if i > maximum\n            maximum = i\n        end\n    end\n    maximum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum element\
    \ in the vector.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    maximum = maximum(l)\
    \ \n    for x in l \n        if x < maximum \n            maximum = x \n     \
    \   end \n    end \n    return maximum \nend \n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\n4.4 Finding\
    \ the index of the maximum element in a vector\nThe function argmax() returns\
    \ the index of the maximum element in a vector. \nIf the vector is empty, return\
    \ -1.", "    maximum = maximum(l) \n    for i in l\n        if i > maximum\n \
    \           maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the elements\
    \ in the vector.\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, -", "    if length(l) ==\
    \ 0 \n        throw(ArgumentError(\"Vector is empty\"))\n    end\n    \n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if maximum < l[i] \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nmax_element()",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend", "    if l.length\
    \ == 0\n        throw(ArgumentError(\"Vector is empty\"))\n    end\n    \n   \
    \ maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n      \
    \      maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Vector is empty\"))\n    end\n    \n    maximum = l[1]\n    for i in 2:length(l)\
    \ \n        if l[i] > maximum \n            maximum = l[i] \n        end\n   \
    \ end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\nmax_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the sum of the elements in the vector.\nWrite a function that returns\
    \ the product of the elements in the vector.\nWrite a function that returns the\
    \ maximum of the elements in the vector.\nWrite a function that returns the minimum\
    \ of the elements in the vector.\nWrite a function that returns the absolute value\
    \ of the elements in the vector.", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n\
    \            maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the index of the element\
    \ with the maximum value in a vector.", "    \n    maximum = l[1]\n    for i in\
    \ 2:length(l)\n        if l[i] > maximum\n            maximum = l[i]\n       \
    \ end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the index of the maximum element in the vector.\n\
    \    >>> max_element_index(l::Vector{Int64})\n    >>> max_element_index([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    12\n    \"\"\"", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>",
  "    if length(l) == 0 \n        throw(ArgumentError(\"Empty vector\"))\n    end\n\
    \    \n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum\
    \ \n            maximum = l[i]\n        end\n    end\n    return maximum\nend",
  "    if length(l) == 0 \n        return 0 \n    else \n        return l[argmax(l)]\n\
    end\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n</cell>\n<text>\nExercise 4\nWrite a function that returns the\
    \ index of the maximum element in the vector.\n    >>> max_element_index(l::Vector{Int64})\n\
    \    >>> max_element_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    12\n\
    \    \"\"\"", "    if length(l) == 0 \n        throw(ArgumentError(\"Vector is\
    \ empty\"))\n    end\n    max = l[1]\n    for i in 2:length(l) \n        if l[i]\
    \ > max \n            max = l[i]\n        end\n    end\n    return max\nend",
  "    if length(l) == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n   \
    \ end\n    \n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] >\
    \ maximum \n            maximum = l[i]\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum element\
    \ in the vector.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    return maximum(l)\
    \ \nend\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n    for i in\
    \ 2:length(l)\n        if l[i] > maximum\n            maximum = l[i]\n       \
    \ end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(l) == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n   \
    \ end\n    \n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] >\
    \ maximum \n            maximum = l[i]\n        end\n    end\n    return maximum\n\
    end", "    \n    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n\
    \            maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the minimum element\
    \ in the vector.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend", "    maximum = l[1]\n\
    \    for i in 2:length(l)\n        if l[i] > maximum\n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the vector.\n    >>>\
    \ min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \"\"\"", "    maximum = max_element(l)\n    return\
    \ maximum\nend", "    maximum = maximum(l) \n    for i in l\n        if i > maximum\n\
    \            maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    maximum = l[1]\n    for i in 2:length(l)\n  \
    \      if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n \
    \   return maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n\
    \    for i in 2:length(l)\n        if l[i] > maximum\n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(l) == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n   \
    \ end\n    return l[end]\nend\n</cell>\n<code language=julia-1.5>", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n    end\n    return\
    \ maximum(l) \nend\n</cell>\n<code language=julia-1.4>", "    \n    maximum =\
    \ l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum = i\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that returns the minimum element in the vector.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Vector is empty\"))\n    end\n    \n    maximum = l[1]\n    for i in 2:length(l)\
    \ \n        if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<text>\nmax_element", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nmax_element\
    \ function can be also written using reduce function from Base package:", "  \
    \  if length(l) == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n   \
    \ end\n    return l[end]\nend", "    maximum = l[1]\n    for i in l[2:end]\n \
    \       if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the minimum element in the vector.\n    >>> min_element([1, 2, 3])\n\
    \    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \"\"\"", "    if length(l) == 0 \n        throw(ArgumentError(\"Vector is\
    \ empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n        if\
    \ l[i] > maximum \n            maximum = l[i] \n        end\n    end\n    return\
    \ maximum\nend", "    return max(l)\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(l) == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n   \
    \ end\n    \n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] >\
    \ maximum \n            maximum = l[i]\n        end\n    end\n    return maximum\n\
    end", "    if length(l) == 0 \n        throw(ArgumentError(\"Vector is empty\"\
    ))\n    end\n    \n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i]\
    \ > maximum \n            maximum = l[i]\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<text>\nmax_element", "    maximum = l[1]\n    for x in l[2:end]\n\
    \        if x > maximum\n            maximum = x\n        end\n    end\n    return\
    \ maximum\nend", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n\
    \            maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    maximum = l[1]\n    for i in l[2:end]\n     \
    \   if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend", "    maximum = l[1]\n    for i in 2:length(l)\n        if l[i]\
    \ > maximum\n            maximum = l[i]\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ minimum element in the vector.\n    >>> min_element([1, 2, 3])\n    1\n    >>>\
    \ min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"",
  "    if length(l) == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n   \
    \ end\n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum\
    \ \n            maximum = l[i]\n        end\n    end\n    return maximum\nend\n\
    </cell>\n<code language=julia-1.3>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n</cell>\n<text>\n3.2.3 min_element\nmin_element(l::Vector{T}) where\
    \ T<:AbstractFloat\nmin_element(l::Vector{T}) where T<:AbstractInt\nmin_element(l::Vector{T})\
    \ where T<:AbstractInt64\nmin_element(l::Vector{T}) where T<:AbstractString\n\
    min_element(l::Vector{T}) where T<:AbstractArray\nmin_element(l::Vector{T}) where\
    \ T<:AbstractAbstractArray\nmin_element(l::Vector{T}) where T<:AbstractSparseArray\n\
    min_element(l::Vector{T}) where T<:AbstractSparseArrayCSC\nmin_element(l::Vector{T})\
    \ where T<:AbstractSparseArrayCSR\nmin_element(l::Vector{T}) where T<:AbstractSparseArrayCOO\n\
    min_element(l::Vector{T}) where T<:AbstractSparseArrayRow\nmin_element(l::Vector{T})\
    \ where T<:AbstractSparseArrayCSX\nmin_element(l::Vector{T}) where T<:AbstractSparseArrayCSC\n\
    min_element(l::Vector{T}) where T<:AbstractSparseArrayCSR\nmin_element(l::Vector{T})\
    \ where T<:AbstractSparseArrayCOO\nmin_element(l::Vector{T}) where T<:AbstractSparseArrayRow\n\
    min_element(l::Vector{T}) where T<:AbstractSparseArrayCSX\nmin_element(l::Vector{T})\
    \ where T<:AbstractSparseArrayCSC\nmin_element(l::Vector{T}) where T<:AbstractSparseArrayCSR\n\
    min_element(l::Vector{T}) where T<:AbstractSparseArrayCOO\nmin_element(l::Vector{T})\
    \ where T<:AbstractSparseArrayRow\nmin_element(l::Vector{T}) where T<:AbstractSparseArrayCSX\n\
    min_element(l::Vector{T}) where T<:AbstractSparseArrayCSC\nmin_element(l::Vector{T})\
    \ where T<:AbstractSparseArrayCSR\nmin_element(l::Vector{T}) where T<", "    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(l) == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n   \
    \ end\n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum\
    \ \n            maximum = l[i] \n        end\n    end\n    return maximum\nend\n\
    </cell>\n<code language=julia-1.5>", "    maximum = max_element(l)\n    minimum\
    \ = min_element(l)\n    if minimum > maximum\n        minimum\n    else\n    \
    \    maximum\n    end\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the minimum element in the vector.\nWrite a function that returns\
    \ the maximum element in the vector.\nWrite a function that returns the median\
    \ element in the vector.\nWrite a function that returns the mean element in the\
    \ vector.\nWrite a function that returns the variance element in the vector.\n\
    Write a function that returns the standard deviation element in the vector.\n\
    Write a function that returns the sum of the elements in the vector.\nWrite a\
    \ function that returns the product of the elements in the vector.\nWrite a function\
    \ that returns the product of the elements in the vector and multiplies it by\
    \ 2.\nWrite a function that returns the product of the elements in the vector\
    \ and multiplies it by 3.\nWrite a function that returns the product of the elements\
    \ in the vector and multiplies it by 4.\nWrite a function that returns the product\
    \ of the elements in the vector and multiplies it by 5.\nWrite a function that\
    \ returns the product of the elements in the vector and multiplies it by 6.\n\
    Write a function that returns the product of the elements in the vector and multiplies\
    \ it by 7.\nWrite a function that returns the product of the elements in the vector\
    \ and multiplies it by 8.\nWrite a function that returns the product of the elements\
    \ in the vector and multiplies it by 9.\nWrite a function that returns the product\
    \ of the elements in the vector and multiplies it by 10.\nWrite a function that\
    \ returns the product of the elements in the vector and multiplies it by 11.\n\
    Write a function that returns the product of the elements in the vector and multiplies\
    \ it by 12.\nWrite a function that returns the product of the elements in the\
    \ vector and multiplies it by 13.\nWrite a function that returns the product of\
    \ the elements in the vector and multiplies it by 14.\nWrite a function that returns\
    \ the product of the elements in the vector and multiplies it by 15.\nWrite a\
    \ function that returns the product of the elements in the vector and multiplies\
    \ it by 16.\nWrite a function that returns the product of the elements in the\
    \ vector and multiplies it by 17.\nWrite a function that returns the product of\
    \ the elements in the vector and multiplies it by 18.\nWrite a function that returns\
    \ the product of the elements in the vector and multiplies it by 19.\nWrite a\
    \ function that returns the product of the elements in the vector and multiplies\
    \ it by 20.\nWrite a function that returns the product of the elements in the\
    \ vector and multiplies it by 21.\nWrite a function that returns the product of\
    \ the elements in the vector and multiplies it by 22.\nWrite a function that returns\
    \ the product of the elements in the vector and multiplies it by 23.\nWrite a\
    \ function that returns the product of the elements in the vector and multiplies\
    \ it by 24.\nWrite ", "    maximum = l[1]\n    for i in l[2:end]\n        if i\
    \ > maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ index of the maximum element in the vector.\n    >>> max_element([1, 2, 3])\n\
    \    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n\
    \    >>> max_element([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9])\n    10\n    >>> max_element([-10, -9, -8, -7, -6, -5, -4, -3,\
    \ -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    10\n    \"\"\"", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    return maximum\nend", "    if length(l) == 0 \n       \
    \ throw(ArgumentError(\"Vector is empty\"))\n    end\n    maximum = l[1]\n   \
    \ for i in 2:length(l) \n        if l[i] > maximum \n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<text>\nmax_element",
  "    if length(l) == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n   \
    \ end\n    \n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] >\
    \ maximum \n            maximum = l[i]\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<text>\nmax_element()\nThis function returns the maximum element\
    \ in a vector.", "    if length(l) == 0 \n        throw(ArgumentError(\"Vector\
    \ is empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n     \
    \   if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n   \
    \ return maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n\
    \    for i in 2:length(l)\n        if l[i] > maximum\n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum element in the vector.\n    >>>\
    \ min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \"\"\"", "    \n    maximum = l[1]\n    for i in\
    \ l[2:end]\n        if i > maximum\n            maximum = i\n        end\n   \
    \ end\n    return maximum\nend", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Vector is empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n\
    \        if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<text>\nmax_element()", "    maximum = l[1]\n\
    \    for x in l[2:end]\n        if x > maximum\n            maximum = x\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements in the vector.\n  \
    \  >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \"\"\"", "    maximum = l[1]\n    for x in l[2:end]\n        if\
    \ x > maximum\n            maximum = x\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Vector is empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n\
    \        if l[i] > maximum \n            maximum = l[i] \n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.3>", "    \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the vector.\n    >>>\
    \ min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \"\"\"", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Vector is empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n\
    \        if l[i] > maximum \n            maximum = l[i] \n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<text>\nmax_element()", "    maximum = l[1]\n\
    \    for i in 2:length(l)\n        if l[i] > maximum\n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nmax_element!\n\
    max_element!() modifies the vector in place. \nIt returns the modified vector\
    \ and does not return anything.", "    \n    maximum = l[1]\n    for i in 2:length(l)\n\
    \        if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum =\
    \ l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the index of the maximum element in the vector.",
  "    maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n     \
    \       maximum = l[i]\n        end\n    end\n    return maximum\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your code works fine but i\
    \ was looking for a more efficient solution. Thanks anyway\n<|/ c |>\n<| c |>\n\
    I believe that my solution is more efficient than yours. I believe that your solution\
    \ uses `sort` function which has O(n log n) complexity. My solution uses `maximum`\
    \ function which has O(n) complexity. My solution also uses `sort` function which\
    \ has O(n log n) complexity. My solution also uses `maximum` function which has\
    \ O(n) complexity. My solution also uses `sort` function which has O(n log n)\
    \ complexity. My solution also uses `maximum` function which has O(n) complexity.\
    \ My solution also uses `sort` function which has O(n log n) complexity. My solution\
    \ also uses `maximum` function which has O(n) complexity. My solution also uses\
    \ `sort` function which has O(n log n) complexity. My solution also uses `maximum`\
    \ function which has O(n) complexity.\n<|/ c |>\n<| c |>\nI believe that my solution\
    \ is more efficient than yours. I believe that your solution uses `sort` function\
    \ which has O(n log n) complexity. My solution uses `maximum` function which has\
    \ O(n) complexity. My solution also uses `sort` function which has O(n log n)\
    \ complexity. My solution also uses `maximum` function which has O(n) complexity.\
    \ My solution also uses `sort` function which has O(n log n) complexity. My solution\
    \ also uses `maximum` function which has O(n) complexity. My solution also uses\
    \ `sort` function which has O(n log n) complexity. My solution also uses `maximum`\
    \ function which has O(n) complexity.\n<|/ c |>\n<| c |>\nI believe that my solution\
    \ is more efficient than yours. I believe that your solution uses `sort` function\
    \ which has O(n log n) complexity. My solution uses `maximum` function which has\
    \ O(n) complexity. My solution also uses `sort` function which has O(n log n)\
    \ complexity. My solution also uses `maximum` ", "    if length(l) == 0 \n   \
    \     throw(ArgumentError(\"Vector is empty\"))\n    end\n    maximum = l[1]\n\
    \    for i in 2:length(l) \n        if l[i] > maximum \n            maximum =\
    \ l[i] \n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 3: Write a function that returns the sum of the elements in the vector.\n  \
    \  >>> sum_element([1, 2, 3])\n    6\n    >>> sum_element([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    123\n    \"\"\"", "    if l.length == 1\n        return\
    \ l[0]\n    end\n    maximum = l[1]\n    for i in 2:length(l)\n        if l[i]\
    \ > maximum\n            maximum = l[i]\n        end\n    end\n    return maximum\n\
    end", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n   \
    \         maximum = i\n        end\n    end\n    maximum\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    maximum = l[1]\n    for i in 2:length(l)\n      \
    \  if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ minimum element in the vector.\n    >>> min_element([1, 2, 3])\n    1\n    >>>\
    \ min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"",
  "    if l.length == 1\n        return l[0]\n    end\n    \n    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    return maximum\nend", "    maximum = l[1]\n    for i in\
    \ l[2:end]\n        if i > maximum\n            maximum = i\n        end\n   \
    \ end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum\
    \ = max_element(l)\n    for e in l\n        if e > maximum\n            maximum\
    \ = e\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for x in l[2:end]\n        if x > maximum\n           \
    \ maximum = x\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(l) == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n   \
    \ end\n    \n    max = l[1]\n    for i in 2:length(l) \n        if l[i] > max\
    \ \n            max = l[i] \n        end\n    end\n    return max\nend\n</cell>\n\
    <code language=julia-1.4>", "    maximum = l[1]\n    for i in 2:length(l)\n  \
    \      if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n \
    \   return maximum\nend\n</cell>\n<code language=julia-1.5>", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements in the vector.", " \
    \   if length(l) == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n  \
    \  end\n    max = l[1]\n    for i in 2:length(l) \n        if l[i] > max \n  \
    \          max = l[i]\n        end\n    end\n    return max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(l) == 0 \n        return 0 \n    else \n\
    \        return l[argmax(l)]\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n\
    \            maximum = l[i]\n        end\n    end\n    maximum\nend", "    maximum\
    \ = l[1]\n    for x in l[2:end]\n        if x > maximum\n            maximum =\
    \ x\n        end\n    end\n    return maximum\nend", "    return max(l)\nend",
  "    \n    if length(l) == 0 \n        return 0 \n    else \n        return max(l)\
    \ \nend \n</cell>\n<code language=julia-1.3>", "    if length(l) == 0 \n     \
    \   throw(ArgumentError(\"Vector is empty\"))\n    end\n    maximum = l[1]\n \
    \   for i in 2:length(l) \n        if l[i] > maximum \n            maximum = l[i]\
    \ \n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.4>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the elements of a vector.", "  \
    \  if length(l) == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n   \
    \ end\n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum\
    \ \n            maximum = l[i]\n        end\n    end\n    return maximum\nend\n\
    </cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ element in the vector.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    maximum = max_element(l)\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n    end\n    return\
    \ l[end]\nend\n</cell>\n<text>\nExercise: Write a function that returns the minimum\
    \ element in the vector.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the vector.\n    >>>\
    \ min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \"\"\"", "    maximum = l[1]\n    for i in 2:length(l)\n\
    \        if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    return max(l)\n\
    end", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n   \
    \         maximum = i\n        end\n    end\n    return maximum\nend", "    \n\
    \    maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n   \
    \         maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the minimum element\
    \ in the vector.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n\
    \            maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    maximum = l[1]\n    for i in 2:length(l)\n  \
    \      if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n \
    \   return maximum\nend\n</cell>\n<code language=julia-1.5>", "    return max(l)\n\
    end\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ sum of the elements in the vector.", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.3>", "    if length(l) == 0 \n\
    \        throw(ArgumentError(\"Vector is empty\"))\n    end\n    maximum = l[1]\n\
    \    for i in 2:length(l) \n        if l[i] > maximum \n            maximum =\
    \ l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nmax_element()\n\
    The max_element() function returns the maximum element in a vector. \nIf the vector\
    \ is empty, an ArgumentError is thrown.", "    \n    maximum = l[1]\n    for i\
    \ in 2:length(l)\n        if l[i] > maximum\n            maximum = l[i]\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nThe function\
    \ max_element returns the maximum element in the vector l. \nThe function max_element\
    \ has two arguments: l and an index. \nThe function max_element returns the maximum\
    \ element in the vector l at the index i. \nThe function max_element has two return\
    \ values: maximum and i. \nThe function max_element has two arguments: l and an\
    \ index. \nThe function max_element returns the maximum element in the vector\
    \ l at the index i. \nThe function max_element has two return values: maximum\
    \ and i. \nThe function max_element has two arguments: l and an index. \nThe function\
    \ max_element returns the maximum element in the vector l at the index i. \nThe\
    \ function max_element has two return values: maximum and i. \nThe function max_element\
    \ has two arguments: l and an index. \nThe function max_element returns the maximum\
    \ element in the vector l at the index i. \nThe function max_element has two return\
    \ values: maximum and i. \nThe function max_element has two arguments: l and an\
    \ index. \nThe function max_element returns the maximum element in the vector\
    \ l at the index i. \nThe function max_element has two return values: maximum\
    \ and i. \nThe function max_element has two arguments: l and an index. \nThe function\
    \ max_element returns the maximum element in the vector l at the index i. \nThe\
    \ function max_element has two return values: maximum and i. \nThe function max_element\
    \ has two arguments: l and an index. \nThe function max_element returns the maximum\
    \ element in the vector l at the index i. \nThe function max_element has two return\
    \ values: maximum and i. \nThe function max_element has two arguments: l and an\
    \ index. \nThe function max_element returns the maximum element in the vector\
    \ l at the index i. \nThe function max_element has two return values: maximum\
    \ and i. \nThe function max_element has two arguments: l and an index. \nThe function\
    \ max_element returns the maximum element in the vector l at the index i. \nThe\
    \ function max_element has two return values: maximum and i. \nThe function max_element\
    \ has two arguments: l and an index. \nThe function max_element returns the maximum\
    \ element in the vector l at the index i. \nThe function max_element has two return\
    \ values: maximum and i. \nThe function max_element has two arguments: l and an\
    \ index. ", "    if length(l) == 0 \n        throw(ArgumentError(\"Vector is empty\"\
    ))\n    end\n    \n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i]\
    \ > maximum \n            maximum = l[i]\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.4>", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.4>", "    if length(l) == 0 \n\
    \        throw(ArgumentError(\"Vector is empty\"))\n    end\n    maximum = l[1]\n\
    \    for i in 2:length(l) \n        if l[i] > maximum \n            maximum =\
    \ l[i]\n        end\n    end\n    return maximum\nend", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    return max(l)\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the minimum element in the vector.\n    >>> min_element([1, 2,\
    \ 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   -10\n    \"\"\"", "    return maximum(l) \nend\n</cell>\n<code language=julia-1.3>",
  "    if l.length == 0\n        throw(ArgumentError(\"Cannot compute max element\
    \ of empty vector\"))\n    end\n    max = l[1]\n    for i in 2:length(l)\n   \
    \     if l[i] > max\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n    for\
    \ i in l[2:end]\n        if i > maximum\n            maximum = i\n        end\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    maximum = l[1]\n    for element in l[2:end]\n        if element > maximum\n\
    \            maximum = element\n        end\n    end\n    return maximum\nend\n\
    </cell>\n<code language=julia-1.3>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the index\
    \ of the maximum element in a vector.", "    maximum = maximum(l) \n    for i\
    \ in l\n        if i > maximum\n            maximum = i\n        end\n    end\n\
    \    return maximum\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nI\
    \ like to use this approach for vectors:\n<code>", "    if length(l) == 0 \n \
    \       throw(ArgumentError(\"Vector is empty\"))\n    end\n    maximum = l[1]\n\
    \    for i in 2:length(l) \n        if l[i] > maximum \n            maximum =\
    \ l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(l) == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n   \
    \ end\n    \n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] >\
    \ maximum \n            maximum = l[i]\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.4>\nmax_element([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the index of the maximum element in the vector.", "    maximum = l[1]\n\
    \    for i in 2:length(l)\n        if l[i] > maximum\n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.4>",
  "    maximum = maximum(l) \n    for x in l \n        if x > maximum \n         \
    \   maximum = x \n        end \n    end \n    return maximum \nend \n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia,arrays |>\n<code>", "    if length(l) == 0\
    \ \n        throw(ArgumentError(\"Vector is empty\"))\n    end\n    \n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if maximum < l[i] \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend", "    if l.length==0\n\
    \        throw(ArgumentError(\"Vector is empty\"))\n    end\n    maximum = l[1]\n\
    \    for i in 2:length(l)\n        if l[i] > maximum\n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n     \
    \       maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\n4.3 Return minimum element in the vector.\nReturn minimum element\
    \ in the vector.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n    end\n    return\
    \ maximum(l) \nend", "    maximum = l[1]\n    for i in l[2:end]\n        if i\
    \ > maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.3>", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>", "    \n    maximum = l[1]\n\
    \    for e in l[2:end]\n        if e > maximum\n            maximum = e\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n     \
    \       maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    maximum = l[1]\n    for i in 2:length(l)\n  \
    \      if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n \
    \   return maximum\nend\n</cell>\n<code language=julia-1.4>\nmax_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the index of the maximum element in the vector.\n    >>> max_element_index([1,\
    \ 2, 3])\n    2\n    >>> max_element_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    12\n    \"\"\"", "    if l.length == 1\n        return l[0]\n   \
    \ end\n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum\n\
    \            maximum = l[i]\n        end\n    end\n    return maximum\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis is not the fastest solution. `@time max_element([5,3,-5,2,-3,3,9,0,123,1,-10])`\
    \ returns `123` but `@time max_element([5,3,-5,2,-3,3,9,0,123,1,-10])` returns\
    \ `123` as well. `@time max_element([5,3,-5,2,-3,3,9,0,123,1,-10])` returns `123`\
    \ as well. `@time max_element([5,3,-5,2,-3,3,9,0,123,1,-10])` returns `123` as\
    \ well. `@time max_element([5,3,-5,2,-3,3,9,0,123,1,-10])` returns `123` as well.\
    \ `@time max_element([5,3,-5,2,-3,3,9,0,123,1,-10])` returns `123` as well. `@time\
    \ max_element([5,3,-5,2,-3,3,9,0,123,1,-10])` returns `123` as well. `@time max_element([5,3,-5,2,-3,3,9,0,123,1,-10])`\
    \ returns `123` as well. `@time max_element([5,3,-5,2,-3,3,9,0,123,1,-10])` returns\
    \ `123` as well. `@time max_element([5,3,-5,2,-3,3,9,0,123,1,-10])` returns `123`\
    \ as well. `@time max_element([5,3,-5,2,-3,3,9,0,123,1,-10])` returns `123` as\
    \ well. `@time max_element([5,3,-5,2,-3,3,9,0,123,1,-10])` returns `123` as well.\
    \ `@time max_element([5,3,-5,2,-3,3,9,0,123,1,-10])` returns `123` as well. `@time\
    \ max_element([5,3,-5,2,-3,3,9,0,123,1,-10])` returns `123` as well. `@time max_element([5,3,-5,2,-3,3,9,0,123,1,-10])`\
    \ returns `123` as well. `@time max_element([5,3,-5,2,-3,3,9,0,123,1,-10])` returns\
    \ `123` as well. `@time max_element([5,3,-5,2,-3,3,9,0,123,1,-10])` returns `123`\
    \ as well. `@time max_", "    return max(l)\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the minimum element in the vector.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    maximum = l[1]\n    for i in 2:length(l)\n       \
    \ if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n    return\
    \ maximum\nend", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n\
    \            maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    maximum = l[1]\n    for i in 2:length(l)\n  \
    \      if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n \
    \   return maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  maximum = maximum(l) \n    for x in l \n        if x > maximum \n         \
    \   maximum = x \n        end \n    end \n    return maximum \nend \n</code>\n\
    <|/ a tags=julia |>\n<| c |>\n`maximum` already does what you want, so you can\
    \ just do `maximum(l)`.\n<|/ c |>\n<| c |>\nYes, but `maximum` does not work on\
    \ `Int64` vectors. I added a version that does work on `Int64` vectors.\n<|/ c\
    \ |>\n<| c |>\n`maximum` does work on `Int64` vectors. Try `maximum(Int64[1,2,3])`.\n\
    <|/ c |>\n<| c |>\nYes, it does. Try `maximum(Int64[1,2,3])`.\n<|/ c |>\n<| c\
    \ |>\nOh, I see what you mean. Yes, `maximum` does work on `Int64` vectors. I\
    \ thought you were talking about `maximum` not working on `Int64` vectors. I guess\
    \ I misunderstood your question.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    maximum\
    \ = max_element(l)\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(l) == 0 \n        throw(ArgumentError(\"Vector is empty\"))\n   \
    \ end\n    \n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] >\
    \ maximum \n            maximum = l[i]\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.3>", "    maximum = maximum(l) \n    for\
    \ x in l \n        if x > maximum \n            maximum = x \n        end \n \
    \   end \n    return maximum \nend \n</code>\n<|/ a tags=julia |>\n<| a dscore=1\
    \ |>\n<code>", "    maximum = l[1]\n    for i in 2:length(l)\n        if l[i]\
    \ > maximum\n            maximum = l[i]\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>", "    \n    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    return maximum(l)\nend", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Vector is empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n\
    \        if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<text>\nmax_element", "    if length(l) ==\
    \ 0 \n        throw(ArgumentError(\"Vector is empty\"))\n    end\n    \n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 10\nWrite a function that returns the sum of the elements in the vector.\n \
    \   >>> sum_element([1, 2, 3])\n    6\n    >>> sum_element([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    123\n    \"\"\"", "    maximum = l[1]\n    for i in\
    \ 2:length(l)\n        if l[i] > maximum\n            maximum = l[i]\n       \
    \ end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum element in the vector.\n    >>>\
    \ min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \"\"\"", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n   \
    \ for i in 2:length(l)\n        if l[i] > maximum\n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the sum of the elements in the vector.\n  \
    \  >>> sum_element([1, 2, 3])\n    6\n    >>> sum_element([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    123\n    \"\"\"", "    maximum = l[1]\n    for i in\
    \ l[2:end]\n        if i > maximum\n            maximum = i\n        end\n   \
    \ end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n          \
    \  maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    maximum = l[1]\n    for i in 2:length(l)\n\
    \        if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the elements in the vector.\n    >>> sum_element([1, 2, 3])\n   \
    \ 6\n    >>> sum_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    10\n  \
    \  \"\"\"", "    maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n\
    \            maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    maximum = l[1]\n    for i in l[2:end]\n     \
    \   if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend", "    maximum = max_element(l)\n    for el in l\n        if el\
    \ > maximum\n            maximum = el\n        end\n    end\n    return maximum\n\
    end", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n   \
    \         maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.4>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the minimum element\
    \ in the vector.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty vector\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i] \n        end\n    end\n    return maximum\nend", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for x in l[2:end]\n        if x > maximum\n           \
    \ maximum = x\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
