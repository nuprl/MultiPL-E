name: HumanEval_40_triples_sum_to_zero
language: jl
prompt: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
  \    it returns true if there are three distinct elements in the vector that\n \
  \   sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n\
  \    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>> triples_sum_to_zero([1,\
  \ 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    true\n\
  \    >>> triples_sum_to_zero([1])\n    false\n    \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
  \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
  \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
  \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
  \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
  \ 3, 5, -100]) == false)\nend\n"
completions: ["    \n    triples_sum_to_zero = zeros(Int64, 3)\n    triples_sum_to_zero[1]\
    \ = true\n    triples_sum_to_zero[2] = true\n    triples_sum_to_zero[3] = true\n\
    \    \n    for x in l\n        if triples_sum_to_zero[x] == true\n           \
    \ triples_sum_to_zero[x+3] = true\n        end\n    end\n    \n    return triples_sum_to_zero\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ as an input, and returns true if the vector contains three distinct elements\
    \ that sum to zero, and false otherwise.", "    \n    sum = 0\n    for i in l\n\
    \        sum += i\n    end\n    \n    if sum == 0 \n        return false\n   \
    \ end\n    \n    sum = 0\n    for i in l\n        sum += i\n    end\n    \n  \
    \  if sum == 0 \n        return false\n    end\n    \n    sum = 0\n    for i in\
    \ l\n        sum += i\n    end\n    \n    if sum == 0 \n        return false\n\
    \    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@test\
    \ triples_sum_to_zero([1, 3, 5, 0]) == false\n@test triples_sum_to_zero([1, 3,\
    \ -2, 1]) == true\n@test triples_sum_to_zero([1, 2, 3, 7]) == false\n@test triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@test triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\nExercise 2\nWrite a function called triples_sum_to_zero that takes a vector\
    \ of integers as an input.\nIt returns true if there are three distinct elements\
    \ in the vector that sum to zero, and false otherwise.", "    \n    sum = 0\n\
    \    for x in l\n        sum += x\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0])\n@test triples_sum_to_zero([1, 3, -2,\
    \ 1])\n@test triples_sum_to_zero([1, 2, 3, 7])\n@test triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n@test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers as an input, and returns\
    \ true if the vector has all positive integers, and false otherwise.", "    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0 \n            return\
    \ true\n    return false\nend", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function called triples_sum_to_zero that takes a vector of integers\
    \ as an input.\nIt returns true if there are three distinct elements in the vector\
    \ that sum to zero, and false otherwise.", "    sum = 0\n    for i in l\n    \
    \    sum += i\n        if sum > 0\n            return false\n        end\n   \
    \ end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function called\
    \ triples_sum_to_zero that takes an array of integers as an input, and returns\
    \ true if there are three distinct elements in the array that sum to zero, and\
    \ false otherwise.", "    sum = 0\n    for i in l\n        sum += i\n        if\
    \ sum == 0 \n            return true\n        end\n    end\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes\
    \ a vector of integers as an input.\n    it returns true if there are three distinct\
    \ elements in the vector that\n    sum to zero, and false otherwise.", "    triples_sum_to_zero\
    \ = sum([triples_sum_to_zero(triple) for triple in l])\n    triples_sum_to_zero\
    \ < 3\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers as an input,\
    \ and returns true if the vector contains exactly three distinct elements that\
    \ sum to zero, and false otherwise.", "    \n    sum = 0\n    for i in l\n   \
    \     sum += i\n        if sum == 0 \n            return true\n        end\n \
    \   end\n    return false\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers as an input, and returns a vector of booleans\
    \ indicating whether each of the integers in the vector is positive, negative\
    \ or zero.", "    triples_sum_to_zero(l, 0)\nend", "    sum = 0\n    for i in\
    \ l\n        sum += i\n        if sum == 0 \n            return true\n       \
    \ end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\n4.3 The function is_power_of_two\nWrite a function\
    \ that checks if a number is a power of two. Your function should take one number\
    \ as an input.", "    triples_sum_to_zero(l)\nend", "    \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    \n    for x in l\n        if triples_sum_to_zero[x]\
    \ == 1\n            return true\n        end\n    end\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1, 3, 5, 0])\
    \ == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert triples_sum_to_zero([1,\
    \ 2, 3, 7]) == false\n@assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n\
    @assert triples_sum_to_zero([1]) == false\n</cell>\n<text>\nProblem 7: Write a\
    \ function that takes an array of integers and returns an array of integers such\
    \ that each element of the new array is equal to the sum of the three previous\
    \ elements in the original array. For example, if the input array is [10, 5, 1,\
    \ 3, 6, 4, 2], the output array should be [10, 15, 1, 18, 6, 24, 2].", "    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0\n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1,3,5,0])\n@test triples_sum_to_zero([1,3,-2,1])\n\
    @test triples_sum_to_zero([1,2,3,7])\n@test triples_sum_to_zero([2,4,-5,3,9,7])\n\
    @test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector of integers as an input, and returns true if there are three\
    \ distinct elements in the vector that sum to zero, and false otherwise.", " \
    \   sum = 0\n    for i in l\n        sum += i\n        if sum > 0\n          \
    \  return false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n    it\
    \ returns true if there are three distinct elements in the vector that\n    sum\
    \ to zero, and false otherwise.", "    \n    sum = 0\n    for x in l\n       \
    \ sum += x\n        if sum == 0 \n            return true\n        end\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\n4.5 Write a function that takes an array of integers and returns an array\
    \ of integers where the integers are the multiples of 3 or 5 that come before\
    \ the first 3 or 5 integers in the array. For example, if the array is [3, 6,\
    \ 9, 12, 15], the function should return [3, 6, 9, 12].", "    triples_sum_to_zero\
    \ = l .== 0 .|| l .== -3 .|| l .== -6 .|| l .== -9 \n    return triples_sum_to_zero\
    \ \nend", "    triples_sum_to_zero(l)\nend", "    \n    sum = 0\n    for x in\
    \ l\n        sum += x\n        if sum == 0\n            return true\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a vector of integers as an input.\n    it returns true if there are three\
    \ distinct elements in the vector that\n    sum to zero, and false otherwise.",
  "    triples = Vector{Int64}()\n    for i in l\n        if triples.length == 0 ||\
    \ triples[end] == i\n            triples.push(i)\n        elseif triples[end]\
    \ == i\n            triples[end] = triples[end - 1]\n        else\n          \
    \  triples[end] = i\n        end\n    end\n    triples_sum_to_zero(triples)\n\
    end", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l)\nend",
  "    triples_sum_to_zero(l, 0)\nend", "    sum = 0\n    for i in l\n        sum\
    \ += i\n        if sum == 0 \n            return true\n        end\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a vector of integers as an input.\n    it returns true if there are three\
    \ distinct elements in the vector that\n    sum to zero, and false otherwise.",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n         \
    \   return true\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers as an input, and returns true if there are three\
    \ distinct elements in the vector that sum to zero, and false otherwise.", " \
    \   triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l)\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a vector of integers\
    \ as an input.\n    it returns true if there are three distinct elements in the\
    \ vector that\n    sum to zero, and false otherwise.", "    triples_sum_to_zero(l)\n\
    end", "    triples_sum_to_zero = @view l |> filter(x->x==0 || x==-3 || x==-7,\
    \ l) |> length==3\n    return triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero(vec(1:10000));\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a vector of integers as an input, and returns true if the\
    \ vector contains three distinct elements that sum to zero, and false otherwise.",
  "    \n    triples_sum_to_zero = zeros(Int64, 3)\n    \n    for i = 1:length(l)\n\
    \        if l[i] > 0 && l[i] < 3 && l[i] + l[i+1] + l[i+2] < 0\n            triples_sum_to_zero[i]\
    \ = true\n        end\n    end\n    \n    return !any(triples_sum_to_zero)\nend\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(vec(1:100000));\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a vector of integers\
    \ as an input and returns a vector of booleans indicating whether each element\
    \ in the vector is odd.", "    \n    sum = 0\n    for i in l\n        sum += i\n\
    \        if sum > 0\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers as an input, and returns true if there are three distinct elements\
    \ in the vector that sum to zero, and false otherwise.", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero(l)\nend", "    \n    sum = 0\n    for i in\
    \ l\n        sum += i\n        if sum == 0 \n            return true\n       \
    \ end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns true if the vector has exactly three distinct elements\
    \ that sum to zero.", "    \n    triples_sum_to_zero = false\n    \n    triples_sum_to_zero\
    \ = triples_sum_to_zero or l[1]==0 or l[2]==0 or l[3]==0\n    triples_sum_to_zero\
    \ = triples_sum_to_zero or l[1]==l[2] or l[1]==l[3] or l[2]==l[3]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero or l[1]==l[2] or l[1]==l[3] or l[2]==l[3] or l[1]==l[3]\
    \ or l[2]==l[3]\n    triples_sum_to_zero = triples_sum_to_zero or l[1]==l[2] or\
    \ l[1]==l[3] or l[2]==l[3] or l[1]==l[3] or l[2]==l[3]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero or l[1]==l[2] or l[1]==l[3] or l[2]==l[3] or l[1]==l[3]\
    \ or l[2]==l[3]\n    triples_sum_to_zero = triples_sum_to_zero or l[1]==l[2] or\
    \ l[1]==l[3] or l[2]==l[3] or l[1]==l[3] or l[2]==l[3]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero or l[1]==l[2] or l[1]==l[3] or l[2]==l[3] or l[1]==l[3]\
    \ or l[2]==l[3]\n    triples_sum_to_zero = triples_sum_to_zero or l[1]==l[2] or\
    \ l[1]==l[3] or l[2]==l[3] or l[1]==l[3] or l[2]==l[3]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero or l[1]==l[2] or l[1]==l[3] or l[2]==l[3] or l[1]==l[3]\
    \ or l[2]==l[3]\n    triples_sum_to_zero = triples_sum_to_zero or l[1]==l[2] or\
    \ l[1]==l[3] or l[2]==l[3] or l[1]==l[3] or l[2]==l[3]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero or l[1]==l[2] or l[1]==l[3] or l[2]==l[3] or l[1]==l[3]\
    \ or l[2]==l[3]\n    triples_sum_to_zero = triples_sum_to_zero or l[1]==l[2] or\
    \ l[1]==l[3] or l[2]==l[3] or l[1]==l[3] or l[2]==l[3]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero or ", "    triples_sum_to_zero(l, 0)\nend", "    sum =\
    \ 0\n    for i in l\n        sum += i\n        if sum == 0\n            return\
    \ true\n    return false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers as an input, and returns true if there are three\
    \ distinct elements in the vector that sum to zero, and false otherwise.", " \
    \   triples_sum_to_zero = @view l |> filter((x) -> x == 0, \n        reduce(+,\
    \ \n            map(x -> x == 0 ? x : x - 1, \n                filter(x -> x ==\
    \ 0, \n                    reduce(+, \n                        map(x -> x == 0\
    \ ? x : x - 1, \n                            filter(x -> x == 0, \n          \
    \                      reduce(+, \n                                    map(x ->\
    \ x == 0 ? x : x - 1, \n                                        filter(x -> x\
    \ == 0, \n                                            reduce(+, \n           \
    \                                     map(x -> x == 0 ? x : x - 1, \n        \
    \                                            filter(x -> x == 0, \n          \
    \                                              reduce(+, \n                  \
    \                                          map(x -> x == 0 ? x : x - 1, \n   \
    \                                                             filter(x -> x ==\
    \ 0, \n                                                                    reduce(+,\
    \ \n                                                                        map(x\
    \ -> x == 0 ? x : x - 1, \n                                                  \
    \                          filter(x -> x == 0, \n                            \
    \                                                    reduce(+, \n            \
    \                                                                        map(x\
    \ -> x == 0 ? x : x - 1, \n                                                  \
    \                                      filter(x -> x == 0, \n                \
    \                                                                            reduce(+,\
    \ \n                                                                         \
    \                       map(x -> x == 0 ? x : x - 1, \n                      \
    \                                                                            \
    \  filter(x -> x == 0, \n                                                    \
    \                                                    reduce(+, \n            \
    \                                                                            \
    \                    map(x -> x == 0 ? x : x - 1, \n                         \
    \                                                                            \
    \           filter(x -> x == 0, \n                                           \
    \                                                                         reduce(+,\
    \ \n                                                                         \
    \                                               map(x -> x == 0 ? x : x - 1, \n\
    \                                                                            \
    \                                                filter(x -> x == 0, \n      \
    \                                                                            \
    \                                              reduce(+, \n                  \
    \                                                                            \
    \                                      map(x -> x == 0 ? x : x - 1, \n       \
    \                                                                            \
    \                                                     filter(x -> x == 0, \n \
    \                                                                            \
    \                                                               reduce(+, \n \
    \                                                                            \
    \                                                                   map(x -> x\
    \ == 0 ? x : x - 1, \n                                                       \
    \                                                                            \
    \                 filter(x -> x == 0, \n                                     \
    \                                                                            \
    \                                       reduce(+, \n                         \
    \                                                                            \
    \                                                       map(x -> x == 0 ? x :\
    \ x - 1, \n                                                                  \
    \                                                                            \
    \                  filter(x -> x == 0, \n                                    \
    \                                                                            \
    \                                                    reduce(+, \n            \
    \                                                                            \
    \                                                                            \
    \    map(x -> x == 0 ? x : x - 1, \n                                         \
    \                                                                            \
    \                                                       filter(x -> x == 0, \n\
    \                                                                            \
    \                                                                            \
    \                        reduce(+, \n                                        \
    \                                                                            \
    \                                                                map(x -> x ==\
    \ 0 ? x : x - 1, \n                                                          \
    \                                                                            \
    \                                                  filter(x -> x == 0, \n    \
    \                                                                            \
    \                                                                            \
    \                                reduce(+, \n                                \
    \                                                                            \
    \                                                                            \
    \        map(x -> x == 0 ? x : x - 1, \n                                     \
    \                                                                            \
    \                                                                            \
    \   filter(x -> x == 0, \n                                                   \
    \                                                                            \
    \                                                                     reduce(+,\
    \ \n                                                                         \
    \                                                                            \
    \                                                   map(x -> x == 0 ? x : x -\
    \ 1, \n                                                                      \
    \                                                                            \
    \                                                          filter(x -> x == 0,\
    \ \n                                                                         \
    \                                                                            \
    \                                                           reduce(+, \n     \
    \                                                                            \
    \                                                                            \
    \                                                       map(x -> x == 0 ? x :\
    \ x - 1, \n                                                                  \
    \                                                                            \
    \                                                                          filter(x\
    \ -> x == 0, \n                                                              \
    \                                                                            \
    \                                                                            \
    \      reduce(+, \n                                                          \
    \                                                                            \
    \                                                                            \
    \              map(x -> x == 0 ? x : x - 1, \n                               \
    \                                                                            \
    \                                                                            \
    \                                             filter(x -> x == ", "    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a vector of integers as an input.\n    it returns true if there are three\
    \ distinct elements in the vector that\n    sum to zero, and false otherwise.",
  "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers as an input,\
    \ and returns true if the vector contains three distinct elements that sum to\
    \ zero, and false otherwise.", "    triples_sum_to_zero(l, 0)\nend", "    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0 \n            return\
    \ true\n        end\n    end\n    return false\nend", "    sum = 0\n    for i\
    \ in l\n        sum += i\n        if sum == 0 \n            return true\n    \
    \    end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n    it\
    \ returns true if there are three distinct elements in the vector that\n    sum\
    \ to zero, and false otherwise.", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l)\n\
    end", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero = @view l\
    \ .== 0 .* @view l .== 0 .* @view l .== 0\n    return sum(triples_sum_to_zero)\
    \ == 3\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(vec(1:1000000));\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an array of integers\
    \ and returns an array of integers such that each element in the new array is\
    \ equal to the product of all the numbers in the original array except the one\
    \ that it is currently on.", "    sum = 0\n    for x in l\n        sum += x\n\
    \        if sum == 0\n            return true\n    return false\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l)\n\
    end", "    triples = zeros(Int64, 3)\n    for el in l\n        triples[el] +=\
    \ 1\n        if triples[el] == 3\n            return true\n        end\n    end\n\
    \    return false\nend", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns true\
    \ if there are three distinct elements in the vector that sum to zero, and false\
    \ otherwise.", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code\
    \ language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n@doc\
    \ triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code\
    \ language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n@doc\
    \ triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code\
    \ language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n@doc\
    \ triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</", "    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0 \n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n    it\
    \ returns true if there are three distinct elements in the vector that\n    sum\
    \ to zero, and false otherwise.", "    triples_sum_to_zero = zeros(Int64, 3)\n\
    \    triples_sum_to_zero[1] = true\n    triples_sum_to_zero[2] = true\n    triples_sum_to_zero[3]\
    \ = true\n    triples_sum_to_zero = triples_sum_to_zero[l .- 1]\n    return triples_sum_to_zero\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    triples_sum_to_zero takes\
    \ a vector of integers as an input.\n    it returns true if there are three distinct\
    \ elements in the vector that\n    sum to zero, and false otherwise.", "    \n\
    \    sum = 0\n    for i in l\n        sum += i\n        if sum == 0\n        \
    \    return true\n        end\n    end\n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a vector of integers\
    \ as an input.\n    it returns true if there are three distinct elements in the\
    \ vector that\n    sum to zero, and false otherwise.", "    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    triples_sum_to_zero = triples_sum_to_zero\
    \ + l\n    triples_sum_to_zero = triples_sum_to_zero .== 0\n    return triples_sum_to_zero[1]\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    triples_sum_to_zero takes\
    \ a vector of integers as an input.\n    it returns true if there are three distinct\
    \ elements in the vector that\n    sum to zero, and false otherwise.", "    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0\n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of integers as an input, and returns\
    \ true if there are three distinct elements in the vector that sum to zero, and\
    \ false otherwise.", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_", "    sum = 0\n    for i in l\n        sum += i\n        if sum\
    \ == 0 \n            return true\n        end\n    end\n    return false\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ as an input, and returns true if there are three distinct elements in the vector\
    \ that sum to zero, and false otherwise.", "    triples = Vector{Int64}()\n  \
    \  for i in l\n        triples.push(i)\n    end\n    triples_sum_to_zero(triples)\n\
    end\n</cell>\n<code language=julia-1.3>", "    \n    triples_sum_to_zero = false\n\
    \    \n    for x in l\n        if x != 0\n            if x != l[1]\n         \
    \       if x != l[2]\n                    if x != l[3]\n                     \
    \   if x != l[4]\n                            if x != l[5]\n                 \
    \               if x != l[6]\n                                    if x != l[7]\n\
    \                                        if x != l[8]\n                      \
    \                      if x != l[9]\n                                        \
    \        if x != l[10]\n                                                    if\
    \ x != l[11]\n                                                        if x !=\
    \ l[12]\n                                                            if x != l[13]\n\
    \                                                if x != l[14]\n             \
    \                                       if x != l[15]\n                      \
    \                                  if x != l[16]\n                           \
    \                                 if x != l[17]\n                            \
    \                    if x != l[18]\n                                         \
    \           if x != l[19]\n                                                  \
    \      if x != l[20]\n                                                       \
    \     if x != l[21]\n                                                if x != l[22]\n\
    \                                                    if x != l[23]\n         \
    \                                               if x != l[24]\n              \
    \                                              if x != l[25]\n               \
    \                                 if x != l[26]\n                            \
    \                        if x != l[27]\n                                     \
    \                   if x != l[28]\n                                          \
    \                  if x != l[29]\n                                           \
    \     if x != l[30]\n                                                    if x\
    \ != l[31]\n                                                        if x != l[32]\n\
    \                                                            if x != l[33]\n \
    \                                               if x != l[34]\n              \
    \                                      if x != l[35]\n                       \
    \                                 if x != l[36]\n                            \
    \                                if x != l[37]\n                             \
    \                   if x != l[38]\n                                          \
    \          if x != l[39]\n                                                   \
    \     if x != l[40]\n                                                        \
    \    if x != l[41]\n                                                if x != l[42]\n\
    \                                                    if x != l[43]\n         \
    \                                               if x != l[44]\n              \
    \                                              if x != l[45]\n               \
    \                                 if x != l[46]\n                            \
    \                        if x != l[47]\n                                     \
    \                   if x != l[48]\n                                          \
    \                  if x != l[49]\n                                           \
    \     if x != l[50]\n                                                    if x\
    \ != l[51]\n                                                        if x != l[52]\n\
    \                                                            if x != l[53]\n \
    \                                               if x != l[54]\n              \
    \                                      if x != l[55]\n                       \
    \                                 if x != l[56]\n                            \
    \                                if x != l[57]\n                             \
    \                   if x != l[58]\n", "    \n    triples_sum_to_zero = zeros(Int64,\
    \ 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2] = 1\n    triples_sum_to_zero[3]\
    \ = 1\n    \n    for i in 1:length(l)\n        if triples_sum_to_zero[i] == 1\n\
    \            if l[i] == 0 || l[i] == -1\n                return false\n      \
    \      else\n                triples_sum_to_zero[i] = 0\n            end\n   \
    \     end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n    it\
    \ returns true if there are three distinct elements in the vector that\n    sum\
    \ to zero, and false otherwise.", "    triples = Vector{Int64}()\n    for i in\
    \ l\n        triples.push(i)\n    end\n    triples_sum_to_zero(triples)\nend\n\
    </cell>\n<code language=julia-1.3>\n@time triples_sum_to_zero(1:100000);\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers as an input,\
    \ and returns true if the vector contains three distinct elements that sum to\
    \ zero, and false otherwise.", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero\
    \ = sum([triples_sum_to_zero(triple) for triple in l])\n    triples_sum_to_zero\
    \ == 0 \nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes as input a vector of integers\
    \ and returns true if the vector contains exactly three distinct elements that\
    \ sum to zero, and false otherwise.", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n\
    <code language=julia-1.3>\n@doc triples_sum_to_zero\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers as an input, and returns\
    \ true if the vector contains three distinct elements that sum to zero, and false\
    \ otherwise.", "    triples_sum_to_zero = @view l |> Vector{Int64}\n    triples_sum_to_zero[triples_sum_to_zero\
    \ == 0] = true\n    triples_sum_to_zero[triples_sum_to_zero .== 1] = false\n \
    \   triples_sum_to_zero[triples_sum_to_zero .== 2] = false\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 3] = false\n    triples_sum_to_zero[triples_sum_to_zero .== 4] = false\n\
    \    triples_sum_to_zero[triples_sum_to_zero .== 5] = false\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 6] = false\n    triples_sum_to_zero[triples_sum_to_zero .== 7] = false\n\
    \    triples_sum_to_zero[triples_sum_to_zero .== 8] = false\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 9] = false\n    triples_sum_to_zero[triples_sum_to_zero .== 10] = false\n\
    \    triples_sum_to_zero[triples_sum_to_zero .== 11] = false\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 12] = false\n    triples_sum_to_zero[triples_sum_to_zero .== 13] = false\n\
    \    triples_sum_to_zero[triples_sum_to_zero .== 14] = false\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 15] = false\n    triples_sum_to_zero[triples_sum_to_zero .== 16] = false\n\
    \    triples_sum_to_zero[triples_sum_to_zero .== 17] = false\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 18] = false\n    triples_sum_to_zero[triples_sum_to_zero .== 19] = false\n\
    \    triples_sum_to_zero[triples_sum_to_zero .== 20] = false\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 21] = false\n    triples_sum_to_zero[triples_sum_to_zero .== 22] = false\n\
    \    triples_sum_to_zero[triples_sum_to_zero .== 23] = false\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 24] = false\n    triples_sum_to_zero[triples_sum_to_zero .== 25] = false\n\
    \    triples_sum_to_zero[triples_sum_to_zero .== 26] = false\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .", "    triples_sum_to_zero = zeros(Int64, 3)\n    triples_sum_to_zero[1] =\
    \ true\n    triples_sum_to_zero[2] = true\n    triples_sum_to_zero[3] = true\n\
    \    for x in l\n        if triples_sum_to_zero[x] == true\n            triples_sum_to_zero[x+3]\
    \ = true\n        end\n    end\n    return triples_sum_to_zero[1] && triples_sum_to_zero[2]\
    \ && triples_sum_to_zero[3]\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an array of integers and returns an array of booleans indicating\
    \ whether each of the integers is a multiple of 3.", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero(l)\nend", "    triples_sum_to_zero(l)\nend",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n         \
    \   return true\n        end\n    end\n    return false\nend", "    triples =\
    \ Vector{Int64}()\n    for x in l\n        if triples.length() == 0\n        \
    \    triples.push(x)\n        elseif triples.length() == 3\n            if triples.last()\
    \ == x\n                triples.pop()\n            else\n                triples.push(x)\n\
    \            end\n        else\n            if triples.last() == x\n         \
    \       triples.pop()\n            else\n                triples.push(x)\n   \
    \         end\n        end\n    end\n    return triples.length() == 0\nend\n</cell>\n\
    <code language=julia-1.5>\n@test triples_sum_to_zero([1, 3, 5, 0])\n@test triples_sum_to_zero([1,\
    \ 3, -2, 1])\n@test triples_sum_to_zero([1, 2, 3, 7])\n@test triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n@test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers as an input, and returns\
    \ true if the vector contains three distinct elements that sum to zero, and false\
    \ otherwise.", "    sum = 0\n    for i in l\n        sum += i\n        if sum\
    \ == 0\n            return true\n        end\n    end\n    return false\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a vector of integers\
    \ as an input, and returns true if there are two distinct elements in the vector\
    \ that sum to zero, and false otherwise.", "    sum = 0\n    for i in l\n    \
    \    sum += i\n        if sum == 0 \n            return true\n        end\n  \
    \  end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  triples_sum_to_zero takes a vector of integers as an input.\n    it returns\
    \ true if there are three distinct elements in the vector that\n    sum to zero,\
    \ and false otherwise.", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero(l)\nend", "    \n    l = sort(l)\n    \n\
    \    if length(l) == 3\n        \n        if l[1] == l[2]\n            \n    \
    \        if l[1] == 0\n                \n                return true\n       \
    \     else\n                \n                return false\n            end\n\
    \        else\n            \n            return true\n        end\n    end\n \
    \   \n    return false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a vector of integers as an input.\n    it returns true if there are three\
    \ distinct elements in the vector that\n    sum to zero, and false otherwise.",
  "    triples_sum_to_zero(l, 0)\nend", "    sum = 0\n    for i in l\n        sum\
    \ += i\n        if sum > 0\n            return false\n        end\n    end\n \
    \   return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an array of integers and returns an array of integers where the integers are\
    \ the multiples of 3 or 5 that sum to zero.", "    sum = 0\n    for i in l\n \
    \       sum += i\n        if sum == 0 \n            return true\n        sum -=\
    \ i\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\n4.3 Exercise: Write a function that takes an array\
    \ of integers and returns the number of distinct elements that sum to zero.",
  "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l)\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero = false \n    for x in l \n        if x ==\
    \ 0 \n            triples_sum_to_zero = true \n            break \n        triples_sum_to_zero\
    \ = false \n        for y in l \n            if y == 0 \n                triples_sum_to_zero\
    \ = true \n                break \n                \n    return triples_sum_to_zero\
    \ \nend ", "    \n    sum = 0\n    for i in l\n        sum += i\n        if sum\
    \ > 0\n            return false\n        end\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([1, 3, 5, 0])\n\
    </cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([1, 3, -2, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([1, 2, 3, 7])\n\
    </cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([2, 4, -5, 3, 9,\
    \ 7])\n</cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([1])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes as input a vector of integers\
    \ and returns true if there are three distinct elements in the vector that sum\
    \ to zero, and false otherwise.", "    triples_sum_to_zero(l, 0)\nend", "    \n\
    \    triples_sum_to_zero = false\n    \n    for x in l\n        if x == 0\n  \
    \          triples_sum_to_zero = true\n            break\n        elseif x ==\
    \ 1\n            triples_sum_to_zero = false\n            break\n        elseif\
    \ x == 2\n            triples_sum_to_zero = false\n            break\n       \
    \ elseif x == 3\n            triples_sum_to_zero = false\n            break\n\
    \        elseif x == 4\n            triples_sum_to_zero = false\n            break\n\
    \        elseif x == 5\n            triples_sum_to_zero = false\n            break\n\
    \        elseif x == 6\n            triples_sum_to_zero = false\n            break\n\
    \        elseif x == 7\n            triples_sum_to_zero = false\n            break\n\
    \        elseif x == 8\n            triples_sum_to_zero = false\n            break\n\
    \        elseif x == 9\n            triples_sum_to_zero = false\n            break\n\
    \        elseif x == 10\n            triples_sum_to_zero = false\n           \
    \ break\n        elseif x == 11\n            triples_sum_to_zero = false\n   \
    \         break\n        elseif x == 12\n            triples_sum_to_zero = false\n\
    \            break\n        elseif x == 13\n            triples_sum_to_zero =\
    \ false\n            break\n        elseif x == 14\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 15\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 16\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 17\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 18\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 19\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 20\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 21\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 22\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 23\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 24\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 25\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 26\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 27\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 28\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 29\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 30\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 31\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 32\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif ", "    sum = 0\n    for i in l\n\
    \        sum += i\n        if sum == 0\n            return true\n        end\n\
    \    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([1,\
    \ 3, 5, 0])\n</cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([1,\
    \ 3, -2, 1])\n</cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([1,\
    \ 2, 3, 7])\n</cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n</cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([1])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes as input a vector of\
    \ integers and returns true if the vector contains three distinct elements that\
    \ sum to zero, and false otherwise.", "    triples = Vector{Int64}()\n    triples_sum_to_zero(triples,\
    \ l)\n    return length(triples) == 3\nend", "    sum = 0\n    for i in l\n  \
    \      sum += i\n        if sum == 0 \n            return true\n        end\n\
    \    end\n    return false\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector of integers as an input, and returns true if the vector\
    \ contains three distinct elements that sum to zero, and false otherwise.", " \
    \   triples_sum_to_zero = @view l |> sort() |> length() == 3\n    return triples_sum_to_zero\n\
    end\n</cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([1, 3, 5, 0])\n\
    @test triples_sum_to_zero([1, 3, -2, 1])\n@test triples_sum_to_zero([1, 2, 3,\
    \ 7])\n@test triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n@test triples_sum_to_zero([1])\n\
    </cell>\n<text>\nExercise: Write a function that takes a vector of integers as\
    \ an input, and returns true if the vector contains three distinct elements that\
    \ sum to zero, and false otherwise.", "    sum = 0\n    for i in l\n        sum\
    \ += i\n        if sum == 0\n            return true\n        end\n    end\n \
    \   return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers as an input, and returns true if there are three distinct\
    \ elements in the vector that sum to zero, and false otherwise.", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero(l)\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers as an input, and returns true if\
    \ the vector contains three distinct elements that sum to zero, and false otherwise.",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0\n          \
    \  return true\n    return false\nend", "    sum = 0\n    for x in l\n       \
    \ sum += x\n        if sum == 0\n            return true\n    return false\nend",
  "    triples = Vector{Int64}()\n    for x in l\n        if x > 0\n            if\
    \ x % 3 == 0\n                triples.push(x)\n            elseif x % 3 == 1\n\
    \                if triples.contains(x+1)\n                    triples.push(x)\n\
    \                else\n                    triples.push(x)\n                end\n\
    \            elseif x % 3 == 2\n                if triples.contains(x-1)\n   \
    \                 triples.push(x)\n                else\n                    triples.push(x)\n\
    \                end\n            end\n        end\n    end\n    return length(triples)\
    \ == 3\nend\n</cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([1,\
    \ 3, 5, 0])\n@test triples_sum_to_zero([1, 3, -2, 1])\n@test triples_sum_to_zero([1,\
    \ 2, 3, 7])\n@test triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n@test triples_sum_to_zero([1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ as an input, and returns true if the vector contains three distinct elements\
    \ that sum to zero, and false otherwise.", "    \n    sum = 0\n    for i in l\n\
    \        sum += i\n        if sum == 0 \n            return true\n        end\n\
    \    end\n    return false\nend", "    triples_sum_to_zero(l, 0)\nend", "    \n\
    \    sum = 0\n    for x in l\n        sum += x\n        if sum == 0 \n       \
    \     return true\n        end\n    end\n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert\
    \ triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert triples_sum_to_zero([1,\
    \ 2, 3, 7]) == false\n@assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n\
    @assert triples_sum_to_zero([1]) == false\n</cell>\n<text>\n4.3 Exercise: Write\
    \ a function that takes a vector of integers as an input and returns the number\
    \ of integers in the vector that sum to zero.", "    triples_sum_to_zero = @view\
    \ l .== 0 .* @view l .== 0 .* @view l .== 0\n    return triples_sum_to_zero\n\
    end", "    triples_sum_to_zero(l, 0)\nend", "    sum = 0\n    for i in l\n   \
    \     sum += i\n        if sum > 0\n            return false\n        end\n  \
    \  end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns a vector of booleans indicating whether\
    \ each element in the vector is positive.", "    triples_sum_to_zero(l, 0)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1, 3, 5, 0])\
    \ == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert triples_sum_to_zero([1,\
    \ 2, 3, 7]) == false\n@assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n\
    @assert triples_sum_to_zero([1]) == false\n</cell>\n<text>\n4.2 Exercise: Find\
    \ all subsets of a set\nWrite a function all_subsets(l::Vector{Int64}) that takes\
    \ as input a vector of integers and returns all subsets of the input vector.",
  "    \n    triples_sum_to_zero = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n\
    \    triples_sum_to_zero[2] = 1\n    triples_sum_to_zero[3] = 1\n    \n    for\
    \ x in l\n        if triples_sum_to_zero[x] == 1\n            return true\n  \
    \      end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0])\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, -2, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 2, 3, 7])\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers as an input, and returns true if the vector\
    \ has three distinct elements that sum to zero, and false otherwise.", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero(l, 0)\nend", "    sum = 0\n    for i in l\n\
    \        sum += i\n        if sum == 0 \n            return true\n        end\n\
    \    end\n    return false\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers as an input, and returns true if there are three\
    \ distinct elements in the vector that sum to zero, and false otherwise.", " \
    \   triples_sum_to_zero = @view l |> filter((x) -> x != 0, \n        map((x) ->\
    \ x -> x -> x == 0, \n            filter((x) -> x != 0, \n                filter((x)\
    \ -> x != 0, \n                    filter((x) -> x != 0, \n                  \
    \      filter((x) -> x != 0, \n                            filter((x) -> x !=\
    \ 0, \n                                filter((x) -> x != 0, \n              \
    \                      filter((x) -> x != 0, \n                              \
    \          filter((x) -> x != 0, \n                                          \
    \  filter((x) -> x != 0, \n                                                filter((x)\
    \ -> x != 0, \n                                                    filter((x)\
    \ -> x != 0, \n                                                        filter((x)\
    \ -> x != 0, \n                                                            filter((x)\
    \ -> x != 0, \n                                                              \
    \  filter((x) -> x != 0, \n                                                  \
    \                  filter((x) -> x != 0, \n                                  \
    \                                      filter((x) -> x != 0, \n              \
    \                                                              filter((x) -> x\
    \ != 0, \n                                                                   \
    \             filter((x) -> x != 0, \n                                       \
    \                                             filter((x) -> x != 0, \n       \
    \                                                                            \
    \     filter((x) -> x != 0, \n                                               \
    \                                             filter((x) -> x != 0, \n       \
    \                                                                            \
    \             filter((x) -> x != 0, \n                                       \
    \                                                             filter((x) -> x\
    \ != 0, \n                                                                   \
    \                                     filter((x) -> x != 0, \n               \
    \                                                                            \
    \                 filter((x) -> x != 0, \n                                   \
    \                                                                            \
    \ filter((x) -> x != 0, \n                                                   \
    \                                                                 filter((x) ->\
    \ x != 0, \n                                                                 \
    \                                                       filter((x) -> x != 0,\
    \ \n                                                                         \
    \                                                   filter((x) -> x != 0, \n \
    \                                                                            \
    \                                                   filter((x) -> x != 0, \n \
    \                                                                            \
    \                                                       filter((x) -> x != 0,\
    \ \n                                                                         \
    \                                                               filter((x) ->\
    \ x != 0, \n                                                                 \
    \                                                                           filter((x)\
    \ -> x != 0, \n                                                              \
    \                                                                            \
    \      filter((x) -> x != 0, \n                                              \
    \                                                                            \
    \                          filter((x) -> x != 0, \n                          \
    \                                                                            \
    \                                                  filter((x) -> x != 0, \n  \
    \                                                                            \
    \                                                                            \
    \  filter((x) -> x != 0, \n                                                  \
    \                                                                            \
    \                                  filter((x) -> x != 0, \n                  \
    \                                                                            \
    \                                                                      filter((x)\
    \ -> x != 0, \n                                                              \
    \                                                                            \
    \                              filter((x) -> x != 0, \n                      \
    \                                                                            \
    \                                                                          filter((x)\
    \ -> x != 0, \n                                                              \
    \                                                                            \
    \                                      filter((x) -> x != 0, \n              \
    \                                                                            \
    \                                                                            \
    \              filter((x) -> x != 0, \n                                      \
    \                                                                            \
    \                                                                      filter((x)\
    \ -> x != 0, \n                                                              \
    \                                                                            \
    \                                                  filter((x) -> x != 0, \n  \
    \                                                                            \
    \                                                                            \
    \                                      filter((x) -> x != 0, \n              \
    \                                                                            \
    \                                                                            \
    \                              filter((x) -> x != 0, \n                      \
    \                                                                            \
    \                                                                            \
    \                          filter((", "    triples_sum_to_zero = \n        sum(l)\
    \ == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) ==\
    \ 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0\
    \ && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 &&\
    \ \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n\
    \        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n \
    \       sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n  \
    \      sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n   \
    \     sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n    \
    \    sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n     \
    \   sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n      \
    \  sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n       \
    \ sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l)\
    \ == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) ==\
    \ 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0\
    \ && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 &&\
    \ \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n\
    \        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n \
    \       sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n  \
    \      sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n   \
    \     sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n    \
    \    sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n     \
    \   sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n      \
    \  sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n       \
    \ sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l)\
    \ == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) ==\
    \ 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0\
    \ && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 &&\
    \ \n", "    \n    sum = 0\n    for i in l\n        sum += i\n        if sum ==\
    \ 0\n            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert triples_sum_to_zero([1, 3, 5, 0]) == false\n\
    @assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert triples_sum_to_zero([1,\
    \ 2, 3, 7]) == false\n@assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n\
    @assert triples_sum_to_zero([1]) == false\n</cell>\n<text>\n4.5 Vectorized Computations",
  "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n\
    <code language=julia-1.4>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.4>\n\
    @doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.4>\n@doc\
    \ triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n\
    </cell>\n<code language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n\
    <code language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code\
    \ language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.4>\n\
    @doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.4>\n@doc\
    \ triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n\
    </cell>\n<code language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n\
    <code language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code\
    \ language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.4>\n\
    @doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.4>\n@doc\
    \ triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n\
    </cell>\n<code language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n\
    <code language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code\
    \ language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.4>\n\
    @doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.4>\n@doc\
    \ triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])",
  "    triples_sum_to_zero(l)\nend", "    \n    sum = 0\n    for i in l\n        sum\
    \ += i\n        if sum == 0 \n            return true\n        end\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\n4.3 The sum of the first $n$ positive integers is $n(n+1)/2$. Verify that\
    \ $n$ is prime.", "    triples_sum_to_zero(l)\nend", "    sum = 0\n    for x in\
    \ l\n        sum += x\n        if sum == 0 \n            return true\n    return\
    \ false\nend", "    sum = 0\n    for i in l\n        sum += i\n        if sum\
    \ > 0\n            return false\n        end\n    end\n    return true\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ as an input and returns a vector of integers representing the number of times\
    \ each integer appears in the input vector.", "    triples_sum_to_zero(l, 0)\n\
    end", "    triples_sum_to_zero(l)\nend", "    triples_sum_to_zero = false \n \
    \   for x in l \n        if triples_sum_to_zero == false \n            if x ==\
    \ 0 \n                triples_sum_to_zero = true \n            else \n       \
    \         triples_sum_to_zero = false \n            end \n        else \n    \
    \        if x == 0 \n                triples_sum_to_zero = false \n          \
    \  end \n        end \n    end \n    return triples_sum_to_zero \nend \n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    triples_sum_to_zero takes a vector of integers\
    \ as an input.\n    it returns true if there are three distinct elements in the\
    \ vector that\n    sum to zero, and false otherwise.", "    triples = Vector{Int64}()\n\
    \    for x in l\n        triples.push(x)\n    end\n    triples_sum_to_zero(triples)\n\
    end", "    \n    sum = 0\n    for i in l\n        sum += i\n        if sum ==\
    \ 0 \n            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers as an input,\
    \ and returns true if the vector has three distinct elements that sum to zero,\
    \ and false otherwise.", "    triples_sum_to_zero = false \n    for x in l \n\
    \        if x != 0 \n            triples_sum_to_zero = true \n            break\
    \ \n    end \n    return triples_sum_to_zero \nend ", "    \n    sum = 0\n   \
    \ for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0]) == false\n@test triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@test triples_sum_to_zero([1, 2, 3, 7]) == false\n@test\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@test triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers as an input, and returns true if the vector contains three distinct\
    \ elements that sum to zero, and false otherwise.", "    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers as an input,\
    \ and returns true if the vector contains three distinct elements that sum to\
    \ zero, and false otherwise.", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    sum = 0\n    for i in l\n        sum += i\n        if sum ==\
    \ 0\n            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    triples_sum_to_zero takes a vector of integers\
    \ as an input.\n    it returns true if there are three distinct elements in the\
    \ vector that\n    sum to zero, and false otherwise.", "    sum = 0\n    for i\
    \ in l\n        sum += i\n        if sum == 0 \n            return true\n    \
    \    end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3: Write a\
    \ function that takes an array of integers and returns an array of integers such\
    \ that each element of the array is either positive or negative.", "    triples_sum_to_zero\
    \ = sum([triples_sum_to_zero(triple) for triple in l])\n    triples_sum_to_zero\
    \ == length(l)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a vector of integers as an input.\n    it returns true if there are three\
    \ distinct elements in the vector that\n    sum to zero, and false otherwise.",
  "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l, 0)\nend", "  \
    \  triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l, 0)\nend", "  \
    \  \n    sum = 0\n    for x in l\n        sum += x\n        if sum == 0 \n   \
    \         return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n@test triples_sum_to_zero([1, 3, 5, 0])\n@test triples_sum_to_zero([1,\
    \ 3, -2, 1])\n@test triples_sum_to_zero([1, 2, 3, 7])\n@test triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n@test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function called triples_sum_to_zero that takes a vector of integers\
    \ as an input.\nIt returns true if there are three distinct elements in the vector\
    \ that sum to zero, and false otherwise.", "    triples_sum_to_zero(l, 0)\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    triples_sum_to_zero takes a vector\
    \ of integers as an input.\n    it returns true if there are three distinct elements\
    \ in the vector that\n    sum to zero, and false otherwise.", "    sum = 0\n \
    \   for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0])\n@test triples_sum_to_zero([1, 3, -2,\
    \ 1])\n@test triples_sum_to_zero([1, 2, 3, 7])\n@test triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n@test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers as an input, and returns\
    \ true if the vector has all distinct elements, and false otherwise. For example,\
    \ if the vector is [1, 1, 2], the function should return true.", "    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum > 0\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n    it\
    \ returns true if there are three distinct elements in the vector that\n    sum\
    \ to zero, and false otherwise.", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n\
    <code language=julia-1.5>", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    \n    sum = 0\n    for i in l\n        sum += i\n        if sum\
    \ == 0\n            return true\n        end\n    end\n    return false\nend\n\
    </cell>\n<text>\nProblem 7\nWrite a function that takes a vector of integers and\
    \ returns the number of integers in the vector that are less than the average\
    \ of the integers in the vector.", "    triples_sum_to_zero = @view l == [0,0,0]\n\
    \    return sum(triples_sum_to_zero)==3\nend", "    \n    triples_sum_to_zero\
    \ = false\n    \n    triples_sum_to_zero = triples_sum_to_zero or l[1] == l[2]\n\
    \    triples_sum_to_zero = triples_sum_to_zero or l[2] == l[3]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero or l[3] == l[0]\n    \n    return triples_sum_to_zero\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    triples_sum_to_zero takes\
    \ a vector of integers as an input.\n    it returns true if there are three distinct\
    \ elements in the vector that\n    sum to zero, and false otherwise.", "    \n\
    \    triples = Vector{Int64}()\n    \n    for i in l\n        if triples.length\
    \ == 0 || triples[end] == 0\n            triples.push(i)\n        elseif triples[end]\
    \ == i\n            triples[end] = i\n        else\n            triples[end] =\
    \ i\n            triples.push(i)\n        end\n    end\n    \n    if triples.length\
    \ == 3 && triples[1] == triples[2]\n        return true\n    else\n        return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a vector of integers as an input.\n    it returns true if there are three\
    \ distinct elements in the vector that\n    sum to zero, and false otherwise.",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0\n          \
    \  return true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0])\n@test triples_sum_to_zero([1, 3, -2,\
    \ 1])\n@test triples_sum_to_zero([1, 2, 3, 7])\n@test triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n@test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers as an input, and returns\
    \ true if the vector contains any negative integers, and false otherwise.", " \
    \   triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l, 0)\nend", " \
    \   triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l, 0)\nend", " \
    \   sum = 0\n    for i in l\n        sum += i\n        if sum > 0\n          \
    \  return false\n        end\n    end\n    return true\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    sum = 0\n    for i in l\n        sum += i\n        if sum ==\
    \ 0 \n            return true\n        sum -= i\n    end\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>", "    triples_sum_to_zero(l, 0)\nend", " \
    \   \n    sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n  \
    \          return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a vector of integers\
    \ as an input.\n    it returns true if there are three distinct elements in the\
    \ vector that\n    sum to zero, and false otherwise.", "    \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    \n    for x in l\n        triples_sum_to_zero = triples_sum_to_zero\
    \ + (x - sum(x) == 0)\n    end\n    \n    return triples_sum_to_zero == ones(Int64,\
    \ 3)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array of\
    \ integers as an input, and returns an array of the same size with each element\
    \ being the product of the corresponding elements in the input array. For example,\
    \ if the input array is [4, 2, 3], the output array should be [4, 8, 12].", " \
    \   sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n        \
    \    return true\n        end\n    end\n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a vector of integers\
    \ as an input.\n    it returns true if there are three distinct elements in the\
    \ vector that\n    sum to zero, and false otherwise.", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero(l)\nend", "    triples_sum_to_zero(l)\nend",
  "    triples_sum_to_zero(l, 0)\nend", "    \n    sum = 0\n    for i in l\n     \
    \   sum += i\n        if sum > 0\n            return false\n        end\n    end\n\
    \    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers as an input, and returns true if there are three distinct\
    \ elements in the vector that sum to zero, and false otherwise.", "    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum > 0\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an array of integers as an input, and returns true if\
    \ all elements in the array are positive, and false otherwise.", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero(l, 0)\nend", "    \n    sum = 0\n    for\
    \ i in l\n        sum += i\n        if sum == 0 \n            return true\n  \
    \      end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0]) == false\n@test triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@test triples_sum_to_zero([1, 2, 3, 7]) == false\n@test\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@test triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers as an input and returns a vector of booleans indicating whether\
    \ each element in the vector is positive, negative or zero.", "    triples_sum_to_zero\
    \ = sum([triples_sum_to_zero(triple) for triple in l])\n    triples_sum_to_zero\
    \ == length(l)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a vector of integers as an input.\n    it returns true if there are three\
    \ distinct elements in the vector that\n    sum to zero, and false otherwise.",
  "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero = false \n    for\
    \ x in l \n        if x == 0 \n            triples_sum_to_zero = true \n     \
    \       break \n        triples_sum_to_zero = false \n        for y in l \n  \
    \          if y == 0 \n                triples_sum_to_zero = true \n         \
    \       break \n                \n    return triples_sum_to_zero \nend \n</cell>\n\
    <code language=julia-1.5>", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers as an input, and returns true if the vector contains three distinct\
    \ elements that sum to zero, and false otherwise.", "    sum = 0\n    for i in\
    \ l\n        sum += i\n        if sum == 0 \n            return true\n       \
    \ end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n@test\
    \ triples_sum_to_zero([1, 3, 5, 0])\n@test triples_sum_to_zero([1, 3, -2, 1])\n\
    @test triples_sum_to_zero([1, 2, 3, 7])\n@test triples_sum_to_zero([2, 4, -5,\
    \ 3, 9, 7])\n@test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers as an input, and returns true if\
    \ the vector contains three distinct elements that sum to zero, and false otherwise.",
  "    triples = Vector{Int64}()\n    triples_sum_to_zero(triples, l)\n    return\
    \ length(triples) == 3\nend", "    triples_sum_to_zero(l, 0)\nend", "    sum =\
    \ 0\n    for i in l\n        sum += i\n        if sum > 0\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0])\n@test triples_sum_to_zero([1, 3, -2,\
    \ 1])\n@test triples_sum_to_zero([1, 2, 3, 7])\n@test triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n@test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers as an input, and returns\
    \ true if the vector has three distinct elements that sum to zero, and false otherwise.",
  "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l, 0)\nend", "  \
    \  triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n\
    <code language=julia-1.5>", "    sum = 0\n    for x in l\n        sum += x\n \
    \       if sum == 0\n            return true\n    return false\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an array of integers and returns\
    \ an array of the same size with only positive integers.", "    \n    l = sort(l)\n\
    \    \n    if length(l) == 3\n        return l[1] == 0 && l[2] == 0\n    end\n\
    \    \n    \n    for i = 1:length(l)\n        if l[i] == l[i+1] && l[i] == l[i+2]\n\
    \            return false\n        end\n    end\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n\
    <code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n<code\
    \ language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n@time\
    \ triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n\
    <code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n<code\
    \ language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n@time\
    \ triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n\
    <code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n<code\
    \ language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n@time\
    \ triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n\
    <code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n<code\
    \ language=julia-1.5>\n@", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero(l, 0)\nend", "    \n    sum = 0\n    for\
    \ x in l\n        sum += x\n        if sum == 0\n            return true\n   \
    \ return false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a vector of integers as an input.\n    it returns true if there are three\
    \ distinct elements in the vector that\n    sum to zero, and false otherwise.",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n         \
    \   return true\n        end\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a vector of integers as an input, and\
    \ returns true if there are three distinct elements in the vector that sum to\
    \ zero, and false otherwise.", "    triples_sum_to_zero = @view l |> Vector{Int64}\n\
    \    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n  \
    \  triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n    triples_sum_to_zero =\
    \ triples_sum_to_zero[triples_sum_to_zero .!= 0]\n    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero\
    \ .!= 0]\n    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!=\
    \ 0]\n    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n  \
    \  triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n    triples_sum_to_zero =\
    \ triples_sum_to_zero[triples_sum_to_zero .!= 0]\n    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero\
    \ .!= 0]\n    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!=\
    \ 0]\n    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n  \
    \  triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n    triples_sum_to_zero =\
    \ triples_sum_to_zero[triples_sum_to_zero .!= 0]\n    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero\
    \ .!= 0]\n    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!=\
    \ 0]\n    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n  \
    \  triples_sum_to_zero = triples_sum", "    triples_sum_to_zero(l, 0)\nend", " \
    \   triples_sum_to_zero(l, 0)\nend", "    \n    sum = 0\n    for i in l\n    \
    \    sum += i\n        if sum == 0 \n            return true\n        end\n  \
    \  end\n    return false\nend\n</cell>\n<code language=julia-1.5>", "    triples_sum_to_zero(l)\n\
    end", "    triples_sum_to_zero(l, 0)\nend", "    \n    sum = 0\n    for i in l\n\
    \        sum += i\n        if sum == 0\n            return true\n        end\n\
    \    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([1,\
    \ 3, 5, 0])\n@test triples_sum_to_zero([1, 3, -2, 1])\n@test triples_sum_to_zero([1,\
    \ 2, 3, 7])\n@test triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n@test triples_sum_to_zero([1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ as an input, and returns true if the vector has three distinct elements that\
    \ sum to zero, and false otherwise.", "    triples_sum_to_zero(l, 0)\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
