name: HumanEval_105_by_length
language: jl
prompt: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
  \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each digit\
  \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
  Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2,\
  \ 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
  , \"Two\", \"One\", \"One\"]\n    \n      If the vector is empty, return an empty\
  \ vector:\n    >>> by_length([])\n    []\n    \n      If the vector has any strange\
  \ number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"]\n    \"\"\"\n\
  function by_length(arr::Vector{Int64})::Vector{String} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
  \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
  Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
  \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) ==\
  \ [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"\
  Eight\", \"Four\"])\nend\n"
completions: ["    if arr.length == 0 \n        return Vector{String}()\n    end\n\
    \    \n    arr = sort(arr)\n    \n    digits = Vector{String}(\"\")\n    \n  \
    \  for i in arr\n        if i > 9\n            digits = push!(digits, names[i])\n\
    \        else\n            digits = push!(digits, names[i])\n        end\n   \
    \ end\n    \n    return digits\nend", "    if arr.length == 0\n        return\
    \ Vector{String}()\n    \n    arr = sort(arr)\n    arr = reverse(arr)\n    arr\
    \ = map(x -> \"One\"[x], arr)\n    \n    return arr\nend", "    if !arr.isEmpty\
    \ \n        arr = arr |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |>\
    \ Vector{String}\n    end\n    arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings containing the\
    \ names of the numbers that are between 1 and 9 inclusive.", "    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : error(\"Invalid number\"), arr)\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise: Write a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers from 1 to 9 inclusive.", "   \
    \ \n    if length(arr) == 0\n        return Vector{String}()\n    end\n    \n\
    \    arr = sort(arr)\n    \n    digits = Vector{Int64}()\n    \n    for x in arr\n\
    \        if x < 1 || x > 9\n            continue\n        end\n        push!(digits,\
    \ x)\n    end\n    \n    digits = reverse(digits)\n    \n    names = Vector{String}()\n\
    \    \n    for x in digits\n        push!(names, name(x))\n    end\n    \n   \
    \ return names\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ squared. For example:\n>>> square_sum([1, 2, 3])\n25\n>>> square_sum([-1, 0,\
    \ 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1,\
    \ 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>>\
    \ square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1,\
    \ 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>>\
    \ square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1,\
    \ 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>>\
    \ square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1,\
    \ 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>>\
    \ square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1,\
    \ 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>>\
    \ square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1,\
    \ 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>>\
    \ square_sum([-1, 0, 1])\n1\n>>> square_sum([", "    if arr.length == 0\n    \
    \    return Vector{String}()\n    \n    sorted_arr = sort(arr)\n    reverse(sorted_arr)\n\
    \    \n    digits = Vector{String}()\n    for i in sorted_arr\n        push!(digits,\
    \ names[i])\n    end\n    \n    return digits\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings that represent each of the numbers from 1 to 9 inclusive, sorted from\
    \ smallest to largest.", "    \n    if length(arr) == 0 \n        return Vector{String}()\
    \ \n    else \n        \n        arr = sort(arr)\n        \n        arr = reverse(arr)\n\
    \        \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n\
    \        \n        return arr\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the integers \nbetween 1 and 9 inclusive in descending order. For example,\
    \ if the input vector is [2, 1, 1, 4, 5, 8, 2, 3], the output vector should be\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ].", "    if length(arr) == 0 \n        return Vector{String}() \n    else \n\
    \        arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x ->\
    \ \"One\" if x == 1 \n                else if x == 2 \n                    then\
    \ \"Two\" \n                    else if x == 3 \n                        then\
    \ \"Three\" \n                        else if x == 4 \n                      \
    \      then \"Four\" \n                            else if x == 5 \n         \
    \                       then \"Five\" \n                                else if\
    \ x == 6 \n                                    then \"Six\" \n               \
    \                     else if x == 7 \n                                      \
    \  then \"Seven\" \n                                        else if x == 8 \n\
    \                                            then \"Eight\" \n               \
    \                             else \"Nine\" \n                    else x \n  \
    \              end, arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([1])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>", "    if length(arr) == 0 \n        return Vector{String}()\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = map(x -> \"One\"..\"Nine\"[x], arr) \n        return arr \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings that represent each of the integers \nin the vector in descending\
    \ order.", "    \n    if length(arr) == 0\n        return Vector{String}()\n \
    \   end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr\
    \ = map(x -> \"One\"[x], arr)\n    \n    arr = map(x -> \"Two\"[x], arr)\n   \
    \ \n    arr = map(x -> \"Three\"[x], arr)\n    \n    arr = map(x -> \"Four\"[x],\
    \ arr)\n    \n    arr = map(x -> \"Five\"[x], arr)\n    \n    arr = map(x -> \"\
    Six\"[x], arr)\n    \n    arr = map(x -> \"Seven\"[x], arr)\n    \n    arr = map(x\
    \ -> \"Eight\"[x], arr)\n    \n    arr = map(x -> \"Nine\"[x], arr)\n    \n  \
    \  return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers from 1 to 9 inclusive.", "   \
    \ if length(arr) == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ |> reverse() \n        arr = arr |> map((x -> \"One\"..\"Nine\"[x-1]) |> collect)\
    \ \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])", "    \n    arr = arr |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"\
    [x]) |> Vector{String}\n    \n    if arr.length == 0\n        Vector{String}()\n\
    \    else\n        arr\n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n\
    <code language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns a vector of strings\
    \ that represent each of the integers \nbetween 1 and 9 inclusive, with each digit\
    \ replaced by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\"\
    , \n\"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".", "    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers from 1 to 9 inclusive, with the number represented as a\
    \ string in \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".", "    \n    arr = sort(arr)\n    \n    names = Vector{String}(undef,\
    \ 9)\n    for i in 1:9\n        names[i] = \"One\"\n    end\n    \n    for i in\
    \ arr\n        if i < 1 || i > 9\n            continue\n        end\n        \n\
    \        j = i - 1\n        if j % 10 == 1\n            j = j / 10\n         \
    \   names[j] = \"One\"\n        end\n        if j % 10 == 2\n            j = j\
    \ / 10\n            names[j] = \"Two\"\n        end\n        if j % 10 == 3\n\
    \            j = j / 10\n            names[j] = \"Three\"\n        end\n     \
    \   if j % 10 == 4\n            j = j / 10\n            names[j] = \"Four\"\n\
    \        end\n        if j % 10 == 5\n            j = j / 10\n            names[j]\
    \ = \"Five\"\n        end\n        if j % 10 == 6\n            j = j / 10\n  \
    \          names[j] = \"Six\"\n        end\n        if j % 10 == 7\n         \
    \   j = j / 10\n            names[j] = \"Seven\"\n        end\n        if j %\
    \ 10 == 8\n            j = j / 10\n            names[j] = \"Eight\"\n        end\n\
    \        if j % 10 == 9\n            j = j / 10\n            names[j] = \"Nine\"\
    \n        end\n    end\n    \n    return names\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([1, -1, 55])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([", "    \n\
    \    if length(arr) == 0 \n        return Vector{String}() \n    else \n     \
    \   arr = sort(arr)\n        arr = reverse(arr)\n        arr = map(x -> \"One\"\
    \ if x == 1 \n            else if x == 2 \n                \"Two\" \n        \
    \    else if x == 3 \n                \"Three\" \n            else if x == 4 \n\
    \                \"Four\" \n            else if x == 5 \n                \"Five\"\
    \ \n            else if x == 6 \n                \"Six\" \n            else if\
    \ x == 7 \n                \"Seven\" \n            else if x == 8 \n         \
    \       \"Eight\" \n            else if x == 9 \n                \"Nine\" \n \
    \           else \n                \"\" \n            , arr)\n        return arr\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=juli", "    \n    if arr.length == 0 \n\
    \        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n \
    \   arr = reverse(arr)\n    \n    arr = replace(arr, 1, \"One\")\n    arr = replace(arr,\
    \ 2, \"Two\")\n    arr = replace(arr, 3, \"Three\")\n    arr = replace(arr, 4,\
    \ \"Four\")\n    arr = replace(arr, 5, \"Five\")\n    arr = replace(arr, 6, \"\
    Six\")\n    arr = replace(arr, 7, \"Seven\")\n    arr = replace(arr, 8, \"Eight\"\
    )\n    arr = replace(arr, 9, \"Nine\")\n    \n    return arr\nend", "    \n  \
    \  if length(arr) == 0 \n        return [] \n    else \n        \n        sorted_arr\
    \ = sort(arr)\n        \n        sorted_arr_reversed = reverse(sorted_arr)\n \
    \       \n        sorted_arr_reversed_str = \"\".join(map(str, sorted_arr_reversed))\n\
    \        \n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"0\", \"One\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"1\", \"Two\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"2\", \"Three\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"3\", \"Four\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"4\", \"Five\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"5\", \"Six\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"6\", \"Seven\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"7\", \"Eight\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"8\", \"Nine\")\n        \n        return sorted_arr_reversed_str\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings that represent each of the numbers from 1 to\
    \ 9 inclusive, with the corresponding name for each number in the vector. For\
    \ example, if the vector is [2, 1, 1, 4, 5, 8, 2, 3], the function should return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]. Do not use the built-in function map!.", "    if length(arr) == 0\
    \ \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n\
    \    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : error(\"Invalid input\"), arr)\n    \n    return arr\nend\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1, -1,\
    \ 55])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings containing the names of the numbers that are\
    \ between 1 and 9 inclusive.", "    \n    if length(arr) == 0 \n        return\
    \ Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n\
    \    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n   \
    \ \n    return arr\nend", "    if length(arr) == 0 \n        return [] \n    end\n\
    \    \n    sorted_arr = sort(arr)\n    \n    sorted_arr_reverse = reverse(sorted_arr)\n\
    \    \n    sorted_arr_reverse.map!(x->\"One\"..\"Nine\"[x])\n    \n    return\
    \ sorted_arr_reverse\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the vector in reverse order, but with each\
    \ digit replaced by its corresponding name from \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
