name: HumanEval_105_by_length
language: jl
prompt: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
  \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each digit\
  \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
  Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2,\
  \ 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
  , \"Two\", \"One\", \"One\"]\n    \n      If the vector is empty, return an empty\
  \ vector:\n    >>> by_length([])\n    []\n    \n      If the vector has any strange\
  \ number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"]\n    \"\"\"\n\
  function by_length(arr::Vector{Int64})::Vector{String} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
  \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
  Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
  \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) ==\
  \ [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"\
  Eight\", \"Four\"])\nend\n"
completions: ["    if arr.length == 0 \n        return Vector{String}()\n    end\n\
    \    \n    arr = sort(arr)\n    \n    digits = Vector{String}(\"\")\n    \n  \
    \  for i in arr\n        if i > 9\n            digits = push!(digits, names[i])\n\
    \        else\n            digits = push!(digits, names[i])\n        end\n   \
    \ end\n    \n    return digits\nend", "    if arr.length == 0\n        return\
    \ Vector{String}()\n    \n    arr = sort(arr)\n    arr = reverse(arr)\n    arr\
    \ = map(x -> \"One\"[x], arr)\n    \n    return arr\nend", "    if !arr.isEmpty\
    \ \n        arr = arr |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |>\
    \ Vector{String}\n    end\n    arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings containing the\
    \ names of the numbers that are between 1 and 9 inclusive.", "    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : error(\"Invalid number\"), arr)\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise: Write a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers from 1 to 9 inclusive.", "   \
    \ \n    if length(arr) == 0\n        return Vector{String}()\n    end\n    \n\
    \    arr = sort(arr)\n    \n    digits = Vector{Int64}()\n    \n    for x in arr\n\
    \        if x < 1 || x > 9\n            continue\n        end\n        push!(digits,\
    \ x)\n    end\n    \n    digits = reverse(digits)\n    \n    names = Vector{String}()\n\
    \    \n    for x in digits\n        push!(names, name(x))\n    end\n    \n   \
    \ return names\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ squared. For example:\n>>> square_sum([1, 2, 3])\n25\n>>> square_sum([-1, 0,\
    \ 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1,\
    \ 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>>\
    \ square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1,\
    \ 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>>\
    \ square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1,\
    \ 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>>\
    \ square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1,\
    \ 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>>\
    \ square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1,\
    \ 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>>\
    \ square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1,\
    \ 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>>\
    \ square_sum([-1, 0, 1])\n1\n>>> square_sum([", "    if arr.length == 0\n    \
    \    return Vector{String}()\n    \n    sorted_arr = sort(arr)\n    reverse(sorted_arr)\n\
    \    \n    digits = Vector{String}()\n    for i in sorted_arr\n        push!(digits,\
    \ names[i])\n    end\n    \n    return digits\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings that represent each of the numbers from 1 to 9 inclusive, sorted from\
    \ smallest to largest.", "    \n    if length(arr) == 0 \n        return Vector{String}()\
    \ \n    else \n        \n        arr = sort(arr)\n        \n        arr = reverse(arr)\n\
    \        \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n\
    \        \n        return arr\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the integers \nbetween 1 and 9 inclusive in descending order. For example,\
    \ if the input vector is [2, 1, 1, 4, 5, 8, 2, 3], the output vector should be\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ].", "    if length(arr) == 0 \n        return Vector{String}() \n    else \n\
    \        arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x ->\
    \ \"One\" if x == 1 \n                else if x == 2 \n                    then\
    \ \"Two\" \n                    else if x == 3 \n                        then\
    \ \"Three\" \n                        else if x == 4 \n                      \
    \      then \"Four\" \n                            else if x == 5 \n         \
    \                       then \"Five\" \n                                else if\
    \ x == 6 \n                                    then \"Six\" \n               \
    \                     else if x == 7 \n                                      \
    \  then \"Seven\" \n                                        else if x == 8 \n\
    \                                            then \"Eight\" \n               \
    \                             else \"Nine\" \n                    else x \n  \
    \              end, arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([1])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>", "    if length(arr) == 0 \n        return Vector{String}()\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = map(x -> \"One\"..\"Nine\"[x], arr) \n        return arr \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings that represent each of the integers \nin the vector in descending\
    \ order.", "    \n    if length(arr) == 0\n        return Vector{String}()\n \
    \   end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr\
    \ = map(x -> \"One\"[x], arr)\n    \n    arr = map(x -> \"Two\"[x], arr)\n   \
    \ \n    arr = map(x -> \"Three\"[x], arr)\n    \n    arr = map(x -> \"Four\"[x],\
    \ arr)\n    \n    arr = map(x -> \"Five\"[x], arr)\n    \n    arr = map(x -> \"\
    Six\"[x], arr)\n    \n    arr = map(x -> \"Seven\"[x], arr)\n    \n    arr = map(x\
    \ -> \"Eight\"[x], arr)\n    \n    arr = map(x -> \"Nine\"[x], arr)\n    \n  \
    \  return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers from 1 to 9 inclusive.", "   \
    \ if length(arr) == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ |> reverse() \n        arr = arr |> map((x -> \"One\"..\"Nine\"[x-1]) |> collect)\
    \ \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])", "    \n    arr = arr |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"\
    [x]) |> Vector{String}\n    \n    if arr.length == 0\n        Vector{String}()\n\
    \    else\n        arr\n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n\
    <code language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns a vector of strings\
    \ that represent each of the integers \nbetween 1 and 9 inclusive, with each digit\
    \ replaced by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\"\
    , \n\"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".", "    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers from 1 to 9 inclusive, with the number represented as a\
    \ string in \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".", "    \n    arr = sort(arr)\n    \n    names = Vector{String}(undef,\
    \ 9)\n    for i in 1:9\n        names[i] = \"One\"\n    end\n    \n    for i in\
    \ arr\n        if i < 1 || i > 9\n            continue\n        end\n        \n\
    \        j = i - 1\n        if j % 10 == 1\n            j = j / 10\n         \
    \   names[j] = \"One\"\n        end\n        if j % 10 == 2\n            j = j\
    \ / 10\n            names[j] = \"Two\"\n        end\n        if j % 10 == 3\n\
    \            j = j / 10\n            names[j] = \"Three\"\n        end\n     \
    \   if j % 10 == 4\n            j = j / 10\n            names[j] = \"Four\"\n\
    \        end\n        if j % 10 == 5\n            j = j / 10\n            names[j]\
    \ = \"Five\"\n        end\n        if j % 10 == 6\n            j = j / 10\n  \
    \          names[j] = \"Six\"\n        end\n        if j % 10 == 7\n         \
    \   j = j / 10\n            names[j] = \"Seven\"\n        end\n        if j %\
    \ 10 == 8\n            j = j / 10\n            names[j] = \"Eight\"\n        end\n\
    \        if j % 10 == 9\n            j = j / 10\n            names[j] = \"Nine\"\
    \n        end\n    end\n    \n    return names\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([1, -1, 55])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([", "    \n\
    \    if length(arr) == 0 \n        return Vector{String}() \n    else \n     \
    \   arr = sort(arr)\n        arr = reverse(arr)\n        arr = map(x -> \"One\"\
    \ if x == 1 \n            else if x == 2 \n                \"Two\" \n        \
    \    else if x == 3 \n                \"Three\" \n            else if x == 4 \n\
    \                \"Four\" \n            else if x == 5 \n                \"Five\"\
    \ \n            else if x == 6 \n                \"Six\" \n            else if\
    \ x == 7 \n                \"Seven\" \n            else if x == 8 \n         \
    \       \"Eight\" \n            else if x == 9 \n                \"Nine\" \n \
    \           else \n                \"\" \n            , arr)\n        return arr\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=juli", "    \n    if arr.length == 0 \n\
    \        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n \
    \   arr = reverse(arr)\n    \n    arr = replace(arr, 1, \"One\")\n    arr = replace(arr,\
    \ 2, \"Two\")\n    arr = replace(arr, 3, \"Three\")\n    arr = replace(arr, 4,\
    \ \"Four\")\n    arr = replace(arr, 5, \"Five\")\n    arr = replace(arr, 6, \"\
    Six\")\n    arr = replace(arr, 7, \"Seven\")\n    arr = replace(arr, 8, \"Eight\"\
    )\n    arr = replace(arr, 9, \"Nine\")\n    \n    return arr\nend", "    \n  \
    \  if length(arr) == 0 \n        return [] \n    else \n        \n        sorted_arr\
    \ = sort(arr)\n        \n        sorted_arr_reversed = reverse(sorted_arr)\n \
    \       \n        sorted_arr_reversed_str = \"\".join(map(str, sorted_arr_reversed))\n\
    \        \n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"0\", \"One\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"1\", \"Two\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"2\", \"Three\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"3\", \"Four\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"4\", \"Five\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"5\", \"Six\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"6\", \"Seven\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"7\", \"Eight\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"8\", \"Nine\")\n        \n        return sorted_arr_reversed_str\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings that represent each of the numbers from 1 to\
    \ 9 inclusive, with the corresponding name for each number in the vector. For\
    \ example, if the vector is [2, 1, 1, 4, 5, 8, 2, 3], the function should return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]. Do not use the built-in function map!.", "    if length(arr) == 0\
    \ \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n\
    \    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : error(\"Invalid input\"), arr)\n    \n    return arr\nend\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1, -1,\
    \ 55])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings containing the names of the numbers that are\
    \ between 1 and 9 inclusive.", "    \n    if length(arr) == 0 \n        return\
    \ Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n\
    \    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n   \
    \ \n    return arr\nend", "    if length(arr) == 0 \n        return [] \n    end\n\
    \    \n    sorted_arr = sort(arr)\n    \n    sorted_arr_reverse = reverse(sorted_arr)\n\
    \    \n    sorted_arr_reverse.map!(x->\"One\"..\"Nine\"[x])\n    \n    return\
    \ sorted_arr_reverse\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the vector in reverse order, but with each\
    \ digit replaced by its corresponding name from \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".", "    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x :\
    \ \"\", arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of integers and returns the sum of the integers.\
    \ If the vector is empty, return 0.", "    \n    if length(arr) == 0\n       \
    \ return Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n    digits\
    \ = Vector{String}(\"\")\n    \n    for n in arr\n        if n < 1 || n > 9\n\
    \            continue\n        end\n        digits = push!(digits, names(n)[1])\n\
    \    end\n    \n    return reverse(digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=", "    \n    if length(arr) ==\
    \ 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n   \
    \ \n    digits = Vector{Int64}()\n    \n    for x in arr\n        if x < 1 ||\
    \ x > 9\n            continue\n        end\n        \n        push!(digits, x)\n\
    \    end\n    \n    digits = reverse(digits)\n    \n    names = Vector{String}()\n\
    \    \n    for x in digits\n        if x == 1\n            push!(names, \"One\"\
    )\n            continue\n        end\n        \n        if x == 2\n          \
    \  push!(names, \"Two\")\n            continue\n        end\n        \n      \
    \  if x == 3\n            push!(names, \"Three\")\n            continue\n    \
    \    end\n        \n        if x == 4\n            push!(names, \"Four\")\n  \
    \          continue\n        end\n        \n        if x == 5\n            push!(names,\
    \ \"Five\")\n            continue\n        end\n        \n        if x == 6\n\
    \            push!(names, \"Six\")\n            continue\n        end\n      \
    \  \n        if x == 7\n            push!(names, \"Seven\")\n            continue\n\
    \        end\n        \n        if x == 8\n            push!(names, \"Eight\"\
    )\n            continue\n        end\n        \n        if x == 9\n          \
    \  push!(names, \"Nine\")\n            continue\n        end\n    end\n    \n\
    \    return names\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, ", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    arr = sort(arr)\n    \n    arr =\
    \ reverse(arr)\n    \n    arr = arr .- 10\n    \n    arr = arr .- 9\n    \n  \
    \  arr = arr .- 8\n    \n    arr = arr .- 7\n    \n    arr = arr .- 6\n    \n\
    \    arr = arr .- 5\n    \n    arr = arr .- 4\n    \n    arr = arr .- 3\n    \n\
    \    arr = arr .- 2\n    \n    arr = arr .- 1\n    \n    arr = arr .- 0\n    \n\
    \    arr = arr .+ 1\n    \n    arr = arr .+ 2\n    \n    arr = arr .+ 3\n    \n\
    \    arr = arr .+ 4\n    \n    arr = arr .+ 5\n    \n    arr = arr .+ 6\n    \n\
    \    arr = arr .+ 7\n    \n    arr = arr .+ 8\n    \n    arr = arr .+ 9\n    \n\
    \    arr = arr .+ 10\n    \n    arr = arr .+ 11\n    \n    arr = arr .+ 12\n \
    \   \n    arr = arr .+ 13\n    \n    arr = arr .+ 14\n    \n    arr = arr .+ 15\n\
    \    \n    arr = arr .+ 16\n    \n    arr = arr .+ 17\n    \n    arr = arr .+\
    \ 18\n    \n    arr = arr .+ 19\n    \n    arr = arr .+ 20\n    \n    arr = arr\
    \ .+ 21\n    \n    arr = arr .+ 22\n    \n    arr = arr .+ 23\n    \n    arr =\
    \ arr .+ 24\n    \n    arr = arr .+ 25\n    \n    arr = arr .+ 26\n    \n    arr\
    \ = arr .+ 27\n    \n    arr = arr .+ 28\n    \n    arr = arr .+ 29\n    \n  \
    \  arr = arr .+ 30\n    \n    arr = arr .+ 31\n    \n    arr = arr .+ 32\n   \
    \ \n    arr = arr .+ 33\n    \n    arr = arr .+ 34\n    \n    arr = arr .+ 35\n\
    \    \n    arr = arr .+ 36\n    \n    arr = arr .+ 37\n    \n    arr = arr .+\
    \ 38\n    \n    arr = arr .+ 39\n    \n    arr = arr .+ 40\n    \n    arr = arr\
    \ .+ 41\n    \n    arr = arr .+ 42\n    \n    arr = arr .+ 43\n    \n    arr =\
    \ arr .+ 44\n    \n    arr = arr", "    if length(arr) == 0 \n        return []\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = map(x -> name(x), arr) \n        return arr \n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings that represent each of the numbers in that vector in descending\
    \ order.", "    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n  \
    \  arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    \n    return arr\nend", "  \
    \  \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = replace(arr,\
    \ 1, \"One\")\n    \n    arr = replace(arr, 2, \"Two\")\n    \n    arr = replace(arr,\
    \ 3, \"Three\")\n    \n    arr = replace(arr, 4, \"Four\")\n    \n    arr = replace(arr,\
    \ 5, \"Five\")\n    \n    arr = replace(arr, 6, \"Six\")\n    \n    arr = replace(arr,\
    \ 7, \"Seven\")\n    \n    arr = replace(arr, 8, \"Eight\")\n    \n    arr = replace(arr,\
    \ 9, \"Nine\")\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, ", "    if arr.length == 0 \n        return [] \n    else\
    \ \n        arr = arr |> sort() |> reverse() |> map((digit) -> \n            digitToName(digit))\
    \ |> Vector{String}\n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers that are between 1 and 9 inclusive.", "    \n    arr\
    \ = arr |> sort() |> reverse()\n    \n    arr = arr |> map(x->\"One\"..\"Nine\"\
    [x]) |> Vector{String}\n    \n    return arr\nend", "    \n    arr = sort(arr)\n\
    \    \n    if length(arr) == 0 \n        return Vector{String}()\n    end\n  \
    \  \n    arr = reverse(arr)\n    \n    digits = Vector{String}(\"\")\n    \n \
    \   for digit in arr\n        if digit < 1 || digit > 9\n            continue\n\
    \        end\n        \n        push!(digits, name_by_length(digit))\n    end\n\
    \    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, ", " \
    \   if length(arr) == 0\n        return Vector{String}()\n    end\n    \n    arr\
    \ = sort(arr)\n    \n    digits = Vector{String}(\"\")\n    \n    for i in arr\n\
    \        if i <= 9\n            digits = push!(digits, \"One\")\n        elseif\
    \ i <= 99\n            digits = push!(digits, \"Two\")\n        elseif i <= 999\n\
    \            digits = push!(digits, \"Three\")\n        elseif i <= 9999\n   \
    \         digits = push!(digits, \"Four\")\n        elseif i <= 99999\n      \
    \      digits = push!(digits, \"Five\")\n        elseif i <= 999999\n        \
    \    digits = push!(digits, \"Six\")\n        elseif i <= 9999999\n          \
    \  digits = push!(digits, \"Seven\")\n        elseif i <= 99999999\n         \
    \   digits = push!(digits, \"Eight\")\n        elseif i <= 999999999\n       \
    \     digits = push!(digits, \"Nine\")\n        else\n            digits = push!(digits,\
    \ \"?\")\n        end\n    end\n    \n    digits\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings that represent each of the numbers from 1 to 9 inclusive.", "    if\
    \ !arr.is_empty()\n        arr = sort(arr)\n        arr = reverse(arr)\n     \
    \   arr = replace(arr, 1, \"One\")\n        arr = replace(arr, 2, \"Two\")\n \
    \       arr = replace(arr, 3, \"Three\")\n        arr = replace(arr, 4, \"Four\"\
    )\n        arr = replace(arr, 5, \"Five\")\n        arr = replace(arr, 6, \"Six\"\
    )\n        arr = replace(arr, 7, \"Seven\")\n        arr = replace(arr, 8, \"\
    Eight\")\n        arr = replace(arr, 9, \"Nine\")\n    end\n    return arr\nend\n\
    </cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the vector sorted in descending order by the absolute value of the integers.\
    \ For example:\n>>> by_abs([-2, -1, 0, 1, 2])\n[0, 1, -1, 2, -2]", "    \n   \
    \ if length(arr) == 0 \n        return Vector{String}()\n    end\n    \n    arr\
    \ = sort(arr)\n    \n    digits = Vector{Int64}()\n    \n    for el in arr\n \
    \       if el < 1 || el > 9\n            continue\n        end\n        push!(digits,\
    \ el)\n    end\n    \n    digits = reverse(digits)\n    \n    names = Vector{String}()\n\
    \    \n    for el in digits\n        push!(names, names_map[el])\n    end\n  \
    \  \n    return names\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5", "    \n    arr = arr |>\
    \ sort() |> reverse() |> map(i->\"One\"..\"Nine\"[i])\n    \n    if arr.length\
    \ == 0\n        arr = []\n    end\n    \n    return arr\nend", "    \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        \n        arr =\
    \ sort(arr) \n        \n        arr = reverse(arr) \n        \n        arr = map(x\
    \ -> name(x), arr) \n        \n        return arr \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings that represent each of the numbers from 1 to 9 inclusive.",
  "    if length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> name(x), arr) \n     \
    \   return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([1])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])",
  "    \n    arr = sort(arr)\n    \n    if length(arr) == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = reverse(arr)\n    \n    digits = Vector{String}(\"\"\
    )\n    \n    for d in arr\n        push!(digits, name_by_length(digits, d))\n\
    \    end\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n\
    <code language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns the vector sorted\
    \ in descending order.", "    if length(arr) == 0 \n        return Vector{String}()\n\
    \    end\n    \n    sorted_arr = sort(arr)\n    \n    sorted_arr_reversed = reverse(sorted_arr)\n\
    \    \n    sorted_arr_reversed_replaced = replace(sorted_arr_reversed, digits(sorted_arr),\
    \ \n        [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"])\n    \n    return sorted_arr_reversed_replaced\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the integers \nbetween 1 and 9 inclusive, with the corresponding name\
    \ from \n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\".", "    if arr.length == 0\n        return Vector{String}()\n\
    \    \n    sorted_arr = sort(arr)\n    \n    sorted_arr.reverse()\n    \n    sorted_arr\
    \ .= [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"]\n    \n    return sorted_arr\nend", "    \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr2 = reverse(arr)\n    \n    arr3 = Vector{String}(undef, 0)\n  \
    \  \n    for i in arr2\n        arr3 .= push!(arr3, names[i])\n    end\n    \n\
    \    return arr3\nend", "    \n    arr2 = arr\n    \n    if arr2 == []\n     \
    \   return Vector{String}()\n    end\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n\
    \    arr2 = sort(arr2)\n    \n    arr2 = reverse(arr2)\n    \n    arr2 = arr2\
    \ .- arr2[1]\n    \n    arr2 = arr2 .- arr2[2]\n    \n    arr2 = arr2 .- arr2[3]\n\
    \    \n    arr2 = arr2 .- arr2[4]\n    \n    arr2 = arr2 .- arr2[5]\n    \n  \
    \  arr2 = arr2 .- arr2[6]\n    \n    arr2 = arr2 .- arr2[7]\n    \n    arr2 =\
    \ arr2 .- arr2[8]\n    \n    arr2 = arr2 .- arr2[9]\n    \n    arr2 = arr2 .-\
    \ arr2[10]\n    \n    arr2 = arr2 .- arr2[11]\n    \n    arr2 = arr2 .- arr2[12]\n\
    \    \n    arr2 = arr2 .- arr2[13]\n    \n    arr2 = arr2 .- arr2[14]\n    \n\
    \    arr2 = arr2 .- arr2[15]\n    \n    arr2 = arr2 .- arr2[16]\n    \n    arr2\
    \ = arr2 .- arr2[17]\n    \n    arr2 = arr2 .- arr2[18]\n    \n    arr2 = arr2\
    \ .- arr2[19]\n    \n    arr2 = arr2 .- arr2[20]\n    \n    arr2 = arr2 .- arr2[21]\n\
    \    \n    arr2 = arr2 .- arr2[22]\n    \n    arr2 = arr2 .- arr2[23]\n    \n\
    \    arr2 = arr2 .- arr2[24]\n    \n    arr2 = arr2 .- arr2[25]\n    \n    arr2\
    \ = arr2 .- arr2[26]\n    \n    arr2 = arr2 .- arr2[27]\n    \n    arr2 = arr2\
    \ .- arr2[28]\n    \n    arr2 = arr2 .- arr2[29]\n    \n    arr2 = arr2 .- arr2[30]\n\
    \    \n    arr2 = arr2 .- arr2[31]\n    \n    arr2 = arr2 .- arr2[32]\n    \n\
    \    arr2 = arr2 .- arr2[33]\n    \n    arr", "    if length(arr) == 0 \n    \
    \    return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\" if x == 1 \n                else if x == 2\
    \ \n                    then \"Two\" \n                    else if x == 3 \n \
    \                       then \"Three\" \n                        else if x ==\
    \ 4 \n                            then \"Four\" \n                           \
    \ else if x == 5 \n                                then \"Five\" \n          \
    \                      else if x == 6 \n                                    then\
    \ \"Six\" \n                                    else if x == 7 \n            \
    \                            then \"Seven\" \n                               \
    \         else if x == 8 \n                                            then \"\
    Eight\" \n                                            else \"Nine\", arr) \n \
    \       return arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings where each string\
    \ is the name of the corresponding number in the original vector. For example:\n\
    >>> by_name([2, 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"]", "    if arr.length == 0 \n        return\
    \ Vector{String}()\n    end\n    \n    arr = sort(arr)\n    arr = reverse(arr)\n\
    \    \n    digits = Vector{String}()\n    for i in arr\n        push!(digits,\
    \ names[i])\n    end\n    \n    return digits\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings that represent each of the numbers in the vector in descending order.",
  "    if arr.length == 0 \n        return Vector{String}()\n    end\n    \n    arr\
    \ = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"\
    \ <= x && x <= \"Nine\" ? x : error(\"Invalid input\"), arr)\n    \n    return\
    \ arr\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the numbers\
    \ from 1 to 9 inclusive.", "    if length(arr) == 0 \n        return [] \n   \
    \ end\n    \n    sorted_arr = sort(arr)\n    \n    sorted_arr_reversed = reverse(sorted_arr)\n\
    \    \n    sorted_arr_reversed_str = \"\"\n    for i in sorted_arr_reversed\n\
    \        sorted_arr_reversed_str = sorted_arr_reversed_str + by_length([i])\n\
    \    end\n    \n    return sorted_arr_reversed_str\nend", "    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    sorted_arr = sort(arr)\n\
    \    \n    sorted_arr2 = reverse(sorted_arr)\n    \n    digits = Vector{String}()\n\
    \    \n    for i in sorted_arr2\n        if i <= 9\n            push!(digits,\
    \ \"One\")\n        elseif i <= 99\n            push!(digits, \"Two\")\n     \
    \   elseif i <= 999\n            push!(digits, \"Three\")\n        elseif i <=\
    \ 9999\n            push!(digits, \"Four\")\n        elseif i <= 99999\n     \
    \       push!(digits, \"Five\")\n        elseif i <= 999999\n            push!(digits,\
    \ \"Six\")\n        elseif i <= 9999999\n            push!(digits, \"Seven\")\n\
    \        elseif i <= 999999999\n            push!(digits, \"Eight\")\n       \
    \ elseif i <= 99999999999\n            push!(digits, \"Nine\")\n        else\n\
    \            push!(digits, \"\")\n        end\n    end\n    \n    return digits\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings that represent the numbers in reverse order.",
  "    if length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr) \n        return arr \n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers squared. \nFor example, \n>>> by_length([])\n0\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1,\
    \ 1, 0])\n-1\n>>> by_length([-1, 1, 0, 1])\n-1\n>>> by_length([-1, 1, 0, 1, 2])\n\
    -1\n>>> by_length([-1, 1, 0, 1, 2])\n-1\n>>> by_length([-1, 1, 0, 1, 2])\n-1\n\
    >>> by_length([-1, 1, 0, 1, 2])\n-1\n>>> by_length([-1, 1, 0, 1, 2])\n-1\n>>>\
    \ by_length([-1, 1, 0, 1, 2])\n-1\n>>> by_length([-1, 1, 0, 1, 2])\n-1\n>>> by_length([-1,\
    \ 1, 0, 1, 2])\n-1\n>>> by_length([-1, 1, 0, 1, 2])\n-1\n>>> by_length([-1, 1,\
    \ 0, 1, 2])\n-1\n>>> by_length([-1, 1, 0, 1, 2])\n-1\n>>> by_length([-1, 1, 0,\
    \ 1, 2])\n-1\n>>> by_length([-1, 1, 0, 1, 2])\n-1\n>>> by_length([-1, 1, 0, 1,\
    \ 2])\n-1\n>>> by_length([-1, 1, 0, 1, 2])\n-1\n>>> by_length([-1, 1, 0, 1, 2])\n\
    -1\n>>> by_length([-1, 1, 0, 1, 2])\n-1\n>>> by_length([-1, 1, 0, 1, 2])\n-1\n\
    >>> by_length([-1, 1, 0, 1, 2])\n-1\n>>> by_length([-1, 1, 0, 1, 2])\n-1\n>>>\
    \ by_length([-1, 1, 0, 1, 2])\n-1\n>>> by_length([-1, 1, 0, 1, 2])\n-1\n>>> by_length([-1,\
    \ 1, 0, 1, 2])\n-1\n>>> by_length([-1, 1, 0, 1, 2])\n-1\n>>> by_length([-1, 1,\
    \ 0, 1, 2])\n-1\n>>> by_length([-1, 1, 0, 1, 2])\n-1\n>>> by_length([-1, 1, 0,\
    \ 1, 2])\n-1\n>>> by_length([-1, 1, 0, 1, 2])\n-1\n>>> by_length([-1, 1, 0, 1,\
    \ 2])\n-1\n>>> by_length([-1, 1, 0, 1, 2])\n-1\n>>> by_length([-1, 1, 0, 1, 2])\n\
    -1\n>>> by_length([-1, 1, 0, 1, 2])\n-1\n>>> by_length([-1, 1, 0, 1, 2])\n-1\n\
    >>> by_length([-1, 1, 0, 1, 2])\n-1\n>>> by_length([-1, 1, ", "    \n    arr =\
    \ sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = replace(arr, \"1\"\
    , \"One\")\n    arr = replace(arr, \"2\", \"Two\")\n    arr = replace(arr, \"\
    3\", \"Three\")\n    arr = replace(arr, \"4\", \"Four\")\n    arr = replace(arr,\
    \ \"5\", \"Five\")\n    arr = replace(arr, \"6\", \"Six\")\n    arr = replace(arr,\
    \ \"7\", \"Seven\")\n    arr = replace(arr, \"8\", \"Eight\")\n    arr = replace(arr,\
    \ \"9\", \"Nine\")\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers from 1 to 9 inclusive.", "    if arr.length == 0 \n    \
    \    return Vector{String}() \n    else \n        arr = arr |> sort() |> reverse()\
    \ \n        arr = arr |> map(x->\"One\"..\"Nine\"[x-1]) \n        return arr \n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the numbers\
    \ between 1 and 9 inclusive in descending order.", "    \n    if length(arr) ==\
    \ 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n   \
    \ \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : error(\"Invalid number\"), arr)\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1,\
    \ -1, 55])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings containing the names of the integers\
    \ that are between 1 and 9 inclusive.", "    if arr.length == 0 \n        return\
    \ [] \n    else \n        arr = arr |> sort() |> reverse() \n        arr = arr\
    \ |> map((i) -> \"One\" |> get(i) |> toString) |> Vector{String}\n    end\nend\n\
    </cell>\n<text>\nExercise 3: Write a function that takes a vector of integers\
    \ and returns the sum of the integers\n    between 1 and 9 inclusive.", "    if\
    \ arr.length == 0 \n        return Vector{String}() \n    else \n        arr =\
    \ sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x\
    \ && x <= \"Nine\" ? x : \"\", arr) \n        return arr \n    end\nend", "  \
    \  if length(arr) == 0 \n        return Vector{String}() \n    else \n       \
    \ arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\"\
    \ <= x && x <= \"Nine\" ? x : \"\", arr) \n        return arr \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings that represent \nthe numbers from 1 to 9 inclusive, sorted\
    \ in descending order.", "    \n    if length(arr) == 0 \n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr\
    \ = map(x -> \"One\" <= x && x <= \"Nine\" ? x : error(\"Invalid input\"), arr)\n\
    \    \n    return arr\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns a vector of strings that represent each\
    \ of the integers \nin the vector in descending order.", "    if length(arr) ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = arr |> sort()\
    \ |> reverse() \n        arr = arr |> map((digit) -> \"One\"..\"Nine\"[digit-1])\
    \ |> Vector{String}\n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function called by_length which takes a vector of\
    \ integers and returns a vector of strings.", "    if length(arr) == 0\n     \
    \   return Vector{String}()\n    end\n    \n    arr2 = sort(arr)\n    \n    arr3\
    \ = reverse(arr2)\n    \n    arr4 = arr3 .- arr2\n    \n    arr5 = arr4 .+ arr2\n\
    \    \n    arr6 = arr5 .+ arr3\n    \n    arr7 = arr6 .+ arr4\n    \n    arr8\
    \ = arr7 .+ arr5\n    \n    arr9 = arr8 .+ arr6\n    \n    arr10 = arr9 .+ arr7\n\
    \    \n    arr11 = arr10 .+ arr8\n    \n    arr12 = arr11 .+ arr9\n    \n    arr13\
    \ = arr12 .+ arr10\n    \n    arr14 = arr13 .+ arr11\n    \n    arr15 = arr14\
    \ .+ arr12\n    \n    arr16 = arr15 .+ arr13\n    \n    arr17 = arr16 .+ arr14\n\
    \    \n    arr18 = arr17 .+ arr15\n    \n    arr19 = arr18 .+ arr16\n    \n  \
    \  arr20 = arr19 .+ arr17\n    \n    arr21 = arr20 .+ arr18\n    \n    arr22 =\
    \ arr21 .+ arr19\n    \n    arr23 = arr22 .+ arr20\n    \n    arr24 = arr23 .+\
    \ arr21\n    \n    arr25 = arr24 .+ arr22\n    \n    arr26 = arr25 .+ arr23\n\
    \    \n    arr27 = arr26 .+ arr24\n    \n    arr28 = arr27 .+ arr25\n    \n  \
    \  arr29 = arr28 .+ arr26\n    \n    arr30 = arr29 .+ arr27\n    \n    arr31 =\
    \ arr30 .+ arr28\n    \n    arr32 = arr31 .+ arr29\n    \n    arr33 = arr32 .+\
    \ arr30\n    \n    arr34 = arr33 .+ arr31\n    \n    arr35 = arr34 .+ arr32\n\
    \    \n    arr36 = arr35 .+ arr33\n    \n    arr37 = arr36 .+ arr34\n    \n  \
    \  arr38 = arr37 .+ arr35\n    \n    arr39 = arr38 .+ arr36\n    \n    arr40 =\
    \ arr39 .+ arr37\n    \n    arr41 = arr40 .", "    \n    if length(arr) == 0 \n\
    \        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n \
    \   arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr)\n    \n    return arr\nend", "    if length(arr) == 0 \n  \
    \      return Vector{String}() \n    else \n        arr = sort(arr) \n       \
    \ arr = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n        arr =\
    \ map(x -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"[x], arr) \n   \
    \     arr = map(x -> \"Four\"[x], arr) \n        arr = map(x -> \"Five\"[x], arr)\
    \ \n        arr = map(x -> \"Six\"[x], arr) \n        arr = map(x -> \"Seven\"\
    [x], arr) \n        arr = map(x -> \"Eight\"[x], arr) \n        arr = map(x ->\
    \ \"Nine\"[x], arr) \n        return arr\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([])\n\
    </cell>\n<code language=julia-1.4>\nby_length([1, -1, 55])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers between 1 and 9 inclusive in descending\
    \ order.", "    if length(arr) == 0 \n        return [] \n    else \n        arr\
    \ = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\" if\
    \ x == 1 \n            else if x == 2 \n                \"Two\" \n           \
    \ else if x == 3 \n                \"Three\" \n            else if x == 4 \n \
    \               \"Four\" \n            else if x == 5 \n                \"Five\"\
    \ \n            else if x == 6 \n                \"Six\" \n            else if\
    \ x == 7 \n                \"Seven\" \n            else if x == 8 \n         \
    \       \"Eight\" \n            else if x == 9 \n                \"Nine\" \n \
    \           else \n                \"\" \n            , arr) \n        return\
    \ arr \n    end\nend\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns the sum of the integers squared. \nFor example,\
    \ \n>>> by_length([])\n0\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([-1,\
    \ 1, -4, -5, -8, -2, -3])\n0\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n0\n\
    >>> by_length([-1, 1, -4, -5, -8, -2, -3])\n0\n>>> by_length([-1, 1, -4, -5, -8,\
    \ -2, -3])\n0\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n0\n>>> by_length([-1,\
    \ 1, -4, -5, -8, -2, -3])\n0\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n0\n\
    >>> by_length([-1, 1, -4, -5, -8, -2, -3])\n0\n>>> by_length([-1, 1, -4, -5, -8,\
    \ -2, -3])\n0\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n0\n>>> by_length([-1,\
    \ 1, -4, -5, -8, -2, -3])\n0\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n0\n\
    >>> by_length([-1, 1, -4, -5, -8, -2, -3])\n0\n>>> by_length([-1, 1, -4, -5, -8,\
    \ -2, -3])\n0\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n0\n>>> by_length([-1,\
    \ 1, -4, -5, -8, -2, -3])\n0\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n0\n\
    >>> by_length([-1, 1, -4, ", "    \n    if length(arr) == 0 \n        return Vector{String}()\
    \ \n    else \n        \n        arr = sort(arr)\n        \n        arr = reverse(arr)\n\
    \        \n        arr = map(x -> \"One\"[x], arr)\n        \n        arr = map(x\
    \ -> \"Two\"[x], arr)\n        \n        arr = map(x -> \"Three\"[x], arr)\n \
    \       \n        arr = map(x -> \"Four\"[x], arr)\n        \n        arr = map(x\
    \ -> \"Five\"[x], arr)\n        \n        arr = map(x -> \"Six\"[x], arr)\n  \
    \      \n        arr = map(x -> \"Seven\"[x], arr)\n        \n        arr = map(x\
    \ -> \"Eight\"[x], arr)\n        \n        arr = map(x -> \"Nine\"[x], arr)\n\
    \        \n        return arr\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers squared.\
    \ \nFor example, \n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n[4, 16, 36, 64, 100]\n\
    >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])^2\n[4, 16, 36, 64, 100]", "    \n    if\
    \ arr.length == 0 \n        return Vector{String}()\n    end\n    \n    arr =\
    \ sort(arr)\n    \n    digits = Vector{String}()\n    \n    for i in arr\n   \
    \     if i <= 9\n            push!(digits, \"One\")\n        elseif i <= 99\n\
    \            push!(digits, \"Two\")\n        elseif i <= 999\n            push!(digits,\
    \ \"Three\")\n        elseif i <= 9999\n            push!(digits, \"Four\")\n\
    \        elseif i <= 99999\n            push!(digits, \"Five\")\n        elseif\
    \ i <= 999999\n            push!(digits, \"Six\")\n        elseif i <= 9999999\n\
    \            push!(digits, \"Seven\")\n        elseif i <= 999999999\n       \
    \     push!(digits, \"Eight\")\n        elseif i <= 99999999999\n            push!(digits,\
    \ \"Nine\")\n        else\n            push!(digits, \"\")\n        end\n    end\n\
    \    \n    digits = reverse(digits)\n    \n    for i in digits\n        if i ==\
    \ \"\"\n            continue\n        end\n        \n        if i == 1\n     \
    \       push!(digits, \"One\")\n        elseif i == 2\n            push!(digits,\
    \ \"Two\")\n        elseif i == 3\n            push!(digits, \"Three\")\n    \
    \    elseif i == 4\n            push!(digits, \"Four\")\n        elseif i == 5\n\
    \            push!(digits, \"Five\")\n        elseif i == 6\n            push!(digits,\
    \ \"Six\")\n        elseif i == 7\n            push!(digits, \"Seven\")\n    \
    \    elseif i == 8\n            push!(digits, \"Eight\")\n        elseif i ==\
    \ 9\n            push!(digits, \"Nine\")\n        end\n    end\n    \n    return\
    \ digits\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the numbers\
    \ from 1 to 9 inclusive.", "    if length(arr) == 0 \n        return Vector{String}()\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n        return\
    \ arr \n    end\nend\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns the sum of the integers in the vector.", "  \
    \  if !arr.is_empty()\n        arr = sort(arr)\n        arr = reverse(arr)\n \
    \       arr = replace(arr, 1, \"One\")\n        arr = replace(arr, 2, \"Two\"\
    )\n        arr = replace(arr, 3, \"Three\")\n        arr = replace(arr, 4, \"\
    Four\")\n        arr = replace(arr, 5, \"Five\")\n        arr = replace(arr, 6,\
    \ \"Six\")\n        arr = replace(arr, 7, \"Seven\")\n        arr = replace(arr,\
    \ 8, \"Eight\")\n        arr = replace(arr, 9, \"Nine\")\n    end\n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([1, -1, 55])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([", "    if length(arr) == 0 \n        return [] \n    else \n     \
    \   arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> name(x),\
    \ arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a vector of integers and returns a vector of strings that\
    \ represent each of the numbers between 1 and 9 inclusive with the word \"One\"\
    \ if the number is 1, the word \"Two\" if the number is 2, etc.", "    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : error(\"Invalid number\"), arr)\n    \n    return arr\nend", "  \
    \  if length(arr) == 0 \n        return [] \n    end\n    \n    arr = sort(arr)\n\
    \    \n    digits = Vector{String}(\"\")\n    \n    for i in arr\n        if i\
    \ <= 9\n            digits = push!(digits, names[i])\n        else\n         \
    \   digits = push!(digits, names[i-9])\n        end\n    end\n    \n    return\
    \ reverse(digits)\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns a vector of strings that\
    \ represent each of the numbers from 1 to 9 inclusive.", "    if length(arr) ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr) \n        arr \n    end\nend\n</cell>\n<text>\nExercise 3:\
    \ Write a function that takes a vector of integers and returns the sum of the\
    \ integers squared. \nFor example, \n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    \    should return [4, 16, 36, 64, 100]", "    \n    if length(arr) == 0\n   \
    \     return Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n    names\
    \ = Vector{String}()\n    \n    for i in arr\n        if i < 1 || i > 9\n    \
    \        continue\n        end\n        \n        push!(names, names[i])\n   \
    \ end\n    \n    return names\nend", "    \n    if length(arr) == 0 \n       \
    \ return Vector{String}() \n    else \n        arr = sort(arr)\n        arr =\
    \ reverse(arr)\n        arr = map(x -> name(x), arr)\n        return arr\n   \
    \ end\nend\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings where each string is the name of a number between\
    \ 1 and 9 inclusive.", "    if !isempty(arr)\n        arr = sort(arr)\n      \
    \  arr = reverse(arr)\n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ?\
    \ x : \"\", arr)\n    end\n    return arr\nend", "    if arr.length == 0 \n  \
    \      return Vector{String}() \n    else \n        arr = sort(arr) \n       \
    \ arr = reverse(arr) \n        arr = map(x->name(x), arr) \n        return arr\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function called by_alphabetic\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ in the original vector is replaced by the string that comes first alphabetically\
    \ in the original vector. For example:\n>>> by_alphabetic([\u201Ca\u201D, \u201C\
    b\u201D, \u201Cc\u201D, \u201Cd\u201D, \u201Ce\u201D, \u201Cf\u201D, \u201Cg\u201D\
    , \u201Ch\u201D, \u201Ci\u201D, \u201Cj\u201D])\n[\u201Ca\u201D, \u201Cb\u201D\
    , \u201Cc\u201D, \u201Cd\u201D, \u201Ce\u201D, \u201Cf\u201D, \u201Cg\u201D, \u201C\
    h\u201D, \u201Ci\u201D, \u201Cj\u201D]\n>>> by_alphabetic([\u201Ca\u201D, \u201C\
    b\u201D, \u201Cc\u201D, \u201Cd\u201D, \u201Ce\u201D, \u201Cf\u201D, \u201Cg\u201D\
    , \u201Ch\u201D, \u201Ci\u201D, \u201Cj\u201D, \u201Ck\u201D])\n[\u201Ca\u201D\
    , \u201Cb\u201D, \u201Cc\u201D, \u201Cd\u201D, \u201Ce\u201D, \u201Cf\u201D, \u201C\
    g\u201D, \u201Ch\u201D, \u201Ci\u201D, \u201Cj\u201D, \u201Ck\u201D]\n>>> by_alphabetic([\u201C\
    a\u201D, \u201Cb\u201D, \u201Cc\u201D, \u201Cd\u201D, \u201Ce\u201D, \u201Cf\u201D\
    , \u201Cg\u201D, \u201Ch\u201D, \u201Ci\u201D, \u201Cj\u201D, \u201Ck\u201D, \u201C\
    l\u201D])\n[\u201Ca\u201D, \u201Cb\u201D, \u201Cc\u201D, \u201Cd\u201D, \u201C\
    e\u201D, \u201Cf\u201D, \u201Cg\u201D, \u201Ch\u201D, \u201Ci\u201D, \u201Cj\u201D\
    , \u201Ck\u201D, \u201Cl\u201D]\n>>> by_alphabetic([\u201Ca\u201D, \u201Cb\u201D\
    , \u201Cc\u201D, \u201Cd\u201D, \u201Ce\u201D, \u201Cf\u201D, \u201Cg\u201D, \u201C\
    h\u201D, \u201Ci\u201D, \u201Cj\u201D, \u201Ck\u201D, \u201Cl\u201D, \u201Cm\u201D\
    ])\n[\u201Ca\u201D, \u201Cb\u201D, \u201Cc\u201D, \u201Cd\u201D, \u201Ce\u201D\
    , \u201Cf\u201D, \u201Cg\u201D, \u201Ch\u201D, \u201Ci\u201D, \u201Cj\u201D, \u201C\
    k\u201D, \u201Cl\u201D", "    if arr.length == 0 \n        return Vector{String}()\
    \ \n    else \n        arr = arr |> sort() \n        arr = reverse(arr) \n   \
    \     arr = arr |> map(x->\"One\"..\"Nine\"[x-1], arr) \n        return arr \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([1, -1, 55])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each of\
    \ the numbers in the vector in descending order. For example, the vector [2, 1,\
    \ 4, 3, 8, 5, 6, 7] should return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"].", "    \n    if length(arr) == 0 \n       \
    \ return Vector{String}()\n    end\n    \n    sorted_arr = sort(arr)\n    \n \
    \   digits = Vector{String}()\n    \n    for i in sorted_arr\n        if i <=\
    \ 9\n            push!(digits, \"One\")\n        elseif i <= 99\n            push!(digits,\
    \ \"Two\")\n        elseif i <= 999\n            push!(digits, \"Three\")\n  \
    \      elseif i <= 9999\n            push!(digits, \"Four\")\n        elseif i\
    \ <= 99999\n            push!(digits, \"Five\")\n        elseif i <= 999999\n\
    \            push!(digits, \"Six\")\n        elseif i <= 9999999\n           \
    \ push!(digits, \"Seven\")\n        elseif i <= 999999999\n            push!(digits,\
    \ \"Eight\")\n        elseif i <= 99999999999\n            push!(digits, \"Nine\"\
    )\n        else\n            push!(digits, \"\")\n        end\n    end\n    \n\
    \    return reverse(digits)\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings that represent the numbers in reverse order.", "    \n \
    \   if length(arr) == 0\n        return Vector{String}()\n    end\n    \n    arr\
    \ = sort(arr)\n    \n    digits = Vector{Int64}()\n    \n    for n in arr\n  \
    \      if n >= 1 && n <= 9\n            push!(digits, n)\n        end\n    end\n\
    \    \n    digits = reverse(digits)\n    \n    names = Vector{String}()\n    \n\
    \    for n in digits\n        push!(names, names_lookup[n])\n    end\n    \n \
    \   return names\nend", "    arr = sort(arr)\n    arr = reverse(arr)\n    arr\
    \ = replace(arr, 1, \"One\")\n    arr = replace(arr, 2, \"Two\")\n    arr = replace(arr,\
    \ 3, \"Three\")\n    arr = replace(arr, 4, \"Four\")\n    arr = replace(arr, 5,\
    \ \"Five\")\n    arr = replace(arr, 6, \"Six\")\n    arr = replace(arr, 7, \"\
    Seven\")\n    arr = replace(arr, 8, \"Eight\")\n    arr = replace(arr, 9, \"Nine\"\
    )\n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers in that vector in descending order.",
  "    \n    if arr.length == 0\n        return Vector{String}()\n    end\n    \n\
    \    arr = sort(arr)\n    \n    digits = Vector{String}(\"\")\n    \n    for n\
    \ in arr\n        if n <= 9\n            digits = push!(digits, names(n).(Int))\n\
    \        else\n            digits = push!(digits, \"\")\n        end\n    end\n\
    \    \n    digits\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the same vector, but\
    \ with each integer replaced by its corresponding name from \"One\", \"Two\",\
    \ \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".", " \
    \   if arr.length == 0\n        return Vector{String}()\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = replace(arr, \"One\", \"Eight\"\
    )\n    arr = replace(arr, \"Two\", \"Seven\")\n    arr = replace(arr, \"Three\"\
    , \"Six\")\n    arr = replace(arr, \"Four\", \"Five\")\n    arr = replace(arr,\
    \ \"Five\", \"Four\")\n    arr = replace(arr, \"Six\", \"Three\")\n    arr = replace(arr,\
    \ \"Seven\", \"Six\")\n    arr = replace(arr, \"Eight\", \"Seven\")\n    arr =\
    \ replace(arr, \"Nine\", \"Eight\")\n    \n    return arr\nend", "    \n    if\
    \ length(arr) == 0 \n        return Vector{String}()\n    end\n    \n    arr =\
    \ sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <=\
    \ x && x <= \"Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers that are between 1 and 9 inclusive.", "    if length(arr) ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->names(x)[x], 1:9)\
    \ \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\
    \ \nFor example, \n>>> by_length([])\n0\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    13", "    if arr.length == 0 \n        return Vector{String}()\n    end\n    \n\
    \    arr = sort(arr)\n    \n    digits = Vector{String}(\"\")\n    \n    for d\
    \ in arr\n        if d <= 9\n            digits[end] = digits[end] + names(d)\n\
    \        else\n            digits[end] = digits[end] + names(10 + d)\n       \
    \ end\n    end\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers that are\
    \ between 1 and 9 inclusive.", "    if length(arr) == 0 \n        return Vector{String}()\n\
    \    end\n    \n    sorted_arr = sort(arr)\n    \n    sorted_arr_reversed = reverse(sorted_arr)\n\
    \    \n    sorted_arr_reversed_strings = Vector{String}()\n    \n    for x in\
    \ sorted_arr_reversed\n        if x < 10 \n            sorted_arr_reversed_strings\
    \ = push!(sorted_arr_reversed_strings, \n                                    \
    \            \"One\")\n        elseif x < 100 \n            sorted_arr_reversed_strings\
    \ = push!(sorted_arr_reversed_strings, \n                                    \
    \            \"Two\")\n        elseif x < 1000 \n            sorted_arr_reversed_strings\
    \ = push!(sorted_arr_reversed_strings, \n                                    \
    \            \"Three\")\n        elseif x < 10000 \n            sorted_arr_reversed_strings\
    \ = push!(sorted_arr_reversed_strings, \n                                    \
    \            \"Four\")\n        elseif x < 100000 \n            sorted_arr_reversed_strings\
    \ = push!(sorted_arr_reversed_strings, \n                                    \
    \            \"Five\")\n        elseif x < 1000000 \n            sorted_arr_reversed_strings\
    \ = push!(sorted_arr_reversed_strings, \n                                    \
    \            \"Six\")\n        elseif x < 10000000 \n            sorted_arr_reversed_strings\
    \ = push!(sorted_arr_reversed_strings, \n                                    \
    \            \"Seven\")\n        elseif x < 100000000 \n            sorted_arr_reversed_strings\
    \ = push!(sorted_arr_reversed_strings, \n                                    \
    \            \"Eight\")\n        elseif x < 1000000000 \n            sorted_arr_reversed_strings\
    \ = push!(sorted_arr_reversed_strings, \n                                    \
    \            \"Nine\")\n        elseif x < 10000000000 \n            sorted_arr_reversed_strings\
    \ = push!(sorted_arr_reversed_strings, \n                                    \
    \            \"Ten\")\n        elseif x < 100000000000 \n            sorted_arr_reversed_strings\
    \ = push!(sorted_arr_reversed_strings, \n                                    \
    \            \"Eleven\")\n        elseif x < 1000000000000 \n            sorted_arr_reversed_strings\
    \ = push!(sorted_arr_reversed_strings, \n                                    \
    \            \"Twelve\")\n        elseif x < 10000000000000 \n            sorted_arr_reversed_strings\
    \ = push!(sorted_arr_reversed_strings, \n                                    \
    \            \"Thirteen\")\n        elseif x < 100000000000000 \n            sorted_arr_reversed_strings\
    \ = push!(sorted_arr_reversed_strings, \n                                    \
    \            \"Fourteen\")\n        elseif x < 1000000000000000 \n           \
    \ sorted_arr_reversed_strings = push!(sorted_arr_reversed_strings, \n        \
    \                                        \"Fifteen\")\n        elseif x < 10000000000000000\
    \ \n            sorted_arr_reversed_", "    if !arr.is_empty()\n        arr =\
    \ arr .- 1 \n        arr = arr .- 2 \n        arr = arr .- 3 \n        arr = arr\
    \ .- 4 \n        arr = arr .- 5 \n        arr = arr .- 6 \n        arr = arr .-\
    \ 7 \n        arr = arr .- 8 \n        arr = arr .- 9 \n        arr = reverse(arr)\n\
    \        arr = arr .- \"One\"\n        arr = arr .- \"Two\"\n        arr = arr\
    \ .- \"Three\"\n        arr = arr .- \"Four\"\n        arr = arr .- \"Five\"\n\
    \        arr = arr .- \"Six\"\n        arr = arr .- \"Seven\"\n        arr = arr\
    \ .- \"Eight\"\n        arr = arr .- \"Nine\"\n    end\n    return arr\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings that represent each of the numbers from 1 to\
    \ 9 inclusive.", "    \n    if length(arr) == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    digits = Vector{Int64}()\n    \n\
    \    for n in arr\n        if n < 1 || n > 9\n            continue\n        end\n\
    \        push!(digits, n)\n    end\n    \n    digits = reverse(digits)\n    \n\
    \    names = Vector{String}()\n    \n    for d in digits\n        push!(names,\
    \ names[d])\n    end\n    \n    return names\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers from 1 to 9 inclusive.", "    \n    arr = sort(arr)\n  \
    \  \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" if x == 1 \n   \
    \     else \"Two\" if x == 2 \n        else \"Three\" if x == 3 \n        else\
    \ \"Four\" if x == 4 \n        else \"Five\" if x == 5 \n        else \"Six\"\
    \ if x == 6 \n        else \"Seven\" if x == 7 \n        else \"Eight\" if x ==\
    \ 8 \n        else \"Nine\", arr)\n    \n    return arr\nend", "    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = arr |> sort() \n       \
    \ arr = reverse(arr) \n        arr = map(x -> \"One\"..\"Nine\"[x-1], arr) \n\
    \        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n\
    <code language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns a vector of strings\
    \ that represent each of the numbers from 1 to 9 inclusive, sorted in descending\
    \ order.", "    if length(arr) == 0 \n        return [] \n    else \n        arr\
    \ = arr |> sort() |> reverse() |> map((x -> \"One\"..\"Nine\"[x-1])) \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1,\
    \ -1, 55])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the integers\
    \ \nin the vector in descending order. For example, if the input vector is [4,\
    \ 2, 7, 1, 3, 9, 5], the output vector should be [\"Five\", \"Four\", \"Nine\"\
    , \"Seven\", \"Six\", \"Two\", \"One\"].", "    if length(arr) == 0 \n       \
    \ return Vector{String}() \n    else \n        arr = sort(arr) \n        arr =\
    \ reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n        arr = map(x\
    \ -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"[x], arr) \n        arr\
    \ = map(x -> \"Four\"[x], arr) \n        arr = map(x -> \"Five\"[x], arr) \n \
    \       arr = map(x -> \"Six\"[x], arr) \n        arr = map(x -> \"Seven\"[x],\
    \ arr) \n        arr = map(x -> \"Eight\"[x], arr) \n        arr = map(x -> \"\
    Nine\"[x], arr) \n        arr \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    by_length([])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ integers and returns a vector of strings that represent each of the numbers\
    \ from 1 to 9 inclusive.", "    if length(arr) == 0 \n        return Vector{String}()\
    \ \n    else \n        arr = arr |> sort() \n        arr = reverse(arr) \n   \
    \     arr = arr |> map(x->replace(x, \"One\", \"Eight\"), arr) \n        arr =\
    \ arr |> map(x->replace(x, \"Two\", \"Nine\"), arr) \n        arr = arr |> map(x->replace(x,\
    \ \"Three\", \"Seven\"), arr) \n        arr = arr |> map(x->replace(x, \"Four\"\
    , \"Six\"), arr) \n        arr = arr |> map(x->replace(x, \"Five\", \"Five\"),\
    \ arr) \n        arr = arr |> map(x->replace(x, \"Six\", \"Six\"), arr) \n   \
    \     arr = arr |> map(x->replace(x, \"Seven\", \"Seven\"), arr) \n        arr\
    \ = arr |> map(x->replace(x, \"Eight\", \"Eight\"), arr) \n        arr = arr |>\
    \ map(x->replace(x, \"Nine\", \"Nine\"), arr) \n        arr \n    end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\nI wrote a function that can do this:\n<code>",
  "    if arr.length == 0\n        return Vector{String}()\n    \n    arr = arr |>\
    \ sort() |> reverse()\n    \n    digits = Vector{String}()\n    \n    for n in\
    \ arr\n        if n >= 1 && n <= 9\n            digits.push(to_string(n - 1))\n\
    \        end\n    end\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-", "    if arr.length == 0\
    \ \n        return Vector{String}() \n    else \n        arr = sort(arr) \n  \
    \      arr = reverse(arr) \n        arr = map(x -> name(x), arr) \n        return\
    \ arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns a vector of strings that represent each of the\
    \ integers \nbetween 1 and 9 inclusive, sorted in descending order.", "    \n\
    \    arr = sort(arr)\n    arr = reverse(arr)\n    arr = replace(arr, 1, \"One\"\
    )\n    arr = replace(arr, 2, \"Two\")\n    arr = replace(arr, 3, \"Three\")\n\
    \    arr = replace(arr, 4, \"Four\")\n    arr = replace(arr, 5, \"Five\")\n  \
    \  arr = replace(arr, 6, \"Six\")\n    arr = replace(arr, 7, \"Seven\")\n    arr\
    \ = replace(arr, 8, \"Eight\")\n    arr = replace(arr, 9, \"Nine\")\n    return\
    \ arr\nend", "    if length(arr) == 0 \n        return [] \n    else \n      \
    \  arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> name(x),\
    \ arr) \n        arr \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers squared.\
    \ For example:\n>>> by_length([])\n0\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    25\n>>> by_length([-1, -1, 1, -4, -5, -8, -2, -3])\n0", "    if arr.length ==\
    \ 0 \n        return Vector{String}()\n    else \n        arr = sort(arr)\n  \
    \      arr = reverse(arr)\n        arr = map(x -> \"One\"[x], arr)\n        return\
    \ arr\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns the sum of the integers squared. \nFor example,\
    \ \n>>> by_length([])\n0\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2,\
    \ 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2, 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2,\
    \ 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2, 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2,\
    \ 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2, 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2,\
    \ 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2, 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2,\
    \ 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2, 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2,\
    \ 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2, 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2,\
    \ 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2, 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2,\
    \ 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2, 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2,\
    \ 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2, 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2,\
    \ 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2, 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2,\
    \ 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2, 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2,\
    \ 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2, 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2,\
    \ 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2, 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2,\
    \ 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2, 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2,\
    \ 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2, 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2,\
    \ 1, 2, 4, 8, 2, 3])\n36\n>>> by_length([2, 1, 2, 4, 8, 2, 3])\n36\n>>> by_length",
  "    \n    if length(arr) == 0 \n        return Vector{String}() \n    else \n \
    \       \n        sorted_arr = sort(arr)\n        \n        sorted_arr_reversed\
    \ = reverse(sorted_arr)\n        \n        sorted_arr_reversed_replaced = replace(sorted_arr_reversed,\
    \ digits(sorted_arr), names(sorted_arr))\n        \n        return sorted_arr_reversed_replaced\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([1])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, ",
  "    if length(arr) == 0 \n        return Vector{String}()\n    end\n    \n    arr\
    \ = sort(arr)\n    \n    digits = Vector{String}(\"\")\n    \n    for i in arr\n\
    \        if i <= 9\n            push!(digits, names[i])\n        else\n      \
    \      push!(digits, \"\")\n        end\n    end\n    \n    return reverse(digits)\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1,\
    \ -1, 55])\n</cell>\n<text>\nExercise: Write a function that takes a vector of\
    \ integers and returns the same vector but with all odd numbers replaced by \"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\", and all even numbers replaced by \"Ten\", \"Eleven\", \"Twelve\",\
    \ \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\"\
    , \"Nineteen\".", "    if length(arr) == 0 \n        return [] \n    else \n \
    \       arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x ->\
    \ \"One\" if x == 1 \n                else if x == 2 \n                    then\
    \ \"Two\" \n                    else if x == 3 \n                        then\
    \ \"Three\" \n                        else if x == 4 \n                      \
    \      then \"Four\" \n                            else if x == 5 \n         \
    \                       then \"Five\" \n                                else if\
    \ x == 6 \n                                    then \"Six\" \n               \
    \                     else if x == 7 \n                                      \
    \  then \"Seven\" \n                                        else if x == 8 \n\
    \                                            then \"Eight\" \n               \
    \                             else \"Nine\" \n                            end,\n\
    \                    arr) \n        return arr \n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings where each string is the name of a number between 1 and 9 inclusive.",
  "    if length(arr) == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map((digit) -> \"One\" |>\
    \ getfield(digit, :name) |> toString) \n        arr \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers squared. \nFor example, \n>>> by_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n[4, 10, 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, -5,\
    \ 8, 2, 3])\n[4, -4, -16, -36, -49, -64, -81, -100]", "    if arr.length == 0\n\
    \        return Vector{String}()\n    \n    sorted_arr = sort(arr)\n    reverse(sorted_arr)\n\
    \    \n    digits = Vector{String}()\n    for i in sorted_arr\n        if i <=\
    \ 9\n            digits += [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"][i - 1]\n        else\n            digits\
    \ += [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\"\
    , \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"][i - 10]\n        end\n\
    \    end\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([1, -1, 55])\nby_length([2, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\
    \ 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,\
    \ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,\
    \ 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\
    \ 94, 95, 96, 97, 98, 99])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\
    \ 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\
    \ 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,\
    \ 70, 71, 72, 73, 74, 75, 76, 77, ", "    if arr.length == 0 \n        return\
    \ Vector{String}()\n    else \n        arr = sort(arr)\n        arr = reverse(arr)\n\
    \        arr = replace(arr, 1, \"One\")\n        arr = replace(arr, 2, \"Two\"\
    )\n        arr = replace(arr, 3, \"Three\")\n        arr = replace(arr, 4, \"\
    Four\")\n        arr = replace(arr, 5, \"Five\")\n        arr = replace(arr, 6,\
    \ \"Six\")\n        arr = replace(arr, 7, \"Seven\")\n        arr = replace(arr,\
    \ 8, \"Eight\")\n        arr = replace(arr, 9, \"Nine\")\n        return arr\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the integers\
    \ \nin the vector in descending order. For example, if the vector is [2, 1, 3,\
    \ 6, 4, 9, 5], the function should return [\"Nine\", \"Five\", \"Six\", \"Four\"\
    , \"Three\", \"Two\", \"One\"].", "    if !arr.is_empty()\n        arr = sort(arr)\n\
    \        arr = reverse(arr)\n        arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr)\n    end\n    return arr\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns a vector of strings\
    \ that represent their binary representation. For example, for input [1, 1, 0,\
    \ 1] your function should return [\"11\", \"10\", \"01\", \"00\"].", "    \n \
    \   if arr.length == 0 \n        return [] \n    \n    arr = sort(arr)\n    \n\
    \    arr2 = reverse(arr)\n    \n    arr3 = arr2.map(x => names(x)[1])\n    \n\
    \    return arr3\nend", "    \n    arr = sort(arr)\n    \n    arr2 = reverse(arr)\n\
    \    \n    arr3 = arr2.map(x => names(x)[1])\n    \n    return arr3\nend", " \
    \   if length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n \
    \       else if x == 2 \n        else \"Two\" if x == 3 \n        else \"Three\"\
    \ if x == 4 \n        else \"Four\" if x == 5 \n        else \"Five\" if x ==\
    \ 6 \n        else \"Six\" if x == 7 \n        else \"Seven\" if x == 8 \n   \
    \     else \"Eight\" if x == 9 \n        else \"Nine\", arr) \n        return\
    \ arr \nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns the sum of the integers in the vector.", "    if arr.length\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = replace(arr, 1, \"One\") \n   \
    \     arr = replace(arr, 2, \"Two\") \n        arr = replace(arr, 3, \"Three\"\
    ) \n        arr = replace(arr, 4, \"Four\") \n        arr = replace(arr, 5, \"\
    Five\") \n        arr = replace(arr, 6, \"Six\") \n        arr = replace(arr,\
    \ 7, \"Seven\") \n        arr = replace(arr, 8, \"Eight\") \n        arr = replace(arr,\
    \ 9, \"Nine\") \n        return arr\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    by_length([])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ integers and returns a vector of strings that represent the numbers in reverse\
    \ order. For example, if the input vector is [1, 2, 3, 4], then the output vector\
    \ should be [\"4\", \"3\", \"2\", \"1\"].", "    if length(arr) == 0 \n      \
    \  return Vector{String}() \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> name(x), arr) \n        return arr \n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the integers\
    \ \nbetween 1 and 9 inclusive, with the corresponding name for each of the integers.\
    \ \nFor example, if the vector is [2, 1, 1, 4, 5, 8, 2, 3], the function should\
    \ return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"].", "    if length(arr) == 0 \n        return [] \n    else \n     \
    \   arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\"\
    \ if x == 1 \n            else \"Two\" if x == 2 \n            else \"Three\"\
    \ if x == 3 \n            else \"Four\" if x == 4 \n            else \"Five\"\
    \ if x == 5 \n            else \"Six\" if x == 6 \n            else \"Seven\"\
    \ if x == 7 \n            else \"Eight\" if x == 8 \n            else \"Nine\"\
    , arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers that are\
    \ between 1 and 9 inclusive.", "    if arr.length == 0 \n        return [] \n\
    \    end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr\
    \ = replace(arr, 1, \"One\")\n    arr = replace(arr, 2, \"Two\")\n    arr = replace(arr,\
    \ 3, \"Three\")\n    arr = replace(arr, 4, \"Four\")\n    arr = replace(arr, 5,\
    \ \"Five\")\n    arr = replace(arr, 6, \"Six\")\n    arr = replace(arr, 7, \"\
    Seven\")\n    arr = replace(arr, 8, \"Eight\")\n    arr = replace(arr, 9, \"Nine\"\
    )\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n", "    if arr.length == 0 \n        return Vector{String}()\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n        return\
    \ arr \n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each of\
    \ the numbers in the vector in descending order. For example, if the vector is\
    \ [4, 3, 6, 2, 9], the function should return [\"Nine\", \"Nine\", \"Nine\", \"\
    Four\", \"Three\"]. Make sure to handle empty vectors and vectors with strange\
    \ numbers.", "    \n    if length(arr) == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    names = Vector{String}()\n    \n\
    \    for i in arr\n        if i <= 9\n            push!(names, names[i])\n   \
    \     else\n            push!(names, names[i-9])\n        end\n    end\n    \n\
    \    return names\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns a vector of strings that represent each of the\
    \ integers \nbetween 1 and 9 inclusive, with the corresponding name from the string\
    \ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\".", "    if length(arr) == 0 \n        return [] \n    end\n    \n \
    \   arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"\
    One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings. Each string in the returned vector is the name of a number between\
    \ 1 and 9 inclusive.", "    if arr.length == 0 \n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    digits = Vector{String}(\"\")\n\
    \    \n    for d in arr\n        if d <= 9\n            digits = push!(digits,\
    \ names[d])\n        else\n            digits = push!(digits, \"\")\n        end\n\
    \    end\n    \n    return digits\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the integers \nin the vector in reverse order. For example, if the vector\
    \ is [2, 1, 4, 3, 6, 5, 8, 7, 9], the function should return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"].", "    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : error(\"Invalid number\"), arr)\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers from 1 to 9 inclusive.", "   \
    \ if !isempty(arr)\n        arr = sort(arr)\n        arr = reverse(arr)\n    \
    \    arr = map(x -> \"One\"[x], arr)\n    end\n    return arr\nend", "    if !isempty(arr)\n\
    \        arr = sort(arr)\n        arr = reverse(arr)\n        arr = map(x -> name(x),\
    \ arr)\n    end\n    return arr\nend\n</cell>\n<code language=julia-1.3>\nby_length([1])\n\
    </cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n", "    if length(arr) == 0 \n        return Vector{String}()\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = map(x -> \"One\"[x], arr) \n        arr = map(x -> \"Two\"[x], arr) \n\
    \        arr = map(x -> \"Three\"[x], arr) \n        arr = map(x -> \"Four\"[x],\
    \ arr) \n        arr = map(x -> \"Five\"[x], arr) \n        arr = map(x -> \"\
    Six\"[x], arr) \n        arr = map(x -> \"Seven\"[x], arr) \n        arr = map(x\
    \ -> \"Eight\"[x], arr) \n        arr = map(x -> \"Nine\"[x], arr) \n        return\
    \ arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns the sum of the integers that are between 1 and\
    \ 9 inclusive.", "    \n    if length(arr) == 0 \n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr\
    \ = map(x -> \"One\" <= x && x <= \"Nine\" ? x : error(\"Invalid number\"), arr)\n\
    \    \n    return arr\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a vector of integers and returns a vector of strings that represent each\
    \ of the numbers in the vector in descending order.", "    if !arr.is_empty\n\
    \        arr = sort(arr)\n        arr = reverse(arr)\n        arr = map(x -> \"\
    One\" if x == 1 else \"Two\" if x == 2 \n            else \"Three\" if x == 3\
    \ else \"Four\" if x == 4 \n            else \"Five\" if x == 5 else \"Six\" if\
    \ x == 6 \n            else \"Seven\" if x == 7 else \"Eight\" if x == 8 \n  \
    \          else \"Nine\", arr)\n    end\n    return arr\nend\n</cell>\n<code language=julia-1.0>\n\
    by_length([])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length", "   \
    \ if arr.length == 0 \n        return Vector{String}() \n    else \n        arr\
    \ = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\" <=\
    \ x && x <= \"Nine\" ? x : \"\", arr) \n        return arr \n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nby_length([1])\n</cell>\n<code language=julia-1.0>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</",
  "    arr = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"\
    [x], arr)\n    return arr\nend", "    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n\
    \    \n    arr = replace(arr, 1, \"One\")\n    \n    arr = replace(arr, 2, \"\
    Two\")\n    \n    arr = replace(arr, 3, \"Three\")\n    \n    arr = replace(arr,\
    \ 4, \"Four\")\n    \n    arr = replace(arr, 5, \"Five\")\n    \n    arr = replace(arr,\
    \ 6, \"Six\")\n    \n    arr = replace(arr, 7, \"Seven\")\n    \n    arr = replace(arr,\
    \ 8, \"Eight\")\n    \n    arr = replace(arr, 9, \"Nine\")\n    \n    return arr\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the same vector but with all odd\
    \ numbers replaced by \"Odd\".", "    if arr.length == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr\
    \ = map(x -> \"One\"..\"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings where each string is the name of the integer that is between 1 and\
    \ 9 inclusive.", "    \n    arr = sort(arr)\n    \n    names = Vector{String}()\n\
    \    \n    for n in arr\n        if n >= 1 && n <= 9\n            push!(names,\
    \ name(n))\n        end\n    end\n    \n    return names\nend\n</cell>\n<code\
    \ language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers between 1 and 9 inclusive.", " \
    \   \n    arr = arr |> sort\n    arr = arr |> reverse\n    arr = arr |> map(x->names(x)[x],\
    \ arr)\n    \n    if isempty(arr)\n        arr = []\n    end\n    \n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings. Each string in the returned vector is the name\
    \ of a number between 1 and 9 inclusive.", "    arr = arr |> sort() |> reverse()\
    \ |> map((digit) -> \"One\"..\"Nine\"[digit]) |> Vector{String}\n    if isempty(arr)\n\
    \        Vector{String}()\n    else\n        arr\n    end\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each number between 1 and 9 inclusive with the corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".", "    \n    if length(arr) == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    arr2 = reverse(arr)\n    \n   \
    \ arr3 = Vector{String}(undef, 0)\n    \n    for n in arr2\n        if 1 <= n\
    \ <= 9\n            arr3 .= arr3 .+ string(n)\n        end\n    end\n    \n  \
    \  return arr3\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent the numbers in reverse\
    \ order.", "    if length(arr) == 0 \n        return Vector{String}() \n    else\
    \ \n        arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x\
    \ -> \"One\" if x == 1 \n            else if x == 2 \n                \"Two\"\
    \ \n            else if x == 3 \n                \"Three\" \n            else\
    \ if x == 4 \n                \"Four\" \n            else if x == 5 \n       \
    \         \"Five\" \n            else if x == 6 \n                \"Six\" \n \
    \           else if x == 7 \n                \"Seven\" \n            else if x\
    \ == 8 \n                \"Eight\" \n            else if x == 9 \n           \
    \     \"Nine\" \n            else \n                \"\" \n            , arr)\
    \ \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ their lengths.", "    \n    arr = arr |> sort() |> reverse()\n    \n    arr\
    \ = arr |> map(x->\"One\"..\"Nine\"[x-1]) |> Vector{String}\n    \n    return\
    \ arr\nend", "    if arr.length == 0 \n        return Vector{String}() \n    else\
    \ \n        arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x\
    \ -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n        return arr \n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent their names. \nThe names are \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".", "    if\
    \ length(arr) == 0 \n        return Vector{String}() \n    else \n        arr\
    \ = arr |> sort() \n        arr = reverse(arr) \n        arr = arr |> map(x->\"\
    One\"..\"Nine\"[x-1]) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the integers \nbetween 1 and 9 inclusive,\
    \ with the corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".", "    if length(arr) == 0\n      \
    \  return Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n    digits\
    \ = Vector{String}(undef, 10)\n    for i = 1:length(arr)\n        if arr[i] <\
    \ 1 || arr[i] > 9\n            continue\n        end\n        digits[arr[i] -\
    \ 1] = names[i]\n    end\n    \n    return reverse(digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent their names in alphabetical order.", "    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> name(x), arr) \n        return arr \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, ", "    if arr.length\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    digits = Vector{Int64}()\n    \n    for d in arr\n        push!(digits,\
    \ d)\n    end\n    \n    digits = reverse(digits)\n    \n    names = Vector{String}()\n\
    \    \n    for d in digits\n        push!(names, names[d])\n    end\n    \n  \
    \  return names\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns a vector of strings that\
    \ represent each of the numbers in the vector in descending order.", "    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n               \
    \ else if x == 2 \n                    then \"Two\" \n                    else\
    \ if x == 3 \n                        then \"Three\" \n                      \
    \  else if x == 4 \n                            then \"Four\" \n             \
    \               else if x == 5 \n                                then \"Five\"\
    \ \n                                else if x == 6 \n                        \
    \            then \"Six\" \n                                    else if x == 7\
    \ \n                                        then \"Seven\" \n                \
    \                        else if x == 8 \n                                   \
    \         then \"Eight\" \n                                            else if\
    \ x == 9 \n                                                then \"Nine\" \n  \
    \                                              else \"\" \n                  \
    \      end,arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ \nthe numbers from 1 to 9 inclusive, sorted in descending order.", "    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = arr |> sort() |> reverse()\
    \ |> map((x -> \"One\" * x + \n            \"Two\" * (x - 1) + \n            \"\
    Three\" * (x - 2) + \n            \"Four\" * (x - 3) + \n            \"Five\"\
    \ * (x - 4) + \n            \"Six\" * (x - 5) + \n            \"Seven\" * (x -\
    \ 6) + \n            \"Eight\" * (x - 7) + \n            \"Nine\" * (x - 8)))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=juli", "    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> name(x), arr) \n        return\
    \ arr \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each of\
    \ the numbers in the vector in descending order.", "    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" if x == 1 \n \
    \       else \"Two\" if x == 2\n        else \"Three\" if x == 3\n        else\
    \ \"Four\" if x == 4\n        else \"Five\" if x == 5\n        else \"Six\" if\
    \ x == 6\n        else \"Seven\" if x == 7\n        else \"Eight\" if x == 8\n\
    \        else \"Nine\", arr)\n    \n    return arr\nend", "    \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        \n        arr =\
    \ sort(arr)\n        \n        arr = reverse(arr)\n        \n        arr = map(x\
    \ -> name(x), arr)\n        \n        return arr\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers between 1 and 9 inclusive, with\
    \ the number represented as a string and the word \"One\" before it, and \"Nine\"\
    \ after it. The order of the numbers in the vector does not matter. For example:\n\
    >>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3]))\n[\"One\", \"Two\", \"\
    One\", \"Four\", \"Five\", \"Six\", \"Nine\", \"Two\", \"Three\"]", "    if arr.length\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n               \
    \ else if x == 2 \n                    then \"Two\" \n                    else\
    \ if x == 3 \n                        then \"Three\" \n                      \
    \  else if x == 4 \n                            then \"Four\" \n             \
    \               else if x == 5 \n                                then \"Five\"\
    \ \n                                else if x == 6 \n                        \
    \            then \"Six\" \n                                    else if x == 7\
    \ \n                                        then \"Seven\" \n                \
    \                        else if x == 8 \n                                   \
    \         then \"Eight\" \n                                            else \"\
    Nine\", x) \n        return arr \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers from 1 to 9 inclusive.", "    \n    arr = sort(arr)\n  \
    \  \n    arr2 = []\n    \n    for el in arr\n        if el > 0 && el < 9\n   \
    \         arr2 += [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"][el]\n        else\n            arr2 += \"\"\n  \
    \      end\n    end\n    \n    return arr2\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings where each string is the name of the integer that appears\
    \ most frequently in the vector. For example, if the vector is [1, 1, 1, 2, 2,\
    \ 3] then your function should return [\"One\", \"Two\", \"Three\"]", "    if\
    \ length(arr) == 0\n        return Vector{String}()\n    end\n    \n    arr =\
    \ sort(arr)\n    \n    digits = Vector{String}(\"\")\n    \n    for d in arr\n\
    \        if d <= 9\n            digits = push!(digits, names[d])\n        else\n\
    \            digits = push!(digits, \"\")\n        end\n    end\n    \n    return\
    \ digits\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ integers and returns a vector of strings where each string is the name of a\
    \ number between 1 and 9 inclusive.", "    if length(arr) == 0 \n        return\
    \ Vector{String}() \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\", x)\n        return arr \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1,\
    \ -1, 55])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers squared. \nFor example, \n>>>\
    \ by_length([])\n0\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([1,\
    \ -1, 55])\n-120", "    \n    if length(arr) == 0 \n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    digits = Vector{Int64}()\n    \n\
    \    for i in arr\n        if i <= 9\n            push!(digits, i)\n        else\n\
    \            push!(digits, 10^length(digits))\n        end\n    end\n    \n  \
    \  digits = reverse(digits)\n    \n    names = Vector{String}()\n    \n    for\
    \ i in digits\n        push!(names, names[i])\n    end\n    \n    return names\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings where each string is the name of a number between\
    \ 1 and 9 inclusive.", "    \n    if length(arr) == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr\
    \ = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\")\n    \n    return arr\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1,\
    \ -1, 55])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the numbers\
    \ from 1 to 9 inclusive, with the number \"One\" inserted before each number that\
    \ has only one digit.", "    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n\
    \    \n    arr = replace(arr, \"1\", \"One\")\n    arr = replace(arr, \"2\", \"\
    Two\")\n    arr = replace(arr, \"3\", \"Three\")\n    arr = replace(arr, \"4\"\
    , \"Four\")\n    arr = replace(arr, \"5\", \"Five\")\n    arr = replace(arr, \"\
    6\", \"Six\")\n    arr = replace(arr, \"7\", \"Seven\")\n    arr = replace(arr,\
    \ \"8\", \"Eight\")\n    arr = replace(arr, \"9\", \"Nine\")\n    \n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the same vector but with each integer replaced by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".", "    if length(arr) == 0 \n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    digits = Vector{String}(\"\")\n\
    \    \n    for x in arr\n        if x < 1 || x > 9\n            continue\n   \
    \     end\n        digits = push!(digits, names(Vector{String}([x % 10, x % 10^2,\
    \ x % 10^3, x % 10^4, x % 10^5, x % 10^6, x % 10^7, x % 10^8, x % 10^9])))\n \
    \   end\n    \n    return reverse(digits)\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns the sum of the integers\
    \ squared. \nFor example, \n>>> by_length([])\n0\n>>> by_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n25\n>>> by_length([2, 1, 1, 4, 5, ", "    \n    arr = arr |> Vector{Int64}\n\
    \    \n    arr |> sort\n    \n    arr |> reverse\n    \n    arr |> map((digit)\
    \ -> \"One\" |> get(digit) |> toString)\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns a vector of strings that\
    \ represent each of the numbers between 1 and 9 inclusive in descending order.",
  "    if length(arr) == 0 \n        return Vector{String}() \n    else \n       \
    \ arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\"\
    [x], arr) \n        arr = map(x -> \"Two\"[x], arr) \n        arr = map(x -> \"\
    Three\"[x], arr) \n        arr = map(x -> \"Four\"[x], arr) \n        arr = map(x\
    \ -> \"Five\"[x], arr) \n        arr = map(x -> \"Six\"[x], arr) \n        arr\
    \ = map(x -> \"Seven\"[x], arr) \n        arr = map(x -> \"Eight\"[x], arr) \n\
    \        arr = map(x -> \"Nine\"[x], arr) \n        return arr \n    end\nend\n\
    </cell>\n<code language=julia-1.0>\nby_length([])\n</cell>\n<code language=julia-1.0>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n", "    if length(arr) == 0 \n        return Vector{String}()\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = map(x -> name(x), arr) \n        return arr \n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings where each string is the name of the corresponding number\
    \ in the original vector. For example:\n>>> by_name([2, 1, 1, 4, 5, 8, 2, 3])\n\
    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\nIf the vector is empty, return an empty vector:\n>>> by_name([])\n[]\nIf the\
    \ vector has any strange number ignore it:\n>>> by_name([1, -1, 55])\n[\"One\"\
    ]\nHint: Use map!", "    \n    if length(arr) == 0 \n        return Vector{String}()\
    \ \n    else \n        \n        sorted_arr = sort(arr)\n        reverse(sorted_arr)\n\
    \        \n        digits = Vector{String}()\n        \n        for i in sorted_arr\
    \ \n            digits[i] = \"One\"\n        end\n        \n        for i in reverse(sorted_arr)\
    \ \n            digits[i] = \"Nine\"\n        end\n        \n        for i in\
    \ reverse(sorted_arr) \n            digits[i] = \"Eight\"\n        end\n     \
    \   \n        for i in reverse(sorted_arr) \n            digits[i] = \"Seven\"\
    \n        end\n        \n        for i in reverse(sorted_arr) \n            digits[i]\
    \ = \"Six\"\n        end\n        \n        for i in reverse(sorted_arr) \n  \
    \          digits[i] = \"Five\"\n        end\n        \n        for i in reverse(sorted_arr)\
    \ \n            digits[i] = \"Four\"\n        end\n        \n        for i in\
    \ reverse(sorted_arr) \n            digits[i] = \"Three\"\n        end\n     \
    \   \n        for i in reverse(sorted_arr) \n            digits[i] = \"Two\"\n\
    \        end\n        \n        for i in reverse(sorted_arr) \n            digits[i]\
    \ = \"One\"\n        end\n        \n        return digits \n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings that represent each of the numbers from 1 to 9 inclusive.",
  "    if length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = replace(arr, 1, \"One\") \n   \
    \     arr = replace(arr, 2, \"Two\") \n        arr = replace(arr, 3, \"Three\"\
    ) \n        arr = replace(arr, 4, \"Four\") \n        arr = replace(arr, 5, \"\
    Five\") \n        arr = replace(arr, 6, \"Six\") \n        arr = replace(arr,\
    \ 7, \"Seven\") \n        arr = replace(arr, 8, \"Eight\") \n        arr = replace(arr,\
    \ 9, \"Nine\") \n        return arr \n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers squared. \nFor example, \n>>> by_length([])\n0\n>>> by_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1, 0,\
    \ 1])\n1\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1,\
    \ 0, 1])\n1\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1,\
    \ 0, 1])\n1\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1,\
    \ 0, 1])\n1\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1,\
    \ 0, 1])\n1\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1,\
    \ 0, 1])\n1\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1,\
    \ 0, 1])\n1\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1,\
    \ 0, 1])\n1\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1,\
    \ 0, 1])\n1\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1,\
    \ 0, 1])\n1\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1,\
    \ 0, 1])\n1\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1,\
    \ 0, 1])\n", "    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n\
    \    arr = map(x -> name(x), arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=juli", "    arr = sort(arr)\n    arr =\
    \ reverse(arr)\n    arr = replace(arr, 1, \"One\")\n    arr = replace(arr, 2,\
    \ \"Two\")\n    arr = replace(arr, 3, \"Three\")\n    arr = replace(arr, 4, \"\
    Four\")\n    arr = replace(arr, 5, \"Five\")\n    arr = replace(arr, 6, \"Six\"\
    )\n    arr = replace(arr, 7, \"Seven\")\n    arr = replace(arr, 8, \"Eight\")\n\
    \    arr = replace(arr, 9, \"Nine\")\n    return arr\nend", "    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    digits = Vector{String}(\"\")\n    \n    for i in arr\n        if i\
    \ < 1 || i > 9\n            continue\n        end\n        digits = push!(digits,\
    \ names[i])\n    end\n    \n    return reverse(digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns a vector of strings that represent each of the numbers\
    \ between 1 and 9 inclusive in alphabetical order.", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    arr = arr |> sort() |> reverse()\n\
    \    \n    arr = arr |> map(x->\"One\"..\"Nine\"[x-1]) |> Vector{String}\n   \
    \ \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each of\
    \ the numbers in the vector in descending order.", "    if length(arr) == 0 \n\
    \        return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> name(x), arr) \n        return arr \n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings where each string is the name of a number between 1 and\
    \ 9 inclusive.", "    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n  \
    \  \n    arr = replace(arr, 1, \"One\")\n    arr = replace(arr, 2, \"Two\")\n\
    \    arr = replace(arr, 3, \"Three\")\n    arr = replace(arr, 4, \"Four\")\n \
    \   arr = replace(arr, 5, \"Five\")\n    arr = replace(arr, 6, \"Six\")\n    arr\
    \ = replace(arr, 7, \"Seven\")\n    arr = replace(arr, 8, \"Eight\")\n    arr\
    \ = replace(arr, 9, \"Nine\")\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers between 1 and 9 inclusive in descending order.", "    \n\
    \    if length(arr) == 0 \n        return Vector{String}()\n    end\n    \n  \
    \  arr = sort(arr)\n    \n    names = Vector{String}()\n    \n    for i in arr\n\
    \        if i <= 9\n            push!(names, names[i])\n        else\n       \
    \     push!(names, names[i-9])\n        end\n    end\n    \n    return names\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings that represent each of the numbers between 1\
    \ and 9 inclusive.", "    if !arr.empty()\n        arr = sort(arr)\n        arr\
    \ = reverse(arr)\n        arr = map(x -> \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", x)\n    end\n    return arr\n\
    end", "    if length(arr) == 0 \n        return [] \n    else \n        arr =\
    \ sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x\
    \ && x <= \"Nine\" ? x : \"\", arr) \n        arr \n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector.", "    if length(arr) == 0 \n        return Vector{String}()\
    \ \n    else \n        arr = arr |> sort() \n        arr = arr |> reverse() \n\
    \        arr = arr |> map((digit) -> \"One\" <= digit && digit <= \"Nine\" ? \"\
    One\" : digit) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a vector of integers and returns a vector of strings containing the\
    \ names of the numbers that are between 1 and 9 inclusive.", "    if !arr.is_empty()\n\
    \        arr = sort(arr)\n        arr = reverse(arr)\n        arr = replace(arr,\
    \ 1, \"One\")\n        arr = replace(arr, 2, \"Two\")\n        arr = replace(arr,\
    \ 3, \"Three\")\n        arr = replace(arr, 4, \"Four\")\n        arr = replace(arr,\
    \ 5, \"Five\")\n        arr = replace(arr, 6, \"Six\")\n        arr = replace(arr,\
    \ 7, \"Seven\")\n        arr = replace(arr, 8, \"Eight\")\n        arr = replace(arr,\
    \ 9, \"Nine\")\n    end\n    return arr\nend", "    if length(arr) == 0 \n   \
    \     return Vector{String}() \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x :\
    \ \"\", arr) \n        return arr \n    end\nend", "    if arr.length == 0 \n\
    \        return Vector{String}() \n    else \n        arr = sort(arr) \n     \
    \   arr = reverse(arr) \n        arr = map(x -> \"One\"..\"Nine\"[x], arr) \n\
    \        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n\
    <code language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns a vector of strings\
    \ that represent each of the numbers between 1 and 9 inclusive with the word \"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\" appended to each of the numbers. For example:\n>>> by_length(Vector{Int64}([2,\
    \ 1, 1, 4, 5, 8, 2, 3]))\n[\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"One\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]", "    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = replace(arr, 1, \"One\")\n    arr = replace(arr,\
    \ 2, \"Two\")\n    arr = replace(arr, 3, \"Three\")\n    arr = replace(arr, 4,\
    \ \"Four\")\n    arr = replace(arr, 5, \"Five\")\n    arr = replace(arr, 6, \"\
    Six\")\n    arr = replace(arr, 7, \"Seven\")\n    arr = replace(arr, 8, \"Eight\"\
    )\n    arr = replace(arr, 9, \"Nine\")\n    \n    return arr\nend", "    arr =\
    \ sort(arr)\n    arr = reverse(arr)\n    arr = replace(arr,arr==1,One)\n    arr\
    \ = replace(arr,arr==2,Two)\n    arr = replace(arr,arr==3,Three)\n    arr = replace(arr,arr==4,Four)\n\
    \    arr = replace(arr,arr==5,Five)\n    arr = replace(arr,arr==6,Six)\n    arr\
    \ = replace(arr,arr==7,Seven)\n    arr = replace(arr,arr==8,Eight)\n    arr =\
    \ replace(arr,arr==9,Nine)\n    return arr\nend", "    if length(arr) == 0 \n\
    \        return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\"[x], arr) \n        arr = map(x -> \"Two\"[x],\
    \ arr) \n        arr = map(x -> \"Three\"[x], arr) \n        arr = map(x -> \"\
    Four\"[x], arr) \n        arr = map(x -> \"Five\"[x], arr) \n        arr = map(x\
    \ -> \"Six\"[x], arr) \n        arr = map(x -> \"Seven\"[x], arr) \n        arr\
    \ = map(x -> \"Eight\"[x], arr) \n        arr = map(x -> \"Nine\"[x], arr) \n\
    \        return arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.",
  "    \n    if length(arr) == 0 \n        return Vector{String}()\n    end\n    \n\
    \    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"\
    One\" <= x && x <= \"Nine\" ? x : error(\"Invalid input\"), arr)\n    \n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings that represent each of the numbers from 1 to\
    \ 9 inclusive.", "    if length(arr) == 0 \n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    digits = Vector{String}()\n   \
    \ \n    for x in arr\n        if x < 1 || x > 9 \n            continue\n     \
    \   end\n        \n        push!(digits, names(x)[1])\n    end\n    \n    return\
    \ reverse(digits)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each of\
    \ the integers \nbetween 1 and 9 inclusive, sorted in descending order. For example,\
    \ if the vector is [2, 1, 1, 4, 5, 8, 2, 3], \nthe function should return [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"].",
  "    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = replace(arr,\
    \ \"One\", \"Eight\")\n    arr = replace(arr, \"Two\", \"Seven\")\n    arr = replace(arr,\
    \ \"Three\", \"Six\")\n    arr = replace(arr, \"Four\", \"Five\")\n    arr = replace(arr,\
    \ \"Five\", \"Four\")\n    arr = replace(arr, \"Six\", \"Three\")\n    arr = replace(arr,\
    \ \"Seven\", \"Six\")\n    arr = replace(arr, \"Eight\", \"Seven\")\n    arr =\
    \ replace(arr, \"Nine\", \"Eight\")\n    \n    return arr\nend", "    \n    if\
    \ arr.length == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    digits = Vector{String}(\"\")\n    \n    for i in arr\n        if i\
    \ <= 9\n            digits = push!(digits, \"One\")\n        elseif i <= 99\n\
    \            digits = push!(digits, \"Two\")\n        elseif i <= 999\n      \
    \      digits = push!(digits, \"Three\")\n        elseif i <= 9999\n         \
    \   digits = push!(digits, \"Four\")\n        elseif i <= 99999\n            digits\
    \ = push!(digits, \"Five\")\n        elseif i <= 999999\n            digits =\
    \ push!(digits, \"Six\")\n        elseif i <= 9999999\n            digits = push!(digits,\
    \ \"Seven\")\n        elseif i <= 999999999\n            digits = push!(digits,\
    \ \"Eight\")\n        elseif i <= 99999999999\n            digits = push!(digits,\
    \ \"Nine\")\n        else\n            digits = push!(digits, \"Zero\")\n    \
    \    end\n    end\n    \n    return digits\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of integers and returns a vector of strings\
    \ that represent the numbers in reverse order. For example, if the vector is [1,\
    \ 2, 3, 4], the function should return [\"4\", \"3\", \"2\", \"1\"].", "    \n\
    \    if length(arr) == 0\n        return Vector{String}()\n    end\n    \n   \
    \ arr = sort(arr)\n    \n    digits = Vector{Int64}()\n    \n    for i in arr\n\
    \        push!(digits, i)\n    end\n    \n    digits = reverse(digits)\n    \n\
    \    names = Vector{String}()\n    \n    for i in digits\n        push!(names,\
    \ names[i])\n    end\n    \n    return names\nend", "    if length(arr) == 0 \n\
    \        return [] \n    end\n    \n    arr = sort(arr)\n    \n    arr2 = reverse(arr)\n\
    \    \n    arr3 = arr2\n    \n    for i in 1:length(arr3)\n        arr3[i] = \"\
    One\"\n    end\n    \n    for i in 2:length(arr3)\n        arr3[i] = \"Two\"\n\
    \    end\n    \n    for i in 3:length(arr3)\n        arr3[i] = \"Three\"\n   \
    \ end\n    \n    for i in 4:length(arr3)\n        arr3[i] = \"Four\"\n    end\n\
    \    \n    for i in 5:length(arr3)\n        arr3[i] = \"Five\"\n    end\n    \n\
    \    for i in 6:length(arr3)\n        arr3[i] = \"Six\"\n    end\n    \n    for\
    \ i in 7:length(arr3)\n        arr3[i] = \"Seven\"\n    end\n    \n    for i in\
    \ 8:length(arr3)\n        arr3[i] = \"Eight\"\n    end\n    \n    for i in 9:length(arr3)\n\
    \        arr3[i] = \"Nine\"\n    end\n    \n    return arr3\nend\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1, -1,\
    \ 55])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers in the vector.", "    \n    arr = arr |>\
    \ sort() |> reverse()\n    \n    arr = arr |> map(x->\"One\"..\"Nine\"[x-1]) |>\
    \ Vector{String}\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers from 1 to 9 inclusive.", "    \n    if length(arr) == 0\
    \ \n        return Vector{String}() \n    else \n        \n        arr = sort(arr)\n\
    \        \n        arr = reverse(arr)\n        \n        arr = map(x -> \"One\"\
    \ if x == 1 \n            else \"Two\" if x == 2 \n            else \"Three\"\
    \ if x == 3 \n            else \"Four\" if x == 4 \n            else \"Five\"\
    \ if x == 5 \n            else \"Six\" if x == 6 \n            else \"Seven\"\
    \ if x == 7 \n            else \"Eight\" if x == 8 \n            else \"Nine\"\
    , arr)\n        \n        return arr\n    end\nend", "    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" if x == 1 \n \
    \       else \"Two\" if x == 2\n        else \"Three\" if x == 3\n        else\
    \ \"Four\" if x == 4\n        else \"Five\" if x == 5\n        else \"Six\" if\
    \ x == 6\n        else \"Seven\" if x == 7\n        else \"Eight\" if x == 8\n\
    \        else \"Nine\", arr)\n    \n    return arr\nend", "    if arr.length ==\
    \ 0 \n        return Vector{String}()\n    end\n    \n    sorted_arr = sort(arr)\n\
    \    reverse!(sorted_arr)\n    \n    digits = Vector{String}(\"\")\n    for i\
    \ in sorted_arr\n        digits[i] = \"One\"\n        if i < 10 \n           \
    \ digits[i] = \"Two\"\n            if i < 20 \n                digits[i] = \"\
    Three\"\n                if i < 30 \n                    digits[i] = \"Four\"\n\
    \                    if i < 40 \n                        digits[i] = \"Five\"\n\
    \                        if i < 50 \n                            digits[i] = \"\
    Six\"\n                            if i < 60 \n                              \
    \  digits[i] = \"Seven\"\n                                if i < 70 \n       \
    \                             digits[i] = \"Eight\"\n                        \
    \            if i < 80 \n                                        digits[i] = \"\
    Nine\"\n                                    end\n                            \
    \    end\n                            end\n                        end\n     \
    \               end\n                end\n            end\n        end\n    end\n\
    \    \n    return digits\nend", "    \n    arr2 = copy(arr)\n    \n    if length(arr2)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr2[arr2 < 1] = []\n\
    \    arr2[arr2 > 9] = []\n    \n    arr3 = reverse(arr2)\n    \n    arr4 = arr3\n\
    \    \n    arr5 = arr4\n    \n    arr6 = arr5\n    \n    arr7 = arr6\n    \n \
    \   arr8 = arr7\n    \n    arr9 = arr8\n    \n    arr10 = arr9\n    \n    arr11\
    \ = arr10\n    \n    arr12 = arr11\n    \n    arr13 = arr12\n    \n    arr14 =\
    \ arr13\n    \n    arr15 = arr14\n    \n    arr16 = arr15\n    \n    arr17 = arr16\n\
    \    \n    arr18 = arr17\n    \n    arr19 = arr18\n    \n    arr20 = arr19\n \
    \   \n    arr21 = arr20\n    \n    arr22 = arr21\n    \n    arr23 = arr22\n  \
    \  \n    arr24 = arr23\n    \n    arr25 = arr24\n    \n    arr26 = arr25\n   \
    \ \n    arr27 = arr26\n    \n    arr28 = arr27\n    \n    arr29 = arr28\n    \n\
    \    arr30 = arr29\n    \n    arr31 = arr30\n    \n    arr32 = arr31\n    \n \
    \   arr33 = arr32\n    \n    arr34 = arr33\n    \n    arr35 = arr34\n    \n  \
    \  arr36 = arr35\n    \n    arr37 = arr36\n    \n    arr38 = arr37\n    \n   \
    \ arr39 = arr38\n    \n    arr40 = arr39\n    \n    arr41 = arr40\n    \n    arr42\
    \ = arr41\n    \n    arr43 = arr42\n    \n    arr44 = arr43\n    \n    arr45 =\
    \ arr44\n    \n    arr46 = arr45\n    \n    arr47 = arr46\n    \n    arr48 = arr47\n\
    \    \n    arr49 = arr48\n    \n    arr50 = arr49\n    \n    arr51 = arr50\n \
    \   \n    arr52 = arr51\n    \n    arr53 = arr52\n    \n    arr54 = arr53\n  \
    \  \n    arr55 = arr54\n", "    \n    if length(arr) == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr\
    \ = map(x -> \"One\" <= x && x <= \"Nine\" ? x : error(\"Invalid input\"), arr)\n\
    \    \n    return arr\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a vector of integers and returns the sum of the integers squared. \nFor\
    \ example, \n>>> by_length([])\n0\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n\
    >>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, -1, 0, 4, 5, 8,\
    \ 2, 3])\n25\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n25\n>>> by_length([2,\
    \ -1, 0, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n25\n>>>\
    \ by_length([2, -1, 0, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, -1, 0, 4, 5, 8,\
    \ 2, 3])\n25\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n25\n>>> by_length([2,\
    \ -1, 0, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n25\n>>>\
    \ by_length([2, -1, 0, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, -1, 0, 4, 5, 8,\
    \ 2, 3])\n25\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n25\n>>> by_length([2,\
    \ -1, 0, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n25\n>>>\
    \ by_length([2, -1, 0, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, -1, 0, 4, 5, 8,\
    \ 2, 3])\n25\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n25\n>>> by_length([2,\
    \ -1, 0, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n25\n>>>\
    \ by_length([2, -1, 0, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, -1, 0, 4, 5, 8,\
    \ 2, 3])\n25\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n25\n>>> by_length([2,\
    \ -1, 0, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n25\n>>>\
    \ by_length([2, -1, 0, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, -1, 0, 4, 5, 8,\
    \ 2, 3])\n25\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n25\n>>> by_length([2,\
    \ -1, 0, 4, 5, 8, 2, ", "    if length(arr) == 0 \n        return [] \n    else\
    \ \n        arr = arr |> sort() |> reverse() |> map((x) -> \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")[x] \n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ integers and returns a vector of strings containing the names of all the numbers\
    \ between 1 and 9 inclusive.", "    if arr.length == 0 \n        return Vector{String}()\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = map(x -> \"One\"..\"Nine\"[x], arr) \n        return arr \n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings that represent each of the numbers in the vector\
    \ in descending order.", "    if arr.length == 0 \n        return Vector{String}()\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n        arr\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the numbers\
    \ between 1 and 9 inclusive in descending order.", "    if length(arr) == 0 \n\
    \        return Vector{String}() \n    else \n        arr = sort(arr) \n     \
    \   arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n         \
    \       else if x == 2 \n                    then \"Two\" \n                 \
    \   else if x == 3 \n                        then \"Three\" \n               \
    \         else if x == 4 \n                            then \"Four\" \n      \
    \                      else if x == 5 \n                                then \"\
    Five\" \n                                else if x == 6 \n                   \
    \                 then \"Six\" \n                                    else if x\
    \ == 7 \n                                        then \"Seven\" \n           \
    \                             else if x == 8 \n                              \
    \              then \"Eight\" \n                                            else\
    \ \"Nine\" , arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ \nthe numbers from 1 to 9 inclusive, sorted in descending order.", "    if arr.length\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr) \n        return arr \n    end\nend", "    if arr.length\
    \ == 0\n        return Vector{String}()\n    \n    sorted_arr = sort(arr)\n  \
    \  \n    digits = Vector{String}()\n    \n    for d in sorted_arr\n        if\
    \ d < 1 || d > 9\n            continue\n        \n        digits.push(get_name(d,\
    \ digits))\n    end\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings where each string\
    \ is the name of a digit from 1 to 9 inclusive.", "    if length(arr) == 0 \n\
    \        return Vector{String}() \n    else \n        arr = sort(arr) \n     \
    \   arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr) \n        arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings. Each string\
    \ in the returned vector is the name of a number between 1 and 9 inclusive.",
  "    \n    if length(arr) == 0 \n        return Vector{String}()\n    end\n    \n\
    \    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = replace(arr,\
    \ 1, \"One\")\n    arr = replace(arr, 2, \"Two\")\n    arr = replace(arr, 3, \"\
    Three\")\n    arr = replace(arr, 4, \"Four\")\n    arr = replace(arr, 5, \"Five\"\
    )\n    arr = replace(arr, 6, \"Six\")\n    arr = replace(arr, 7, \"Seven\")\n\
    \    arr = replace(arr, 8, \"Eight\")\n    arr = replace(arr, 9, \"Nine\")\n \
    \   \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each of\
    \ the numbers from 1 to 9 inclusive.", "    if length(arr) == 0 \n        return\
    \ [] \n    else \n        arr = arr |> sort() \n        arr = reverse(arr) \n\
    \        arr = arr |> map((n) -> \"One\"..\"Nine\" |> get(n) |> replace(\" \"\
    , \"\"))\n        return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each of\
    \ the integers \nin the vector in descending order.", "    if arr.length == 0\n\
    \        return Vector{String}()\n    elseif arr.length == 1\n        return [\"\
    One\"]\n    elseif arr.length == 2\n        return [\"Two\", \"One\"]\n    elseif\
    \ arr.length == 3\n        return [\"Three\", \"Two\", \"One\"]\n    elseif arr.length\
    \ == 4\n        return [\"Four\", \"Three\", \"Two\", \"One\"]\n    elseif arr.length\
    \ == 5\n        return [\"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\n   \
    \ elseif arr.length == 6\n        return [\"Six\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"One\"]\n    elseif arr.length == 7\n        return [\"Seven\", \"\
    Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\n    elseif arr.length\
    \ == 8\n        return [\"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"One\"]\n    elseif arr.length == 9\n        return [\"Nine\"\
    , \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"\
    ]\n    else\n        error(\"Vector has too many digits\")\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1,\
    \ -1, 55])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the numbers\
    \ from 1 to 9 inclusive.", "    \n    arr = sort(arr)\n    \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = reverse(arr)\n\
    \    \n    digits = Vector{String}(\"\")\n    \n    for d in arr\n        push!(digits,\
    \ names[d])\n    end\n    \n    return digits\nend", "    if length(arr) == 0\
    \ \n        return Vector{String}() \n    else \n        arr = sort(arr) \n  \
    \      arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the vector sorted in descending\
    \ order.", "    \n    arr = arr |> sort() |> reverse() |> map(i->\"One\"..\"Nine\"\
    [i])\n    \n    if arr.length == 0\n        arr = []\n    end\n    \n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([1, -1, 55])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns a vector of strings that\
    \ represent their binary representation. For example, if the input vector is [1,\
    \ 1, 0, 1] then the output vector should be [\"11\", \"10\", \"01\", \"00\"].",
  "    if length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> name(x), arr) \n     \
    \   return arr \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns the sum of the integers squared. \nFor\
    \ example, \n>>> by_length([])\n0\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n\
    >>> by_length([-1, 1, -5, -4, -7, -8, -8, -8])\n0", "    \n    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    \n    arr = arr |> sort() \n    arr\
    \ = reverse(arr) \n    \n    arr = arr |> map((&(names(arr)[&1])) |> collect)\
    \ \n    \n    return arr \nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, ", "    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([1])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n", "    if length(arr) == 0 \n        return Vector{String}()\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = replace(arr, 1, \"One\") \n        arr = replace(arr, 2, \"Two\") \n \
    \       arr = replace(arr, 3, \"Three\") \n        arr = replace(arr, 4, \"Four\"\
    ) \n        arr = replace(arr, 5, \"Five\") \n        arr = replace(arr, 6, \"\
    Six\") \n        arr = replace(arr, 7, \"Seven\") \n        arr = replace(arr,\
    \ 8, \"Eight\") \n        arr = replace(arr, 9, \"Nine\") \n        return arr\
    \ \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers in the vector.", "    if arr.length\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings where each string\
    \ is the name of a number between 1 and 9 inclusive.", "    if arr.length == 0\n\
    \        return Vector{String}()\n    \n    sorted_arr = sort(arr)\n    \n   \
    \ digits = Vector{String}()\n    for i in sorted_arr\n        if i <= 9\n    \
    \        digits.push(One, Two, Three, Four, Five, Six, Seven, Eight, Nine)[i]\n\
    \        else\n            digits.push(One, Two, Three, Four, Five, Six, Seven,\
    \ Eight, Nine)[i]\n        end\n    end\n    \n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1,\
    \ -1, 55])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the numbers\
    \ from 1 to 9 inclusive."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
