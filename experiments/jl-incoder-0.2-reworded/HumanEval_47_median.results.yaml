language: jl
name: HumanEval_47_median
results:
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    if mid == 1\n  \
    \      return l[1]\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n \
    \   \n    if l[mid] == l[mid+1]\n        return l[mid]\n    \n    if l[mid] ==\
    \ l[mid-1]\n        return l[mid]\n    \n    if l[mid] == l[mid+1]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid+2]\n        return l[mid]\n    \n    if\
    \ l[mid] == l[mid-1]\n        return l[mid]\n    \n    if l[mid] == l[mid+1]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid+2]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid+3]\n        return l[mid]\n    \n    if l[mid] ==\
    \ l[mid-1]\n        return l[mid]\n    \n    if l[mid] == l[mid+1]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid+2]\n        return l[mid]\n    \n    if\
    \ l[mid] == l[mid+3]\n        return l[mid]\n    \n    if l[mid] == l[mid-1]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid+2]\n        return l[mid]\n    \n    if l[mid] ==\
    \ l[mid+3]\n        return l[mid]\n    \n    if l[mid] == l[mid-1]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n    \n    if\
    \ l[mid] == l[mid+2]\n        return l[mid]\n    \n    if l[mid] == l[mid+3]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid+1]\n        return l[mid]\n    \n    if l[mid] ==\
    \ l[mid+2]\n        return l[mid]\n    \n    if l[mid] == l[mid+3]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8t2hz1ya.jl:1\nin expression starting at /tmp/tmp8t2hz1ya.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoyk5qgfi.jl:16\nin expression starting at\
    \ /tmp/tmpoyk5qgfi.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 1\n        return l[1]\n    elseif mid == 2\n     \
    \   return 0.5 * (l[1] + l[2])\n    else\n        return 0.5 * (l[floor(Int64,\
    \ mid/2)]\n                     + l[ceil(Int64, mid/2)])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the median of a vector of numbers. \nThe median is the value separating\
    \ the higher half of a data set from the lower half. \nThe median is defined as\
    \ the value that separates the higher half of a data set from the lower half \n\
    by no more than 1/2 of the data set\u2019s size. \nIf there are an odd number\
    \ of data points, the median is computed as the mean of the two middle values.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplr0dyf95.jl:19\nin expression starting at\
    \ /tmp/tmplr0dyf95.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 1 \n        return l[1]\n    else \n        return\
    \ (l[mid-1] + l[mid]) / 2\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a given vector of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp40p9hds1.jl:15\nin expression starting at\
    \ /tmp/tmp40p9hds1.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l) / 2)\n    if length(l) % 2 == 0\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid+1]) / 2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the mode of a vector. \nThe mode of a vector is the value that\
    \ appears most often in the vector. \nIf there are multiple modes, return any\
    \ one of them.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpon8cav5h.jl:16\nin expression starting at\
    \ /tmp/tmpon8cav5h.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l)+1)/2\n    if length(l) % 2 == 1\n        return\
    \ l[mid]\n    else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxkvuq70x.jl:17\nin expression starting at\
    \ /tmp/tmpxkvuq70x.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the mode of a given vector. \nThe mode is the value\
    \ that appears most often in the vector. \nIf there are multiple modes, return\
    \ any one of them.\nThe function should work for both vectors of integers and\
    \ vectors of floats.\nThe function should work for vectors of any length.\nThe\
    \ function should work for vectors of any type of numbers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf_eek9m6.jl:16\nin expression starting at\
    \ /tmp/tmpf_eek9m6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 0\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the mode of\
    \ a vector. \nThe mode of a vector is the value that appears most often in the\
    \ vector. \nIf there are multiple modes, return any one of them.\nThe mode of\
    \ a vector is defined as the value that appears most often in the vector.\nIf\
    \ there are multiple modes, return any one of them.\nThe mode of a vector is defined\
    \ as the value that appears most often in the vector.\nIf there are multiple modes,\
    \ return any one of them.\nThe mode of a vector is defined as the value that appears\
    \ most often in the vector.\nIf there are multiple modes, return any one of them.\n\
    The mode of a vector is defined as the value that appears most often in the vector.\n\
    If there are multiple modes, return any one of them.\nThe mode of a vector is\
    \ defined as the value that appears most often in the vector.\nIf there are multiple\
    \ modes, return any one of them.\nThe mode of a vector is defined as the value\
    \ that appears most often in the vector.\nIf there are multiple modes, return\
    \ any one of them.\nThe mode of a vector is defined as the value that appears\
    \ most often in the vector.\nIf there are multiple modes, return any one of them.\n\
    The mode of a vector is defined as the value that appears most often in the vector.\n\
    If there are multiple modes, return any one of them.\nThe mode of a vector is\
    \ defined as the value that appears most often in the vector.\nIf there are multiple\
    \ modes, return any one of them.\nThe mode of a vector is defined as the value\
    \ that appears most often in the vector.\nIf there are multiple modes, return\
    \ any one of them.\nThe mode of a vector is defined as the value that appears\
    \ most often in the vector.\nIf there are multiple modes, return any one of them.\n\
    The mode of a vector is defined as the value that appears most often in the vector.\n\
    If there are multiple modes, return any one of them.\nThe mode of a vector is\
    \ defined as the value that appears most often in the vector.\nIf there are multiple\
    \ modes, return any one of them.\nThe mode of a vector is defined as the value\
    \ that appears most often in the vector.\nIf there are multiple modes, return\
    \ any one of them.\nThe mode of a vector is defined as the value \nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppg_tzdau.jl:16\nin expression starting at\
    \ /tmp/tmppg_tzdau.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int64, length(l)/2)\n    if length(l) % 2 == 0\n        return\
    \ l[mid]\n    else\n        return l[mid-1] + l[mid]/2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set\
    \ of numbers is called the \"typical\" number. \nThe median is often called the\
    \ \"middle\" number because it is often the number \nthat would have been chosen\
    \ to represent a sample statistic if it were the \npopulation median.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphitmm32i.jl:17\nin expression starting at\
    \ /tmp/tmphitmm32i.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        throw(DomainError(\n            \"median\
    \ requires at least one element\"))\n    end\n    \n    mid = round(Int64(mid))\n\
    \    if mid == 0\n        throw(DomainError(\n            \"median requires at\
    \ least one element\"))\n    end\n    \n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1]) / 2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpo1t57o_l.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpo1t57o_l.jl:32\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.5 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmpo1t57o_l.jl:0\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpo1t57o_l.jl:32 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpo1t57o_l.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpo1t57o_l.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3.0 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmpo1t57o_l.jl:0\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpo1t57o_l.jl:33 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpo1t57o_l.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpo1t57o_l.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 0.5 of type Float64\n \
    \ Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base ./indices.jl:300\n   [2]\
    \ to_index(A::Vector{Int64}, i::Float64)\n     @ Base ./indices.jl:277\n   [3]\
    \ median(l::Vector{Int64})\n     @ Main /tmp/tmpo1t57o_l.jl:0\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpo1t57o_l.jl:34 [inlined]\n\
    \   [6] macro expansion\n  "
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2 == 1\n        return l[mid]\n\
    \    else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set\
    \ of numbers is called the \"typical\" number. \nThe median is often called the\
    \ \"middle element\" of the sorted set.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptv197l2d.jl:16\nin expression starting at\
    \ /tmp/tmptv197l2d.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    if mid == 1 \n \
    \       return l[1]\n    \n    if mid%2 == 0 \n        return median(l[1..mid/2])\n\
    \    \n    return median(l[mid/2..mid])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc8e_0hb_.jl:21\nin expression starting at\
    \ /tmp/tmpc8e_0hb_.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1] \n    else \n        return\
    \ l[mid]\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpurqc3g3q.jl:16\nin expression starting at\
    \ /tmp/tmpurqc3g3q.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1]) / 2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmppzpl6rqg.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmppzpl6rqg.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.5 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmppzpl6rqg.jl:0\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmppzpl6rqg.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmppzpl6rqg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmppzpl6rqg.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3.0 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmppzpl6rqg.jl:0\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmppzpl6rqg.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmppzpl6rqg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmppzpl6rqg.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 0.5 of type Float64\n \
    \ Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base ./indices.jl:300\n   [2]\
    \ to_index(A::Vector{Int64}, i::Float64)\n     @ Base ./indices.jl:277\n   [3]\
    \ median(l::Vector{Int64})\n     @ Main /tmp/tmppzpl6rqg.jl:0\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmppzpl6rqg.jl:23 [inlined]\n\
    \   [6] macro expansion\n  "
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function that calculates\
    \ the mean of a vector. Test it on some vectors.\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8_uuoh17.jl:16\nin expression starting at\
    \ /tmp/tmp8_uuoh17.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        throw(ZeroDivisionError, \"median of an\
    \ empty vector\")\n    end\n    \n    if mid == 1\n        return l[1]\n    end\n\
    \    \n    if l[mid] == l[mid - 1]\n        return l[mid]\n    end\n    \n   \
    \ if l[mid] == l[mid - 2]\n        return l[mid - 1] + l[mid]/2\n    end\n   \
    \ \n    return l[mid - 1] + l[mid]/2\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpp15pwlvw.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpp15pwlvw.jl:33\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 6.5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp15pwlvw.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp15pwlvw.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpp15pwlvw.jl:34\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 520.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp15pwlvw.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp15pwlvw.jl:32\ntest set: Error\
    \ During Test at /tmp/tmpp15pwlvw.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([6, 5]) == 5.5\n  BoundsError: attempt to access 2-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmpp15pwlvw.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp15pwlvw.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp15pwlvw.jl:32\ntest set:\
    \ Test Failed at /tmp/tmpp15pwlvw.jl:37\n  Expression: candidate([8, 1, 3, 9,\
    \ 9, 2, 7]) == 7\n   Evaluated: 9.0 == 7\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp15pwlvw.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp15pwlvw.jl:32\n"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(ZeroDivisionError())\n    end\n    return l[mid]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpicxkjkx6.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpicxkjkx6.jl:20\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 5.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpicxkjkx6.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpicxkjkx6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpicxkjkx6.jl:21\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 20.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpicxkjkx6.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpicxkjkx6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpicxkjkx6.jl:23\n  Expression: candidate([6, 5]) == 5.5\n \
    \  Evaluated: 5.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpicxkjkx6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpicxkjkx6.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the median of a given\
    \ vector of numbers. \nThe median is the value separating the higher half of a\
    \ sample from the lower half. \nThe median is defined as the value that separates\
    \ the higher half of a sample from the lower half of a sample of size N. \nThe\
    \ median is defined as the value that occurs in an even number of elements. \n\
    The median is defined as the value that occurs in the middle of a sample of size\
    \ N. \nThe median is defined as the value that occurs in the lower half of a sample\
    \ of size N. \nThe median is defined as the value that occurs in the upper half\
    \ of a sample of size N. \nThe median is defined as the value that occurs in the\
    \ lower half of a sample of size N and in the upper half of a sample of size N.\
    \ \nThe median is defined as the value that occurs in the middle of a sample of\
    \ size N and in the lower half of a sample of size N. \nThe median is defined\
    \ as the value that occurs in the middle of a sample of size N and in the upper\
    \ half of a sample of size N. \nThe median is defined as the value that occurs\
    \ in the lower half of a sample of size N and in the middle of a sample of size\
    \ N. \nThe median is defined as the value that occurs in the middle of a sample\
    \ of size N and in the upper half of a sample of size N. \nThe median is defined\
    \ as the value that occurs in the upper half of a sample of size N and in the\
    \ middle of a sample of size N. \nThe median is defined as the value that occurs\
    \ in the lower half of a sample of size N and in the middle of a sample of size\
    \ N and in the upper half of a sample of size N. \nThe median is defined as the\
    \ value that occurs in the middle of a sample of size N and in the lower half\
    \ of a sample of size N and in the upper half of a sample of size N. \nThe median\
    \ is defined as the value that occurs in the lower half of a sample of size N\
    \ and in the middle of a sample of size N and in the upper half of a sample of\
    \ size N and in the middle of a sample of size N. \nThe median is defined as the\
    \ value that occurs in the middle of a sample of size N and in the lower half\
    \ of a sample of size N and in the upper half of a sample of size N and in the\
    \ middle of a sample of size N and in the lower half of a sample of size N. \n\
    The median is defined as the value that occur\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp7i39kv0.jl:11\nin expression starting at\
    \ /tmp/tmpp7i39kv0.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        return NaN\n    else \n        return l[mid-1]\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the mode of a vector. \nThe mode is the element that appears most\
    \ often in the vector. \nIf there are multiple modes, return any one of them.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ucdslmo.jl:15\nin expression starting at\
    \ /tmp/tmp3ucdslmo.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2.0\n    end\nend\n</code>\n<|/ a tags=julia,median |>\n<| c\
    \ |>\nThis doesn't work if there are an even number of elements in the vector.\
    \ For example, median([1,2,3]) returns 1 instead of 2.\n<|/ c |>\n<| c |>\nI added\
    \ a version that works with an even number of elements in the vector.\n<|/ c |>\n\
    <| c |>\nI added a version that works with an even number of elements in the vector.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpver2kaor.jl:16\nin expression starting at\
    \ /tmp/tmpver2kaor.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[end]\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the median of a vector of numbers. \nThe median\
    \ is the number in the middle of the sorted vector. \nThe median is defined as\
    \ the value separating the higher half of a sorted \nvector from the lower half.\
    \ \nIf the vector has even number of elements, then the median is the mean of\
    \ the two \nmiddle values. \nIf the vector has an odd number of elements, then\
    \ the median is the average of the \ntwo middle values. \nIf the vector is empty,\
    \ return NaN.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt3npovac.jl:11\nin expression starting at\
    \ /tmp/tmpt3npovac.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ n = length(l)\n    \n    if n < 2\n        return l[1]\n    end\n    \n    mid\
    \ = floor(n/2)\n    \n    if l[mid] == l[mid-1]\n        return median(l[mid+1:n])\n\
    \    else\n        return median(l[mid-1:mid+1])\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the median of a given vector of numbers. If the vector is empty,\
    \ return NaN.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeu1zf5sx.jl:24\nin expression starting at\
    \ /tmp/tmpeu1zf5sx.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        throw(DomainError(string(\"median of empty\
    \ list\")))\n    end\n    \n    if mid == 1\n        return l[1]\n    end\n  \
    \  \n    mid = floor(mid)\n    \n    if mid==1\n        return l[mid - 1]\n  \
    \  end\n    \n    left = mid - 1\n    right = mid + 1\n    \n    if l[left] >\
    \ l[right]\n        return median(l[left:right])\n    else\n        return median(l[left:right])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplg18mibk.jl:33\nin expression starting at\
    \ /tmp/tmplg18mibk.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    median = sort(l)[end-1]\n\
    \    \n    if median == 0\n        return median\n    else\n        return median\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp1oozm2lz.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp1oozm2lz.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 4.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1oozm2lz.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1oozm2lz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1oozm2lz.jl:23\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 20.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1oozm2lz.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1oozm2lz.jl:21\ntest set: Error\
    \ During Test at /tmp/tmp1oozm2lz.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmp1oozm2lz.jl:9\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1oozm2lz.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1oozm2lz.jl:21\ntest set:\
    \ Test Failed at /tmp/tmp1oozm2lz.jl:25\n  Expression: candidate([6, 5]) == 5.5\n\
    \   Evaluated: 5.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1oozm2lz.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1oozm2lz.jl:21\ntest set: Test\
    \ Fai"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length = length(l)\n\
    \    if length < 2\n        return l[1]\n    end\n    mid = floor(length/2)\n\
    \    if length%2 == 1\n        return median(l[mid:end])\n    else\n        return\
    \ median(l[mid:end-1]) + median(l[mid+1:end])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpnr_7zvpr.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpnr_7zvpr.jl:25\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] median(l::Vector{Int64})\n     @ Main /tmp/tmpnr_7zvpr.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnr_7zvpr.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnr_7zvpr.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpnr_7zvpr.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] median(l::Vector{Int64})\n     @ Main /tmp/tmpnr_7zvpr.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnr_7zvpr.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnr_7zvpr.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpnr_7zvpr.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  UndefVarError: length not defined\n  Stacktrace:\n  \
    \ [1] median(l::Vector{Int64})\n     @ Main /tmp/tmpnr_7zvpr.jl:9\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnr_7zvpr.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnr_7zvpr.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpnr_7zvpr.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([6, 5]) == 5.5\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] median(l::Vector{Int64})\n     @ Main /tmp/tmpnr_7zvpr.jl:9\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)%2 == 1\n        return l[(length(l)+1)/2]\n    else\n   \
    \     return (l[(length(l)+1)/2] + l[(length(l)+1)/2]) / 2\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp9obmihpe.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp9obmihpe.jl:22\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 3.0 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp9obmihpe.jl:0\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp9obmihpe.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp9obmihpe.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp9obmihpe.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3.5 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp9obmihpe.jl:0\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp9obmihpe.jl:23 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp9obmihpe.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp9obmihpe.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 1.0 of type Float64\n \
    \ Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base ./indices.jl:300\n   [2]\
    \ to_index(A::Vector{Int64}, i::Float64)\n     @ Base ./indices.jl:277\n   [3]\
    \ median(l::Vector{Int64})\n     @ Main /tmp/tmp9obmihpe.jl:0\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp9obmihpe.jl:24 [inlined]\n\
    \   [6] macro expansion\n  "
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l) / 2)\n    if length(l) % 2 == 0\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1]) / 2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a vector of numbers, rounded to two decimal places.\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa8xnf115.jl:15\nin expression starting at\
    \ /tmp/tmpa8xnf115.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 1\n        return l[1]\n    end\n    if mid == 2\n\
    \        return 0.5 * (l[1] + l[2])\n    end\n    if mid == length(l)\n      \
    \  return l[mid]\n    end\n    return 0.5 * (l[mid-1] + l[mid])\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph_s3dwey.jl:21\nin expression starting at\
    \ /tmp/tmph_s3dwey.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the mode of\
    \ a given vector. \nThe mode is the value that appears most often in the vector.\
    \ \nThe function should return Float64. \nThe function should work for vectors\
    \ of any length. \nThe function should work for vectors of any type. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimension\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo2e5excx.jl:11\nin expression starting at\
    \ /tmp/tmpo2e5excx.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2==1\n        return l[mid]\n  \
    \  else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ median of a list of numbers. \nThe function should take a list of numbers as\
    \ an argument, and return a Float64. \nThe function should also handle missing\
    \ values (NaN).\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd618u1db.jl:16\nin expression starting at\
    \ /tmp/tmpd618u1db.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    l = l/2\n    l = l-1\n    return l\nend\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphotot0_q.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmphotot0_q.jl:19\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 1.5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphotot0_q.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphotot0_q.jl:18\ntest set: Test\
    \ Failed at /tmp/tmphotot0_q.jl:20\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 9.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphotot0_q.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphotot0_q.jl:18\ntest set: Test\
    \ Failed at /tmp/tmphotot0_q.jl:21\n  Expression: candidate([5]) == 5\n   Evaluated:\
    \ 1.5 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphotot0_q.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphotot0_q.jl:18\ntest set: Test\
    \ Failed at /tmp/tmphotot0_q.jl:22\n  Expression: candidate([6, 5]) == 5.5\n \
    \  Evaluated: 1.5 == 5.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphotot0_q.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphotot0_q.jl:18\ntest set: Test\
    \ Failed at /tmp/tmphotot0_q.jl:23\n  Expression: candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n   Evaluated: 2.5 == 7\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test."
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return l[1]\n    \n    mid = floor(mid)\n\
    \    if mid % 2 == 0\n        return l[mid]\n    \n    return median(l[mid-1:mid+1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz4vh7b_p.jl:1\nin expression starting at /tmp/tmpz4vh7b_p.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nMedian Absolute Deviation\nThe median absolute\
    \ deviation (MAD) is a measure of statistical dispersion, which is defined as\
    \ the median of the absolute deviations from the median.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprd42quq9.jl:11\nin expression starting at\
    \ /tmp/tmprd42quq9.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    i = findfirst(x -> x < l, l) + 1\n    j = findfirst(x -> x > l, l) - 1\n\
    \    mid = (i + j) / 2\n    if j - i <= 1\n        return l[mid]\n    else\n \
    \       return l[mid] + median(l[i:j])\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ median of a vector of numbers, rounded to two decimal places.\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7jn2z5ci.jl:19\nin expression starting at\
    \ /tmp/tmp7jn2z5ci.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0\n        throw(DomainError(\n            \"median requires at\
    \ least one element to work with\"))\n    end\n    mid\n    return l[mid-1]\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Median Absolute Deviation\nThe median absolute deviation (MAD) is a robust measure\
    \ of statistical dispersion. It is defined as the median of the absolute deviations\
    \ from the median.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvtueg34v.jl:17\nin expression starting at\
    \ /tmp/tmpvtueg34v.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[floor(length(l)-1)] + l[floor(length(l)-2)]) / 2.0\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the median of a vector of numbers. If the vector is empty, return\
    \ 0.0.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ijnafrl.jl:11\nin expression starting at\
    \ /tmp/tmp5ijnafrl.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise: Write a function that returns the median of\
    \ a vector of numbers, rounded to two decimal places.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2eaomgpb.jl:16\nin expression starting at\
    \ /tmp/tmp2eaomgpb.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        throw(DomainError(\n            \"median\
    \ requires at least one element to work with\"))\n    end\n    mid = round(Int,\
    \ mid)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1]) / 2\n    end\nend\n</cell>\n<text>\nmedian(l)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvknjvz0m.jl:21\nin expression starting at\
    \ /tmp/tmpvknjvz0m.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[floor(length(l)/2)] + l[ceil(length(l)/2)])/2\nend\n</cell>\n\
    <code language=julia-1.4>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the median of a vector of numbers, rounded to two decimal places.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpokpv6mie.jl:11\nin expression starting at\
    \ /tmp/tmpokpv6mie.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nThe median of a set of numbers is defined as the value\
    \ that appears more than half the times in the set. For example, in the set {1,\
    \ 2, 3, 1, 2, 3}, the median is 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5c81h25y.jl:11\nin expression starting at\
    \ /tmp/tmp5c81h25y.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function that calculates\
    \ the standard deviation of a vector l.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeiz39zrr.jl:16\nin expression starting at\
    \ /tmp/tmpeiz39zrr.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)//2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the median of a vector\
    \ of numbers. \nThe function should take one argument, an array of numbers, and\
    \ return one number.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpedyql24n.jl:11\nin expression starting at\
    \ /tmp/tmpedyql24n.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp92tizbgl.jl:16\nin expression starting at\
    \ /tmp/tmp92tizbgl.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = l/2\n    if l % 2 == 0\n        return l[mid]\n    else\n        return\
    \ l[mid-1] + l[mid]/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise: Write a function that returns the median of\
    \ a vector of numbers. If the vector has even number of elements, return the middle\
    \ element. Otherwise, return the average of the two middle elements.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_a6uby6w.jl:17\nin expression starting at\
    \ /tmp/tmp_a6uby6w.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    median = sort(l)[end]\n\
    \    return median\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the median of a vector\
    \ of numbers. \nThe median is the number in the middle of the sorted vector. \n\
    If the vector has even number of elements, then the median is the mean of the\
    \ two middle elements. \nIf the vector has an odd number of elements, then the\
    \ median is the average of the two middle elements.\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw82o_9e2.jl:11\nin expression starting at\
    \ /tmp/tmpw82o_9e2.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    l = l/2\n    l = l-1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the median of a vector of numbers. \nThe median is the number in the middle\
    \ of the sorted vector. \nIf the vector has even number of elements, then the\
    \ median is the mean of the two middle elements. \nIf the vector has odd number\
    \ of elements, then the median is the average of the two middle elements.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps600x6e0.jl:14\nin expression starting at\
    \ /tmp/tmps600x6e0.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return NaN\n    \n    mid = floor(mid)\n\
    \    if mid == 1\n        return l[mid]\n    \n    left = mid - 1\n    right =\
    \ mid\n    \n    while left < right\n        if l[left] > l[right]\n         \
    \   right = left - 1\n        else\n            left = right + 1\n        end\n\
    \    end\n    \n    return l[left]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuenruxjx.jl:1\nin expression starting at /tmp/tmpuenruxjx.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the mode of a vector. \nThe mode is the element that\
    \ appears most often.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp92xvrcdm.jl:16\nin expression starting at\
    \ /tmp/tmp92xvrcdm.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that returns the mode of a given vector. \nThe mode is the value\
    \ that appears most frequently in the vector. \nThe function should return the\
    \ mode of the vector l as a Float64. \nThe mode is defined as the value that appears\
    \ most frequently in the vector. \nIf there are multiple modes, return any one\
    \ of them.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp0pgkw1r.jl:16\nin expression starting at\
    \ /tmp/tmpp0pgkw1r.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 0\n        return l[mid]\n    else\n        return l[mid-1]\
    \ + median(l[mid+1:end])\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise\nWrite a function that returns the median of\
    \ a vector of numbers. Your function should take an argument that is a vector\
    \ of numbers and return a single number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3cxbojjw.jl:16\nin expression starting at\
    \ /tmp/tmp3cxbojjw.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[floor(length(l)/2)] + l[ceil(length(l)/2)])/2\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the median of a vector of numbers. Use median from StatsBase.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwl_bdpqo.jl:11\nin expression starting at\
    \ /tmp/tmpwl_bdpqo.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int,\
    \ length(l) / 2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise: Write a function that returns the median of a vector\
    \ of numbers. \nThe function should take one argument, an array of numbers. \n\
    The function should return a single number.\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp37gwlk5.jl:11\nin expression starting at\
    \ /tmp/tmpp37gwlk5.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)==0 \n        return NaN\n    end\n    \n    mid = floor(length(l)/2)\n\
    \    \n    if mid==0 \n        return l[mid]\n    end\n    \n    if l[mid] ==\
    \ l[mid-1] \n        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1] \n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid-1] \n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid+1] \n        return l[mid]\n \
    \   end\n    \n    if l[mid] == l[mid-1] \n        return l[mid]\n    end\n  \
    \  \n    if l[mid] == l[mid+1] \n        return l[mid]\n    end\n    \n    if\
    \ l[mid] == l[mid-1] \n        return l[mid]\n    end\n    \n    if l[mid] ==\
    \ l[mid+1] \n        return l[mid]\n    end\n    \n    if l[mid] == l[mid-1] \n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1] \n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid-1] \n        return l[mid]\n \
    \   end\n    \n    if l[mid] == l[mid+1] \n        return l[mid]\n    end\n  \
    \  \n    if l[mid] == l[mid-1] \n        return l[mid]\n    end\n    \n    if\
    \ l[mid] == l[mid+1] \n        return l[mid]\n    end\n    \n    if l[mid] ==\
    \ l[mid-1] \n        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1] \n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid-1] \n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid+1] \n        return l[mid]\n \
    \   end\n    \n    if l[mid] == l[mid-1] \n        return l[mid]\n    end\n  \
    \  \n    if l[mid] == l[mid+1] \n        return l[mid]\n    end\n    \n    if\
    \ l[mid] == l[mid-1] \n        return l[mid]\n    end\n    \n    if l[mid] ==\
    \ l[mid+1] \n        return l[mid]\n    end\n    \n    if l[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmpf7nvpx.jl:1\nin expression starting at /tmp/tmpmpf7nvpx.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a vector of numbers. \nThe function should take an argument l of type\
    \ Vector{Int64}.\nThe function should return the median of the elements of l.\n\
    The median of a vector of numbers is defined as the middle number of the sorted\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8vtkucu8.jl:16\nin expression starting at\
    \ /tmp/tmp8vtkucu8.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise\nWrite a function that returns the median of\
    \ a vector of numbers. Use median from above. Test it on some vectors.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuaz4v9ug.jl:16\nin expression starting at\
    \ /tmp/tmpuaz4v9ug.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    median = sort(l)[end]\n\
    \    \n    if median==0\n        median = median(sort(l)[1:end-1])\n    end\n\
    \    \n    return median\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt7o90d8l.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpt7o90d8l.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 5.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt7o90d8l.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt7o90d8l.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpt7o90d8l.jl:23\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 1000.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt7o90d8l.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt7o90d8l.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpt7o90d8l.jl:25\n  Expression: candidate([6, 5]) == 5.5\n \
    \  Evaluated: 6.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt7o90d8l.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt7o90d8l.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpt7o90d8l.jl:26\n  Expression: candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n   Evaluated: 9.0 == 7\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt7o90d8l.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt7o90d8l.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    i = findfirst(x -> x < l, l)\n    if i == length(l) \n        return l\n\
    \    else \n        return l[i]\nend\n</cell>\n<code language=julia-1.3>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a vector of numbers, rounded to the nearest integer.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3_r2xfnw.jl:16\nin expression starting at\
    \ /tmp/tmp3_r2xfnw.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)%2 == 1\n        return l[end-1]\n    else\n        return\
    \ (l[end-1] + l[end])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a vector of numbers. If the vector has even number of elements, then the\
    \ median is the mean of the two middle elements. If the vector has an odd number\
    \ of elements, then the median is the average of the two middle elements.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpay07nta2.jl:17\nin expression starting at\
    \ /tmp/tmpay07nta2.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        error(\"median requires at least one element\"\
    )\n    end\n    \n    if mid == 1\n        return l[1]\n    end\n    \n    if\
    \ l[mid] == l[mid-1]\n        return median(l[mid-1:mid])\n    end\n    \n   \
    \ return median(l[mid-1:mid]) + median(l[mid-1:mid-1]) / 2\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the mean of a vector. \nThe mean of a vector is the sum of the\
    \ elements in the vector, divided by the number of elements in the vector.\nFor\
    \ example, if the vector has 3 elements, the mean is 3. If the vector has 5 elements,\
    \ the mean is 3.5.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnnjmn79m.jl:24\nin expression starting at\
    \ /tmp/tmpnnjmn79m.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)/2)\n    if length(l) % 2 == 0\n        return l[mid]\n\
    \    else\n        return l[mid-1] + l[mid]/2\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpfm44xe9c.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpfm44xe9c.jl:21\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 2.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfm44xe9c.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfm44xe9c.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfm44xe9c.jl:22\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 6.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfm44xe9c.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfm44xe9c.jl:20\ntest set: Error\
    \ During Test at /tmp/tmpfm44xe9c.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [-1]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmpfm44xe9c.jl:13\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfm44xe9c.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfm44xe9c.jl:20\ntest set:\
    \ Test Failed at /tmp/tmpfm44xe9c.jl:24\n  Expression: candidate([6, 5]) == 5.5\n\
    \   Evaluated: 5.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfm44xe9c.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfm44xe9c.jl:20\ntest set: Test\
    \ Fa"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(DomainError(string(\"median of empty vector\"\
    )))\n    end\n    return l[mid-1]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the mode of\
    \ a vector. \nThe mode is the number that appears most often in the vector. \n\
    If there are multiple modes, return any one of them.\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpodyzf6iu.jl:15\nin expression starting at\
    \ /tmp/tmpodyzf6iu.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a list of numbers. \nThe function should take a list of numbers as\
    \ an argument and return the median of the numbers. \nThe median is the number\
    \ in the middle of the list that has the highest number of elements. \nFor example,\
    \ if the list is [3, 1, 2, 4, 5], the median is 3. If the list is [-10, 4, 6,\
    \ 1000, 10, 20], the median is 10.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpspzzomsj.jl:16\nin expression starting at\
    \ /tmp/tmpspzzomsj.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    median = sort(l)[end]\n\
    \    return median\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu079ptcs.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpu079ptcs.jl:16\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 5.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu079ptcs.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu079ptcs.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpu079ptcs.jl:17\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 1000.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu079ptcs.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu079ptcs.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpu079ptcs.jl:19\n  Expression: candidate([6, 5]) == 5.5\n \
    \  Evaluated: 6.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu079ptcs.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu079ptcs.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpu079ptcs.jl:20\n  Expression: candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n   Evaluated: 9.0 == 7\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu079ptcs.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu079ptcs.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    if mid % 2 == 0\n\
    \        return l[mid / 2]\n    else\n        return (l[mid / 2] + l[(mid - 1)\
    \ / 2]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of numbers. \nWrite a function that returns the median\
    \ of a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of numbers. \nWrite a function that returns the median\
    \ of a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of numbers. \nWrite a function that returns the median\
    \ of a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of numbers. \nWrite a function that returns the median\
    \ of a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of numbers. \nWrite a function that returns the median\
    \ of a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of \nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6hbbzne1.jl:19\nin expression starting at\
    \ /tmp/tmp6hbbzne1.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)//2\n    if length(l)%2 == 0\n        return l[mid]\n    else\n   \
    \     return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a list of numbers. \nThe function should take a list of numbers as\
    \ an argument, \nand return a Float64 number.\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_qrx4jy1.jl:16\nin expression starting at\
    \ /tmp/tmp_qrx4jy1.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l) == 0 \n        return NaN\n    end\n    \n    mid = floor(Int,\
    \ length(l) / 2)\n    \n    if length(l) % 2 == 0 \n        return l[mid]\n  \
    \  else\n        return (l[mid] + l[mid-1]) / 2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the mean of a vector. \nThe mean of a vector is the sum of the\
    \ elements in the vector, divided by the number of elements in the vector.\nFor\
    \ example, if the vector has 3 elements, the mean is 3. If the vector has 4 elements,\
    \ the mean is 3.5.\nWrite a function that returns the median of a vector. \nThe\
    \ median of a vector is the element in the middle of the vector. If the vector\
    \ has 3 elements, the median is 3. If the vector has 4 elements, the median is\
    \ 3.5.\nWrite a function that returns the mode of a vector. \nThe mode of a vector\
    \ is the element that appears most frequently in the vector. \nFor example, if\
    \ the vector has 3 elements, the mode is 3. If the vector has 4 elements, the\
    \ mode is 3.5.\nWrite a function that returns the variance of a vector. \nThe\
    \ variance of a vector is the square of the sum of the squares of the elements\
    \ in the vector. \nFor example, if the vector has 3 elements, the variance is\
    \ 9. If the vector has 4 elements, the variance is 49.\nWrite a function that\
    \ returns the standard deviation of a vector. \nThe standard deviation of a vector\
    \ is the square root of the variance of the vector. \nFor example, if the vector\
    \ has 3 elements, the standard deviation is 2.82843. If the vector has 4 elements,\
    \ the standard deviation is 5.38516. \nWrite a function that returns the correlation\
    \ coefficient of a vector. \nThe correlation coefficient of a vector is the covariance\
    \ of the vector with itself. \nFor example, if the vector has 3 elements, the\
    \ correlation coefficient is 0.66666666666666663. If the vector has 4 elements,\
    \ the correlation coefficient is 0.9999999999999999.\nWrite a function that returns\
    \ the skewness of a vector. \nThe skewness of a vector is the ratio of the standard\
    \ deviation of the vector to the variance of the vector. \nFor example, if the\
    \ vector has 3 elements, the skewness is 0.3333333333333333. If the vector has\
    \ 4 elements, the skewness is 0.9999999999999999.\nWrite a function that returns\
    \ the kurtosis of a vector. \nThe kurtosis of a vector is the ratio of the skewness\
    \ of the vector to the skewness of the vector. \nFor example, if the vector has\
    \ 3 elements, the kurtosis is 3.3333333333333335. If the vector has 4 elements,\
    \ the kurto\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt_esp1ed.jl:23\nin expression starting at\
    \ /tmp/tmpt_esp1ed.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise: Write a function that returns the median of a list\
    \ of numbers. Your function should take a list of numbers and return the median\
    \ of the numbers. If the length of the list is even, the median is the mean of\
    \ the two middle numbers. If the length of the list is odd, the median is the\
    \ number in the middle of the list that is closest to the middle of the list.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptkp601oc.jl:11\nin expression starting at\
    \ /tmp/tmptkp601oc.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpty9s2iv5.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpty9s2iv5.jl:16\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 1.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9s2iv5.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9s2iv5.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpty9s2iv5.jl:17\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 6.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9s2iv5.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9s2iv5.jl:15\ntest set: Error\
    \ During Test at /tmp/tmpty9s2iv5.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmpty9s2iv5.jl:9\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpty9s2iv5.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpty9s2iv5.jl:15\ntest set:\
    \ Test Failed at /tmp/tmpty9s2iv5.jl:19\n  Expression: candidate([6, 5]) == 5.5\n\
    \   Evaluated: 6.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9s2iv5.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9s2iv5.jl:15\ntest set: Test\
    \ Fail"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4tk4y3b7.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp4tk4y3b7.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.5 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp4tk4y3b7.jl:0\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4tk4y3b7.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4tk4y3b7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4tk4y3b7.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3.0 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp4tk4y3b7.jl:0\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4tk4y3b7.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4tk4y3b7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4tk4y3b7.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 0.5 of type Float64\n \
    \ Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base ./indices.jl:300\n   [2]\
    \ to_index(A::Vector{Int64}, i::Float64)\n     @ Base ./indices.jl:277\n   [3]\
    \ median(l::Vector{Int64})\n     @ Main /tmp/tmp4tk4y3b7.jl:0\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4tk4y3b7.jl:23 [inlined]\n\
    \   [6] macro expansion\n  "
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a vector of numbers. \nThe function should take an argument l of type\
    \ Vector{Int64}.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpod5o07kc.jl:16\nin expression starting at\
    \ /tmp/tmpod5o07kc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median of\
    \ a vector of numbers. \nThe function should take an argument l of type Vector{Int64}.\n\
    The function should return an element of the vector l that is the median of the\
    \ vector.\nThe median of a vector is the value that occurs in the middle of the\
    \ vector.\nFor example, if the vector l is [3, 1, 2, 4, 5], the median is 3.\n\
    If the vector l is [-10, 4, 6, 1000, 10, 20], the median is 10.\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwhut3b38.jl:11\nin expression starting at\
    \ /tmp/tmpwhut3b38.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[end]\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the median of a vector of numbers. \nThe median\
    \ is the number in the middle of the sorted vector. \nIf the vector has even number\
    \ of elements, then the median is the mean of the two middle elements. \nIf the\
    \ vector has odd number of elements, then the median is the average of the two\
    \ middle elements.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeu2ok_a0.jl:11\nin expression starting at\
    \ /tmp/tmpeu2ok_a0.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2==1\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called the \"\
    typical\" number. For example, the median of the set {1, 2, 3} is (1 + 2 + 3)/3\
    \ = 2. The median is often called the \"middle value\" of a sorted set of numbers.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptjyci2sd.jl:16\nin expression starting at\
    \ /tmp/tmptjyci2sd.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    else \n        return\
    \ l[mid]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise: Write a function that returns the median of a vector of numbers. \n\
    The median is the value separating the higher half of a sample from the lower\
    \ half. \nIf the vector has even number of elements, then the median is the mean\
    \ of the two middle elements. \nIf the vector has an odd number of elements, then\
    \ the median is the average of the two middle elements. \nIf there are an even\
    \ number of elements and an odd number of elements, then the median is the average\
    \ of the two middle elements. \nIf there are an even number of elements and an\
    \ odd number of elements, then the median is the average of the two middle elements.\
    \ \nIf there are an even number of elements and an odd number of elements, then\
    \ the median is the average of the two middle elements. \nIf there are an even\
    \ number of elements and an odd number of elements, then the median is the average\
    \ of the two middle elements. \nIf there are an even number of elements and an\
    \ odd number of elements, then the median is the average of the two middle elements.\
    \ \nIf there are an even number of elements and an odd number of elements, then\
    \ the median is the average of the two middle elements. \nIf there are an even\
    \ number of elements and an odd number of elements, then the median is the average\
    \ of the two middle elements. \nIf there are an even number of elements and an\
    \ odd number of elements, then the median is the average of the two middle elements.\
    \ \nIf there are an even number of elements and an odd number of elements, then\
    \ the median is the average of the two middle elements. \nIf there are an even\
    \ number of elements and an odd number of elements, then the median is the average\
    \ of the two middle elements. \nIf there are an even number of elements and an\
    \ odd number of elements, then the median is the average of the two middle elements.\
    \ \nIf there are an even number of elements and an odd number of elements, then\
    \ the median is the average of the two middle elements. \nIf there are an even\
    \ number of elements and an odd number of elements, then the median is the average\
    \ of the two middle elements. \nIf there are an even number of elements and an\
    \ odd number of elements, then the median is the average of the two middle elements.\
    \ \nIf there are an even number of elements and an odd number of elements, then\
    \ the median is the average of the two middle elements. \nIf there are an even\
    \ number of elements and an odd number of elements, then the median is the average\
    \ of the two middle elements. \nIf there are an even number of elements and an\
    \ odd number of elements, then the median is the average of the two middle elements.\
    \ \nIf there are an even number of elements and an odd number of elements, then\
    \ the median is the average of the two middle elements. \nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpre8euog_.jl:15\nin expression starting at\
    \ /tmp/tmpre8euog_.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)/2)\n    if length(l)%2 == 1\n        return l[mid]\n  \
    \  else\n        return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc6h7h1qw.jl:16\nin expression starting at\
    \ /tmp/tmpc6h7h1qw.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    sort(l)\n    \n \
    \   l = l[end]\n    \n    if length(l) == 0 \n        return 0 \n    \n    mid\
    \ = floor(length(l)/2)\n    \n    if length(l) == 1 \n        return l[1] \n \
    \   \n    if l[mid] == l[mid-1] \n        return l[mid] \n    \n    if l[mid]\
    \ == l[mid+1] \n        return l[mid+1] \n    \n    if l[mid] < l[mid-1] \n  \
    \      return median(l[mid-1:mid+1]) \n    \n    return median(l[mid+1:end]) \n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoqfx5o7q.jl:32\nin expression starting at\
    \ /tmp/tmpoqfx5o7q.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)%2==0\n        return l[floor(length(l)/2)]\n    else\n  \
    \      return (l[floor(length(l)/2)]+l[floor(length(l)/2)-1])/2\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the mode of a given vector. \nThe mode\
    \ of a vector is the value that appears most often in the vector. \nThe mode is\
    \ defined as the value that appears most often in the vector and \nappears least\
    \ often in the vector. \nFor example, if the vector is [1, 1, 2, 3] then the mode\
    \ is 2.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp013yrkwb.jl:17\nin expression starting at\
    \ /tmp/tmp013yrkwb.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    median = sort(l)[end-1]\n\
    \    \n    if median == 0\n        median = l[end]\n    end\n    \n    return\
    \ median\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], dims=1)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], dims=2)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], dims=3)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], dims=4)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], dims=5)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], dims=6)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], dims=7)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], dims=8)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], dims=9)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], dims=10)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], dims=11)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], dims=12)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], dims=13)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], dims=14)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], dims=15)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], dims=16)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], dims=17)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], dims=18)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbq4_seo2.jl:17\nin expression starting at\
    \ /tmp/tmpbq4_seo2.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ the \"typical\" number. \nThe median is often called the \"middle value\" of\
    \ the sorted set.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiwkaoxk7.jl:16\nin expression starting at\
    \ /tmp/tmpiwkaoxk7.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the mode of a given vector. \nThe mode is the value\
    \ that appears most often in the vector. \nThe function should return a Float64.\
    \ \nThe function should work for any type of vector. \nThe function should work\
    \ for vectors of any size. \nThe function should work for vectors of any type.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimension\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyu82g3fy.jl:16\nin expression starting at\
    \ /tmp/tmpyu82g3fy.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(ZeroDivisionError(\"median of empty list\"))\n\
    \    end\n    mid\n    \n    if mid % 2 == 0 \n        return l[mid/2]\n    else\n\
    \        return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ median of a list of numbers. Write a test to see if the function works.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfansmw41.jl:21\nin expression starting at\
    \ /tmp/tmpfansmw41.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)%2 == 1\n        return l[end-1]\n    else\n        return\
    \ (l[end-1] + l[end])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nThe median of a set of numbers is called a robust\
    \ measure of central tendency. Robust measures tend to give better results when\
    \ the data are normally distributed. A robust median is one that does not assume\
    \ a normal distribution of the data, but instead assumes a normal distribution\
    \ of its central tendency.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphycxhw_h.jl:17\nin expression starting at\
    \ /tmp/tmphycxhw_h.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        throw(DomainError(\n            \"median\
    \ requires at least one element\"))\n    end\n    \n    if mid % 2 == 0\n    \
    \    return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp_ioknu17.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp_ioknu17.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.5 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp_ioknu17.jl:0\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp_ioknu17.jl:26 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp_ioknu17.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp_ioknu17.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3.0 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp_ioknu17.jl:0\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp_ioknu17.jl:27 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp_ioknu17.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp_ioknu17.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 0.5 of type Float64\n \
    \ Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base ./indices.jl:300\n   [2]\
    \ to_index(A::Vector{Int64}, i::Float64)\n     @ Base ./indices.jl:277\n   [3]\
    \ median(l::Vector{Int64})\n     @ Main /tmp/tmp_ioknu17.jl:0\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp_ioknu17.jl:28 [inlined]\n\
    \   [6] macro expansion\n  "
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)/2)\n    if length(l) % 2 == 0\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1]) / 2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that computes the mean of a vector l.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0gw6gemb.jl:16\nin expression starting at\
    \ /tmp/tmp0gw6gemb.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = l/2\n    if l % 2 == 0\n        return mid\n    else\n        return\
    \ mid + 1\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the mean of a vector.\
    \ \nThe mean is the sum of the elements in the vector divided by the number of\
    \ elements in the vector.\nFor example, if the vector has 10 elements, the mean\
    \ is (10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1)/10\nWrite a function that returns\
    \ the mean of a vector. \nThe mean is the sum of the elements in the vector divided\
    \ by the number of elements in the vector.\nFor example, if the vector has 10\
    \ elements, the mean is (10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1)/10\nWrite a function\
    \ that returns the mean of a vector. \nThe mean is the sum of the elements in\
    \ the vector divided by the number of elements in the vector.\nFor example, if\
    \ the vector has 10 elements, the mean is (10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2\
    \ + 1)/10\nWrite a function that returns the mean of a vector. \nThe mean is the\
    \ sum of the elements in the vector divided by the number of elements in the vector.\n\
    For example, if the vector has 10 elements, the mean is (10 + 9 + 8 + 7 + 6 +\
    \ 5 + 4 + 3 + 2 + 1)/10\nWrite a function that returns the mean of a vector. \n\
    The mean is the sum of the elements in the vector divided by the number of elements\
    \ in the vector.\nFor example, if the vector has 10 elements, the mean is (10\
    \ + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1)/10\nWrite a function that returns the mean\
    \ of a vector. \nThe mean is the sum of the elements in the vector divided by\
    \ the number of elements in the vector.\nFor example, if the vector has 10 elements,\
    \ the mean is (10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1)/10\nWrite a function that\
    \ returns the mean of a vector. \nThe mean is the sum of the elements in the vector\
    \ divided by the number of elements in the vector.\nFor example, if the vector\
    \ has 10 elements, the mean is (10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1)/10\nWrite\
    \ a function that returns the mean of a vector. \nThe mean is the sum of the elements\
    \ in the vector divided by the number of elements in the vector.\nFor example,\
    \ if the vector has 10 elements, the mean is (10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 +\
    \ 2 + 1)/10\nWrite a function that returns the \nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1pe2t4yo.jl:17\nin expression starting at\
    \ /tmp/tmp1pe2t4yo.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)//2\n    if length(l)%2 == 1\n        return l[mid]\n    else\n   \
    \     return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the median of a list of numbers. Write a test that\
    \ checks that your function works.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu3iw4jty.jl:16\nin expression starting at\
    \ /tmp/tmpu3iw4jty.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ the \"typical\" number. \nThe median is often called the \"middle element\"\
    \ of the sorted set.\nThe median is often called the \"middle value\" of the sorted\
    \ set.\nThe median is often called the \"middle rank\" of the sorted set.\nThe\
    \ median is often called the \"middle rank\" of the sorted set.\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqncyp0gg.jl:16\nin expression starting at\
    \ /tmp/tmpqncyp0gg.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ the \"middle\" of the set. For example, in the set {1, 2, 3, 4}, the median\
    \ is (2 + 3) / 2 = 2.5.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt4zqxkjm.jl:16\nin expression starting at\
    \ /tmp/tmpt4zqxkjm.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)//2\n    if length(l)%2 == 0\n        return l[mid]\n    else\n   \
    \     return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nMedian Absolute Deviation\nThe median\
    \ absolute deviation (MAD) is a measure of statistical dispersion, which is defined\
    \ as the median of the absolute deviations from the median.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp269y2n9j.jl:16\nin expression starting at\
    \ /tmp/tmp269y2n9j.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        throw(DomainError(string(\"median of empty\
    \ vector\")))\n    end\n    return l[mid-1]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpnep8jtq2.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpnep8jtq2.jl:20\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 4.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnep8jtq2.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnep8jtq2.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpnep8jtq2.jl:21\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 20.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnep8jtq2.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnep8jtq2.jl:19\ntest set: Error\
    \ During Test at /tmp/tmpnep8jtq2.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmpnep8jtq2.jl:13\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnep8jtq2.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnep8jtq2.jl:19\ntest set:\
    \ Test Failed at /tmp/tmpnep8jtq2.jl:23\n  Expression: candidate([6, 5]) == 5.5\n\
    \   Evaluated: 5.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnep8jtq2.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnep8jtq2.jl:19\ntest set: Test\
    \ Fa"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpty9s2iv5.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpty9s2iv5.jl:16\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 1.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9s2iv5.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9s2iv5.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpty9s2iv5.jl:17\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 6.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9s2iv5.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9s2iv5.jl:15\ntest set: Error\
    \ During Test at /tmp/tmpty9s2iv5.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmpty9s2iv5.jl:9\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpty9s2iv5.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpty9s2iv5.jl:15\ntest set:\
    \ Test Failed at /tmp/tmpty9s2iv5.jl:19\n  Expression: candidate([6, 5]) == 5.5\n\
    \   Evaluated: 6.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9s2iv5.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9s2iv5.jl:15\ntest set: Test\
    \ Fail"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? return 0 : l[floor(Int64, length(l) / 2)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9dwi3d4.jl:10\nin expression starting at\
    \ /tmp/tmpk9dwi3d4.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0\n        throw(DomainError(\n            \"median of empty vector\"\
    ))\n    end\n    return l[mid-1]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called the \"\
    middle\" of the set. For example, the median of the set {1, 2, 3, 4} is 2.5.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpabmuqvu9.jl:16\nin expression starting at\
    \ /tmp/tmpabmuqvu9.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    mid = round(Int64,\
    \ mid)\n    if mid % 2 == 0 \n        return l[mid/2]\n    \n    return median(l[mid/2:end])\
    \ + median(l[mid-1:mid/2])\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw9v4n2jm.jl:19\nin expression starting at\
    \ /tmp/tmpw9v4n2jm.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return NaN\n    \n    if mid == 1\n    \
    \    return l[1]\n    \n    mid = floor(mid)\n    \n    if mid%2 == 0\n      \
    \  return l[mid]\n    \n    mid = ceil(mid)\n    \n    if mid%2 == 0\n       \
    \ return l[mid]\n    \n    return median(l[mid-1:mid+1])\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the median of a vector of numbers. \nThe median is the number in\
    \ the middle of the sorted vector. \nIf the vector has even number of elements,\
    \ then the median is the mean of the two middle numbers. \nIf the vector has odd\
    \ number of elements, then the median is the number in the middle of the sorted\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvdcvr5th.jl:28\nin expression starting at\
    \ /tmp/tmpvdcvr5th.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length = length(l)\
    \ \n    if length == 0 \n        return 0 \n    else \n        return (length-1)/2\
    \ \nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the mean of a vector. Test it on some\
    \ example vectors.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpihp36bpz.jl:15\nin expression starting at\
    \ /tmp/tmpihp36bpz.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a vector of numbers. \nThe median is the value separating the higher\
    \ half of a data set from the lower half.\nThe median is defined as the value\
    \ that separates the higher half of a data set from both sides.\nThe median is\
    \ defined as the value that occurs in an even number of data sets.\nThe median\
    \ is defined as the value that occurs in an odd number of data sets.\nThe median\
    \ is defined as the value that occurs in the middle number of data sets.\nThe\
    \ median is defined as the value that occurs more than n/2 times.\nThe median\
    \ is defined as the value that occurs more than n/2 times and less than n/2 times.\n\
    The median is defined as the value that occurs more than n/2 times and less than\
    \ n/2 times and more than n/4 times.\nThe median is defined as the value that\
    \ occurs more than n/2 times and less than n/2 times and more than n/4 times and\
    \ more than n/8 times.\nThe median is defined as the value that occurs more than\
    \ n/2 times and less than n/2 times and more than n/4 times and more than n/8\
    \ times and more than n/16 times.\nThe median is defined as the value that occurs\
    \ more than n/2 times and less than n/2 times and more than n/4 times and more\
    \ than n/8 times and more than n/16 times and more than n/32 times.\nThe median\
    \ is defined as the value that occurs more than n/2 times and less than n/2 times\
    \ and more than n/4 times and more than n/8 times and more than n/16 times and\
    \ more than n/32 times and more than n/64 times.\nThe median is defined as the\
    \ value that occurs more than n/2 times and less than n/2 times and more than\
    \ n/4 times and more than n/8 times and more than n/16 times and more than n/32\
    \ times and more than n/64 times and more than n/128 times.\nThe median is defined\
    \ as the value that occurs more than n/2 times and less than n/2 times and more\
    \ than n/4 times and more than n/8 times and more than n/16 times and more than\
    \ n/32 times and more than n/64 times and more than n/128 times and more than\
    \ n/256 times.\nThe median is defined as the value that occurs more than n/2 times\
    \ and less than n/2 times and more than n/4 times and more than n/8 times and\
    \ more than n/16 \nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptjtpv2th.jl:16\nin expression starting at\
    \ /tmp/tmptjtpv2th.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the median of a vector\
    \ of numbers. Your function should take an input vector of numbers and return\
    \ a single number.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe_3cn35r.jl:11\nin expression starting at\
    \ /tmp/tmpe_3cn35r.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    median = sort(l)[end]\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise: Write a function that returns the median of a vector of numbers, rounded\
    \ to two decimal places.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkrfseqxx.jl:10\nin expression starting at\
    \ /tmp/tmpkrfseqxx.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpty9s2iv5.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpty9s2iv5.jl:16\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 1.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9s2iv5.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9s2iv5.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpty9s2iv5.jl:17\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 6.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9s2iv5.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9s2iv5.jl:15\ntest set: Error\
    \ During Test at /tmp/tmpty9s2iv5.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmpty9s2iv5.jl:9\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpty9s2iv5.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpty9s2iv5.jl:15\ntest set:\
    \ Test Failed at /tmp/tmpty9s2iv5.jl:19\n  Expression: candidate([6, 5]) == 5.5\n\
    \   Evaluated: 6.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9s2iv5.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9s2iv5.jl:15\ntest set: Test\
    \ Fail"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the median of a list of numbers. Write a test that passes\
    \ if your function returns the correct median and fails if it returns the incorrect\
    \ median.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4m_5gtyr.jl:16\nin expression starting at\
    \ /tmp/tmp4m_5gtyr.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return NaN\n    \n    if mid % 2 == 0\n\
    \        return l[mid/2]\n    \n    return median(l[mid/2:end]) + median(l[mid/2:end-1])\
    \ \nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the median of a given vector of numbers.\
    \ \nThe median is the number in the middle of the vector that is closest to the\
    \ middle of the vector.\nFor example, if the vector is [3, 1, 2, 4, 5] then the\
    \ median is 3.\nIf the vector is [-10, 4, 6, 1000, 10, 20] then the median is\
    \ 10.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx1gje1yk.jl:18\nin expression starting at\
    \ /tmp/tmpx1gje1yk.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    \n    mid\
    \ = length(l)\n    if mid == 0 \n        throw(ZeroDivisionError())\n    end\n\
    \    \n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the mean of a vector.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa43jxtb8.jl:21\nin expression starting at\
    \ /tmp/tmpa43jxtb8.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)//2\n    if length(l)%2 == 1\n        return l[mid]\n    else\n   \
    \     return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the median of a vector of numbers, rounded to two decimal places.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsht0ho9m.jl:16\nin expression starting at\
    \ /tmp/tmpsht0ho9m.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    sort(l)\n    \n \
    \   l = l[end]\n    \n    if length(l)%2 == 1\n        return l[(length(l)+1)/2]\n\
    \    else\n        return (l[(length(l)+1)/2] + l[(length(l)-1)/2])/2\n    end\n\
    end\n</cell>\n<text>\nmedian()\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkw3710fi.jl:19\nin expression starting at\
    \ /tmp/tmpkw3710fi.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)%2 == 1\n        return l[end-1]\n    else\n        return\
    \ (l[end-1] + l[end])/2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp5drinz4x.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp5drinz4x.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 4.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5drinz4x.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5drinz4x.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5drinz4x.jl:23\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 510.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5drinz4x.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5drinz4x.jl:21\ntest set: Error\
    \ During Test at /tmp/tmp5drinz4x.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmp5drinz4x.jl:12\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5drinz4x.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5drinz4x.jl:21\ntest set:\
    \ Test Failed at /tmp/tmp5drinz4x.jl:26\n  Expression: candidate([8, 1, 3, 9,\
    \ 9, 2, 7]) == 7\n   Evaluated: 9.0 == 7\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5drinz4x.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5drinz4x.jl:21\nTest "
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\n</cell>\n<code language=julia-1.4>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ the \"typical\" number. \nThe median is often called the \"middle\" of a set\
    \ of numbers. \nThe median is often called the \"typical value\" of a set of numbers.\
    \ \nThe median is often called the \"typical range\" of a set of numbers. \nThe\
    \ median is often called the \"typical range\" of a set of numbers. \nThe median\
    \ is often called the \"typical range\" of a set of numbers. \nThe median is often\
    \ called the \"typical range\" of a set of numbers. \nThe median is often called\
    \ the \"typical range\" of a set of numbers. \nThe median is often called the\
    \ \"typical range\" of a set of numbers. \nThe median is often called the \"typical\
    \ range\" of a set of numbers. \nThe median is often called the \"typical range\"\
    \ of a set of numbers. \nThe median is often called the \"typical range\" of a\
    \ set of numbers. \nThe median is often called the \"typical range\" of a set\
    \ of numbers. \nThe median is often called the \"typical range\" of a set of numbers.\
    \ \nThe median is often called the \"typical range\" of a set of numbers. \nThe\
    \ median is often called the \"typical range\" of a set of numbers. \nThe median\
    \ is often called the \"typical range\" of a set of numbers. \nThe median is often\
    \ called the \"typical range\" of a set of numbers. \nThe median is often called\
    \ the \"typical range\" of a set of numbers. \nThe median is often called the\
    \ \"typical range\" of a set of numbers. \nThe median is often called the \"typical\
    \ range\" of a set of numbers. \nThe median is often called the \"typical range\"\
    \ of a set of numbers. \nThe median is often called the \"typical range\" of a\
    \ set of numbers. \nThe median is often called the \"typical range\" of a set\
    \ of numbers. \nThe median is often called the \"typical range\" of a set of numbers.\
    \ \nThe median is often called the \"typical range\" of a set of numbers. \nThe\
    \ median is often called the \"typical range\" of a set of numbers. \nThe median\
    \ is often called the \"typical range\" of a set of number\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgimee5vj.jl:11\nin expression starting at\
    \ /tmp/tmpgimee5vj.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    median = sort(l)[end]\n\
    \    return median\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu079ptcs.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpu079ptcs.jl:16\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 5.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu079ptcs.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu079ptcs.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpu079ptcs.jl:17\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 1000.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu079ptcs.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu079ptcs.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpu079ptcs.jl:19\n  Expression: candidate([6, 5]) == 5.5\n \
    \  Evaluated: 6.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu079ptcs.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu079ptcs.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpu079ptcs.jl:20\n  Expression: candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n   Evaluated: 9.0 == 7\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu079ptcs.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu079ptcs.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4tk4y3b7.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp4tk4y3b7.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.5 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp4tk4y3b7.jl:0\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4tk4y3b7.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4tk4y3b7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4tk4y3b7.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3.0 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp4tk4y3b7.jl:0\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4tk4y3b7.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4tk4y3b7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4tk4y3b7.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 0.5 of type Float64\n \
    \ Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base ./indices.jl:300\n   [2]\
    \ to_index(A::Vector{Int64}, i::Float64)\n     @ Base ./indices.jl:277\n   [3]\
    \ median(l::Vector{Int64})\n     @ Main /tmp/tmp4tk4y3b7.jl:0\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4tk4y3b7.jl:23 [inlined]\n\
    \   [6] macro expansion\n  "
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return l[1]\n    \n    mid = floor(mid)\n\
    \    if mid % 2 == 0\n        return l[mid]\n    else\n        return (l[mid-1]\
    \ + l[mid]) / 2\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the median of a vector\
    \ of numbers. If the vector has even number of elements, return the middle element.\
    \ Otherwise, return the average of the two middle elements.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0lutmdyt.jl:19\nin expression starting at\
    \ /tmp/tmp0lutmdyt.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0\n        return NaN\n    \n    mid = round(Int64, mid)\n    if\
    \ mid % 2 == 0\n        return l[mid]\n    else\n        return (l[mid-1] + l[mid])\
    \ / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the mode of a vector.\
    \ \nThe mode of a vector is the value that appears most often in the vector. \n\
    If there are multiple modes, return any one of them.\nThe mode of a vector is\
    \ defined as the value that appears most often in the vector.\nIf there are multiple\
    \ modes, return any one of them.\nThe mode of a vector is defined as the value\
    \ that appears most often in the vector.\nIf there are multiple modes, return\
    \ any one of them.\nThe mode of a vector is defined as the value that appears\
    \ most often in the vector.\nIf there are multiple modes, return any one of them.\n\
    The mode of a vector is defined as the value that appears most often in the vector.\n\
    If there are multiple modes, return any one of them.\nThe mode of a vector is\
    \ defined as the value that appears most often in the vector.\nIf there are multiple\
    \ modes, return any one of them.\nThe mode of a vector is defined as the value\
    \ that appears most often in the vector.\nIf there are multiple modes, return\
    \ any one of them.\nThe mode of a vector is defined as the value that appears\
    \ most often in the vector.\nIf there are multiple modes, return any one of them.\n\
    The mode of a vector is defined as the value that appears most often in the vector.\n\
    If there are multiple modes, return any one of them.\nThe mode of a vector is\
    \ defined as the value that appears most often in the vector.\nIf there are multiple\
    \ modes, return any one of them.\nThe mode of a vector is defined as the value\
    \ that appears most often in the vector.\nIf there are multiple modes, return\
    \ any one of them.\nThe mode of a vector is defined as the value that appears\
    \ most often in the vector.\nIf there are multiple modes, return any one of them.\n\
    The mode of a vector is defined as the value that appears most often in the vector.\n\
    If there are multiple modes, return any one of them.\nThe mode of a vector is\
    \ defined as the value that appears most often in the vector.\nIf there are multiple\
    \ modes, return any one of them.\nThe mode of a vector is defined as the value\
    \ that appears most often in the vector.\nIf there are multiple modes, return\
    \ any one of them.\nThe mode of a vector is defined as the value that appears\
    \ most \nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7flhp7tb.jl:20\nin expression starting at\
    \ /tmp/tmp7flhp7tb.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the mode of a vector. \nThe mode is the value that appears\
    \ most frequently in the vector. \nThe function should return the mode of a vector\
    \ of any type. \nThe function should also work for vectors of strings or arrays\
    \ of strings. \nThe function should also work for vectors of numbers or arrays\
    \ of numbers. \nThe function should also work for vectors of booleans or arrays\
    \ of booleans. \nThe function should also work for vectors of any type. \nThe\
    \ function should also work for vectors of any type. \nThe function should also\
    \ work for vectors of any type. \nThe function should also work for vectors of\
    \ any type. \nThe function should also work for vectors of any type. \nThe function\
    \ should also work for vectors of any type. \nThe function should also work for\
    \ vectors of any type. \nThe function should also work for vectors of any type.\
    \ \nThe function should also work for vectors of any type. \nThe function should\
    \ also work for vectors of any type. \nThe function should also work for vectors\
    \ of any type. \nThe function should also work for vectors of any type. \nThe\
    \ function should also work for vectors of any type. \nThe function should also\
    \ work for vectors of any type. \nThe function should also work for vectors of\
    \ any type. \nThe function should also work for vectors of any type. \nThe function\
    \ should also work for vectors of any type. \nThe function should also work for\
    \ vectors of any type. \nThe function should also work for vectors of any type.\
    \ \nThe function should also work for vectors of any type. \nThe function should\
    \ also work for vectors of any type. \nThe function should also work for vectors\
    \ of any type. \nThe function should also work for vectors of any type. \nThe\
    \ function should also work for vectors of any type. \nThe function should also\
    \ work for vectors of any type. \nThe function should also work for vectors of\
    \ any type. \nThe function should also work for vectors of any type. \nThe function\
    \ should also work for vectors of any type. \nThe function should also work for\
    \ vectors of any type. \nThe function should also work for vectors of any type.\
    \ \nThe function should also work for vectors of any type. \nThe function should\
    \ also work for vectors of any type. \nThe function should also work for vectors\
    \ of any type. \nThe function should also work for vectors of any type. \nThe\
    \ function should also work for \nusing Test\n\n@testset begin\n\ncandidate =\
    \ median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4,\
    \ 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn6if9ptj.jl:16\nin expression starting at\
    \ /tmp/tmpn6if9ptj.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 1 \n        return l[1]\n    else \n        return\
    \ (l[mid-1] + l[mid]) / 2\nend\n</cell>\n<code language=julia-1.4>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a vector of numbers. \nThe median is the number in the middle of the sorted\
    \ vector. \nIf the vector has even number of elements, then the median is the\
    \ mean of the two middle numbers. \nIf the vector has odd number of elements,\
    \ then the median is the number in the middle of the sorted vector. \nFor example,\
    \ if the vector is [3, 1, 2, 4, 5], then the median is 3.\nIf the vector is [-10,\
    \ 4, 6, 1000, 10, 20], then the median is 15.0.\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3nqd7z9t.jl:15\nin expression starting at\
    \ /tmp/tmp3nqd7z9t.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    median = (l[mid-1]\
    \ + l[mid]) / 2\n    return median\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nThe median is defined as the value separating\
    \ the higher half of a data set from the lower half. For example, if the data\
    \ set has 10 elements, the median is the value that separates the 10 elements\
    \ into two groups, one containing the even numbers, and the other containing the\
    \ odd numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxew8iq5m.jl:16\nin expression starting at\
    \ /tmp/tmpxew8iq5m.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l) == 0 \n        return NaN\n    end\n    \n    mid = floor(Int,\
    \ length(l)/2)\n    \n    if l[mid] == l[mid-1] \n        return l[mid]\n    end\n\
    \    \n    if l[mid] == l[mid+1] \n        return l[mid]\n    end\n    \n    if\
    \ l[mid] == l[mid-1] \n        return l[mid]\n    end\n    \n    if l[mid] ==\
    \ l[mid+1] \n        return l[mid]\n    end\n    \n    if l[mid] == l[mid-1] \n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1] \n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid-1] \n        return l[mid]\n \
    \   end\n    \n    if l[mid] == l[mid+1] \n        return l[mid]\n    end\n  \
    \  \n    if l[mid] == l[mid-1] \n        return l[mid]\n    end\n    \n    if\
    \ l[mid] == l[mid+1] \n        return l[mid]\n    end\n    \n    if l[mid] ==\
    \ l[mid-1] \n        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1] \n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid-1] \n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid+1] \n        return l[mid]\n \
    \   end\n    \n    if l[mid] == l[mid-1] \n        return l[mid]\n    end\n  \
    \  \n    if l[mid] == l[mid+1] \n        return l[mid]\n    end\n    \n    if\
    \ l[mid] == l[mid-1] \n        return l[mid]\n    end\n    \n    if l[mid] ==\
    \ l[mid+1] \n        return l[mid]\n    end\n    \n    if l[mid] == l[mid-1] \n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1] \n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid-1] \n        return l[mid]\n \
    \   end\n    \n    if l[mid] == l[mid+1] \n        return l[mid]\n    end\n  \
    \  \n    if l[mid] == l[mid-1] \n        return l[mid\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx9wf_17s.jl:1\nin expression starting at /tmp/tmpx9wf_17s.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4tk4y3b7.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp4tk4y3b7.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.5 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp4tk4y3b7.jl:0\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4tk4y3b7.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4tk4y3b7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4tk4y3b7.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3.0 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp4tk4y3b7.jl:0\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4tk4y3b7.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4tk4y3b7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4tk4y3b7.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 0.5 of type Float64\n \
    \ Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base ./indices.jl:300\n   [2]\
    \ to_index(A::Vector{Int64}, i::Float64)\n     @ Base ./indices.jl:277\n   [3]\
    \ median(l::Vector{Int64})\n     @ Main /tmp/tmp4tk4y3b7.jl:0\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4tk4y3b7.jl:23 [inlined]\n\
    \   [6] macro expansion\n  "
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4tk4y3b7.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp4tk4y3b7.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.5 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp4tk4y3b7.jl:0\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4tk4y3b7.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4tk4y3b7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4tk4y3b7.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3.0 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp4tk4y3b7.jl:0\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4tk4y3b7.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4tk4y3b7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4tk4y3b7.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 0.5 of type Float64\n \
    \ Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base ./indices.jl:300\n   [2]\
    \ to_index(A::Vector{Int64}, i::Float64)\n     @ Base ./indices.jl:277\n   [3]\
    \ median(l::Vector{Int64})\n     @ Main /tmp/tmp4tk4y3b7.jl:0\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4tk4y3b7.jl:23 [inlined]\n\
    \   [6] macro expansion\n  "
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return NaN\n    \n    mid = floor(mid)\n\
    \    if mid == 0\n        return l[mid]\n    \n    left = mid - 1\n    right =\
    \ mid\n    \n    if l[left] > l[right]\n        return l[left]\n    else\n   \
    \     return l[right]\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a given vector of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppfjeq2ai.jl:26\nin expression starting at\
    \ /tmp/tmppfjeq2ai.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the median of\
    \ a vector of numbers. Your function should take an argument of type Vector{Int64}.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfn147eob.jl:11\nin expression starting at\
    \ /tmp/tmpfn147eob.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ekn3fdg.jl:16\nin expression starting at\
    \ /tmp/tmp6ekn3fdg.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return NaN\n    \n    if mid % 2 == 0\n\
    \        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2-1])/2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqprvdctp.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqprvdctp.jl:1\n\
    in expression starting at /tmp/tmpqprvdctp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)/2)\n    if length(l) % 2 == 0\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the mode of a given vector. \nThe mode is the value that appears\
    \ most often in the vector. \nIf there are multiple modes, return any one of them.\n\
    The mode is defined as the value that appears most often in the vector.\nIf there\
    \ are multiple modes, return any one of them.\nThe mode is defined as the value\
    \ that appears most often in the vector.\nIf there are multiple modes, return\
    \ any one of them.\nThe mode is defined as the value that appears most often in\
    \ the vector.\nIf there are multiple modes, return any one of them.\nThe mode\
    \ is defined as the value that appears most often in the vector.\nIf there are\
    \ multiple modes, return any one of them.\nThe mode is defined as the value that\
    \ appears most often in the vector.\nIf there are multiple modes, return any one\
    \ of them.\nThe mode is defined as the value that appears most often in the vector.\n\
    If there are multiple modes, return any one of them.\nThe mode is defined as the\
    \ value that appears most often in the vector.\nIf there are multiple modes, return\
    \ any one of them.\nThe mode is defined as the value that appears most often in\
    \ the vector.\nIf there are multiple modes, return any one of them.\nThe mode\
    \ is defined as the value that appears most often in the vector.\nIf there are\
    \ multiple modes, return any one of them.\nThe mode is defined as the value that\
    \ appears most often in the vector.\nIf there are multiple modes, return any one\
    \ of them.\nThe mode is defined as the value that appears most often in the vector.\n\
    If there are multiple modes, return any one of them.\nThe mode is defined as the\
    \ value that appears most often in the vector.\nIf there are multiple modes, return\
    \ any one of them.\nThe mode is defined as the value that appears most often in\
    \ the vector.\nIf there are multiple modes, return any one of them.\nThe mode\
    \ is defined as the value that appears most often in the vector.\nIf there are\
    \ multiple modes, return any one of them.\nThe mode is defined as the value that\
    \ appears most often in the vector.\nIf there are multiple modes, return any one\
    \ of them.\nThe mode is defined as the value that appear\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdvg65wh8.jl:16\nin expression starting at\
    \ /tmp/tmpdvg65wh8.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l)/2)\n    if length(l) % 2 == 1\n        return\
    \ l[mid]\n    else\n        return (l[mid-1] + l[mid])/2\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpd22i36hq.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpd22i36hq.jl:22\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  BoundsError\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./number.jl:98 [inlined]\n   [2] median(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpd22i36hq.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd22i36hq.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd22i36hq.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpd22i36hq.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  BoundsError\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./number.jl:98 [inlined]\n   [2] median(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpd22i36hq.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd22i36hq.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd22i36hq.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpd22i36hq.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError\n  Stacktrace:\n   [1] getindex\n     @ ./number.jl:98\
    \ [inlined]\n   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmpd22i36hq.jl:12\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd22i36hq.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd22i36hq.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpd22i36hq.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([6, 5]) == 5.5\n  BoundsError\n  Stacktrace:\n   [1] getindex\n  \
    \   @ ./number.jl:98 [inlined]\n   [2] median(l::Vector{Int64"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    l = l[end-1]\n    l = l[end-2]\n    l = l[end-3]\n    l = l[end-4]\n    l\
    \ = l[end-5]\n    l = l[end-6]\n    l = l[end-7]\n    l = l[end-8]\n    l = l[end-9]\n\
    \    l = l[end-10]\n    l = l[end-11]\n    l = l[end-12]\n    l = l[end-13]\n\
    \    l = l[end-14]\n    l = l[end-15]\n    l = l[end-16]\n    l = l[end-17]\n\
    \    l = l[end-18]\n    l = l[end-19]\n    l = l[end-20]\n    l = l[end-21]\n\
    \    l = l[end-22]\n    l = l[end-23]\n    l = l[end-24]\n    l = l[end-25]\n\
    \    l = l[end-26]\n    l = l[end-27]\n    l = l[end-28]\n    l = l[end-29]\n\
    \    l = l[end-30]\n    l = l[end-31]\n    l = l[end-32]\n    l = l[end-33]\n\
    \    l = l[end-34]\n    l = l[end-35]\n    l = l[end-36]\n    l = l[end-37]\n\
    \    l = l[end-38]\n    l = l[end-39]\n    l = l[end-40]\n    l = l[end-41]\n\
    \    l = l[end-42]\n    l = l[end-43]\n    l = l[end-44]\n    l = l[end-45]\n\
    \    l = l[end-46]\n    l = l[end-47]\n    l = l[end-48]\n    l = l[end-49]\n\
    \    l = l[end-50]\n    l = l[end-51]\n    l = l[end-52]\n    l = l[end-53]\n\
    \    l = l[end-54]\n    l = l[end-55]\n    l = l[end-56]\n    l = l[end-57]\n\
    \    l = l[end-58]\n    l = l[end-59]\n    l = l[end-60]\n    l = l[end-61]\n\
    \    l = l[end-62]\n    l = l[end-63]\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptuz985zb.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptuz985zb.jl:1\n\
    in expression starting at /tmp/tmptuz985zb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[end]\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the median of a vector of numbers. \nThe median\
    \ is the number in the middle of the sorted vector. \nIf the vector has even number\
    \ of elements, then the median is the mean of the two middle elements. \nIf the\
    \ vector has an odd number of elements, then the median is the average of the\
    \ two middle elements.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp74awxb0b.jl:11\nin expression starting at\
    \ /tmp/tmp74awxb0b.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2 == 1\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the mean of a vector of numbers. \nThe mean of a vector is the\
    \ sum of the elements in the vector, divided by the number of elements in the\
    \ vector.\nFor example, if the vector has three elements, the mean is (1+2+3)/3=3\n\
    If the vector has two elements, the mean is (1+2)/2=3\nIf the vector has one element,\
    \ the mean is 1/1=1\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwzxihfzi.jl:16\nin expression starting at\
    \ /tmp/tmpwzxihfzi.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)/2)\n    if length(l) % 2 == 0\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1]) / 2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ mean of a vector. Test it on some vectors.\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9nmgbh9p.jl:15\nin expression starting at\
    \ /tmp/tmp9nmgbh9p.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)/2)\n    if length(l)%2 == 1\n        return l[mid]\n  \
    \  else\n        return (l[mid] + l[mid+1])/2.0\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the mode of a vector. \nThe mode is\
    \ the value that appears most often.\nThe mode is defined as the value that appears\
    \ most often in the vector.\nThe mode is defined as the value that appears most\
    \ often in the vector.\nThe mode is defined as the value that appears most often\
    \ in the vector.\nThe mode is defined as the value that appears most often in\
    \ the vector.\nThe mode is defined as the value that appears most often in the\
    \ vector.\nThe mode is defined as the value that appears most often in the vector.\n\
    The mode is defined as the value that appears most often in the vector.\nThe mode\
    \ is defined as the value that appears most often in the vector.\nThe mode is\
    \ defined as the value that appears most often in the vector.\nThe mode is defined\
    \ as the value that appears most often in the vector.\nThe mode is defined as\
    \ the value that appears most often in the vector.\nThe mode is defined as the\
    \ value that appears most often in the vector.\nThe mode is defined as the value\
    \ that appears most often in the vector.\nThe mode is defined as the value that\
    \ appears most often in the vector.\nThe mode is defined as the value that appears\
    \ most often in the vector.\nThe mode is defined as the value that appears most\
    \ often in the vector.\nThe mode is defined as the value that appears most often\
    \ in the vector.\nThe mode is defined as the value that appears most often in\
    \ the vector.\nThe mode is defined as the value that appears most often in the\
    \ vector.\nThe mode is defined as the value that appears most often in the vector.\n\
    The mode is defined as the value that appears most often in the vector.\nThe mode\
    \ is defined as the value that appears most often in the vector.\nThe mode is\
    \ defined as the value that appears most often in the vector.\nThe mode is defined\
    \ as the value that appears most often in the vector.\nThe mode is defined as\
    \ the value that appears most often in the vector.\nThe mode is defined as the\
    \ value that appears most often in the vector.\nThe mode is defined as the value\
    \ that appears most often in the vector.\nThe mode is defined as the value that\
    \ appears most often in the vector.\nThe mode is defined as the value that appears\
    \ most often in the vector.\n\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmigai0jq.jl:16\nin expression starting at\
    \ /tmp/tmpmigai0jq.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = l / 2\n    if l % 2 == 0\n        return mid\n    else\n        return\
    \ mid + 1\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt4gtu9yv.jl:17\nin expression starting at\
    \ /tmp/tmpt4gtu9yv.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[end]\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the median of a vector of numbers. \nThe median\
    \ is the value separating the higher half of a data set from the lower half.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzf7id6u5.jl:11\nin expression starting at\
    \ /tmp/tmpzf7id6u5.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)%2 == 1\n        return l[(length(l)+1)/2-1]\n    else\n \
    \       return median(l[(length(l)+1)/2:end])\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the median of a vector of numbers. \n\
    The median is the value separating the higher half of a sample from the lower\
    \ half. \nIf the vector has even number of elements, then the median is the mean\
    \ of the two middle elements. \nIf the vector has an odd number of elements, then\
    \ the median is the mean of the two middle elements.\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph443adrh.jl:17\nin expression starting at\
    \ /tmp/tmph443adrh.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmphg4tt217.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmphg4tt217.jl:16\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 4.5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphg4tt217.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphg4tt217.jl:15\ntest set: Test\
    \ Failed at /tmp/tmphg4tt217.jl:17\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 15.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphg4tt217.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphg4tt217.jl:15\ntest set: Error\
    \ During Test at /tmp/tmphg4tt217.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmphg4tt217.jl:9\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphg4tt217.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphg4tt217.jl:15\ntest set:\
    \ Test Failed at /tmp/tmphg4tt217.jl:20\n  Expression: candidate([8, 1, 3, 9,\
    \ 9, 2, 7]) == 7\n   Evaluated: 4.5 == 7\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphg4tt217.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphg4tt217.jl:15\nTest Su"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l)/2)\n    if length(l) % 2 == 1\n        return\
    \ l[mid]\n    else\n        return (l[mid] + l[mid-1]) / 2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the mean of a vector l.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprjo8c79i.jl:17\nin expression starting at\
    \ /tmp/tmprjo8c79i.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise: Write a function that returns the median of a given\
    \ vector of numbers. \nThe median is the number in the middle of the sorted vector.\
    \ \nThe median is defined as the value separating the higher half of the sorted\
    \ vector from the lower half.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcgobjyl1.jl:11\nin expression starting at\
    \ /tmp/tmpcgobjyl1.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the median of a list of numbers. Your function should\
    \ take a list of numbers and return the median of the numbers. If the length of\
    \ the list is even, the median is the mean of the two middle numbers.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp59i18ai7.jl:16\nin expression starting at\
    \ /tmp/tmp59i18ai7.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of numbers. \nWrite a function that returns the median\
    \ of a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of numbers. \nWrite a function that returns the median\
    \ of a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of numbers. \nWrite a function that returns the median\
    \ of a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of numbers. \nWrite a function that returns the median\
    \ of a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of numbers. \nWrite a function that returns the median\
    \ of a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of numbers. \nWrite a function that returns the median\
    \ of a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of number\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxxee2f6d.jl:11\nin expression starting at\
    \ /tmp/tmpxxee2f6d.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2==1\n        return l[mid]\n  \
    \  else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxwe5axx2.jl:16\nin expression starting at\
    \ /tmp/tmpxwe5axx2.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    sort(l)\n    \n \
    \   len = length(l)\n    \n    if len % 2 == 0\n        return (l[len/2] + l[len/2-1])/2\n\
    \    else\n        return l[len/2]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mode of a vector. \nThe mode of a vector is the value that appears most often\
    \ in the vector. \nThe mode is defined as the value that appears first in the\
    \ vector. \nIf there are multiple modes, return any one of them.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp858rv4kd.jl:19\nin expression starting at\
    \ /tmp/tmp858rv4kd.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l) / 2)\n    if length(l) % 2 == 1\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1]) / 2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ median of a list of numbers. \nThe function should accept a list of numbers\
    \ and return the median of the numbers. \nThe median is the number in the middle\
    \ of the list that has the highest value.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprt3qxbgu.jl:15\nin expression starting at\
    \ /tmp/tmprt3qxbgu.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpty9s2iv5.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpty9s2iv5.jl:16\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 1.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9s2iv5.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9s2iv5.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpty9s2iv5.jl:17\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 6.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9s2iv5.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9s2iv5.jl:15\ntest set: Error\
    \ During Test at /tmp/tmpty9s2iv5.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmpty9s2iv5.jl:9\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpty9s2iv5.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpty9s2iv5.jl:15\ntest set:\
    \ Test Failed at /tmp/tmpty9s2iv5.jl:19\n  Expression: candidate([6, 5]) == 5.5\n\
    \   Evaluated: 6.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9s2iv5.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9s2iv5.jl:15\ntest set: Test\
    \ Fail"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)//2\n    if length(l)%2 == 0\n        return l[mid]\n    else\n   \
    \     return 0.5 * (l[mid] + l[mid-1])\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp6qnl2dv8.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp6qnl2dv8.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 5//2 of type Rational{Int64}\n  Stacktrace:\n   [1] to_index(i::Rational{Int64})\n\
    \     @ Base ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Rational{Int64})\n\
    \     @ Base ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp6qnl2dv8.jl:0\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp6qnl2dv8.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp6qnl2dv8.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp6qnl2dv8.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3//1 of type Rational{Int64}\n  Stacktrace:\n   [1] to_index(i::Rational{Int64})\n\
    \     @ Base ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Rational{Int64})\n\
    \     @ Base ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp6qnl2dv8.jl:0\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp6qnl2dv8.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp6qnl2dv8.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp6qnl2dv8.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 1//2 of type Rational{Int64}\n\
    \  Stacktrace:\n   [1] to_index(i::Rational{Int64})\n     @ Base ./indices.jl:300\n\
    \   [2] to_index(A::Vector{Int64}, i::Rational{Int64})\n     @ Base ./indices.jl:277\n\
    \   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp6qnl2dv8.jl:0\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro "
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)//2\n    if length(l)%2 == 0\n        return l[mid]\n    else\n   \
    \     return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ median of a vector of numbers. \nThe function should take an argument l of type\
    \ Vector{Int64}, and return a Float64. \nThe function should return the median\
    \ of the elements of l. \nThe median is the number in the middle of the sorted\
    \ vector l. \nThe median is the number that appears more than n/2 times in the\
    \ sorted vector l. \nThe median is the number that appears more than n/2 times\
    \ in the sorted vector l. \nThe median is the number that appears more than n/2\
    \ times in the sorted vector l. \nThe median is the number that appears more than\
    \ n/2 times in the sorted vector l. \nThe median is the number that appears more\
    \ than n/2 times in the sorted vector l. \nThe median is the number that appears\
    \ more than n/2 times in the sorted vector l. \nThe median is the number that\
    \ appears more than n/2 times in the sorted vector l. \nThe median is the number\
    \ that appears more than n/2 times in the sorted vector l. \nThe median is the\
    \ number that appears more than n/2 times in the sorted vector l. \nThe median\
    \ is the number that appears more than n/2 times in the sorted vector l. \nThe\
    \ median is the number that appears more than n/2 times in the sorted vector l.\
    \ \nThe median is the number that appears more than n/2 times in the sorted vector\
    \ l. \nThe median is the number that appears more than n/2 times in the sorted\
    \ vector l. \nThe median is the number that appears more than n/2 times in the\
    \ sorted vector l. \nThe median is the number that appears more than n/2 times\
    \ in the sorted vector l. \nThe median is the number that appears more than n/2\
    \ times in the sorted vector l. \nThe median is the number that appears more than\
    \ n/2 times in the sorted vector l. \nThe median is the number that appears more\
    \ than n/2 times in the sorted vector l. \nThe median is the number that appears\
    \ more than n/2 times in the sorted vector l. \nThe median is the number that\
    \ appears more than n/2 times in the sorted vector l. \nThe median is the number\
    \ that appears more than n/2 times in the sorted vector l. \nThe median is the\
    \ number that appears more than n/2 times in the sorted \nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5evs20z4.jl:16\nin expression starting at\
    \ /tmp/tmp5evs20z4.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\n</cell>\n<code language=julia-1.1>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nThe median of a vector is defined as\
    \ the value separating the higher half of the vector from the lower half. For\
    \ example, if the vector has three elements, the median is the number in the middle\
    \ of the vector.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps1029ic6.jl:11\nin expression starting at\
    \ /tmp/tmps1029ic6.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    median = sort(l)[end]\n\
    \    return median\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu079ptcs.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpu079ptcs.jl:16\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 5.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu079ptcs.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu079ptcs.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpu079ptcs.jl:17\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 1000.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu079ptcs.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu079ptcs.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpu079ptcs.jl:19\n  Expression: candidate([6, 5]) == 5.5\n \
    \  Evaluated: 6.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu079ptcs.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu079ptcs.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpu079ptcs.jl:20\n  Expression: candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n   Evaluated: 9.0 == 7\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu079ptcs.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu079ptcs.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(ZeroDivisionError())\n    end\n    return l[mid]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpicxkjkx6.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpicxkjkx6.jl:20\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 5.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpicxkjkx6.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpicxkjkx6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpicxkjkx6.jl:21\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 20.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpicxkjkx6.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpicxkjkx6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpicxkjkx6.jl:23\n  Expression: candidate([6, 5]) == 5.5\n \
    \  Evaluated: 5.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpicxkjkx6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpicxkjkx6.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = l/2\n    if l % 2 == 0\n        return mid\n    else\n        return\
    \ mid + 1\n    end\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the median of a vector\
    \ of numbers. If the vector is empty, return NaN.\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnwowm8u5.jl:17\nin expression starting at\
    \ /tmp/tmpnwowm8u5.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise: Write a function that returns the median of a vector\
    \ of numbers. Write a test that checks the median function on random vectors of\
    \ numbers. What is the median of the following vectors?\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7clw7chz.jl:11\nin expression starting at\
    \ /tmp/tmp7clw7chz.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2 == 0\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the mean of a vector. Test it on some\
    \ vectors.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp262z1qs_.jl:16\nin expression starting at\
    \ /tmp/tmp262z1qs_.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpty9s2iv5.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpty9s2iv5.jl:16\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 1.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9s2iv5.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9s2iv5.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpty9s2iv5.jl:17\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 6.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9s2iv5.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9s2iv5.jl:15\ntest set: Error\
    \ During Test at /tmp/tmpty9s2iv5.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmpty9s2iv5.jl:9\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpty9s2iv5.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpty9s2iv5.jl:15\ntest set:\
    \ Test Failed at /tmp/tmpty9s2iv5.jl:19\n  Expression: candidate([6, 5]) == 5.5\n\
    \   Evaluated: 6.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9s2iv5.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9s2iv5.jl:15\ntest set: Test\
    \ Fail"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the median of a vector of numbers. If the vector is\
    \ empty, return NaN.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi39lufh2.jl:16\nin expression starting at\
    \ /tmp/tmpi39lufh2.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the median of a vector\
    \ of numbers, rounded to two decimal places.\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_5jngxfm.jl:11\nin expression starting at\
    \ /tmp/tmp_5jngxfm.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)%2 == 1\n        return l[end-1]\n    else\n        return\
    \ (l[end-1] + l[end])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nMedian Absolute Deviation\nThe median absolute\
    \ deviation (MAD) is a measure of statistical dispersion, i.e. how far a point\
    \ is from the median of its neighbors. MAD is defined as:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9038_5e_.jl:17\nin expression starting at\
    \ /tmp/tmp9038_5e_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(length(l)-1)/2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpnxe87_4p.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpnxe87_4p.jl:16\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.0 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base\
    \ ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Float64)\n      @ Base\
    \ ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n \
    \   [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n   \
    \   @ ./abstractarray.jl:1218 [inlined]\n    [6] median(l::Vector{Int64})\n  \
    \    @ Main /tmp/tmpnxe87_4p.jl:9\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpnxe87_4p.jl:16 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpnxe87_4p.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpnxe87_4p.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 2.5 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base\
    \ ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Float64)\n      @ Base\
    \ ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n \
    \   [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n   \
    \   @ ./abstractarray.jl:1218 [inlined]\n    [6] median(l::Vector{Int64})\n  \
    \    @ Main /tmp/tmpnxe87_4p.jl:9\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpnxe87_4p.jl:17 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpnxe87_4p.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpnxe87_4p.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 0.0 of type Float64\n \
    \ Stacktrace:\n    [1] to_index(i::Float64)\n      @ "
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 1\n        return l[mid/2]\n    else\n        return 0.5 *\
    \ (l[mid/2] + l[mid/2 - 1])\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the mean of a vector. Test it on some vectors.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqumy7zue.jl:16\nin expression starting at\
    \ /tmp/tmpqumy7zue.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    if mid == 1\n  \
    \      return l[1]\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n \
    \   \n    if l[mid] == l[mid+1]\n        return l[mid]\n    \n    \n    if l[mid]\
    \ == l[mid-1] + l[mid+1]\n        return l[mid]\n    \n    \n    if l[mid] ==\
    \ l[mid-1] + l[mid+1] + l[mid+2]\n        return l[mid]\n    \n    \n    if l[mid]\
    \ == l[mid-1] + l[mid+1] + l[mid+2] + l[mid+3]\n        return l[mid]\n    \n\
    \    \n    if l[mid] == l[mid-1] + l[mid+1] + l[mid+2] + l[mid+3] + l[mid+4]\n\
    \        return l[mid]\n    \n    \n    if l[mid] == l[mid-1] + l[mid+1] + l[mid+2]\
    \ + l[mid+3] + l[mid+4] + l[mid+5]\n        return l[mid]\n    \n    \n    if\
    \ l[mid] == l[mid-1] + l[mid+1] + l[mid+2] + l[mid+3] + l[mid+4] + l[mid+5] +\
    \ l[mid+6]\n        return l[mid]\n    \n    \n    if l[mid] == l[mid-1] + l[mid+1]\
    \ + l[mid+2] + l[mid+3] + l[mid+4] + l[mid+5] + l[mid+6] + l[mid+7]\n        return\
    \ l[mid]\n    \n    \n    if l[mid] == l[mid-1] + l[mid+1] + l[mid+2] + l[mid+3]\
    \ + l[mid+4] + l[mid+5] + l[mid+6] + l[mid+7] + l[mid+8]\n        return l[mid]\n\
    \    \n    \n    if l[mid] == l[mid-1] + l[mid+1] + l[mid+2] + l[mid+3] + l[mid+4]\
    \ + l[mid+5] + l[mid+6] + l[mid+7] + l[mid+8] + l[mid+9]\n        return l[mid]\n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ezc9zzc.jl:1\nin expression starting at /tmp/tmp5ezc9zzc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[end]\n\
    end\n</cell>\n<code language=julia-1.0>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    The median of a vector l is the value l is sorted into half and returns the middle\
    \ value. The median of a set of numbers is defined as the value that appears more\
    \ than half of the times in the set. For example, in the set {1, 2, 3, 1, 2, 3},\
    \ the median is 2.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4v8vkotg.jl:11\nin expression starting at\
    \ /tmp/tmp4v8vkotg.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l) / 2)\n    if length(l) % 2 == 1\n        return\
    \ l[mid]\n    else\n        return (l[mid] + l[mid-1]) / 2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the median of a vector of numbers. \nThe function should work for\
    \ both vectors and matrices.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx11a0gak.jl:17\nin expression starting at\
    \ /tmp/tmpx11a0gak.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)/2)\n    if length(l) % 2 == 0\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the median of a vector of numbers. Write a test that passes when\
    \ the function returns the correct result, and a test that fails when the function\
    \ returns the incorrect result.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqwxkmgcr.jl:16\nin expression starting at\
    \ /tmp/tmpqwxkmgcr.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpty9s2iv5.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpty9s2iv5.jl:16\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 1.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9s2iv5.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9s2iv5.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpty9s2iv5.jl:17\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 6.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9s2iv5.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9s2iv5.jl:15\ntest set: Error\
    \ During Test at /tmp/tmpty9s2iv5.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmpty9s2iv5.jl:9\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpty9s2iv5.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpty9s2iv5.jl:15\ntest set:\
    \ Test Failed at /tmp/tmpty9s2iv5.jl:19\n  Expression: candidate([6, 5]) == 5.5\n\
    \   Evaluated: 6.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9s2iv5.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9s2iv5.jl:15\ntest set: Test\
    \ Fail"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2 == 1\n        return l[mid]\n\
    \    else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the median of a given vector of numbers.\
    \ \nThe median is the value separating the higher half of a data set from the\
    \ lower half.\nThe median is defined as the value that separates the higher half\
    \ of a data set from the lower half of the data set.\nThe median is often called\
    \ the \"typical\" value of the data set.\nThe median is defined as the value that\
    \ occurs the most frequently in the data set.\nThe median is often called the\
    \ \"typical\" value of the data set.\nThe median is defined as the value that\
    \ occurs the least frequently in the data set.\nThe median is often called the\
    \ \"typical\" value of the data set.\nThe median is defined as the value that\
    \ occurs the most frequently in the data set.\nThe median is often called the\
    \ \"typical\" value of the data set.\nThe median is defined as the value that\
    \ occurs the least frequently in the data set.\nThe median is often called the\
    \ \"typical\" value of the data set.\nThe median is defined as the value that\
    \ occurs the most frequently in the data set.\nThe median is often called the\
    \ \"typical\" value of the data set.\nThe median is defined as the value that\
    \ occurs the least frequently in the data set.\nThe median is often called the\
    \ \"typical\" value of the data set.\nThe median is defined as the value that\
    \ occurs the most frequently in the data set.\nThe median is often called the\
    \ \"typical\" value of the data set.\nThe median is defined as the value that\
    \ occurs the least frequently in the data set.\nThe median is often called the\
    \ \"typical\" value of the data set.\nThe median is defined as the value that\
    \ occurs the most frequently in the data set.\nThe median is often called the\
    \ \"typical\" value of the data set.\nThe median is defined as the value that\
    \ occurs the least frequently in the data set.\nThe median is often called the\
    \ \"typical\" value of the data set.\nThe median is defined as the value that\
    \ occurs the most frequently in the data set.\nThe median is often called the\
    \ \"typical\" value of the data set.\nThe median is defined as the value that\
    \ occurs the least frequently in the data set.\nThe median is often called the\
    \ \"typical\" value of the data set.\nThe median is defined as the value that\
    \ occurs the most frequently in the data set.\nThe median is often called the\
    \ \"typical\" value of the data set.\nThe median is \nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcx9qryjl.jl:16\nin expression starting at\
    \ /tmp/tmpcx9qryjl.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2 == 0\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ to compute the mean of a vector. \nThe mean is the sum of the elements divided\
    \ by the number of elements. \nIf the vector is empty, return zero.\nIf the vector\
    \ has one element, return that element.\nIf the vector has two elements, return\
    \ the mean of the two elements.\nIf the vector has more than two elements, return\
    \ the mean of the two middle elements.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdo0vgzvs.jl:16\nin expression starting at\
    \ /tmp/tmpdo0vgzvs.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        return l[1]\n    else \n        return l[mid]\nend\n\
    </cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2wnzzeay.jl:15\nin expression starting at\
    \ /tmp/tmp2wnzzeay.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[end]\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the median of a vector of numbers. \n\
    The function should take one argument, x, and return a Float64. \nThe median of\
    \ a vector of numbers is defined as the value that occurs\nin the middle of the\
    \ sorted vector. \nFor example, if the vector is [3, 1, 2, 4, 5], the median is\
    \ 3.\nIf the vector is [-10, 4, 6, 1000, 10, 20], the median is 15.0.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp40amwhwm.jl:11\nin expression starting at\
    \ /tmp/tmp40amwhwm.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    median = sort(l)[end]\n\
    \    \n    if median == 0\n        median = median(sort(l)[1:end-1])\n    end\n\
    \    \n    return median\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkz4ot1ci.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpkz4ot1ci.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 5.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkz4ot1ci.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkz4ot1ci.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpkz4ot1ci.jl:23\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 1000.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkz4ot1ci.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkz4ot1ci.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpkz4ot1ci.jl:25\n  Expression: candidate([6, 5]) == 5.5\n \
    \  Evaluated: 6.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkz4ot1ci.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkz4ot1ci.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpkz4ot1ci.jl:26\n  Expression: candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n   Evaluated: 9.0 == 7\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkz4ot1ci.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkz4ot1ci.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2 == 1\n        return l[mid]\n\
    \    else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set\
    \ of numbers is called the \"typical\" element. \nThe median is often called the\
    \ \"middle element\" because it is often the \nelement in the middle of a sorted\
    \ set of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpse8u_d69.jl:16\nin expression starting at\
    \ /tmp/tmpse8u_d69.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return NaN\n    \n    mid = round(mid)\n\
    \    if mid == 1\n        return l[1]\n    \n    mid = round(mid)\n    if mid\
    \ == 2\n        return l[mid - 1]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvpfeajop.jl:109\nin expression starting at\
    \ /tmp/tmpvpfeajop.jl:109\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    i = length(l)\n    if i < 2\n        return l\n    mid = floor(Int64, i/2)\n\
    \    if i == 1\n        return l[mid]\n    if l[mid] == l[mid-1]\n        return\
    \ median(l[mid-1:mid+1])\n    return median(l[mid-1:mid+1]) + median(l[mid+1:end])\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nThe\
    \ median of a set of numbers is defined as the value that appears more than \u230A\
    n/2\u230B times in the set. For example, in the set {1, 2, 3}, the median is 2.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwk4yn7nq.jl:20\nin expression starting at\
    \ /tmp/tmpwk4yn7nq.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2 == 1\n        return l[mid]\n\
    \    else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the median of a list of numbers. Write\
    \ a test that checks that your function works.\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9q1rd7e5.jl:16\nin expression starting at\
    \ /tmp/tmp9q1rd7e5.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return l[1]\n    \n    if mid % 2 == 0\n\
    \        return l[mid / 2]\n    \n    return median(l[mid/2:end]) + median(l[mid/2:2:end])\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise: Write a function that returns the median of a vector of numbers. Write\
    \ a test that checks that your function returns the correct value for a vector\
    \ of numbers. Then write a function that returns the median of a vector of strings.\
    \ Write a test that checks that your function returns the correct value for a\
    \ vector of strings. Finally, write a function that returns the median of a vector\
    \ of booleans. Write a test that checks that your function returns the correct\
    \ value for a vector of booleans.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4,\
    \ 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ilf4ry8.jl:18\nin expression starting at\
    \ /tmp/tmp3ilf4ry8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    sortedL = sort(l)\n\
    \    \n    mid = length(l)\n    \n    if mid % 2 == 0\n        return sortedL[mid/2]\n\
    \    else\n        return (sortedL[mid/2] + sortedL[mid/2 - 1])/2\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the median of a list\
    \ of numbers. Write a test that passes if your function returns the correct value.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgok7hp3n.jl:19\nin expression starting at\
    \ /tmp/tmpgok7hp3n.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int,\
    \ length(l) / 2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of numbers. \nWrite a function that returns the median\
    \ of a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of numbers. \nWrite a function that returns the median\
    \ of a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of numbers. \nWrite a function that returns the median\
    \ of a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of numbers. \nWrite a function that returns the median\
    \ of a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of numbers. \nWrite a function that returns the median\
    \ of a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of numbers. \nWrite a function that returns the median\
    \ of a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of number\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmbw1z7ci.jl:11\nin expression starting at\
    \ /tmp/tmpmbw1z7ci.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</code>\n<|/ a tags=julia,median\
    \ |>\n<| c |>\nThis does not answer the question. `median` does not return the\
    \ median of a vector, it returns the median of a sorted vector. `sort` does not\
    \ return a sorted vector, it returns a sorted array. `sort!` returns a sorted\
    \ vector. `sort!` modifies the original vector. `sort!` modifies the original\
    \ vector. `sort!` modifies the original vector. `sort!` modifies the original\
    \ vector. `sort!` modifies the original vector. `sort!` modifies the original\
    \ vector. `sort!` modifies the original vector. `sort!` modifies the original\
    \ vector. `sort!` modifies the original vector. `sort!` modifies the original\
    \ vector. `sort!` modifies the original vector. `sort!` modifies the original\
    \ vector. `sort!` modifies the original vector. `sort!` modifies the original\
    \ vector. `sort!` modifies the original vector. `sort!` modifies the original\
    \ vector. `sort!` modifies the original vector. `sort!` modifies the original\
    \ vector. `sort!` modifies the original vector. `sort!` modifies the original\
    \ vector. `sort!` modifies the original vector. `sort!` modifies the original\
    \ vector. `sort!` modifies the original vector. `sort!` modifies the original\
    \ vector. `sort!` modifies the original vector. `sort!` modifies the original\
    \ vector. `sort!` modifies the original vector. `sort!` modifies the original\
    \ vector. `sort!` modifies the original vector. `sort!` modifies the original\
    \ vector. `sort!` modifies the original vector. `sort!` modifies the original\
    \ vector. `sort!` modifies the original vector. `sort!` modifies the original\
    \ vector. `sort!` modifies the original vector. `sort!` modifies the original\
    \ vector. `sort!` modifies the original vector. `sort!` modifies the original\
    \ vector. `sort!` modifies the original vector. `sort!` modifies the original\
    \ vector. `sort!` modifies the original vector. `sort!` modifies the original\
    \ vector. `sort!` modifies the original vector. `sort!` modifies the original\
    \ vector. `sort!` modifies the original vector. `sort!\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfknpmrt6.jl:16\nin expression starting at\
    \ /tmp/tmpfknpmrt6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    mid = round(Int64,\
    \ mid)\n    if mid == 1 \n        return l[1]\n    \n    if mid == 2 \n      \
    \  return l[1]\n    \n    mid = round(Int64, mid)\n    if mid == 3 \n        return\
    \ l[2]\n    \n    if mid == 4 \n        return l[2]\n    \n    if mid == 5 \n\
    \        return l[2]\n    \n    if mid == 6 \n        return l[3]\n    \n    if\
    \ mid == 7 \n        return l[3]\n    \n    if mid == 8 \n        return l[3]\n\
    \    \n    if mid == 9 \n        return l[3]\n    \n    if mid == 10 \n      \
    \  return l[4]\n    \n    if mid == 11 \n        return l[4]\n    \n    if mid\
    \ == 12 \n        return l[4]\n    \n    if mid == 13 \n        return l[4]\n\
    \    \n    if mid == 14 \n        return l[4]\n    \n    if mid == 15 \n     \
    \   return l[4]\n    \n    if mid == 16 \n        return l[4]\n    \n    if mid\
    \ == 17 \n        return l[4]\n    \n    if mid == 18 \n        return l[4]\n\
    \    \n    if mid == 19 \n        return l[4]\n    \n    if mid == 20 \n     \
    \   return l[4]\n    \n    if mid == 21 \n        return l[4]\n    \n    if mid\
    \ == 22 \n        return l[4]\n    \n    if mid == 23 \n        return l[4]\n\
    \    \n    if mid == 24 \n        return l[4]\n    \n    if mid == 25 \n     \
    \   return l[4]\n    \n    if mid == 26 \n        return l[4]\n    \n    if mid\
    \ == 27 \n        return l[4]\n    \n    if mid == 28 \n        return l[4]\n\
    \    \n    if mid == 29 \n        return l[4]\n    \n    if mid == 30 \n     \
    \   return l[4]\n    \n    if mid == 31 \n        return l[4]\n    \n    if mid\
    \ == 32 \n        return l[4]\n    \n    if mid == 33 \n        return l[4]\n\
    \    \n    if mid == 34 \n        return l[4]\n    \n    if mid == 35 \n     \
    \   return l[4]\n    \n    if mid == 36 \n        return l[4]\n    \n    if mid\
    \ == 37 \n        return l[4]\n    \n    if mid == 38 \n        return l[4]\n\
    \    \n    if mid == 39 \n        return l[4]\n    \n    if mid == 40 \n     \
    \   return l[4]\n    \n    if mid == 41 \n        return l[4]\n    \n    if mid\
    \ == 42 \n        return l[4]\n    \n    if mid == 43 \nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf2ko7nhi.jl:1\nin expression starting at /tmp/tmpf2ko7nhi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4tk4y3b7.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp4tk4y3b7.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.5 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp4tk4y3b7.jl:0\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4tk4y3b7.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4tk4y3b7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4tk4y3b7.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3.0 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp4tk4y3b7.jl:0\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4tk4y3b7.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4tk4y3b7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4tk4y3b7.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 0.5 of type Float64\n \
    \ Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base ./indices.jl:300\n   [2]\
    \ to_index(A::Vector{Int64}, i::Float64)\n     @ Base ./indices.jl:277\n   [3]\
    \ median(l::Vector{Int64})\n     @ Main /tmp/tmp4tk4y3b7.jl:0\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4tk4y3b7.jl:23 [inlined]\n\
    \   [6] macro expansion\n  "
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    if mid % 2 == 0\
    \ \n        return l[mid / 2]\n    \n    return median(l[(mid - 1) / 2]) + median(l[(mid\
    \ + 1) / 2])\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n\
    <text>\nExercise 2\nWrite a function to compute the mean of a vector. Test it\
    \ on some examples:\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxye92mir.jl:18\nin expression starting at\
    \ /tmp/tmpxye92mir.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)%2 == 1\n        return l[end-1]\n    end\n    \n    mid =\
    \ floor(length(l)/2)\n    \n    if l[mid] == l[mid-1]\n        return median(l[mid+1:end])\n\
    \    end\n    \n    if l[mid] == l[mid+1]\n        return median(l[mid-1:mid+2])\n\
    \    end\n    \n    return median(l[mid-1:mid])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpi4bo540a.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpi4bo540a.jl:32\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 4.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi4bo540a.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi4bo540a.jl:31\ntest set: Error\
    \ During Test at /tmp/tmpi4bo540a.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3.0 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base\
    \ ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Float64)\n      @ Base\
    \ ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n \
    \   [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n   \
    \   @ ./abstractarray.jl:1218 [inlined]\n    [6] median(l::Vector{Int64})\n  \
    \    @ Main /tmp/tmpi4bo540a.jl:17\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpi4bo540a.jl:33 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpi4bo540a.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpi4bo540a.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmpi4bo540a.jl:12\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpi4bo540a.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi4bo540a.jl:31\ntest set:\
    \ Error"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int,\
    \ length(l)+1)/2]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nThe median of a finite set of numbers is called the \"typical\"\
    \ number. \nThe median is often called the \"middle number\" because it is the\
    \ number in the middle. \nThe median is also called the \"middle percentage\"\
    \ because it is the percentage of the numbers that are in the middle. \nThe median\
    \ is also called the \"middle value\" because it is the value that is the middle\
    \ of the set of numbers.\nThe median is also called the \"middle index\" because\
    \ it is the index of the middle of the set of numbers.\nThe median is also called\
    \ the \"middle value\" because it is the value that is the middle of the set of\
    \ numbers.\nThe median is also called the \"middle index\" because it is the index\
    \ of the middle of the set of numbers.\nThe median is also called the \"middle\
    \ value\" because it is the value that is the middle of the set of numbers.\n\
    The median is also called the \"middle index\" because it is the index of the\
    \ middle of the set of numbers.\nThe median is also called the \"middle value\"\
    \ because it is the value that is the middle of the set of numbers.\nThe median\
    \ is also called the \"middle index\" because it is the index of the middle of\
    \ the set of numbers.\nThe median is also called the \"middle value\" because\
    \ it is the value that is the middle of the set of numbers.\nThe median is also\
    \ called the \"middle index\" because it is the index of the middle of the set\
    \ of numbers.\nThe median is also called the \"middle value\" because it is the\
    \ value that is the middle of the set of numbers.\nThe median is also called the\
    \ \"middle index\" because it is the index of the middle of the set of numbers.\n\
    The median is also called the \"middle value\" because it is the value that is\
    \ the middle of the set of numbers.\nThe median is also called the \"middle index\"\
    \ because it is the index of the middle of the set of numbers.\nThe median is\
    \ also called the \"middle value\" because it is the value that is the middle\
    \ of the set of numbers.\nThe median is also called the \"middle index\" because\
    \ it is the index of the middle of the set of numbers.\nThe median is also called\
    \ the \"middle value\" because it is the value that is the middle of the set of\
    \ numbers.\nThe median is also called the \"middle index\" because it is the index\
    \ of the middle of the set of numbers.\nThe median is also called the \"middle\
    \ value\" because it is the value that is the middle of the set of numbers.\n\
    The median is also called the \"middle index\" because it is the index of the\
    \ middle of the set of numbers.\nThe median is also called the \"middle value\"\
    \ because it is the value that is the middle of the \nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptxolnwmd.jl:11\nin expression starting at\
    \ /tmp/tmptxolnwmd.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l) == 0 \n        return 0 \n    \n    mid = floor(Int, length(l)\
    \ / 2)\n    \n    if length(l)%2 == 1 \n        return l[mid] \n    \n    else\
    \ \n        return (l[mid] + l[mid-1]) / 2\nend\n</cell>\n<code language=julia-1.3>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mean of a vector. \nThe mean is the sum of the elements divided by the number\
    \ of elements in the vector.\nIf the vector is empty, return 0.\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj84z58q1.jl:22\nin expression starting at\
    \ /tmp/tmpj84z58q1.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)/2)\n    if length(l) % 2 == 1\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1]) / 2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ median of a vector of numbers. If the vector is empty, return NaN.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzn7ib1_n.jl:15\nin expression starting at\
    \ /tmp/tmpzn7ib1_n.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function that returns the\
    \ median of a vector of numbers. Write a test that checks the median function\
    \ on some vectors.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp82g7bg0u.jl:16\nin expression starting at\
    \ /tmp/tmp82g7bg0u.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a vector of numbers. \nThe median is the number in the middle of the\
    \ sorted vector. \nIf the vector has even number of elements, then the median\
    \ is the average of the two middle numbers. \nIf the vector has odd number of\
    \ elements, then the median is the average of the two middle numbers. \nIf there\
    \ are an even number of elements and an odd number of elements, then the median\
    \ is the average of the two middle numbers.\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe0gv7vsf.jl:16\nin expression starting at\
    \ /tmp/tmpe0gv7vsf.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l)+1)/2\n    if mid % 2 == 0\n        return l[mid-1]\n\
    \    else\n        return l[mid]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpz4z920qn.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpz4z920qn.jl:22\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  MethodError: no method matching\
    \ getindex(::Int64, ::Float64)\n  Closest candidates are:\n    getindex(::Number)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:95\n    getindex(::Union{AbstractChar,\
    \ Number}, !Matched::CartesianIndex{0}) at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:831\n\
    \    getindex(::Number, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:96\n\
    \    ...\n  Stacktrace:\n   [1] median(l::Vector{Int64})\n     @ Main /tmp/tmpz4z920qn.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz4z920qn.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz4z920qn.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpz4z920qn.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  MethodError: no method matching\
    \ getindex(::Int64, ::Float64)\n  Closest candidates are:\n    getindex(::Number)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:95\n    getindex(::Union{AbstractChar,\
    \ Number}, !Matched::CartesianIndex{0}) at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:831\n\
    \    getindex(::Number, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:96\n\
    \    ...\n  Stacktrace:\n   [1] median(l::Vector{Int64})\n     @ Main /tmp/tmpz4z920qn.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz4z920qn.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz4z920qn.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpz4z920qn.jl:24\n  Test threw exception\n  Expre"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        throw(DomainError(\n            \"median\
    \ requires at least one element\"))\n    end\n    mid = round(Int64, mid)\n  \
    \  if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4,\
    \ 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp6a0s01pu.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp6a0s01pu.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.5 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp6a0s01pu.jl:0\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp6a0s01pu.jl:26 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp6a0s01pu.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp6a0s01pu.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3.0 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp6a0s01pu.jl:0\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp6a0s01pu.jl:27 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp6a0s01pu.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp6a0s01pu.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 0.5 of type Float64\n \
    \ Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base ./indices.jl:300\n   [2]\
    \ to_index(A::Vector{Int64}, i::Float64)\n     @ Base ./indices.jl:277\n   [3]\
    \ median(l::Vector{Int64})\n     @ Main /tmp/tmp6a0s01pu.jl:0\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp6a0s01pu.jl:28 [inlined]\n\
    \   [6] macro expansion\n  "
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return l[1]\n    \n    if mid % 2 == 0\n\
    \        return l[mid / 2]\n    \n    return median(l[mid/2 : end])\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a given vector of numbers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp70dowcqv.jl:18\nin expression starting at\
    \ /tmp/tmp70dowcqv.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        return l[1]\n    else \n        return l[mid]\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the mode of a given vector. \nThe mode\
    \ is the element that appears most often in the vector.\nThe function should return\
    \ -1 if the vector is empty.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ga7da5x.jl:16\nin expression starting at\
    \ /tmp/tmp8ga7da5x.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = l/2\n    if l % 2 == 0\n        return mid\n    else\n        return\
    \ mid + 1\n    end\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the median of a vector\
    \ of numbers. \nThe function should take one argument, x, of type Float64, and\
    \ return a Float64.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8y8wgle7.jl:17\nin expression starting at\
    \ /tmp/tmp8y8wgle7.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return 0.5\
    \ * (l[mid] + l[mid-1])\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 3\nWrite a function to compute the mean of a\
    \ vector. \nThe function should take an argument of type Vector{Int64}\nand return\
    \ a Float64. \nThe function should use an accumulator of type Float64 to compute\
    \ the sum of the elements in the vector, and a counter to count the number of\
    \ elements in the vector.\nThe function should return the mean of the elements\
    \ in the vector.\nFor example, mean(Vector{Int64}([3, 1, 2, 4, 5])) should return\
    \ 2.5.\nHint: Use a for loop to iterate over the elements in the vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmegz6ntc.jl:16\nin expression starting at\
    \ /tmp/tmpmegz6ntc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzjthfyzk.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpzjthfyzk.jl:16\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 5.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzjthfyzk.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzjthfyzk.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpzjthfyzk.jl:17\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 20.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzjthfyzk.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzjthfyzk.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpzjthfyzk.jl:19\n  Expression: candidate([6, 5]) == 5.5\n \
    \  Evaluated: 5.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzjthfyzk.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzjthfyzk.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpty9s2iv5.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpty9s2iv5.jl:16\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 1.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9s2iv5.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9s2iv5.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpty9s2iv5.jl:17\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 6.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9s2iv5.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9s2iv5.jl:15\ntest set: Error\
    \ During Test at /tmp/tmpty9s2iv5.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmpty9s2iv5.jl:9\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpty9s2iv5.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpty9s2iv5.jl:15\ntest set:\
    \ Test Failed at /tmp/tmpty9s2iv5.jl:19\n  Expression: candidate([6, 5]) == 5.5\n\
    \   Evaluated: 6.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9s2iv5.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9s2iv5.jl:15\ntest set: Test\
    \ Fail"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = floor(Int,\
    \ length(l) / 2)\n    if length(l) % 2 == 0\n        return l[mid]\n    else\n\
    \        return (l[mid] + l[mid-1]) / 2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a vector of numbers, rounded to the nearest integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2yfo9ktu.jl:15\nin expression starting at\
    \ /tmp/tmp2yfo9ktu.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        throw(DomainError(\n            \"median\
    \ requires at least one element\"))\n    end\n    \n    if mid % 2 == 0\n    \
    \    return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2-1]) / 2\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise: Write a function that returns the median of a given array of numbers.\
    \ Use median to find the median of a given array of numbers. Use median to find\
    \ the median of a given array of numbers. Use median to find the median of a given\
    \ array of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp86ni9z5q.jl:21\nin expression starting at\
    \ /tmp/tmp86ni9z5q.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\n</cell>\n<code language=julia-1.3>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the median of a vector of numbers. \nThe function should work for both real\
    \ and complex numbers. \nThe function should also work for vectors of different\
    \ lengths.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgh_n76dr.jl:11\nin expression starting at\
    \ /tmp/tmpgh_n76dr.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)%2 == 1\n        return median(l[end-1]) + median(l[end])/2\n\
    \    else\n        return median(l[end-1]) + median(l[end])/2\n    end\nend\n\
    </cell>\n<text>\nMedian Absolute Deviation\nThe median absolute deviation (MAD)\
    \ is a measure of statistical dispersion, which is defined as the median of the\
    \ absolute deviations from the median.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwrsnxq33.jl:17\nin expression starting at\
    \ /tmp/tmpwrsnxq33.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        return l[1]\n    \n    mid = floor(mid)\n    if mid\
    \ == 0\n        return l[mid - 1]\n    \n    mid = ceil(mid)\n    if mid == length(l)\n\
    \        return l[mid - 1]\n    \n    mid = (mid + 1) \xF7 2\n    return l[mid]\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function to compute the mean of a vector. Test it on some vectors.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9_fjv0uy.jl:24\nin expression starting at\
    \ /tmp/tmp9_fjv0uy.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        throw(BoundsError(\"median requires at least\
    \ one element\"))\n    end\n    \n    if mid == 1\n        return l[1]\n    end\n\
    \    \n    mid = floor(mid)\n    \n    if mid==0\n        return l[mid]\n    end\n\
    \    \n    if mid==1\n        return 0.5*(l[mid-1]+l[mid])\n    end\n    \n  \
    \  if mid==length(l)\n        return 0.5*(l[mid-1]+l[mid])\n    end\n    \n  \
    \  return 0.5*(l[mid-1]+l[mid])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9skgytu0.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp9skgytu0.jl:39\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 4.5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9skgytu0.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9skgytu0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp9skgytu0.jl:40\n  Expression: candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n   Evaluated: 510.0 == 8.0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9skgytu0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9skgytu0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp9skgytu0.jl:43\n  Expression: candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n   Evaluated: 9.0 == 7\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9skgytu0.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9skgytu0.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ median of a given vector of numbers. \nThe function should accept a vector of\
    \ numbers as an argument and return a Float64 number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpypkg0wf9.jl:16\nin expression starting at\
    \ /tmp/tmpypkg0wf9.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise: Write a function that returns the median of\
    \ a vector of numbers. Write a test that passes when the function returns the\
    \ correct answer and fails otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3qlrkpqt.jl:16\nin expression starting at\
    \ /tmp/tmp3qlrkpqt.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l) == 0 \n        throw(DomainError())\n\
    \    end\n    return l[mid]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise: Write a function that returns the median of\
    \ a vector of numbers. \nThe median is the number in the middle of a sorted list\
    \ of numbers. \nThe median is defined as the value separating the higher half\
    \ of a sorted list of numbers from the lower half. \nIf the list is of even length,\
    \ then the median is the mean of the two middle numbers. \nIf the list is of odd\
    \ length, then the median is the number in the middle of the two middle numbers.\
    \ \nIf there are no numbers in the list, then the median is undefined.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpci8z34k2.jl:15\nin expression starting at\
    \ /tmp/tmpci8z34k2.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = floor(length(l)/2)\n\
    \    if length(l)%2 == 0\n        return l[mid]\n    else\n        return 0.5*(l[mid-1]\
    \ + l[mid])\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the median of a vector\
    \ of numbers. \nThe function should take one argument, a list of numbers. \nThe\
    \ function should return the median of the numbers in the list.\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn4c7i822.jl:16\nin expression starting at\
    \ /tmp/tmpn4c7i822.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return NaN\n    \n    mid = floor(mid)\n\
    \    if mid % 2 == 0\n        return l[mid]\n    \n    mid = ceil(mid)\n    return\
    \ l[mid]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the median of a vector of numbers, rounded\
    \ to the nearest integer.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqksmfgs.jl:20\nin expression starting at\
    \ /tmp/tmpmqksmfgs.jl:20\n"
  stdout: ''
