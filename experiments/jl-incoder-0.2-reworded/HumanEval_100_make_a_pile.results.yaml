language: jl
name: HumanEval_100_make_a_pile
results:
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     make_a_pile(n/2)\n    else\n        make_a_pile(n/2) + make_a_pile(n/2+1)\
    \ + make_a_pile(n/2+2)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) ==\
    \ [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
    \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp90pgnh8t.jl:21\nin expression starting at\
    \ /tmp/tmp90pgnh8t.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        odd=odd+odd\n        return odd\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp571x6mmy.jl:17\nin expression starting at\
    \ /tmp/tmp571x6mmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     make_a_pile(n/2)\n    else\n        make_a_pile(n/2) + make_a_pile(n/2)\
    \ + make_a_pile(n/2)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) ==\
    \ [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
    \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo1qgdcvb.jl:21\nin expression starting at\
    \ /tmp/tmpo1qgdcvb.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        return odd\n    end\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5p5umuik.jl:17\nin expression starting at\
    \ /tmp/tmp5p5umuik.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    else if n % 2 == 0 \n        return make_a_pile(n\
    \ / 2) + [n / 2]\n    else \n        return make_a_pile(n / 2) + [n / 2 + 1]\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu_tchi9y.jl:17\nin expression starting at\
    \ /tmp/tmpu_tchi9y.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd_or_even = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even\
    \ = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then\
    \ \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"\
    odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even\
    \ = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then\
    \ \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"\
    odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even\
    \ = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then\
    \ \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"\
    odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even\
    \ = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then\
    \ \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"\
    odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even\
    \ = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then\
    \ \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"\
    odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even\
    \ = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then\
    \ \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"\
    odd\"\n        \nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t\
    @test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzfl302tz.jl:17\nin expression starting at\
    \ /tmp/tmpzfl302tz.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==1 \n        return\
    \ [1]\n    else if n==2 \n        return [1, 1]\n    else \n        odd = make_a_pile(n-1)\n\
    \        even = make_a_pile(n-2)\n        odd[1] = odd[1] + even[1]\n        odd[2]\
    \ = odd[2] + even[2]\n        return odd\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(3)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to arrange the n stones in a pile of\
    \ n levels. \nFor example, given n = 4, there are four ways to arrange the 4 stones\
    \ in a pile of 4 levels:\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpszpf1rl1.jl:17\nin expression starting at\
    \ /tmp/tmpszpf1rl1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(ceil(n/2))+[n % 2]\n    end\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes an integer n and returns the number of\
    \ ways to arrange n stones in a pile.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ki8xpkf.jl:21\nin expression starting at\
    \ /tmp/tmp9ki8xpkf.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    \n    pile = make_a_pile(n-1)\n    \n    if n %\
    \ 2 == 0 \n        push!(pile, n / 2)\n    else\n        push!(pile, n / 2 + 1)\n\
    \    end\n    \n    return pile\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n\
    </cell>\n<text>\nExercise 2\nWrite a function called count_stones that takes as\
    \ input a vector of integers and returns the number of stones in the pile.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) ==\
    \ [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
    \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd4nm09c2.jl:28\nin expression starting at\
    \ /tmp/tmpd4nm09c2.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjv4clkyw.jl:21\nin expression starting at\
    \ /tmp/tmpjv4clkyw.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    \n    pile = make_a_pile(n-1)\n    \n    if mod(n,2)==1\n\
    \        push!(pile,n+1)\n    else\n        push!(pile,n-1)\n    end\n    \n \
    \   return pile\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzwi9l3o7.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzwi9l3o7.jl:1\n\
    in expression starting at /tmp/tmpzwi9l3o7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n % 2 == 0 ? n : n / 2) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ make_a_pile(n::Int64)::Vector{Int64} that returns the number of stones in each\
    \ level in a vector, where element at index i represents the number of stones\
    \ in the level (i+1).\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkg6s4s5m.jl:22\nin expression starting at\
    \ /tmp/tmpkg6s4s5m.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}()\n    elseif n % 2 == 0 \n        make_a_pile(n / 2)\n    else\n\
    \        make_a_pile(n / 2) + make_a_pile((n / 2) * (n / 2))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp79z1_b14.jl:23\nin expression starting at\
    \ /tmp/tmp79z1_b14.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n / 2) |> push!(make_a_pile(n\
    \ % 2)) \n    end\nend\n</cell>\n<code language=julia-1.0>\nmake_a_pile(4)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer n and returns\
    \ the number of ways to arrange the n stones in a pile.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpybftpm0p.jl:21\nin expression starting at\
    \ /tmp/tmpybftpm0p.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjv4clkyw.jl:21\nin expression starting at\
    \ /tmp/tmpjv4clkyw.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    \n    pile = make_a_pile(n / 2)\n    pile[end] =\
    \ n % 2 == 0 ? n : n + 1\n    return pile\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(5)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi1dr_rgf.jl:22\nin expression starting at\
    \ /tmp/tmpi1dr_rgf.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzruch4nu.jl:21\nin expression starting at\
    \ /tmp/tmpzruch4nu.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd = n%2\n        even = n/2\n        pile = make_a_pile(even) +\
    \ make_a_pile(odd)\n        return pile\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp97s0i6mo.jl:17\nin expression starting at\
    \ /tmp/tmp97s0i6mo.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}() \n    else \n        pile = make_a_pile(n-1)\n        if mod(n,2)==1\
    \ \n            push!(pile,n+1)\n        else \n            push!(pile,n-1)\n\
    \        end\n        return pile\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to make a pile of n levels of stones.\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnrkhrycg.jl:27\nin expression starting at\
    \ /tmp/tmpnrkhrycg.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n % 2 == 0 ? n : n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes an integer n and returns the number of ways to arrange\
    \ n stones in a pile.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkekeqe9k.jl:22\nin expression starting at\
    \ /tmp/tmpkekeqe9k.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     odds = n\n        evens = n - odds\n    else \n        odds = n - 1\n  \
    \      evens = n + 1\n    \n    pile = Vector{Int64}(undef, evens)\n    pile[1]\
    \ = odds\n    \n    for i = 2:evens\n        pile[i] = pile[i-1] + pile[i-2]\n\
    \    end\n    \n    return pile\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to make a pile of n levels of stones.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) ==\
    \ [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
    \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5gvm6arx.jl:31\nin expression starting at\
    \ /tmp/tmp5gvm6arx.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2 ==\
    \ 0 ? n : n+1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a positive integer n and returns the number of ways to arrange the n stones\
    \ in a pile.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqo88z57o.jl:22\nin expression starting at\
    \ /tmp/tmpqo88z57o.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n % 2 == 0 ? n : n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive integer n and returns the number of ways\
    \ to arrange the n stones in a pile of n levels. \nFor example, for n = 4, there\
    \ are 4 ways to arrange the 4 stones in a pile:\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj7iouwuz.jl:22\nin expression starting at\
    \ /tmp/tmpj7iouwuz.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=n%2\n        even=n%2==0\n        \n        if odd \n        \
    \    odd=make_a_pile(odd)\n        else\n            odd=make_a_pile(odd)\n  \
    \      end\n        \n        if even \n            even=make_a_pile(even)\n \
    \       else\n            even=make_a_pile(even)\n        end\n        \n    \
    \    \n        return odd+even\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to arrange n stones in a pile.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) ==\
    \ [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
    \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_zxtzbpb.jl:17\nin expression starting at\
    \ /tmp/tmp_zxtzbpb.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        odd=odd[end-1:end]\n        even=even[end-1:end]\n        return odd+even\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyxb3gktl.jl:17\nin expression starting at\
    \ /tmp/tmpyxb3gktl.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    else if n % 2 == 0 \n        return make_a_pile(n\
    \ / 2) + [n / 2]\n    else \n        return make_a_pile(n / 2) + [n / 2 + 1]\n\
    end\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer n and returns the number of\
    \ levels of stones needed to form a pile of n stones.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp00v4azm5.jl:17\nin expression starting at\
    \ /tmp/tmp00v4azm5.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==1 \n        return\
    \ [1]\n    else \n        odds = make_a_pile(n-1)\n        evens = make_a_pile(n-2)\n\
    \        return odds + evens\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(3)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to make a pile of n levels of stones.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) ==\
    \ [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
    \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_azwq79b.jl:22\nin expression starting at\
    \ /tmp/tmp_azwq79b.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n / 2) \n        push!(make_a_pile(n\
    \ / 2), n % 2 == 0 ? n : n + 1)\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp_g75cwem.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp_g75cwem.jl:27\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmp_g75cwem.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmp_g75cwem.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_g75cwem.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_g75cwem.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_g75cwem.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmp_g75cwem.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmp_g75cwem.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_g75cwem.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_g75cwem.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_g75cwem.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(5) == [5, 7, 9, 11, 13]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmp_g75cwem.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmp_g75cwem.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_g75cwem.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_g75cwem.jl"
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(ceil(n/2))+[n % 2]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<code language=julia-1.0>\n\
    @assert make_a_pile(4) == [3, 5]\n</cell>\n<code language=julia-1.0>\n@assert\
    \ make_a_pile(5) == [3, 5, 7]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(6)\
    \ == [3, 5]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(7) == [3,\
    \ 5, 7]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(8) == [3, 5]\n\
    </cell>\n<code language=julia-1.0>\n@assert make_a_pile(9) == [3, 5, 7]\n</cell>\n\
    <code language=julia-1.0>\n@assert make_a_pile(10) == [3, 5]\n</cell>\n<code language=julia-1.0>\n\
    @assert make_a_pile(11) == [3, 5, 7]\n</cell>\n<code language=julia-1.0>\n@assert\
    \ make_a_pile(12) == [3, 5]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(13)\
    \ == [3, 5, 7]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(14) ==\
    \ [3, 5]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(15) == [3, 5,\
    \ 7]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(16) == [3, 5]\n\
    </cell>\n<code language=julia-1.0>\n@assert make_a_pile(17) == [3, 5, 7]\n</cell>\n\
    <code language=julia-1.0>\n@assert make_a_pile(18) == [3, 5]\n</cell>\n<code language=julia-1.0>\n\
    @assert make_a_pile(19) == [3, 5, 7]\n</cell>\n<code language=julia-1.0>\n@assert\
    \ make_a_pile(20) == [3, 5]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(21)\
    \ == [3, 5, 7]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(22) ==\
    \ [3, 5]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(23) == [3, 5,\
    \ 7]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(24\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjjzpqfne.jl:21\nin expression starting at\
    \ /tmp/tmpjjzpqfne.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1 \n       \
    \ return [1]\n    \n    pile = make_a_pile(n / 2)\n    pile = pile + [n mod 2\
    \ ? 2 : 1]\n    \n    return pile\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnusomqcp.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnusomqcp.jl:1\n\
    in expression starting at /tmp/tmpnusomqcp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2==0\
    \ ? n : n+1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to make n piles of stones.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprgf8354m.jl:22\nin expression starting at\
    \ /tmp/tmprgf8354m.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==1 \n        return\
    \ [1]\n    else \n        odd = make_a_pile(n-1)\n        even = make_a_pile(n-2)\n\
    \        odd[end] = odd[end] + even[end]\n        return odd\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nmake_a_pile(5)\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp65gyt_9y.jl:24\nin expression starting at\
    \ /tmp/tmp65gyt_9y.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1 \n       \
    \ return [1]\n    else \n        odd = n % 2\n        even = n / 2\n        pile\
    \ = make_a_pile(even) + make_a_pile(odd)\n        return pile\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer n and returns the number of ways to\
    \ make n piles of stones.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk38ip0rl.jl:23\nin expression starting at\
    \ /tmp/tmpk38ip0rl.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n / 2) ++ [n % 2 == 0 ? n :\
    \ 2 * n]\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive integer n and returns the number of ways to arrange the stones in\
    \ a pile of n stones.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkifwp2dj.jl:21\nin expression starting at\
    \ /tmp/tmpkifwp2dj.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2 ==\
    \ 0 ? n : n+1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a positive integer n and returns the number of levels of stones needed\
    \ to make a pile of n stones.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7o2a4ji0.jl:22\nin expression starting at\
    \ /tmp/tmp7o2a4ji0.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(ceil(n/2))\n        push!(make_a_pile(n%2),\
    \ n//2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(3)\
    \ == [3, 5, 7]\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqgf6iosv.jl:22\nin expression starting at\
    \ /tmp/tmpqgf6iosv.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n    \
    \    odd=odd[end-1]\n        return odd\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3mhd7a7k.jl:17\nin expression starting at\
    \ /tmp/tmp3mhd7a7k.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2==0\
    \ ? n : n+1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes as input a positive integer n and returns the number of ways to arrange\
    \ the n stones in a pile of n levels. \nThe first level has n stones.\nThe number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    \nExamples:\n    >>> make_a_pile(3)\n\
    \    [3, 5, 7]\n    >>> make_a_pile(4)\n    [4, 8, 12, 16]\n    >>> make_a_pile(5)\n\
    \    [5, 10, 15, 20, 25]\n    >>> make_a_pile(6)\n    [6, 12, 18, 24, 30]\n  \
    \  >>> make_a_pile(7)\n    [7, 14, 21, 28, 35, 42]\n    >>> make_a_pile(8)\n \
    \   [8, 16, 24, 32, 40, 48]\n    >>> make_a_pile(9)\n    [9, 18, 27, 36, 45, 52,\
    \ 60]\n    >>> make_a_pile(10)\n    [10, 20, 30, 40, 50, 60, 70]\n    >>> make_a_pile(11)\n\
    \    [11, 22, 33, 44, 55, 66, 76, 81]\n    >>> make_a_pile(12)\n    [12, 24, 36,\
    \ 48, 60, 72, 84, 90]\n    >>> make_a_pile(13)\n    [13, 26, 39, 52, 65, 78, 92,\
    \ 105]\n    >>> make_a_pile(14)\n    [14, 28, 42, 56, 70, 84, 101, 118, 135]\n\
    \    >>> make_a_pile(15)\n    [15, 30, 45, 60, 75, 90, 115, 130, 150]\n    >>>\
    \ make_a_pile(16)\n    [16, 32, 48, 64, 80, 96, 112, 128, 144, 160]\n    >>> make_a_pile(17)\n\
    \    [17, 34, 51, 67, 85, 103, 121, 143, 161, 178]\n    >>> make_a_pile(18)\n\
    \    [18, 36, 54, 70, 92, 108, 126, 150, 176, 193]\n    >>> make_a_pile(19)\n\
    \    [19, 38, 57, 74, 100, 116, 134, 152, 180, 207, 225]\n    >>> make_a_pile(20)\n\
    \    [20, 40, 60, 78, 104, 122, 140, 158, 186, 213, 240]\n    >>> make_a_pile(21)\n\
    \    [21, 42, 64, 82, 106, 127, 148, 164, 192, 235, 252]\n    >>> make_a_pile(22)\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbulq7uyc.jl:22\nin expression starting at\
    \ /tmp/tmpbulq7uyc.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}()\n    elseif n % 2 == 1\n        make_a_pile(n / 2)\n    else\n\
    \        make_a_pile(n / 2) + make_a_pile(n / 2)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer n and returns the number\
    \ of ways to arrange n stones.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp89padumt.jl:23\nin expression starting at\
    \ /tmp/tmp89padumt.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd_or_even = if n%2==0 \n                        :+\n           \
    \             :+\n                    else \n                        :+\n    \
    \                    :+\n                    end\n        pile = make_a_pile(n-1)\n\
    \        push!(pile, odd_or_even)\n        return pile\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a positive integer n and returns the number of ways to\
    \ arrange the n stones in a pile.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4,\
    \ 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw4htqo_b.jl:17\nin expression starting at\
    \ /tmp/tmpw4htqo_b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        return odd\n    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf28xz_dk.jl:17\nin expression starting at\
    \ /tmp/tmpf28xz_dk.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2 ==\
    \ 0 ? 1 : 2) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes as input a positive integer n and returns the number of ways to make a\
    \ pile of n levels of stones.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptsrkoqwy.jl:22\nin expression starting at\
    \ /tmp/tmptsrkoqwy.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1 \n       \
    \ return [1]\n    \n    pile = make_a_pile(n / 2)\n    pile = [i + 1 for i in\
    \ pile]\n    pile = [i + 1 for i in pile]\n    \n    if n % 2 == 1 \n        pile\
    \ = [i + 1 for i in pile]\n    end\n    \n    return pile\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a positive integer n and returns the number of ways to arrange the\
    \ n stones in a pile of n levels. \nFor example, if the input is 3, the output\
    \ should be [1, 1, 2, 2, 3, 3]. \nThe function should return an array of length\
    \ n. \nThe function should return nothing if the input is 0 or less.\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp5c743r0.jl:28\nin expression starting at\
    \ /tmp/tmpp5c743r0.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    \n    pile = make_a_pile(n-1)\n    \n    if mod(n,2)==1\n\
    \        push!(pile,n+1)\n    else\n        push!(pile,n-1)\n    end\n    \n \
    \   return pile\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwfzha8xm.jl:28\nin expression starting at\
    \ /tmp/tmpwfzha8xm.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==1 \n        return\
    \ [1]\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        odd=odd[end-1:end]\n        even=even[end-1:end]\n\
    \        return odd+even\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprcdec1yn.jl:25\nin expression starting at\
    \ /tmp/tmprcdec1yn.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==1 \n        return\
    \ [1]\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n    \
    \    odd=odd+even\n        return odd\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoyxsl366.jl:26\nin expression starting at\
    \ /tmp/tmpoyxsl366.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n % 2 == 0 ? n : n - 1) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @time make_a_pile(100000);\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes as input a positive integer n and returns the number of ways to write\
    \ n stones in a pile.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8qfw3yh_.jl:22\nin expression starting at\
    \ /tmp/tmp8qfw3yh_.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\n\
    \    elseif n==1 \n        Vector{Int64}(1)\n    elseif n%2==0 \n        Vector{Int64}(make_a_pile(n-1)[end-1]+2)\n\
    \    else\n        Vector{Int64}(make_a_pile(n-1)[end-1]+2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuoin56sn.jl:25\nin expression starting at\
    \ /tmp/tmpuoin56sn.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     make_a_pile(n/2)\n    else \n        make_a_pile(n/2) + [(n+1)/2]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi0zdjbz9.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi0zdjbz9.jl:1\n\
    in expression starting at /tmp/tmpi0zdjbz9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a positive integer n and returns\
    \ the number of ways to arrange the n stones in a pile.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5f2_xby7.jl:21\nin expression starting at\
    \ /tmp/tmp5f2_xby7.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==1 \n        return\
    \ [1]\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        return odd\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpza66wdmc.jl:24\nin expression starting at\
    \ /tmp/tmpza66wdmc.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 1 \n   \
    \     make_a_pile(n-1)\n    else\n        make_a_pile(n-1)+[(n+1)%2]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpocppnptp.jl:21\nin expression starting at\
    \ /tmp/tmpocppnptp.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    \n    pile = make_a_pile(n / 2)\n    pile[end] =\
    \ n % 2 == 0 ? 1 : 2\n    return pile\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmm1bi6ns.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmm1bi6ns.jl:1\n\
    in expression starting at /tmp/tmpmm1bi6ns.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==1 \n        return\
    \ [1]\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        return odd\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6bn6c7hp.jl:23\nin expression starting at\
    \ /tmp/tmp6bn6c7hp.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer n and returns\
    \ the number of ways to arrange n items in an array. For example, given n = 4,\
    \ the function should return [1, 1, 2, 2, 3, 3].\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqe82tp0t.jl:21\nin expression starting at\
    \ /tmp/tmpqe82tp0t.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    else if n % 2 == 0\n        return make_a_pile(n\
    \ / 2) + [n / 2]\n    else\n        return make_a_pile(n / 2) + [n / 2]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9q7h36ry.jl:17\nin expression starting at\
    \ /tmp/tmp9q7h36ry.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     odds = n\n        evens = n - odds\n    else \n        odds = n - 1\n  \
    \      evens = n\n    return Vector{Int64}(odds, evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to arrange n stones in a pile.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) ==\
    \ [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
    \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ocge1zz.jl:23\nin expression starting at\
    \ /tmp/tmp0ocge1zz.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(n div 2) + [n mod 2]\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer n and returns the number\
    \ of ways to make n piles.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5iamq3y9.jl:18\nin expression starting at\
    \ /tmp/tmp5iamq3y9.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1 \n       \
    \ return [1]\n    else \n        odd = n % 2\n        even = n / 2\n        \n\
    \        if odd \n            odd_pile = make_a_pile(odd)\n            even_pile\
    \ = make_a_pile(even)\n            \n            odd_pile = odd_pile + even_pile\n\
    \            \n            return odd_pile\n        else \n            even_pile\
    \ = make_a_pile(even)\n            \n            even_pile = even_pile + odd_pile\n\
    \            \n            return even_pile\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to make n piles of stones.\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppcej82wh.jl:36\nin expression starting at\
    \ /tmp/tmppcej82wh.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     make_a_pile(n/2)\n    else\n        make_a_pile(n/2) + make_a_pile(n/2)\
    \ + make_a_pile(n/2)\n    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(10)\n\
    </cell>\n<text>\nExercise: Write a function that takes an integer n and returns\
    \ the number of levels in the pile.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1cqkcl6q.jl:21\nin expression starting at\
    \ /tmp/tmp1cqkcl6q.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    \n    pile = make_a_pile(n - 1)\n    \n    if n\
    \ % 2 == 1\n        push!(pile, n / 2)\n    else\n        push!(pile, n / 2 +\
    \ 1)\n    end\n    \n    return pile\nend\n</cell>\n<code language=julia-1.3>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to make n piles of n levels of stones.\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp38yu2ns4.jl:28\nin expression starting at\
    \ /tmp/tmp38yu2ns4.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) ==\
    \ [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
    \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr8z2waoz.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpr8z2waoz.jl:26\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: Int64[] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr8z2waoz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr8z2waoz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpr8z2waoz.jl:27\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: Int64[] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr8z2waoz.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr8z2waoz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpr8z2waoz.jl:28\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: Int64[] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr8z2waoz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr8z2waoz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpr8z2waoz.jl:29\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: Int64[] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr8z2waoz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr8z2waoz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpr8z2waoz.jl:30\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: Int64[] == [8, 10, 12, 14,"
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n % 2 == 0 ? n : n + 1) \n    end\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a positive integer n and returns the number of ways\
    \ to arrange the n stones in a pile.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptpk25cao.jl:22\nin expression starting at\
    \ /tmp/tmptpk25cao.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    \n    pile = make_a_pile(n / 2)\n    pile = pile\
    \ + [n mod 2]\n    \n    return pile\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp9ixco5j.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp9ixco5j.jl:1\n\
    in expression starting at /tmp/tmpp9ixco5j.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        odd=odd[end-1]\n        even=even[end-1]\n        return odd+even\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwtzcjs07.jl:17\nin expression starting at\
    \ /tmp/tmpwtzcjs07.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    \n    pile = make_a_pile(n-1)\n    \n    if n %\
    \ 2 == 1\n        push!(pile, n / 2)\n    else\n        push!(pile, n / 2 + 1)\n\
    \    end\n    \n    return pile\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(5)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2__2vs2t.jl:28\nin expression starting at\
    \ /tmp/tmp2__2vs2t.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(ceil(n/2)).*(ceil(n/2))+make_a_pile(n-ceil(n /\
    \ 2))\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a positive integer\
    \ n and returns the number of ways to make n piles.\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppg11n8jo.jl:21\nin expression starting at\
    \ /tmp/tmppg11n8jo.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2 ==\
    \ 0 ? n : n+1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n\
    </cell>\n<text>\nExercise 3\nWrite a function called make_a_pile_from_file that\
    \ reads a file containing n lines of integers separated by spaces and returns\
    \ a vector of n elements.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcy9tjux2.jl:22\nin expression starting at\
    \ /tmp/tmpcy9tjux2.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    \n    pile = make_a_pile(n-1)\n    \n    if mod(n,2)==1\
    \ \n        push!(pile,n+1)\n    else \n        push!(pile,n-1)\n    end\n   \
    \ \n    return pile\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybg9mkku.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybg9mkku.jl:1\n\
    in expression starting at /tmp/tmpybg9mkku.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(ceil(n/2))\n        push!(make_a_pile(n%2),n)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ n and returns the number of ways to arrange the stones in a pile of n stones.\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2fvlywsb.jl:22\nin expression starting at\
    \ /tmp/tmp2fvlywsb.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     odds = make_a_pile(n / 2)\n        evens = make_a_pile(n / 2)\n        odds[end]\
    \ = n\n        evens[end] = n\n        return odds + evens\n    else\n       \
    \ odds = make_a_pile(n / 2)\n        evens = make_a_pile(n / 2)\n        odds[end]\
    \ = n\n        evens[end] = n\n        return odds\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp565kpjvj.jl:29\nin expression starting at\
    \ /tmp/tmp565kpjvj.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1 \n       \
    \ return [1]\n    \n    pile = make_a_pile(n / 2)\n    pile[1] = pile[1] + n %\
    \ 2 == 0 ? 1 : 0\n    \n    return pile\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise: Write a function that takes an integer\
    \ n and returns the number of ways to make n piles of stones.\nusing Test\n\n\
    @testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp553im31t.jl:23\nin expression starting at\
    \ /tmp/tmp553im31t.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==1 \n        return\
    \ [1]\n    \n    evens = make_a_pile(n/2)\n    odds = make_a_pile(n-evens)\n \
    \   \n    evens = evens[2:end]\n    odds = odds[2:end]\n    \n    evens = evens[2:end]\n\
    \    odds = odds[2:end]\n    \n    evens = evens[2:end]\n    odds = odds[2:end]\n\
    \    \n    evens = evens[2:end]\n    odds = odds[2:end]\n    \n    evens = evens[2:end]\n\
    \    odds = odds[2:end]\n    \n    evens = evens[2:end]\n    odds = odds[2:end]\n\
    \    \n    evens = evens[2:end]\n    odds = odds[2:end]\n    \n    evens = evens[2:end]\n\
    \    odds = odds[2:end]\n    \n    evens = evens[2:end]\n    odds = odds[2:end]\n\
    \    \n    evens = evens[2:end]\n    odds = odds[2:end]\n    \n    evens = evens[2:end]\n\
    \    odds = odds[2:end]\n    \n    evens = evens[2:end]\n    odds = odds[2:end]\n\
    \    \n    evens = evens[2:end]\n    odds = odds[2:end]\n    \n    evens = evens[2:end]\n\
    \    odds = odds[2:end]\n    \n    evens = evens[2:end]\n    odds = odds[2:end]\n\
    \    \n    evens = evens[2:end]\n    odds = odds[2:end]\n    \n    evens = evens[2:end]\n\
    \    odds = odds[2:end]\n    \n    evens = evens[2:end]\n    odds = odds[2:end]\n\
    \    \n    evens = evens[2:end]\n    odds = odds[2:end]\n    \n    evens = evens[2:end]\n\
    \    odds = odds[2:end]\n    \n    evens = evens[2:end]\n    odds = odds[2:end]\n\
    \    \n    evens = evens[2:end]\n    odds = odds[2:end]\n    \n    evens = evens[2:end]\n\
    \    odds = odds[2:end]\n    \n    evens = evens[2:end]\n    odds = odds[2:end]\n\
    \    \n    evens = evens[2:end]\n    odds = odds[2:end]\n    \n    evens = evens[2:end]\n\
    \    odds = odds[2:end]\n    \n    evens = evens[2:end]\n    odd\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1lkq08ay.jl:1\nin expression starting at /tmp/tmp1lkq08ay.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 1 \n   \
    \     make_a_pile(n / 2)\n    else \n        make_a_pile(n / 2) + make_a_pile((n\
    \ / 2) + 1)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to arrange n stones.\nusing Test\n\n\
    @testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd9ijvgrf.jl:20\nin expression starting at\
    \ /tmp/tmpd9ijvgrf.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),n%2==0?1:0)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes as input\
    \ a positive integer n and returns the number of ways to make n piles.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) ==\
    \ [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
    \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsj6k45cr.jl:19\nin expression starting at\
    \ /tmp/tmpsj6k45cr.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n / 2) ++ [n % 2 == 0 ? n :\
    \ n + 1]\n    end\nend\n</cell>\n<code language=julia-1.0>\n@time make_a_pile(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes as input a positive integer\
    \ n and returns the number of ways to arrange n stones in a pile of n levels.\
    \ \nThe first level has n stones.\nThe number of stones in the next level is:\n\
    \        - the next odd number if n is odd.\n        - the next even number if\
    \ n is even.\n    \nExamples:\n    >>> make_n_piles(3)\n    [3, 5, 7]\n    >>>\
    \ make_n_piles(4)\n    [4, 6, 8, 10]\n    >>> make_n_piles(5)\n    [5, 10, 15,\
    \ 20, 25]\n    >>> make_n_piles(6)\n    [6, 12, 18, 24, 30]\n    >>> make_n_piles(7)\n\
    \    [7, 14, 21, 28, 35, 40]\n    >>> make_n_piles(8)\n    [8, 16, 24, 32, 40,\
    \ 48]\n    >>> make_n_piles(9)\n    [9, 18, 27, 36, 45, 54, 63, 72]\n    >>> make_n_piles(10)\n\
    \    [10, 20, 30, 40, 50, 60, 70, 80]\n    >>> make_n_piles(11)\n    [11, 22,\
    \ 33, 44, 55, 66, 77, 88, 99]\n    >>> make_n_piles(12)\n    [12, 24, 36, 48,\
    \ 60, 72, 84, 96, 111]\n    >>> make_n_piles(13)\n    [13, 25, 37, 49, 61, 73,\
    \ 85, 97, 121]\n    >>> make_n_piles(14)\n    [14, 26, 38, 50, 62, 74, 86, 99,\
    \ 122, 140]\n    >>> make_n_piles(15)\n    [15, 27, 39, 51, 63, 75, 87, 99, 123,\
    \ 140, 150]\n    >>> make_n_piles(16)\n    [16, 28, 40, 52, 64, 76, 88, 100, 132,\
    \ 140, 150]\n    >>> make_n_piles(17)\n    [17, 29, 41, 53, 65, 77, 89, 101, 133,\
    \ 140, 150]\n    >>> make_n_piles(18)\n    [18, 30, 42, 54, 66, 78, 90, 102, 134,\
    \ 140, 150]\n    >>> make_n_piles(19)\n    [19, 31, 43, 55, 67, 79, 91, 103, 135,\
    \ 140, 150]\n    >>> make_n_piles(20)\n    [20, 32, 44, 56, 68, 80, 92, 104, 136,\
    \ \nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeuziw6tn.jl:21\nin expression starting at\
    \ /tmp/tmpeuziw6tn.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    else \n        odd_or_even = if n % 2 == 0 \n  \
    \                      :+ 2\n                        :+ 1 \n                 \
    \       :+ 1\n                        :+ 1\n                        :+ 1\n   \
    \                     :+ 1\n                        :+ 1\n                   \
    \     :+ 1\n                        :+ 1\n                        :+ 1\n     \
    \                   :+ 1\n                        :+ 1\n                     \
    \   :+ 1\n                        :+ 1\n                        :+ 1\n       \
    \                 :+ 1\n                        :+ 1\n                       \
    \ :+ 1\n                        :+ 1\n                        :+ 1\n         \
    \               :+ 1\n                        :+ 1\n                        :+\
    \ 1\n                        :+ 1\n                        :+ 1\n            \
    \            :+ 1\n                        :+ 1\n                        :+ 1\n\
    \                        :+ 1\n                        :+ 1\n                \
    \        :+ 1\n                        :+ 1\n                        :+ 1\n  \
    \                      :+ 1\n                        :+ 1\n                  \
    \      :+ 1\n                        :+ 1\n                        :+ 1\n    \
    \                    :+ 1\n                        :+ 1\n                    \
    \    :+ 1\n                        :+ 1\n                        :+ 1\n      \
    \                  :+ 1\n                        :+ 1\n                      \
    \  :+ 1\n                        :+ 1\n                        :+ 1\n        \
    \                :+ 1\n                        :+ 1\n                        :+\
    \ 1\n                        :+ 1\n                        :+ 1\n            \
    \            :+ 1\n                        :+ 1\n                        :+ 1\n\
    \                        :+ 1\n                        :+ 1\n                \
    \        :+ 1\n                        :+ 1\n                        :+ 1\n  \
    \                      :+ 1\n                        :+ 1\n                  \
    \      :+ 1\n                        :+ 1\n                        :+ 1\n    \
    \                    :+ 1\n                        :+ 1\n                    \
    \    :+ 1\n                        :+ 1\n                        :+ 1\n      \
    \                  :+ 1\n                        :+ 1\n                      \
    \  :+ 1\n                        :+ 1\n                        :+ 1\n        \
    \                :+ 1\n                        :+ 1\n                        :+\
    \ 1\n                        :+ 1\n                        :+ 1\n            \
    \            :+ 1\n                        :+ 1\n                        :+ 1\n\
    \                        :+ 1\n                        :+ 1\n                \
    \        :+ 1\n                        :+ 1\n                        :+ 1\n  \
    \                      :+ 1\n                        :+ 1\n                  \
    \      :+ 1\n                        :+ 1\n                        :+ 1\n    \
    \                    :+ 1\n                        :+ 1\n                    \
    \    :+ 1\n                        :+ 1\n                        :+ 1\n      \
    \                  :+ 1\n                        :+ 1\n                      \
    \  :+ 1\n                        :+ 1\n                        :+ 1\n        \
    \                :+ 1\n                        :+ 1\n                        :+\
    \ 1\n                        :+ 1\n                        :+ 1\n            \
    \            :+ 1\n                        :+ 1\n                        :+ 1\n\
    \                        :+ 1\n                        :+ 1\n                \
    \        :+ 1\n                        :+ 1\n                        :+ 1\n  \
    \                      :+ 1\n                        :+ 1\n                  \
    \      :+ 1\n                        :+ 1\n\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph8lrfr5q.jl:19\nin expression starting at /tmp/tmph8lrfr5q.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        return odd\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx7q5jl91.jl:17\nin expression starting at\
    \ /tmp/tmpx7q5jl91.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),n%2==0?n+1:n+1)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03n07om1.jl:19\nin expression starting at\
    \ /tmp/tmp03n07om1.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd = n%2\n        even = n/2\n        pile = make_a_pile(even) +\
    \ make_a_pile(odd)\n        return pile\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to make n piles.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpihx7xnt6.jl:17\nin expression starting at\
    \ /tmp/tmpihx7xnt6.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}()\n    else\n        make_a_pile(n - 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nmake_a_pile(4)\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes an integer n and returns the number of levels of stones\
    \ needed to make a pile. For example, make_a_pile(3) should return [3, 5, 7].\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn8kdr8j0.jl:21\nin expression starting at\
    \ /tmp/tmpn8kdr8j0.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n / 2) |> push!(make_a_pile(n\
    \ / 2)) \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpps32i7eq.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpps32i7eq.jl:26\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpps32i7eq.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpps32i7eq.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpps32i7eq.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpps32i7eq.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpps32i7eq.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpps32i7eq.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpps32i7eq.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpps32i7eq.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpps32i7eq.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpps32i7eq.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(5) == [5, 7, 9, 11, 13]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpps32i7eq.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpps32i7eq.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpps32i7eq.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpps32i7eq.jl"
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=n%2\n        even=n-1\n        pile=make_a_pile(odd)\n       \
    \ push!(pile,even)\n        return pile\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpui_fkw60.jl:17\nin expression starting at\
    \ /tmp/tmpui_fkw60.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}()\n    else\n        make_a_pile(n - 1) .+ [n % 2 == 0 ? n : n\
    \ + 2]\n    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n\
    <text>\nExercise 2\nWrite a function called make_a_pile_from_list that takes in\
    \ a list of integers and returns a pile of those integers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpogg0b1zz.jl:21\nin expression starting at\
    \ /tmp/tmpogg0b1zz.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ if n%2==0 \n        return make_a_pile(n-1)+make_a_pile(n-2)\n    else \n  \
    \      return make_a_pile(n-1)+make_a_pile(n-2)+make_a_pile(n-3)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp39ecg_gd.jl:17\nin expression starting at\
    \ /tmp/tmp39ecg_gd.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ if n%2==0 \n        return make_a_pile(n-1)+make_a_pile(n+1)\n    else \n  \
    \      return make_a_pile(n-1)+make_a_pile(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ called make_a_pile_from_list that takes as input a vector of integers and returns\
    \ the same vector as in Exercise 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptth0zgr8.jl:17\nin expression starting at\
    \ /tmp/tmptth0zgr8.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(ceil(n/2))\n        push!(make_a_pile(n%2), n)\n\
    \    end\nend\n</cell>\n<text>\nExercise: Write a function that takes a positive\
    \ integer n and returns the number of levels of stones needed to make n piles.\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxgux3jm_.jl:22\nin expression starting at\
    \ /tmp/tmpxgux3jm_.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    else if n % 2 == 0 \n        return make_a_pile(n\
    \ / 2) + [n / 2]\n    else \n        return make_a_pile(n / 2) + [n / 2]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz88yf5lz.jl:17\nin expression starting at\
    \ /tmp/tmpz88yf5lz.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==1 \n        return\
    \ [1]\n    else if n==2 \n        return [1, 1]\n    else \n        odds = make_a_pile(n-1)\n\
    \        evens = make_a_pile(n-2)\n        odds[end-1] = odds[end-1] + evens[end-1]\n\
    \        evens[end-1] = evens[end-1] + odds[end-1]\n        return odds + evens\n\
    end\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_86l4kdi.jl:17\nin expression starting at\
    \ /tmp/tmp_86l4kdi.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2==0\
    \ ? n : n+1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsk9j26l9.jl:22\nin expression starting at\
    \ /tmp/tmpsk9j26l9.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    \n    pile = make_a_pile(n div 2)\n    \n    if\
    \ n % 2 == 1 \n        push!(pile, n div 2)\n    else \n        push!(pile, n\
    \ div 2)\n        push!(pile, n div 2)\n    end\n    \n    return pile\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp42ng6u8w.jl:18\nin expression starting at\
    \ /tmp/tmp42ng6u8w.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}()\n    elseif n % 2 == 0 \n        make_a_pile(n / 2)\n    else\n\
    \        make_a_pile(n / 2) + make_a_pile(n / 2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes as input a positive integer n and returns the number of ways to make\
    \ a pile of n levels of stones.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpawtwn1xv.jl:23\nin expression starting at\
    \ /tmp/tmpawtwn1xv.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(ceil(n/2))\n        push!(make_a_pile(n%2),\
    \ n%2)\n    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a positive integer n and returns\
    \ the number of ways to arrange n stones in a pile of n levels of stones.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) ==\
    \ [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
    \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4nuj7jxu.jl:22\nin expression starting at\
    \ /tmp/tmp4nuj7jxu.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     make_a_pile(n / 2)\n    else\n        make_a_pile(n / 2) + [n mod 2]\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpje40mvh6.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpje40mvh6.jl:26\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpje40mvh6.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpje40mvh6.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpje40mvh6.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpje40mvh6.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpje40mvh6.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpje40mvh6.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpje40mvh6.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpje40mvh6.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpje40mvh6.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpje40mvh6.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(5) == [5, 7, 9, 11, 13]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpje40mvh6.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpje40mvh6.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpje40mvh6.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpje40mvh6.jl:25"
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    \n    pile = make_a_pile(n / 2)\n    \n    if n\
    \ % 2 == 1 \n        push!(pile, n / 2)\n    else \n        push!(pile, n / 2\
    \ + 1)\n    end\n    \n    return pile\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfnz1lr6s.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfnz1lr6s.jl:1\n\
    in expression starting at /tmp/tmpfnz1lr6s.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==1 \n        return\
    \ [1]\n    \n    pile = make_a_pile(n-1)\n    \n    if mod(n,2)==1 \n        pile\
    \ = pile:+2\n    else\n        pile = pile:+3\n    end\n    \n    return pile\n\
    end\n</cell>\n<code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes in a positive integer n and returns the number\
    \ of ways to make a pile of n levels of stones.\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf7ldyw5j.jl:28\nin expression starting at\
    \ /tmp/tmpf7ldyw5j.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==1 \n        return\
    \ [1]\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        return odd\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6bn6c7hp.jl:23\nin expression starting at\
    \ /tmp/tmp6bn6c7hp.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n % 2 == 0 ? n : n + 1)\n    end\nend\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes an integer n and returns the number of levels of stones\
    \ needed to make a pile. For example, make_a_pile(3) should return [3, 5, 7].\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvlb7bqyi.jl:22\nin expression starting at\
    \ /tmp/tmpvlb7bqyi.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    else \n        if n % 2 == 0 \n            evens\
    \ = make_a_pile(n / 2)\n            odds = make_a_pile(n / 2)\n            odds[end]\
    \ = odds[end] + evens[end]\n            return odds\n        else \n         \
    \   evens = make_a_pile(n / 2)\n            odds = make_a_pile(n / 2)\n      \
    \      evens[end] = evens[end] + odds[end]\n            return evens\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer n and returns\
    \ the number of ways to make n piles.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu7dt0nvs.jl:29\nin expression starting at\
    \ /tmp/tmpu7dt0nvs.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     make_a_pile(n/2)\n    else\n        make_a_pile(n/2) + [(n+1)/2]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjico8fdg.jl:21\nin expression starting at\
    \ /tmp/tmpjico8fdg.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}()\n    else\n        make_a_pile(n - 1) + (n % 2 == 0 ? 1 : 0)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes an integer n and returns the number of ways\
    \ to make a pile of n levels of stones.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwamw37ee.jl:21\nin expression starting at\
    \ /tmp/tmpwamw37ee.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(ceil(n/2)).*(ceil(n/2))+make_a_pile(floor(n/2)).*(floor(n/2))\n\
    \    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to arrange n stones in a pile. For\
    \ example, given n = 4, there are four ways to arrange the stones in a pile:\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprloep930.jl:21\nin expression starting at\
    \ /tmp/tmprloep930.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}() \n    else \n        pile = make_a_pile(n div 2) \n \
    \       push!(pile, n mod 2) \n        return pile \nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a\
    \ positive integer n and returns the number of levels of stones needed to form\
    \ a pile of n stones.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpph9be08z.jl:18\nin expression starting at\
    \ /tmp/tmpph9be08z.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}()\n    else\n        make_a_pile(n - 1) |> push!(make_a_pile(n\
    \ / 2)) |> push!(make_a_pile(n / 2)) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise 2\nWrite a function called make_a_pile_with_odd_numbers\
    \ that takes a positive integer n and returns a vector where element at index\
    \ i represents the number of stones in the level (i+1).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0yrqiis_.jl:21\nin expression starting at\
    \ /tmp/tmp0yrqiis_.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(ceil(n/2))+[ceil(n%2)]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes as input a positive integer n and returns\
    \ the number of ways to make a pile of n levels of stones.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnkve3h_9.jl:21\nin expression starting at\
    \ /tmp/tmpnkve3h_9.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(ceil(n/2))+[(n%2==0)?n:n+1]\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj_62pu_9.jl:18\nin expression starting at\
    \ /tmp/tmpj_62pu_9.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n % 2 == 0 ? n : 2 * n) \n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp5zgwkj50.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp5zgwkj50.jl:27\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmp5zgwkj50.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmp5zgwkj50.jl:19\n\
    \   [2] make_a_pile(n::Int64) (repeats 2 times)\n     @ Main /tmp/tmp5zgwkj50.jl:18\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5zgwkj50.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5zgwkj50.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp5zgwkj50.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmp5zgwkj50.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmp5zgwkj50.jl:19\n\
    \   [2] make_a_pile(n::Int64) (repeats 3 times)\n     @ Main /tmp/tmp5zgwkj50.jl:18\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5zgwkj50.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5zgwkj50.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp5zgwkj50.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(5) == [5, 7, 9, 11, 13]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmp5zgwkj50.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmp5zgwkj50.jl:19\n\
    \   [2] make_a_pile(n::Int64) (repeats 4 times)\n     @ Main /tmp/tmp5zgwkj50.jl:18\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Te"
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    else if n % 2 == 1 \n        return make_a_pile(n\
    \ / 2) + [n / 2]\n    else \n        return make_a_pile(n / 2) + [n / 2] + make_a_pile(n\
    \ / 2)\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a positive integer n and returns the number\
    \ of levels of stones needed to make a pile of n stones.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpizss7sua.jl:17\nin expression starting at\
    \ /tmp/tmpizss7sua.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd::Int64 = if n%2==1 \n            n \n        else \n         \
    \   n-1\n        even::Int64 = if n%2==0 \n            n \n        else \n   \
    \         n-1\n        \n        pile = make_a_pile(odd)\n        push!(pile,\
    \ even)\n        return pile\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpit57m7jq.jl:17\nin expression starting at\
    \ /tmp/tmpit57m7jq.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     make_a_pile(n/2)\n    else\n        make_a_pile(n/2) + [(n+1)/2]\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp_k_hpfgf.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp_k_hpfgf.jl:26\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmp_k_hpfgf.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmp_k_hpfgf.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_k_hpfgf.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_k_hpfgf.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp_k_hpfgf.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmp_k_hpfgf.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmp_k_hpfgf.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_k_hpfgf.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_k_hpfgf.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp_k_hpfgf.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(5) == [5, 7, 9, 11, 13]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmp_k_hpfgf.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmp_k_hpfgf.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_k_hpfgf.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_k_hpfgf.jl:25"
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2==0 ?\
    \ n : n+1)\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ an integer n and returns the number of levels in the pile. For example, make_a_pile(3)\
    \ should return [3, 5, 7].\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_vyo6xu9.jl:22\nin expression starting at\
    \ /tmp/tmp_vyo6xu9.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     make_a_pile(n/2)\n    else\n        make_a_pile(n/2) + make_a_pile(n/2 +\
    \ 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer n and returns\
    \ the number of ways to arrange the n stones in a pile. For example, for n = 4,\
    \ there are 4 ways to arrange the 4 stones in a pile:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdot1qtqt.jl:21\nin expression starting at\
    \ /tmp/tmpdot1qtqt.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==1 \n        return\
    \ [1]\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n    \
    \    odd=odd+even\n        return odd\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsscjhshk.jl:27\nin expression starting at\
    \ /tmp/tmpsscjhshk.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 1 \n   \
    \     odds = make_a_pile(n / 2)\n        odds[end] = odds[end] + 1\n        return\
    \ odds\n    else\n        evens = make_a_pile(n / 2)\n        evens[end] = evens[end]\
    \ + 1\n        return evens\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes an integer n and returns the number of ways to arrange\
    \ n stones in a pile.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9zj74fft.jl:25\nin expression starting at\
    \ /tmp/tmp9zj74fft.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n % 2 == 0 ? n : n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in a positive integer n and returns the number of\
    \ ways to arrange the n stones in a pile.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdxaoqald.jl:22\nin expression starting at\
    \ /tmp/tmpdxaoqald.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     make_a_pile(n/2)\n    else\n        make_a_pile(n/2) + make_a_pile(n/2)\
    \ + make_a_pile(n/2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ make_a_pile(3) == [3, 5, 7]\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes an integer n and returns the number of ways to make a pile of n levels\
    \ of stones.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ndg28pi.jl:21\nin expression starting at\
    \ /tmp/tmp8ndg28pi.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        odd=odd+odd\n        return odd\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpirhytbxi.jl:17\nin expression starting at\
    \ /tmp/tmpirhytbxi.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n div 2) + [n mod 2] \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu8wignyt.jl:18\nin expression starting at\
    \ /tmp/tmpu8wignyt.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    \n    pile = make_a_pile(n div 2)\n    \n    if\
    \ n % 2 == 0 \n        push!(pile, n div 2)\n    else \n        push!(pile, n\
    \ div 2 + 1)\n    end\n    \n    return pile\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise: Write a function that takes a positive\
    \ integer n and returns the number of stones in the first level of a pile. For\
    \ example, make_a_pile(4) should return [3, 5, 7].\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo6092zc2.jl:18\nin expression starting at\
    \ /tmp/tmpo6092zc2.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    \n    pile = make_a_pile(n / 2)\n    \n    if n\
    \ % 2 == 1 \n        push!(pile, n / 2)\n    else \n        push!(pile, n / 2\
    \ + 1)\n    end\n    \n    return pile\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfnz1lr6s.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfnz1lr6s.jl:1\n\
    in expression starting at /tmp/tmpfnz1lr6s.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        odd=odd[end-1]\n        even=even[end-1]\n        return odd+even\nend\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4lmo33ft.jl:17\nin expression starting at\
    \ /tmp/tmp4lmo33ft.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    else if n % 2 == 1\n        return make_a_pile(n\
    \ / 2) + [n / 2]\n    else\n        return make_a_pile(n / 2) + [n / 2]\nend\n\
    </cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdj38hbl_.jl:17\nin expression starting at\
    \ /tmp/tmpdj38hbl_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    else if n % 2 == 1\n        return make_a_pile(n\
    \ / 2) + [n / 2]\n    else\n        return make_a_pile(n / 2) + [n / 2]\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgqn0ol4y.jl:17\nin expression starting at\
    \ /tmp/tmpgqn0ol4y.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(ceil(n/2))\n        push!(make_a_pile(n%2),\
    \ ceil(n/2))\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a positive integer n and returns the number of ways to arrange the n stones\
    \ in a pile of n levels of stones.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbnwxgzft.jl:22\nin expression starting at\
    \ /tmp/tmpbnwxgzft.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     odds = n\n        evens = n - odds\n    else \n        odds = n - 1\n  \
    \      evens = n\n    return Vector{Int64}(undef, odds, evens)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer n and returns the number\
    \ of ways to partition the integers 1...n into two non-empty subsets.\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1u3jqfiz.jl:23\nin expression starting at\
    \ /tmp/tmp1u3jqfiz.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    else if n == 1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd_n = if n % 2 == 0 \n            n \n        else \n  \
    \          n - 1\n        even_n = if n % 2 == 1 \n            n \n        else\
    \ \n            n - 2\n        \n        pile = make_a_pile(odd_n) + make_a_pile(even_n)\n\
    \        return pile\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4x4t105b.jl:17\nin expression starting at\
    \ /tmp/tmp4x4t105b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=n%2\n        even=n-1\n        pile=make_a_pile(odd)\n       \
    \ push!(pile,even)\n        return pile\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a positive integer n and returns the number of\
    \ ways to arrange the n stones in a pile.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq16en3wd.jl:17\nin expression starting at\
    \ /tmp/tmpq16en3wd.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    \n    pile = make_a_pile(n div 2)\n    pile[end]\
    \ = n mod 2\n    return pile\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpio4xbr47.jl:18\nin expression starting at\
    \ /tmp/tmpio4xbr47.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\n\
    \    elseif n==1 \n        Vector{Int64}(1)\n    elseif n%2 == 1 \n        Vector{Int64}(n,\
    \ n)\n    else\n        Vector{Int64}(n, n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbvw8j0yq.jl:25\nin expression starting at\
    \ /tmp/tmpbvw8j0yq.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n div 2) + [n mod 2]\n    end\nend\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a positive integer n and returns\
    \ the number of ways to make n piles.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8yxg65c1.jl:18\nin expression starting at\
    \ /tmp/tmp8yxg65c1.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\n\
    \    elseif n==1 \n        Vector{Int64}(1)\n    elseif n==2 \n        Vector{Int64}(2,\
    \ 3)\n    elseif n==3 \n        Vector{Int64}(3, 5, 7)\n    elseif n==4 \n   \
    \     Vector{Int64}(7, 11, 13, 17, 19)\n    elseif n==5 \n        Vector{Int64}(11,\
    \ 17, 23, 29, 31, 37)\n    elseif n==6 \n        Vector{Int64}(17, 23, 29, 37,\
    \ 41, 43, 47)\n    elseif n==7 \n        Vector{Int64}(23, 29, 37, 47, 53, 59,\
    \ 61, 67)\n    elseif n==8 \n        Vector{Int64}(29, 37, 47, 53, 59, 61, 67,\
    \ 71, 73)\n    elseif n==9 \n        Vector{Int64}(37, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83)\n    elseif n==10 \n        Vector{Int64}(47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97)\n    elseif n==11 \n        Vector{Int64}(53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97, 101, 103)\n    elseif n==12 \n        Vector{Int64}(59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113)\n    elseif n==13 \n\
    \        Vector{Int64}(61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113,\
    \ 127)\n    elseif n==14 \n        Vector{Int64}(67, 71, 73, 79, 83, 89, 97, 101,\
    \ 103, 107, 109, 113, 127, 131)\n    elseif n==15 \n        Vector{Int64}(71,\
    \ 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 135)\n    elseif n==16\
    \ \n        Vector{Int64}(73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131,\
    \ 135, 139)\n    elseif n==17 \n        Vector{Int64}(79, 83, 89, 97, 101, 103,\
    \ 107, 109, 113, 127, 131, 135, 139, 143)\n    elseif n==18 \n        Vector{Int\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or } in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2tznjxq.jl:53\nin expression starting at\
    \ /tmp/tmpw2tznjxq.jl:53\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes as input a positive integer n and returns\
    \ the number of stones in the pile of n levels. \nThe first level has n stones.\n\
    The number of stones in the next level is:\n        - the next odd number if n\
    \ is odd.\n        - the next even number if n is even.\nReturn -1 if the input\
    \ is not positive.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6kqoey2q.jl:21\nin expression starting at\
    \ /tmp/tmp6kqoey2q.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     make_a_pile(n/2)\n    else\n        make_a_pile(n/2) + [(n+1)/2]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer n and returns the number of\
    \ ways to arrange n stones in a pile of n levels. \nThe first level has n stones.\n\
    The number of stones in the next level is:\n        - the next odd number if n\
    \ is odd.\n        - the next even number if n is even.\n    Return the number\
    \ of ways to arrange n stones in a pile of n levels.\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphpjl0f43.jl:21\nin expression starting at\
    \ /tmp/tmphpjl0f43.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n / 2) ++ [n % 2 == 0 ? n :\
    \ n + 1]\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp48wq0okp.jl:21\nin expression starting at\
    \ /tmp/tmp48wq0okp.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),n%2==0?n+1:n)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzw07ahyu.jl:19\nin expression starting at\
    \ /tmp/tmpzw07ahyu.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}() \n    \n    pile = make_a_pile(n div 2)\n    \n    if\
    \ n % 2 == 1 \n        push!(pile, n div 2)\n    else \n        push!(pile, n\
    \ div 2 + 1)\n    end\n    \n    return pile \nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise\nWrite a function that takes a positive\
    \ integer n and returns the number of stones in the pile of n levels of stones.\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp93phti7v.jl:18\nin expression starting at\
    \ /tmp/tmp93phti7v.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n % 2 == 0 ? n : n + 1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a positive integer n and returns the number of levels\
    \ of stones needed to make n stones.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5nknvgw9.jl:22\nin expression starting at\
    \ /tmp/tmp5nknvgw9.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else \n        odd=n%2\n        if odd==0 \n          \
    \  even=n/2\n        else \n            even=n//2\n        \n        return make_a_pile(even)+make_a_pile(odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer n and returns the number\
    \ of ways to arrange the n stones in a pile.\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvsg1zwla.jl:27\nin expression starting at\
    \ /tmp/tmpvsg1zwla.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n % 2 == 0 ? n : n - 1) \n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a positive integer n and returns the number of ways\
    \ to arrange the stones in a pile of n stones.\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpco5fv0ru.jl:22\nin expression starting at\
    \ /tmp/tmpco5fv0ru.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        return odd\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx0_u8gva.jl:17\nin expression starting at\
    \ /tmp/tmpx0_u8gva.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==1 \n        return\
    \ [1]\n    \n    pile = make_a_pile(n-1)\n    \n    if mod(n,2)==1 \n        pile\
    \ = pile:+2\n    else \n        pile = pile:+3\n    end\n    \n    return pile\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcvwwas7u.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcvwwas7u.jl:1\n\
    in expression starting at /tmp/tmpcvwwas7u.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==1 \n        return\
    \ [1]\n    else \n        odds = make_a_pile(n-1)\n        evens = make_a_pile(n-2)\n\
    \        odds[end] = odds[end] + evens[end]\n        return odds\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a positive integer n and returns the number of\
    \ ways to arrange the stones in a pile of n stones.\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprrz1ydli.jl:24\nin expression starting at\
    \ /tmp/tmprrz1ydli.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     make_a_pile(n / 2)\n    else \n        make_a_pile((n / 2) + 1)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) ==\
    \ [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
    \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02z7wuiw.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02z7wuiw.jl:1\n\
    in expression starting at /tmp/tmp02z7wuiw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    \n    if n % 2 == 0 \n        return make_a_pile(n\
    \ / 2) + [n / 2]\n    else \n        return make_a_pile(n / 2) + [n / 2 + 1]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwd7opbir.jl:1\nin expression starting at /tmp/tmpwd7opbir.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),n%2==0?n+1:n)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.3>\nmake_a_pile(10)\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a positive integer n and returns\
    \ the number of stones in the first level of the pile. \nWrite a function that\
    \ takes a positive integer n and returns the number of stones in the second level\
    \ of the pile. \nWrite a function that takes a positive integer n and returns\
    \ the number of stones in the third level of the pile. \nWrite a function that\
    \ takes a positive integer n and returns the number of stones in the fourth level\
    \ of the pile. \nWrite a function that takes a positive integer n and returns\
    \ the number of stones in the fifth level of the pile. \nWrite a function that\
    \ takes a positive integer n and returns the number of stones in the sixth level\
    \ of the pile. \nWrite a function that takes a positive integer n and returns\
    \ the number of stones in the seventh level of the pile. \nWrite a function that\
    \ takes a positive integer n and returns the number of stones in the eighth level\
    \ of the pile. \nWrite a function that takes a positive integer n and returns\
    \ the number of stones in the ninth level of the pile. \nWrite a function that\
    \ takes a positive integer n and returns the number of stones in the tenth level\
    \ of the pile. \nWrite a function that takes a positive integer n and returns\
    \ the number of stones in the eleventh level of the pile. \nWrite a function that\
    \ takes a positive integer n and returns the number of stones in the twelfth level\
    \ of the pile. \nWrite a function that takes a positive integer n and returns\
    \ the number of stones in the thirteenth level of the pile. \nWrite a function\
    \ that takes a positive integer n and returns the number of stones in the fourteenth\
    \ level of the pile. \nWrite a function that takes a positive integer n and returns\
    \ the number of stones in the fifteenth level of the pile. \nWrite a function\
    \ that takes a positive integer n and returns the number of stones in the sixteenth\
    \ level of the pile. \nWrite a function that takes a positive integer n and returns\
    \ the number of stones in the seventeenth level of the pile. \nWrite a function\
    \ that takes a positive integer n and returns the number of stones in the eighteenth\
    \ level of the pile. \nWrite a function that takes a positive integer n and returns\
    \ the number of stones in the nineteenth level of the pile. \nWrite a function\
    \ that takes a positive integer n and returns the number of stones in the twentieth\
    \ level of the pile. \nWrite a function that takes a positive integer n and returns\
    \ the number of stones in the twenty-first level of the pile. \nWrite \nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) ==\
    \ [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
    \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdeski2eu.jl:19\nin expression starting at\
    \ /tmp/tmpdeski2eu.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}() \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),\
    \ n%2 == 0 ? n : n+1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes as input a positive integer n and returns the number of ways to make\
    \ a pile of n levels of stones.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpygv5_ow4.jl:22\nin expression starting at\
    \ /tmp/tmpygv5_ow4.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1 \n       \
    \ return [1]\n    \n    if n % 2 == 1 \n        return make_a_pile(n / 2) + [n\
    \ / 2]\n    \n    return make_a_pile(n / 2) + [n / 2]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmyofwn20.jl:1\nin expression starting at /tmp/tmpmyofwn20.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),\
    \ n%2==0 ? n : n+1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes as input a positive integer n and returns the number of ways to arrange\
    \ n stones in a pile.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgka7aeqq.jl:22\nin expression starting at\
    \ /tmp/tmpgka7aeqq.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n div 2) + [n mod 2] \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer n and returns the number of ways to\
    \ arrange the n stones in a pile of n levels of stones.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp63ov0te.jl:18\nin expression starting at\
    \ /tmp/tmpp63ov0te.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     make_a_pile(n / 2)\n    else \n        make_a_pile(n / 2) + [n mod 2]\n\
    end\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(10)\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the number of stones in a pile.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) ==\
    \ [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
    \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_sv2j4te.jl:20\nin expression starting at\
    \ /tmp/tmp_sv2j4te.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyqipir_r.jl:21\nin expression starting at\
    \ /tmp/tmpyqipir_r.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==1 \n        return\
    \ [1]\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+[odd[n-1]]\n        even=even+[even[n-1]]\n        return odd+even\n\
    end\n</cell>\n<code language=julia-1.5>\nmake_a_pile(3)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes as input a positive integer n and returns the\
    \ number of ways to make a pile of n levels of stones.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvjdxna5o.jl:24\nin expression starting at\
    \ /tmp/tmpvjdxna5o.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd_or_even = if n%2==0 \n            1 \n        else \n        \
    \    0\n        pile = make_a_pile(n-1)\n        push!(pile, odd_or_even)\n  \
    \      return pile\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_8yx2g3.jl:17\nin expression starting at\
    \ /tmp/tmpz_8yx2g3.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    \n    pile = make_a_pile(n-1)\n    \n    if n%2 == 1\n\
    \        push!(pile, (n+1)/2)\n    else\n        push!(pile, (n+1)/2)\n    end\n\
    \    \n    return pile\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjtn6sr_g.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjtn6sr_g.jl:1\n\
    in expression starting at /tmp/tmpjtn6sr_g.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     odds = make_a_pile(n / 2)\n        evens = make_a_pile(n / 2)\n        odds[end]\
    \ = odds[end] + evens[end]\n        evens[end] = evens[end] + odds[end]\n    \
    \    return odds\n    else\n        evens = make_a_pile(n / 2)\n        odds =\
    \ make_a_pile(n / 2)\n        evens[end] = evens[end] + odds[end]\n        odds[end]\
    \ = odds[end] + evens[end]\n        return evens\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpptfzwo4f.jl:29\nin expression starting at\
    \ /tmp/tmpptfzwo4f.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     make_a_pile(n / 2)\n    else\n        make_a_pile(n / 2) + [n mod 2]\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphe8mybqp.jl:21\nin expression starting at\
    \ /tmp/tmphe8mybqp.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd_n = n%2\n        even_n = n//2\n        pile = make_a_pile(odd_n)\
    \ + make_a_pile(even_n)\n        if odd_n==1 \n            return pile\n     \
    \   else \n            return pile+Vector{Int64}(odd_n)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp498iccc_.jl:17\nin expression starting at\
    \ /tmp/tmp498iccc_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    \n    pile = make_a_pile(n / 2)\n    pile = pile\
    \ + [n mod 2]\n    \n    return pile\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp9ixco5j.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp9ixco5j.jl:1\n\
    in expression starting at /tmp/tmpp9ixco5j.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}()\n    else\n        make_a_pile(n / 2) + [n % 2 == 0 ? n : n\
    \ % 2 == 1 ? n + 1 : n + 2]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt1_zlz55.jl:21\nin expression starting at\
    \ /tmp/tmpt1_zlz55.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2==0 ?\
    \ n+1 : n-1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a positive integer n and returns the number of ways to make a pile of\
    \ n levels of stones.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6yyyaaoe.jl:22\nin expression starting at\
    \ /tmp/tmp6yyyaaoe.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        return odd\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx7q5jl91.jl:17\nin expression starting at\
    \ /tmp/tmpx7q5jl91.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==1 \n        return\
    \ [1]\n    else \n        odd::Int64 = if n%2==0 then n/2 else n-1\n        even::Int64\
    \ = if n%2==1 then n/2 else n-1\n        pile = make_a_pile(odd)\n        push!(pile,\
    \ even)\n        return pile\nend\n</cell>\n<code language=julia-1.0>\nmake_a_pile(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to arrange the n stones in a pile of n levels.\
    \ \nFor example, for n = 4, there are four ways to arrange the 4 stones in a pile:\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"n\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd9nmhvvp.jl:18\nin expression starting at /tmp/tmpd9nmhvvp.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes as input a positive integer n and returns the number of\
    \ ways to make n piles of stones.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4,\
    \ 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpader7tvi.jl:21\nin expression starting at\
    \ /tmp/tmpader7tvi.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     odds = make_a_pile(n / 2)\n        evens = make_a_pile(n / 2)\n        odds[end]\
    \ = odds[end] + evens[end]\n        return odds\n    else\n        evens = make_a_pile(n\
    \ / 2)\n        odds = make_a_pile(n / 2)\n        evens[end] = evens[end] + odds[end]\n\
    \        return evens\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes in a positive integer n and returns the number of ways to arrange\
    \ the n stones in a pile.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkdvhdr4y.jl:27\nin expression starting at\
    \ /tmp/tmpkdvhdr4y.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     make_a_pile(n/2)\n    else \n        make_a_pile(n/2) + [(n+1)/2]\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptldmvaue.jl:20\nin expression starting at\
    \ /tmp/tmptldmvaue.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        return odd\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx7q5jl91.jl:17\nin expression starting at\
    \ /tmp/tmpx7q5jl91.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        odd=odd[end-1]\n        even=even[end-1]\n        return odd+even\nend\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4lmo33ft.jl:17\nin expression starting at\
    \ /tmp/tmp4lmo33ft.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ div 2), n mod 2) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a positive integer n and returns the number of levels of stones needed\
    \ to make n stones.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_7_aakh3.jl:19\nin expression starting at\
    \ /tmp/tmp_7_aakh3.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==1 \n        return\
    \ [1]\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+odd\n        even=even+even\n        odd=odd+odd\n        even=even+even\n\
    \        return odd+even\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq5x4u2_l.jl:26\nin expression starting at\
    \ /tmp/tmpq5x4u2_l.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\n\
    \    elseif n==1 \n        Vector{Int64}(1)\n    elseif n==2 \n        Vector{Int64}(1,\
    \ 2)\n    elseif n==3 \n        Vector{Int64}(1, 3)\n    elseif n==4 \n      \
    \  Vector{Int64}(2, 3)\n    elseif n==5 \n        Vector{Int64}(2, 4)\n    elseif\
    \ n==6 \n        Vector{Int64}(3, 4)\n    elseif n==7 \n        Vector{Int64}(3,\
    \ 5)\n    elseif n==8 \n        Vector{Int64}(4, 5)\n    elseif n==9 \n      \
    \  Vector{Int64}(4, 6)\n    elseif n==10 \n        Vector{Int64}(6, 6)\n    elseif\
    \ n==11 \n        Vector{Int64}(6, 7)\n    elseif n==12 \n        Vector{Int64}(7,\
    \ 7)\n    elseif n==13 \n        Vector{Int64}(7, 8)\n    elseif n==14 \n    \
    \    Vector{Int64}(8, 8)\n    elseif n==15 \n        Vector{Int64}(8, 9)\n   \
    \ elseif n==16 \n        Vector{Int64}(9, 9)\n    elseif n==17 \n        Vector{Int64}(9,\
    \ 10)\n    elseif n==18 \n        Vector{Int64}(10, 10)\n    elseif n==19 \n \
    \       Vector{Int64}(10, 11)\n    elseif n==20 \n        Vector{Int64}(11, 11)\n\
    \    elseif n==21 \n        Vector{Int64}(11, 12)\n    elseif n==22 \n       \
    \ Vector{Int64}(12, 12)\n    elseif n==23 \n        Vector{Int64}(12, 13)\n  \
    \  elseif n==24 \n        Vector{Int64}(13, 13)\n    elseif n==25 \n        Vector{Int64}(13,\
    \ 14)\n    elseif n==26 \n        Vector{Int64}(14, 14)\n    elseif n==27 \n \
    \       Vector{Int64}(14, 15)\n    elseif n==28 \n        Vector{Int64}(15, 15)\n\
    \    elseif n==29 \n        Vector{Int64}(15, 16)\n    elseif n==30 \n       \
    \ Vector{Int64}(16, 16)\n    elseif n==31 \n        Vector{Int64}(16, 17)\n  \
    \  elseif n==32 \n        Vector{Int64}(17, 17)\n    elseif n==33 \n        Vector{Int64}(17,\
    \ 18)\n    elseif n==34 \nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2rbmrwr0.jl:1\nin expression starting at /tmp/tmp2rbmrwr0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}()\n    else\n        make_a_pile(n - 1) \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an integer n and returns the number\
    \ of ways to arrange n stones in a pile.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt_1scqyf.jl:21\nin expression starting at\
    \ /tmp/tmpt_1scqyf.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     make_a_pile(n/2)\n    else \n        make_a_pile(n/2) + make_a_pile(n/2+1)\
    \ \nend\n</code>\n<|/ a tags=recursion,julia |>\n<| a tags=recursion,julia |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp70fizpoc.jl:20\nin expression starting at\
    \ /tmp/tmp70fizpoc.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n % 2 == 0 ? 1 : 2) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of stones in a pile of n levels given an input of n\
    \ as an integer.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t\
    @test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptemubwkk.jl:22\nin expression starting at\
    \ /tmp/tmptemubwkk.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),n%2==0\
    \ ? n+1 : n) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes as input a positive integer n and returns the number of ways to make a\
    \ pile of n levels of stones.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqsibb9z3.jl:22\nin expression starting at\
    \ /tmp/tmpqsibb9z3.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 1 \n   \
    \     odds = make_a_pile(n / 2)\n        evens = make_a_pile(n / 2)\n        odds[end]\
    \ = odds[end] + evens[end]\n        evens[end] = evens[end] - odds[end]\n    \
    \    return odds + evens\n    else\n        odds = make_a_pile(n / 2)\n      \
    \  evens = make_a_pile(n / 2)\n        odds[end] = odds[end] + evens[end]\n  \
    \      evens[end] = evens[end] - odds[end]\n        return odds\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcp10dbki.jl:29\nin expression starting at\
    \ /tmp/tmpcp10dbki.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}() \n    else \n        pile = make_a_pile(n-1) \n        push!(pile,\
    \ n%2) \n        return pile \nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ make_a_pile(3) == [3, 5, 7]\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns a vector with n elements, where each element is the sum of the elements\
    \ at each level of the pile. For example, if the pile has 3 levels, then the vector\
    \ returned should have 6 elements.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2cmr1fm5.jl:22\nin expression starting at\
    \ /tmp/tmp2cmr1fm5.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     odds = make_a_pile(n / 2)\n        evens = make_a_pile(n / 2)\n        odds[end]\
    \ = odds[end] + evens[end]\n        return odds\n    else \n        evens = make_a_pile(n\
    \ / 2)\n        odds = make_a_pile(n / 2)\n        evens[end] = evens[end] + odds[end]\n\
    \        return evens\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a positive integer n and returns the number of ways to arrange the n stones\
    \ in a pile of n levels. \nFor example, given n = 4, the function should return\
    \ [1, 1, 2, 2, 3, 3].\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuh1_6tpx.jl:26\nin expression starting at\
    \ /tmp/tmpuh1_6tpx.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n % 2 == 0 ? n : n + 1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer n and returns the number of ways to arrange\
    \ the n stones in a pile.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmparu8acc0.jl:22\nin expression starting at\
    \ /tmp/tmparu8acc0.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    \n    pile = make_a_pile(n / 2)\n    pile = pile\
    \ + [n mod 2]\n    \n    return pile\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp9ixco5j.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp9ixco5j.jl:1\n\
    in expression starting at /tmp/tmpp9ixco5j.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ mod 2), n div 2) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a positive integer n and returns the number of ways to make a pile\
    \ of n levels of stones.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ofc0m1k.jl:19\nin expression starting at\
    \ /tmp/tmp4ofc0m1k.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\n\
    \    elseif n==1 \n        Vector{Int64}(1)\n    elseif n==2 \n        Vector{Int64}(1,2)\n\
    \    elseif n==3 \n        Vector{Int64}(1,3,5)\n    elseif n==4 \n        Vector{Int64}(1,3,5,7)\n\
    \    elseif n==5 \n        Vector{Int64}(1,3,5,7,9)\n    elseif n==6 \n      \
    \  Vector{Int64}(1,3,5,7,9,11)\n    elseif n==7 \n        Vector{Int64}(1,3,5,7,9,11,13)\n\
    \    elseif n==8 \n        Vector{Int64}(1,3,5,7,9,11,13,15)\n    elseif n==9\
    \ \n        Vector{Int64}(1,3,5,7,9,11,13,15,17)\n    elseif n==10 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19)\n\
    \    elseif n==11 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21)\n    elseif\
    \ n==12 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23)\n    elseif n==13\
    \ \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25)\n    elseif n==14\
    \ \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27)\n    elseif n==15\
    \ \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29)\n    elseif\
    \ n==16 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31)\n\
    \    elseif n==17 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33)\n\
    \    elseif n==18 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35)\n\
    \    elseif n==19 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37)\n\
    \    elseif n==20 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39)\n\
    \    elseif n==21 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpog6c1n9c.jl:61\nin expression starting at\
    \ /tmp/tmpog6c1n9c.jl:61\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n % 2 == 0 ? n : n - 1) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpboc1a_tt.jl:22\nin expression starting at\
    \ /tmp/tmpboc1a_tt.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    else if n % 2 == 1\n        return make_a_pile(n\
    \ / 2) + [n / 2]\n    else\n        return make_a_pile(n / 2) + [n / 2]\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp09p0bdez.jl:17\nin expression starting at\
    \ /tmp/tmp09p0bdez.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),n%2==0?n-1:n+1)\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to make a pile of n levels of stones.\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaaqrd185.jl:19\nin expression starting at\
    \ /tmp/tmpaaqrd185.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2 ==\
    \ 0 ? n : n+1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes an integer n and returns the number of ways to arrange the n stones in\
    \ a pile.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt30zc5y9.jl:22\nin expression starting at\
    \ /tmp/tmpt30zc5y9.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        odd=odd+odd\n        return odd\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvth7h2f_.jl:17\nin expression starting at\
    \ /tmp/tmpvth7h2f_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     make_a_pile(n/2)\n    else\n        make_a_pile(n/2) + make_a_pile(n/2 +\
    \ 1)\n    end\nend\n</cell>\n<code language=julia-1.0>\nmake_a_pile(4)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer n and returns the number\
    \ of ways to arrange the n stones in a pile.\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyf8ncff8.jl:21\nin expression starting at\
    \ /tmp/tmpyf8ncff8.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     odds = n / 2\n        evens = n - odds\n        pile = Vector{Int64}(undef,\
    \ odds + evens)\n        pile[1::2] = odds\n        pile[2::2] = evens\n     \
    \   return pile\n    else\n        odds = n / 2\n        evens = n - odds\n  \
    \      pile = Vector{Int64}(undef, odds + evens)\n        pile[1::2] = odds\n\
    \        pile[2::2] = evens\n        return pile\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpj3npq8qa.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpj3npq8qa.jl:36\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching Vector{Int64}(::UndefInitializer,\
    \ ::Float64)\n  Closest candidates are:\n    Array{T, N}(!Matched::Nothing, ::Any...)\
    \ where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/baseext.jl:42\n\
    \    Array{T, N}(!Matched::Missing, ::Any...) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/baseext.jl:43\n\
    \    Vector{T}(::UndefInitializer, !Matched::Int64) where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:457\n\
    \    ...\n  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpj3npq8qa.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj3npq8qa.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj3npq8qa.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpj3npq8qa.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching Vector{Int64}(::UndefInitializer,\
    \ ::Float64)\n  Closest candidates are:\n    Array{T, N}(!Matched::Nothing, ::Any...)\
    \ where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/baseext.jl:42\n\
    \    Array{T, N}(!Matched::Missing, ::Any...) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/baseext.jl:43\n\
    \    Vector{T}(::UndefInitializer, !Matched::Int64) where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:457\n\
    \    ...\n  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpj3npq8qa.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj3npq8qa.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj3npq8qa.jl:35\ntest set:\
    \ Error During Tes"
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ return Vector{Int64}()\n    else if n % 2 == 0 \n        pile = make_a_pile(n\
    \ / 2)\n        push!(pile, n / 2)\n        return pile\n    else \n        pile\
    \ = make_a_pile(n / 2)\n        push!(pile, n / 2)\n        push!(pile, n / 2)\n\
    \        return pile\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbh94pou8.jl:17\nin expression starting at\
    \ /tmp/tmpbh94pou8.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}()\n    else\n        make_a_pile(n - 1) |> push!(make_a_pile(n\
    \ % 2 == 0 ? n : n / 2))\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a positive integer n and returns the number of levels of stones needed\
    \ to make a pile of n stones.\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnbxu9c05.jl:21\nin expression starting at\
    \ /tmp/tmpnbxu9c05.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd::Int64 = if n%2==1 \n            n \n        else \n         \
    \   n \n        even::Int64 = if n%2==0 \n            n \n        else \n    \
    \        n \n        pile = make_a_pile(odd) + make_a_pile(even)\n        return\
    \ pile\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcevywuby.jl:17\nin expression starting at\
    \ /tmp/tmpcevywuby.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n % 2 == 0 ? 1 : 2) \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpyymk8c7o.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpyymk8c7o.jl:27\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpyymk8c7o.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpyymk8c7o.jl:19\n\
    \   [2] make_a_pile(n::Int64) (repeats 2 times)\n     @ Main /tmp/tmpyymk8c7o.jl:18\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyymk8c7o.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyymk8c7o.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpyymk8c7o.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpyymk8c7o.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpyymk8c7o.jl:19\n\
    \   [2] make_a_pile(n::Int64) (repeats 3 times)\n     @ Main /tmp/tmpyymk8c7o.jl:18\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyymk8c7o.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyymk8c7o.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpyymk8c7o.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(5) == [5, 7, 9, 11, 13]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpyymk8c7o.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpyymk8c7o.jl:19\n\
    \   [2] make_a_pile(n::Int64) (repeats 4 times)\n     @ Main /tmp/tmpyymk8c7o.jl:18\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Te"
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n mod 2) \n        push!(make_a_pile(n / 2), n mod 2) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time make_a_pile(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer n and returns the number of\
    \ ways to arrange the n stones in a pile.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptwoenx4t.jl:19\nin expression starting at\
    \ /tmp/tmptwoenx4t.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        Vector{Int64}()\n\
    \    elseif n==1 \n        Vector{Int64}(1)\n    elseif n==2 \n        Vector{Int64}(1,\
    \ 2)\n    elseif n==3 \n        Vector{Int64}(1, 3, 5, 7)\n    elseif n==4 \n\
    \        Vector{Int64}(1, 4, 6, 8)\n    elseif n==5 \n        Vector{Int64}(1,\
    \ 5, 10, 15)\n    elseif n==6 \n        Vector{Int64}(1, 6, 15, 20)\n    elseif\
    \ n==7 \n        Vector{Int64}(1, 7, 21, 35)\n    elseif n==8 \n        Vector{Int64}(1,\
    \ 8, 36, 70)\n    elseif n==9 \n        Vector{Int64}(1, 9, 105, 210)\n    elseif\
    \ n==10 \n        Vector{Int64}(1, 10, 220, 400)\n    elseif n==11 \n        Vector{Int64}(1,\
    \ 11, 401, 800)\n    elseif n==12 \n        Vector{Int64}(1, 12, 801, 1600)\n\
    \    elseif n==13 \n        Vector{Int64}(1, 13, 1601, 3200) \n    elseif n==14\
    \ \n        Vector{Int64}(1, 14, 3201, 6400)\n    elseif n==15 \n        Vector{Int64}(1,\
    \ 15, 6401, 12800)\n    elseif n==16 \n        Vector{Int64}(1, 16, 12801, 25600)\n\
    \    elseif n==17 \n        Vector{Int64}(1, 17, 25601, 51200)\n    elseif n==18\
    \ \n        Vector{Int64}(1, 18, 51211, 102400)\n    elseif n==19 \n        Vector{Int64}(1,\
    \ 19, 102501, 204800)\n    elseif n==20 \n        Vector{Int64}(1, 20, 204111,\
    \ 409600)\n    elseif n==21 \n        Vector{Int64}(1, 21, 405011, 819200)\n \
    \   elseif n==22 \n        Vector{Int64}(1, 22, 819011, 1638400)\n    elseif n==23\
    \ \n        Vector{Int64}(1, 23, 1638011, 3276800)\n    elseif n==24 \n      \
    \  Vector{Int64}(1, 24, 3277011, 6553600)\n    elseif n==25 \n        Vector{Int64}(1,\
    \ 25, 6553601, 13107200)\n    elseif n==26 \n        Vector{Int64}(1, 26, 13107211,\
    \ 26214400)\n    elseif n==27 \n        Vector{Int\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or } in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps5war_3_.jl:71\nin expression starting at\
    \ /tmp/tmps5war_3_.jl:71\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n div 2) + [n mod 2]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(3) == [3, 5, 7]\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to make n piles.\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqgsl0k_6.jl:18\nin expression starting at\
    \ /tmp/tmpqgsl0k_6.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd = n%2\n        even = n/2\n        pile = make_a_pile(odd)\n \
    \       push!(pile, even)\n        return pile\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa0firtsg.jl:17\nin expression starting at\
    \ /tmp/tmpa0firtsg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0 \n       \
    \ Vector{Int64}()\n    else\n        make_a_pile(n - 1) + (n % 2 == 0 ? 1 : 0)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to arrange the n stones in a pile.\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgbexn__9.jl:21\nin expression starting at\
    \ /tmp/tmpgbexn__9.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     make_a_pile(n / 2)\n    else\n        make_a_pile(n / 2) + [n mod 2]\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphe8mybqp.jl:21\nin expression starting at\
    \ /tmp/tmphe8mybqp.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n   \
    \     odds = n\n        evens = n - odds\n    else \n        odds = n - 1\n  \
    \      evens = n + 1\n    return Vector{Int64}(undef, evens, odds)\nend\n</cell>\n\
    <code language=julia-1.0>\nmake_a_pile(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called make_a_pile_from_list that takes as input a list of stones\
    \ and returns the same pile. \nThe function should return a vector of length equal\
    \ to the length of the input list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe7k0r1l0.jl:23\nin expression starting at\
    \ /tmp/tmpe7k0r1l0.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a vector, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n==1 \n        return\
    \ [1]\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        odd=odd[end-1:end]\n        even=even[end-1:end]\n\
    \        return odd+even\n    end\nend\n</cell>\n<code language=julia-1.3>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) ==\
    \ [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
    \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbdwn8hvp.jl:26\nin expression starting at\
    \ /tmp/tmpbdwn8hvp.jl:26\n"
  stdout: ''
