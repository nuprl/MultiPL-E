name: HumanEval_62_derivative
language: jl
prompt: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x\
  \ + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
  \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
  \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
  \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
  \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1])\
  \ == Vector{Int64}([]))\nend\n"
completions: ["    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend", "   \
    \ derivative = zeros(length(xs))\n    derivative[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        derivative[i] = xs[i] - derivative[i-1]\n    end\n    return derivative\n\
    end\n</cell>\n<text>\nLet's test the function by evaluating it on a few examples:",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the integral of a polynomial using trapezoidal\
    \ rule.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the derivative of a polynomial given\
    \ its coefficients.", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n    end\n   \
    \ return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n \
    \   for i in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n    end\n  \
    \  return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(length(xs)) \n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes in a list of numbers and returns the sum of the squares of the numbers.\
    \ For example, [1, 2, 3] returns $1 + 2 + 3 = 6$.", "    \n    derivative = zeros(length(xs))\
    \ \n    \n    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n \
    \   \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\
    \ \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ * xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.4>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the derivative of a polynomial given its coefficients.", "    deriv\
    \ = zeros(length(xs)) \n    deriv[1] = xs[1]\n    deriv[2] = xs[2]\n    for i\
    \ = 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n   \
    \ return deriv\nend\n</cell>\n<code language=julia-1.3>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(length(xs)) \n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ * xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise: Write a function that\
    \ calculates the derivative of a polynomial using Newton's method.", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n     \
    \   deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n<code\
    \ language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial using Horner's method.", "    deriv = zeros(length(xs))\
    \ \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ computes the derivative of a polynomial given its coefficients.", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n     \
    \   deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a polynomial and returns the derivative of\
    \ the polynomial in reverse order. For example, if the input was [1, 4, 9, 16,\
    \ 25], the output should be [25, 16, 9, 4, 1]", "    deriv = xs[1]\n    for x\
    \ in xs[2:end]\n        deriv = deriv * x + xs[1]\n    end\n    return deriv\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise\n\
    Write a function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers in the list. For example, sum([1, 2, 3, 4]) should return 10.\
    \ Make sure you use recursion to solve this problem.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the derivative\
    \ of a polynomial with coefficients xs.\nThe function should take an argument\
    \ xs of type Vector{Int64}.\nThe function should return an argument of type Vector{Int64}.\n\
    The function should return an argument of type Vector{Int64}.\nThe function should\
    \ return an argument of type Vector{Int64}.\nThe function should return an argument\
    \ of type Vector{Int64}.\nThe function should return an argument of type Vector{Int64}.\n\
    The function should return an argument of type Vector{Int64}.\nThe function should\
    \ return an argument of type Vector{Int64}.\nThe function should return an argument\
    \ of type Vector{Int64}.\nThe function should return an argument of type Vector{Int64}.\n\
    The function should return an argument of type Vector{Int64}.\nThe function should\
    \ return an argument of type Vector{Int64}.\nThe function should return an argument\
    \ of type Vector{Int64}.\nThe function should return an argument of type Vector{Int64}.\n\
    The function should return an argument of type Vector{Int64}.\nThe function should\
    \ return an argument of type Vector{Int64}.\nThe function should return an argument\
    \ of type Vector{Int64}.\nThe function should return an argument of type Vector{Int64}.\n\
    The function should return an argument of type Vector{Int64}.\nThe function should\
    \ return an argument of type Vector{Int64}.\nThe function should return an argument\
    \ of type Vector{Int64}.\nThe function should return an argument of type Vector{Int64}.\n\
    The function should return an argument of type Vector{Int64}.\nThe function should\
    \ return an argument of type Vector{Int64}.\nThe function should return an argument\
    \ of type Vector{Int64}.\nThe function should return an argument of type Vector{Int64}.\n\
    The function should return an argument of type Vector{Int64}.\nThe function should\
    \ return an argument of type Vector{Int64}.\nThe function should return an argument\
    \ of type Vector{Int64}.\nThe function should return an argument of type Vector{Int64}.\n\
    The function should return an argument of type Vector{Int64}.\nThe function should\
    \ return an argument of type Vector{Int64}.\n", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.3>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial using Horner's method.", "    deriv = zeros(length(xs))\
    \ \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend", "    deriv = zeros(Int, length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes in a polynomial and returns the derivative of the polynomial in the same\
    \ form as in Exercise 1.", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n\
    \    for i = 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n    end\n  \
    \  return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise\nWrite a function that calculates derivative of polynomial in\
    \ one variable at a time.", "    deriv = xs[1]\n    for x in xs\n        deriv\
    \ = deriv * x + xs[1]\n    end\n    return deriv\nend", "    deriv = zeros(length(xs))\
    \ \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the derivative of a polynomial with n terms.\nThe function should take\
    \ in an array of integers representing the coefficients of the polynomial.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return an array of integers representing the derivative.\nThe\
    \ function should return ", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n    end\n   \
    \ return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise: Write a function that calculates the derivative of a polynomial\
    \ using Newton's method.", "    \n    derivative = zeros(length(xs))\n    \n \
    \   for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return\
    \ derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first derivative of a polynomial\
    \ given its coefficients.", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n    end\n   \
    \ return deriv\nend\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs)-1)\n\
    \    for i = 1:length(xs)-1\n        deriv[i] = xs[i+1] - xs[i] * xs[i+1]\n  \
    \  end\n    return deriv\nend", "    deriv = xs[1]\n    for x in xs[2:end]\n \
    \       deriv = deriv * x + xs[1]\n    end\n    return deriv\nend", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n     \
    \   deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend", "    \n  \
    \  derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n        derivative[i]\
    \ = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in two vectors\
    \ and returns the dot product of the two vectors.\nThe dot product is defined\
    \ as:\n$$\n\\begin{align}\n\\text{dot}(X, Y) &= \\sum{x_i \\in X} x_iy_i \\\n\
    &= \\sum{x_i \\in X} x_iy_i \\\n&= \\sum{x_i \\in X} (x_i y_i)\n\\end{align}\n\
    $$\nWrite a function that takes in two vectors and returns the cross product of\
    \ the two vectors.\nThe cross product is defined as:\n$$\n\\begin{align}\n\\text{cross}(X,\
    \ Y) &= \\sum{x_i \\in X} y_ix_i \\\n&= \\sum{x_i \\in X} y_ix_i \\\n&= \\sum{x_i\
    \ \\in X} y_i (x_i x_i)\n\\end{align}\n$$\nWrite a function that takes in two\
    \ vectors and returns the inner product of the two vectors.\nThe inner product\
    \ is defined as:\n$$\n\\begin{align}\n\\text{inner}(X, Y) &= \\sum{x_i \\in X}\
    \ x_iy_i \\\n&= \\sum{x_i \\in X} x_iy_i \\\n&= \\sum{x_i \\in X} x_iy_i \\\n\
    &= \\sum{x_i \\in X} x_iy_i \\\n&= \\sum{x_i \\in X} (x_i y_i)\n\\end{align}\n\
    $$", "    \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n\
    \    \n    for i in 2:length(xs)\n        derivative[i] = xs[i] - derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ computes the derivative of a polynomial using its coefficients.", "    derivative\
    \ = zeros(length(xs)) \n    derivative[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        derivative[i] = xs[i] * derivative[i-1]\n    end\n    return derivative\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements in the vector. For example, sum([1, 2,\
    \ 3]) should return 10.", "    deriv = xs[1]\n    for i in 2:length(xs)\n    \
    \    deriv = deriv * x + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial with given coefficients.", "    \n    derivative\
    \ = zeros(length(xs)) \n    \n    for i = 1:length(xs)\n        derivative[i]\
    \ = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ calculates the derivative of a polynomial using finite differences.", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n     \
    \   deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend", " \
    \   deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial with coefficients\
    \ xs. Use a for loop to iterate through the polynomial. Remember that in Julia,\
    \ for loops use colons, not semicolons.", "    \n    derivative = zeros(length(xs)-1)\n\
    \    for i = 1:length(xs)-1\n        derivative[i] = xs[i+1] - xs[i] * xs[i+1]\n\
    \    end\n    return derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ derivative of a polynomial with coefficients xs.\nThe function should take in\
    \ a vector of integers and return a vector of integers representing the derivative.\n\
    The function should return an error if the input vector is empty or if the length\
    \ of the input vector is not equal to 3.\nThe function should return an error\
    \ if the input vector contains non-integer values.\nThe function should return\
    \ an error if the input vector contains negative values.\nThe function should\
    \ return an error if the input vector contains values greater than or equal to\
    \ 1.\nThe function should return an error if the input vector contains values\
    \ less than or equal to 0.", "    deriv = xs[1]\n    for x in xs[2:end]\n    \
    \    deriv = deriv * x + xs[1]\n    return deriv\nend", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.3>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in an\
    \ input vector and returns the sum of the squares of the elements of the input\
    \ vector. For example, sum([1, 2, 3]) should return 9. Make sure you use sum()\
    \ and not sum([1, 2, 3]). Do not use sum() on other types like Float64 or Int64.",
  "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that computes\
    \ the derivative of a polynomial with one variable.", "    \n    derivative =\
    \ zeros(length(xs))\n    \n    derivative[1] = xs[1]\n    \n    for i = 2:length(xs)\n\
    \        derivative[i] = xs[i] - xs[i-1]\n    end\n    \n    return derivative\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise\nWrite a function that takes in a list of numbers and returns\
    \ the sum of the squares of the numbers in the list.", "    deriv = zeros(Int,\
    \ length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i]\
    \ = xs[i] * deriv[i - 1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.4>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the derivative of a polynomial with one variable.", "    \n    derivative\
    \ = zeros(length(xs))\n    \n    for i = 1:length(xs)\n        derivative[i] =\
    \ xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ * xs[i]\n    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n \
    \   deriv[1] = xs[1]\n    for i = 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n    end\n   \
    \ return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the derivative of a polynomial\
    \ with given coefficients.\nHint: Use a for loop.", "    deriv = zeros(length(xs))\
    \ \n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.4>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the derivative of a polynomial given its coefficients.", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n      \
    \  deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial given its coefficients.",
  "    deriv = zeros(Int, length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial given its coefficients.\n\
    The function should take in a vector of coefficients and return the corresponding\
    \ vector of derivatives.\nThe function should return an empty vector if the input\
    \ vector is empty.\nThe function should raise an error if the input vector has\
    \ length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the input vector\
    \ has length other than 2.\nThe function should raise an error if the ", "   \
    \ \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n     \
    \   derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ * xs[i]\n    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n \
    \   deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the derivative of a polynomial given its coefficients.", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n     \
    \   deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend", "    deriv =\
    \ zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n       \
    \ deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>", "    \n    derivative\
    \ = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n    \n    for i = 2:length(xs)\n\
    \        derivative[i] = xs[i] - xs[i-1]\n    end\n    \n    return derivative\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\n\
    Write a function that calculates the integral of a polynomial using trapezoidal\
    \ rule.", "    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the derivative of a polynomial given its coefficients.", "    derivative = zeros(length(xs))\n\
    \    derivative[1] = xs[1]\n    for i in 2:length(xs)\n        derivative[i] =\
    \ xs[i] - xs[i-1]\n    end\n    return derivative\nend", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i = 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.3>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.", "    \n    derivative\
    \ = zeros(length(xs))\n    \n    for i = 1:length(xs)\n        derivative[i] =\
    \ xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes in a list of coefficients and returns the derivative of the polynomial\
    \ using your derivative function", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(length(xs)-1)\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the derivative of a polynomial\
    \ given its coefficients.", "    \n    derivative = zeros(length(xs))\n    \n\
    \    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return\
    \ derivative\nend", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1] \n \
    \   for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n  \
    \  return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise\nWrite a function that calculates the derivative of a polynomial\
    \ given its coefficients.", "    \n    derivative = zeros(length(xs))\n    \n\
    \    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return\
    \ derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n \
    \   deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise\nWrite a function that calculates the derivative of a polynomial\
    \ given its coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] * xs[i]\n    end\n \
    \   return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the derivative of a polynomial\
    \ with coefficients given as a vector. \nThe function should take as input a vector\
    \ of coefficients xs.\nThe function should return the same vector but with the\
    \ derivative of the polynomial as its elements.\nThe function should return an\
    \ error if the input vector is empty or if the length of the vector is not equal\
    \ to the number of coefficients.", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n  \
    \  end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the integral of a polynomial using trapezoidal rule.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i = 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ * xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the squares of the numbers from 1 to n.", "    deriv = zeros(length(xs))\n \
    \   deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise: Write a function that calculates the\
    \ derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the derivative of a polynomial\
    \ using central differences.\nThe function should take as input a vector of coefficients\
    \ and return the vector of derivatives.\nThe function should return an array of\
    \ length equal to the number of coefficients.\nThe first element of the array\
    \ should be the derivative of the polynomial evaluated at 0.\nThe second element\
    \ of the array should be the derivative of the polynomial evaluated at 1.\nThe\
    \ third element of the array should be the derivative of the polynomial evaluated\
    \ at 2.\nThe fourth element of the array should be the derivative of the polynomial\
    \ evaluated at 3.\nThe fifth element of the array should be the derivative of\
    \ the polynomial evaluated at 4.\nThe sixth element of the array should be the\
    \ derivative of the polynomial evaluated at 5.\nThe seventh element of the array\
    \ should be the derivative of the polynomial evaluated at 6.\nThe eighth element\
    \ of the array should be the derivative of the polynomial evaluated at 7.\nThe\
    \ ninth element of the array should be the derivative of the polynomial evaluated\
    \ at 8.\nThe tenth element of the array should be the derivative of the polynomial\
    \ evaluated at 9.\nThe eleventh element of the array should be the derivative\
    \ of the polynomial evaluated at 10.\nThe twelfth element of the array should\
    \ be the derivative of the polynomial evaluated at 11.\nThe thirteenth element\
    \ of the array should be the derivative of the polynomial evaluated at 12.\nThe\
    \ fourteenth element of the array should be the derivative of the polynomial evaluated\
    \ at 13.\nThe fifteenth element of the array should be the derivative of the polynomial\
    \ evaluated at 14.\nThe sixteenth element of the array should be the derivative\
    \ of the polynomial evaluated at 15.\nThe seventeenth element of the array should\
    \ be the derivative of the polynomial evaluated at 16.\nThe eighteenth element\
    \ of the array should be the derivative of the polynomial evaluated at 17.\nThe\
    \ nineteenth element of the array should be the derivative of the polynomial evaluated\
    \ at 18.\nThe twenty-first element of the array should be the derivative of the\
    \ polynomial evaluated at 19.\nThe twenty-second element of the array should be\
    \ the derivative of the polynomial evaluated at 20.\nThe twenty-third element\
    \ of the array should be the derivative of the polynomial evaluated at 21.\nThe\
    \ twenty-fourth element of the array should be the derivative of the polynomial\
    \ evaluated at 22.\nThe twenty-fifth element of the array should be the derivative\
    \ of the polynomial evaluated at 23.\nThe twenty-sixth element of the array should\
    \ be the derivative ", "    \n    derivative = zeros(length(xs))\n    \n    for\
    \ i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return derivative\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>",
  "    \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n   \
    \ \n    for i = 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the integral\
    \ of a function from 0 to infinity using trapezoidal rule.", "    deriv = zeros(length(xs))\
    \ \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the derivative of a polynomial given its coefficients.", "    deriv\
    \ = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n    \
    \    deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n     \
    \   deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.", "    \n    derivative = zeros(length(xs))\n    \n    for i =\
    \ 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return derivative\n\
    end", "    derivative = zeros(length(xs)) \n    derivative[1] = xs[1]\n    for\
    \ i in 2:length(xs)\n        derivative[i] = xs[i] - derivative[i-1]\n    end\n\
    \    return derivative\nend\n</cell>\n<code language=julia-1.4>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the derivative of a polynomial\
    \ given its coefficients.", "    \n    # Initialize result vector\n    result\
    \ = zeros(length(xs))\n    \n    # Compute derivative\n    for i = 1:length(xs)\n\
    \        result[i] = xs[i] - xs[i-1]\n    end\n    \n    return result\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the derivative of a polynomial given\
    \ its coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n \
    \   for i in 2:length(xs)\n        deriv[i] = deriv[i-1] * xs[i]\n    end\n  \
    \  return deriv\nend\n</cell>\n<code language=julia-1.3>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a list of\
    \ numbers and returns the sum of the squares of the numbers. \nFor example, sum([1,\
    \ 2, 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of number",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i - 1]\n    end\n    return deriv\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the derivative of a polynomial\
    \ given its coefficients.", "    derivative = zeros(length(xs))\n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    return derivative\nend", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n      \
    \  deriv[i] = xs[i] * deriv[i - 1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    deriv[2]\
    \ = xs[2]\n    for i in 3:length(xs)\n        deriv[i] = xs[i] * deriv[i - 1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.\nThe function should\
    \ take in an array of coefficients and return an array of derivatives.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of ", "    \n    derivative\
    \ = zeros(length(xs))\n    \n    for i = 1:length(xs)\n        derivative[i] =\
    \ xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nFor example, sum([1, 2, 3]) should return 9. \nWrite a function\
    \ that takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nFor example, sum([1, 2, 3]) should return 9. \nWrite a function\
    \ that takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nFor example, sum([1, 2, 3]) should return 9. \nWrite a function\
    \ that takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nFor example, sum([1, 2, 3]) should return 9. \nWrite a function\
    \ that takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nFor example, sum([1, 2, 3]) should return 9. \nWrite a function\
    \ that takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nFor example, sum([1, 2, 3]) should return 9. \nWrite a function\
    \ that takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nFor example, sum([1, 2, 3]) should return 9. \nWrite a function\
    \ that takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nFor example, sum([1, 2, 3]) should return 9. \nWrite a function\
    \ that takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nFor example, sum([1, 2, 3]) should return 9. \nWrite a function\
    \ that takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nFor example, sum([1, 2, 3]) should return 9. \nWrite a function\
    \ that takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nFor example, sum([1, 2, 3]) should return 9. \nWrite a function\
    \ that takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nFor example, sum([1, 2, 3]) should return 9. \nWrite a function\
    \ that takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nFor example, sum([1, 2, 3]) should return 9. \nWrite a function\
    \ that takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nFor example, sum([1, 2, 3]) should return 9. \nWrite a function\
    \ that takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nFor example, sum([1, 2, 3]) should return 9. \nWrite a function\
    \ that takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nFor example, sum([1, 2, 3]) should return 9. \nWrite a function\
    \ that takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nFor example, sum([1, 2, 3]) should return 9. \nWrite a function\
    \ that takes in a list of numbers and returns the ", "    deriv = zeros(length(xs))\
    \ \n    deriv[1] = xs[1] \n    for i in 2:length(xs)\n        deriv[i] = xs[i]\
    \ * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.4>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the derivative of a polynomial with given coefficients.\nHint: Use derivative\
    \ function.", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i\
    \ in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative of\
    \ a polynomial given its coefficients.", "    \n    derivative = zeros(length(xs))\n\
    \    \n    derivative[1] = xs[1]\n    \n    for i = 2:length(xs)\n        derivative[i]\
    \ = xs[i] * derivative[i-1]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for\
    \ i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n\
    \    return deriv\nend", "    \n    derivative = zeros(length(xs)-1)\n    \n \
    \   for i = 1:length(xs)-1\n        derivative[i] = xs[i+1] - xs[i] * xs[i+1]\n\
    \    end\n    \n    return derivative\nend", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ * xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ computes the derivative of a polynomial given its coefficients.", "    \n  \
    \  derivative = zeros(length(xs)) \n    \n    for i = 1:length(xs)\n        derivative[i]\
    \ = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.3>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative\
    \ of a polynomial using Newton's method.", "    deriv = zeros(length(xs))\n  \
    \  deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ calculates the derivative of a polynomial given its coefficients.", "    \n\
    \    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n    \n \
    \   for i = 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n  \
    \  end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ computes the derivative of a polynomial using Horner's method.", "    derivative\
    \ = zeros(length(xs))\n    derivative[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the integral of a function from 0 to infinity. \nThe function should take one\
    \ argument, the function itself. \nThe function should return an integer, the\
    \ integral of the function.\nThe function should work for any function of one\
    \ variable.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i\
    \ in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n  \
    \  return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n \
    \   deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n \
    \   deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise: Write a function that calculates the derivative of a polynomial\
    \ given its coefficients.", "    \n    derivative = zeros(length(xs))\n    \n\
    \    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return\
    \ derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a second function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a third function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a fourth function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a fifth function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a sixth function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. ", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n    end\n   \
    \ return deriv\nend", "    \n    derivative = zeros(length(xs))\n    \n    for\
    \ i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return derivative\n\
    end", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the derivative of a polynomial given\
    \ its coefficients.", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] * xs[i]\n    end\n \
    \   return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the squares of the numbers from 1 to n. \nFor example, sumsq(10) = 55", "  \
    \  \n    # xs is a vector\n    # xs[0] represents the coefficient of x^0\n   \
    \ # xs[1] represents the coefficient of x^1\n    # xs[2] represents the coefficient\
    \ of x^2\n    # ...\n    # xs[n-2] is the coefficient of x^(n-1)\n    # xs[n-1]\
    \ is the coefficient of x^n\n    \n    # initialize a vector to store the derivative\n\
    \    derivative = zeros(length(xs)-1)\n    \n    # loop through each element of\
    \ xs\n    for i in 1:(length(xs)-1)\n        \n        # append the derivative\
    \ of x^i to derivative\n        derivative[i] = xs[i]\n        \n        # loop\
    \ through each element of xs\n        for j in (i+1):(length(xs)-1)\n        \
    \    \n            # append the derivative of x^i to derivative\n            derivative[i]\
    \ += xs[j]*xs[i]\n        end\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for\
    \ i in 2:length(xs)\n        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial using Horner's\
    \ method.", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in\
    \ 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes in a list of numbers and\
    \ returns the sum of the squares of the numbers in the list. For example, [1,\
    \ 2, 3] returns $1 + 2 + 3 = 6$.", "    \n    derivative = zeros(length(xs))\n\
    \    \n    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n\
    \    return derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the derivative of a polynomial\
    \ given its coefficients.", "    \n    derivative = zeros(length(xs)-1)\n    \n\
    \    for i = 1:length(xs)-1\n        derivative[i] = xs[i+1] - xs[i] * xs[i+1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ calculates the derivative of a polynomial given its coefficients.", "    deriv\
    \ = zeros(Int, length(xs))\n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n \
    \       deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial given its coefficients.",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the derivative of a polynomial with\
    \ given coefficients.\nThe function should take in a vector of coefficients and\
    \ return a vector of coefficients.\nThe function should return an error if the\
    \ coefficients are incorrect.\nThe function should return an error if the coefficients\
    \ are of the wrong type.\nThe function should return an error if the coefficients\
    \ are of the wrong length.\nThe function should return an error if the coefficients\
    \ are of the wrong type.\nThe function should return an error if the coefficients\
    \ are of the wrong length.\nThe function should return an error if the coefficients\
    \ are of the wrong type.\nThe function should return an error if the coefficients\
    \ are of the wrong length.\nThe function should return an error if the coefficients\
    \ are of the wrong type.\nThe function should return an error if the coefficients\
    \ are of the wrong length.\nThe function should return an error if the coefficients\
    \ are of the wrong type.\nThe function should return an error if the coefficients\
    \ are of the wrong length.\nThe function should return an error if the coefficients\
    \ are of the wrong type.\nThe function should return an error if the coefficients\
    \ are of the wrong length.\nThe function should return an error if the coefficients\
    \ are of the wrong type.\nThe function should return an error if the coefficients\
    \ are of the wrong length.\nThe function should return an error if the coefficients\
    \ are of the wrong type.\nThe function should return an error if the coefficients\
    \ are of the wrong length.\nThe function should return an error if the coefficients\
    \ are of the wrong type.\nThe function should return an error if the coefficients\
    \ are of the wrong length.\nThe function should return an error if the coefficients\
    \ are of the wrong type.\nThe function should return an error if the coefficients\
    \ are of the wrong length.\nThe function should return an error if the coefficients\
    \ are of the wrong type.\nThe function should return an error if the coefficients\
    \ are of the wrong length.\nThe function should return an error if the coefficients\
    \ are of the wrong type.\nThe function should return an error if the coefficients\
    \ are of the wrong length.\nThe function should return an error if the coefficients\
    \ are of the wrong type.\nThe function should return an error if the coefficients\
    \ are of the wrong length.\nThe function should return an error if the coefficients\
    \ are of the wrong type.\nThe function should return an error if the coefficients\
    \ are of the wrong length.\nThe function should return an error if the coefficients\
    \ are of the wrong type.\nThe function should return an error if the coefficients\
    \ are of the wrong length.\nThe function should return an error if the coefficients\
    \ are of the wrong type.\nThe function should return an error if the coefficients\
    \ are of the wrong length.\nThe function should return an error if the coefficients\
    \ are of the wrong type.\nThe function should return an error if the coefficients\
    \ are of the wrong length.\nThe ", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the derivative of a polynomial\
    \ given its coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n  \
    \  end\n    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1] =\
    \ xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a\
    \ list of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that take", "    \n \
    \   derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n        derivative[i]\
    \ = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ computes the derivative of a polynomial using its coefficients.", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n     \
    \   deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for\
    \ i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial given its coefficients.",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates the derivative of a polynomial using central differences.",
  "    \n    # return empty vector if empty vector\n    if length(xs) == 0\n     \
    \   return Vector{Int64}()\n    end\n    \n    # return derivative of empty vector\
    \ if vector has only 1 element\n    if length(xs) == 1\n        return [1]\n \
    \   end\n    \n    # return derivative of vector with 1 element if vector has\
    \ only 1 element\n    if length(xs) == 1\n        return [1]\n    end\n    \n\
    \    # return derivative of vector with 2 elements if vector has 2 elements\n\
    \    if length(xs) == 2\n        return [xs[1] - xs[0]]\n    end\n    \n    #\
    \ return derivative of vector with 3 elements if vector has 3 elements\n    if\
    \ length(xs) == 3\n        return [xs[1] - xs[0] - xs[2]]\n    end\n    \n   \
    \ # return derivative of vector with 4 elements if vector has 4 elements\n   \
    \ if length(xs) == 4\n        return [xs[1] - xs[0] - xs[2] - xs[3]]\n    end\n\
    \    \n    # return derivative of vector with 5 elements if vector has 5 elements\n\
    \    if length(xs) == 5\n        return [xs[1] - xs[0] - xs[2] - xs[3] - xs[4]]\n\
    \    end\n    \n    # return derivative of vector with 6 elements if vector has\
    \ 6 elements\n    if length(xs) == 6\n        return [xs[1] - xs[0] - xs[2] -\
    \ xs[3] - xs[4] - xs[5]]\n    end\n    \n    # return derivative of vector with\
    \ 7 elements if vector has 7 elements\n    if length(xs) == 7\n        return\
    \ [xs[1] - xs[0] - xs[2] - xs[3] - xs[4] - xs[5] - xs[6]]\n    end\n    \n   \
    \ # return derivative of vector with 8 elements if vector has 8 elements\n   \
    \ if length(xs) == 8\n        return [xs[1] - xs[0] - xs[2] - xs[3] - xs[4] -\
    \ xs[5] - xs[6] - xs[7]]\n    end\n    \n    # return derivative of vector with\
    \ 9 elements if vector has 9 elements\n    if length(xs) == 9\n        return\
    \ [xs[1] - xs[0] - xs[2] - xs[3] - xs[4] - xs[5] - xs[6] - xs[7] - xs[8]]\n  \
    \  end\n    \n    # return derivative of vector with 10 elements if vector has\
    \ 10 elements\n    if length(xs) == 10\n        return [xs[1] - xs[0] - xs[2]\
    \ - xs[3] - xs[4] - xs[5] - xs[6] - xs[7] - xs[8] - xs[9]]\n    end\n    \n  \
    \  # return derivative of vector with 11 element", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ integral of a polynomial from 0 to infinity using trapezoidal rule.", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n     \
    \   deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the derivative of a polynomial given\
    \ its coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n \
    \   for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n   \
    \ end\n    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1] =\
    \ xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n  \
    \  end\n    return deriv\nend", "    derivative = zeros(length(xs))\n    derivative[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        derivative[i] = xs[i] - xs[i-1]\n\
    \    end\n    return derivative\nend\n</cell>\n<code language=julia-1.3>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\nderivative([1, 2, 3])\n</cell>\n\
    <code language=julia-1.3>", "    \n    derivative = zeros(length(xs))\n    \n\
    \    derivative[1] = xs[1]\n    \n    for i = 2:length(xs)\n        derivative[i]\
    \ = xs[i] * derivative[i-1]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.", "    derivative = zeros(length(xs))\n    derivative[1] = xs[1]\n\
    \    for i = 2:length(xs)\n        derivative[i] = xs[i] - derivative[i-1]\n \
    \   end\n    return derivative\nend", "    deriv = zeros(length(xs)) \n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ * xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nderivative", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the derivative of a polynomial\
    \ given its coefficients.", "    deriv = zeros(Int, length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(length(xs)) \n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n  \
    \  end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial using central differences.", "    deriv = zeros(length(xs))\
    \ \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.0>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.0>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise\nWrite a function that calculates the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(length(xs)) \n\
    \    deriv[1] = xs[1] \n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the derivative of a polynomial given its coefficients.", "    \n\
    \    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n        derivative[i]\
    \ = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.0>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the integral of a polynomial function using the trapezoidal rule.\
    \ \nThe function should take as input a vector of coefficients and a starting\
    \ point and return the value of the integral of the polynomial function from that\
    \ starting point.\nThe function should return 0 if the polynomial function does\
    \ not integrate to 0.\nThe function should return Inf if the polynomial function\
    \ does not integrate to Inf.\nThe function should return NaN if the polynomial\
    \ function does not integrate to NaN.\nThe function should return Inf if the polynomial\
    \ function does not integrate to Inf.\nThe function should return NaN if the polynomial\
    \ function does not integrate to NaN.\nThe function should return Inf if the polynomial\
    \ function does not integrate to Inf.\nThe function should return NaN if the polynomial\
    \ function does not integrate to NaN.\nThe function should return Inf if the polynomial\
    \ function does not integrate to Inf.\nThe function should return NaN if the polynomial\
    \ function does not integrate to NaN.\nThe function should return Inf if the polynomial\
    \ function does not integrate to Inf.\nThe function should return NaN if the polynomial\
    \ function does not integrate to NaN.\nThe function should return Inf if the polynomial\
    \ function does not integrate to Inf.\nThe function should return NaN if the polynomial\
    \ function does not integrate to NaN.\nThe function should return Inf if the polynomial\
    \ function does not integrate to Inf.\nThe function should return NaN if the polynomial\
    \ function does not integrate to NaN.\nThe function should return Inf if the polynomial\
    \ function does not integrate to Inf.\nThe function should return NaN if the polynomial\
    \ function does not integrate to NaN.\nThe function should return Inf if the polynomial\
    \ function does not integrate to Inf.\nThe function should return NaN if the polynomial\
    \ function does not integrate to NaN.\nThe function should return Inf if the polynomial\
    \ function does not integrate to Inf.\nThe function should return NaN if the polynomial\
    \ function does not integrate to NaN.\nThe function should return Inf if the polynomial\
    \ function does not integrate to Inf.\nThe function should return NaN if the polynomial\
    \ function does not integrate to NaN.\nThe function should return Inf if the polynomial\
    \ function does not integrate to Inf.\nThe function should return NaN if the polynomial\
    \ function does not integrate to NaN.\nThe function should return Inf if the polynomial\
    \ function does not integrate to Inf.\nThe function should return ", "    deriv\
    \ = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n    \
    \    deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend", " \
    \   deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the derivative of a polynomial given\
    \ its coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n \
    \   for i in 2:length(xs)\n        deriv[i] = deriv[i-1] * xs[i]\n    end\n  \
    \  return deriv\nend", "    \n    derivative = zeros(length(xs)) \n    \n    for\
    \ i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return derivative\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise: Write\
    \ a function that takes in a list of coefficients and returns the derivative of\
    \ the polynomial using your derivative function.", "    derivative = zeros(length(xs))\n\
    \    derivative[1] = xs[1]\n    for i in 2:length(xs)\n        derivative[i] =\
    \ xs[i] * derivative[i-1]\n    end\n    return derivative\nend\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a polynomial and returns the derivative of\
    \ the polynomial in reverse order.", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the roots of a polynomial.\n\
    The roots are the real numbers that multiply the polynomial to the power zero.\n\
    The polynomial is represented as a vector of coefficients.\nThe polynomial is\
    \ represented as a vector of coefficients.\nThe polynomial is represented as a\
    \ vector of coefficients.\nThe polynomial is represented as a vector of coefficients.\n\
    The polynomial is represented as a vector of coefficients.\nThe polynomial is\
    \ represented as a vector of coefficients.\nThe polynomial is represented as a\
    \ vector of coefficients.\nThe polynomial is represented as a vector of coefficients.\n\
    The polynomial is represented as a vector of coefficients.\nThe polynomial is\
    \ represented as a vector of coefficients.\nThe polynomial is represented as a\
    \ vector of coefficients.\nThe polynomial is represented as a vector of coefficients.\n\
    The polynomial is represented as a vector of coefficients.\nThe polynomial is\
    \ represented as a vector of coefficients.\nThe polynomial is represented as a\
    \ vector of coefficients.\nThe polynomial is represented as a vector of coefficients.\n\
    The polynomial is represented as a vector of coefficients.\nThe polynomial is\
    \ represented as a vector of coefficients.\nThe polynomial is represented as a\
    \ vector of coefficients.\nThe polynomial is represented as a vector of coefficients.\n\
    The polynomial is represented as a vector of coefficients.\nThe polynomial is\
    \ represented as a vector of coefficients.\nThe polynomial is represented as a\
    \ vector of coefficients.\nThe polynomial is represented as a vector of coefficients.\n\
    The polynomial is represented as a vector of coefficients.\nThe polynomial is\
    \ represented as a vector of coefficients.\nThe polynomial is represented as a\
    \ vector of coefficients.\nThe polynomial is represented as a vector of coefficients.\n\
    The polynomial is represented as a vector of coefficients.\nThe polynomial is\
    \ represented as a vector of coefficients.\nThe polynomial is represented as a\
    \ vector of coefficients.\nThe polynomial is represented as a vector of coefficients.\n\
    The polynomial is represented as a vector of coefficients.\nThe polynomial is\
    \ represented as a vector of coefficients.\nThe polynomial is represented as a\
    \ vector of coefficients.\nThe polynomial is represented as a vector of coefficients.\n\
    The polynomial is represented as a vector of coefficients.\nThe polynomial is\
    \ represented as a vector of coefficients.\nThe polynomial is represented as a\
    \ vector of coefficients.\nThe polynomial is represented as a vector of coefficients.\n\
    The polynomial is represented as a vector of coefficients.\nThe ", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n     \
    \   deriv[i] = xs[i] * deriv[i - 1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the derivative of a polynomial at any point\
    \ in the polynomial. \nThe function should take in two arguments: the first is\
    \ the polynomial and the second is the point at which to evaluate the derivative.\n\
    The function should return the derivative of the polynomial at the point provided.",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <text>\nNow let's try it out on a few examples:", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns the derivative of a polynomial given its coefficients.", "    deriv\
    \ = zeros(length(xs)-1)\n    for i = 1:length(xs)-1\n        deriv[i] = xs[i+1]\
    \ - xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ computes the derivative of a polynomial given its coefficients.", "    derivative\
    \ = zeros(length(xs)-1)\n    derivative[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        derivative[i] = xs[i] - xs[i-1]\n    end\n    return derivative\nend\n\
    </cell>\n<code language=julia-1.0>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the derivative of a polynomial given\
    \ its coefficients.", "    deriv = zeros(Int, length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n  \
    \  end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise: Write a function that\
    \ calculates the derivative of a polynomial given its coefficients.", "    deriv\
    \ = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n     \
    \   deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers. Use a for loop to do this.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of the elements of a vector.\
    \ For example, sum([1, 2, 3]) should return 12. Make sure you use sum() and not\
    \ sum([1, 2, 3]). Hint: use map()", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n\
    \    end\n    return deriv\nend", "    deriv = xs[1]\n    for x in xs\n      \
    \  deriv = deriv * x + xs[1]\n    end\n    return deriv\nend", "    deriv = zeros(length(xs)-1)\n\
    \    for i = 1:length(xs)-1\n        deriv[i] = xs[i+1] - xs[i] * deriv[i-1]\n\
    \    end\n    return deriv\nend", "    \n    derivative = zeros(length(xs)) \n\
    \    \n    derivative[1] = xs[1]\n    \n    for i in 2:length(xs)\n        derivative[i]\
    \ = xs[i] - xs[i-1]\n    end\n    \n    return derivative\nend\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\
    \ \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.4>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(Int, length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the derivative of a polynomial with one variable at a given index.",
  "    \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n   \
    \ \n    for i = 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n\
    \    end\n    \n    return derivative\nend", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(length(xs)) \n    deriv[1]\
    \ = xs[1]\n    for i = 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n \
    \   end\n    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(length(xs)) \n    deriv[1]\
    \ = xs[1] \n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] * xs[i]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.0>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.0>\nderivative([1, 2, 3])\n</cell>\n\
    <code language=julia-1.0>", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\
    \ \n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n\
    \    return deriv\nend\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the derivative of a polynomial given its coefficients.", "    \n    derivative\
    \ = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n    \n    for i = 2:length(xs)\n\
    \        derivative[i] = xs[i] * derivative[i-1]\n    end\n    \n    return derivative\n\
    end", "    deriv = zeros(Int, length(xs)-1)\n    for i = 1:length(xs)-1\n    \
    \    deriv[i] = xs[i+1] - xs[i] * deriv[i-1]\n    end\n    return deriv\nend",
  "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in two vectors and returns the dot product\
    \ of the two vectors.\nThe dot product of two vectors $\\mathbf{a}$ and $\\mathbf{b}$\
    \ is defined as:\n$$\\mathbf{a} \\cdot \\mathbf{b} = a_1b_1 + a_2b_2 + ... + a_nb_n$$\n\
    Write a function that takes in two vectors and returns the cross product of the\
    \ two vectors.\nThe cross product of two vectors $\\mathbf{a}$ and $\\mathbf{b}$\
    \ is defined as:\n$$\\mathbf{a} \\times \\mathbf{b} = a_1b_2 - a_1b_1 + a_2b_3\
    \ - a_2b_2 + ... + a_nb_nb_n$$\nWrite a function that takes in two vectors and\
    \ returns the norm of the vector\n$$|\\mathbf{a}| = \\sqrt{\\sum_{i=1}^n a_i^2}$$\n\
    Write a function that takes in two vectors and returns the norm of the vector\
    \ squared\n$$|\\mathbf{a}|^2 = \\sum_{i=1}^n a_i^2$$\nWrite a function that takes\
    \ in two vectors and returns the norm of the vector cubed\n$$|\\mathbf{a}|^3 =\
    \ \\sum_{i=1}^n a_i^3$$\nWrite a function that takes in two vectors and returns\
    \ the norm of the vector squared\n$$|\\mathbf{a}|^2 = \\sum_{i=1}^n a_i^2$$\n\
    Write a function that takes in two vectors and returns the norm of the vector\
    \ cubed\n$$|\\mathbf{a}|^3 = \\sum_{i=1}^n a_i^3$$\nWrite a function that takes\
    \ in two vectors and returns the norm of the vector squared\n$$|\\mathbf{a}|^2\
    \ = \\sum_{i=1}^n a_i^2$$\nWrite a function that takes in two vectors and returns\
    \ the norm of the vector cubed\n$$|\\mathbf{a}|^3 = \\sum_{i=1}^n a_i^3$$\nWrite\
    \ a function that takes in two vectors and returns the norm of the vector squared\n\
    $$|\\mathbf{a}|^2 = \\sum_{i=1}^n a_i^2$$\nWrite a function that takes in two\
    \ vectors and returns the norm of the vector cubed\n$$|\\mathbf{a}|^3 = \\sum_{i=1}^n\
    \ a_i^3$$\nWrite ", "    deriv = zeros(Int, length(xs))\n    deriv[1] = xs[1]\n\
    \    for i = 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n    end\n  \
    \  return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the derivative\
    \ of a polynomial with coefficients xs.\nThe function should take in a vector\
    \ of coefficients and return the derivative of the polynomial in the same form.",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.0>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the derivative of a polynomial given\
    \ its coefficients.", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n    end\n   \
    \ return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>", "    derivative = zeros(length(xs))\
    \ \n    derivative[1] = xs[1]\n    for i in 2:length(xs)\n        derivative[i]\
    \ = xs[i] - derivative[i-1]\n    end\n    return derivative\nend\n</cell>\n<code\
    \ language=julia-1.0>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers in the list.", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.4>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that computes the\
    \ derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n \
    \   deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ derivative of a polynomial given its coefficients.\nThe function should take\
    \ in a vector of coefficients and return the derivative of the polynomial in the\
    \ same form.\nThe function should also take in a vector of coefficients and return\
    \ the derivative of the polynomial evaluated at x.\nThe function should also take\
    \ in a vector of coefficients and return the derivative of the polynomial evaluated\
    \ at x.\nThe function should also take in a vector of coefficients and return\
    \ the derivative of the polynomial evaluated at x.\nThe function should also take\
    \ in a vector of coefficients and return the derivative of the polynomial evaluated\
    \ at x.\nThe function should also take in a vector of coefficients and return\
    \ the derivative of the polynomial evaluated at x.\nThe function should also take\
    \ in a vector of coefficients and return the derivative of the polynomial evaluated\
    \ at x.\nThe function should also take in a vector of coefficients and return\
    \ the derivative of the polynomial evaluated at x.\nThe function should also take\
    \ in a vector of coefficients and return the derivative of the polynomial evaluated\
    \ at x.\nThe function should also take in a vector of coefficients and return\
    \ the derivative of the polynomial evaluated at x.\nThe function should also take\
    \ in a vector of coefficients and return the derivative of the polynomial evaluated\
    \ at x.\nThe function should also take in a vector of coefficients and return\
    \ the derivative of the polynomial evaluated at x.\nThe function should also take\
    \ in a vector of coefficients and return the derivative of the polynomial evaluated\
    \ at x.\nThe function should also take in a vector of coefficients and return\
    \ the derivative of the polynomial evaluated at x.\nThe function should also take\
    \ in a vector of coefficients and return the derivative of the polynomial evaluated\
    \ at x.\nThe function should also take in a vector of coefficients and return\
    \ the derivative of the polynomial evaluated at x.\nThe function should also take\
    \ in a vector of coefficients and return the derivative of the polynomial evaluated\
    \ at x.\nThe function should also take in a vector of coefficients and return\
    \ the derivative of the polynomial evaluated at x.\nThe function should also take\
    \ in a vector of coefficients and return the derivative of the polynomial evaluated\
    \ at x.\nThe function should also take in a vector of coefficients and return\
    \ the derivative of the polynomial evaluated at x.\nThe function should also take\
    \ in a vector of coefficients and return the derivative of the polynomial evaluated\
    \ at x.\nThe function should also take in a vector of coefficients and return\
    \ the derivative of the polynomial evaluated at x.\nThe function should also take\
    \ in a vector of coefficients and return the derivative of the polynomial evaluated\
    \ at x.\nThe function should also take in a vector of coefficients and return\
    \ the derivative of the polynomial evaluated at x.\nThe function should also take\
    \ in a vector of coefficients and return the derivative of the polynomial evaluated\
    \ at x.\nThe function should also take in a vector of coefficients and return\
    \ the derivative of the polynomial evaluated ", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n \
    \   deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.3>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ calculates the derivative of a polynomial given its coefficients.", "    \n\
    \    # Initialize a vector to store the derivative\n    derivative = zeros(length(xs))\n\
    \    \n    # Compute the first derivative\n    derivative[1] = xs[1]\n    \n \
    \   # Compute the rest of the derivatives\n    for i = 2:length(xs)\n        derivative[i]\
    \ = xs[i] * derivative[i-1]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\n\
    Write a function that computes the derivative of a polynomial given its coefficients.",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the derivative of a polynomial with\
    \ given coefficients.", "    \n    derivative = zeros(length(xs)) \n    \n   \
    \ for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return\
    \ derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers in the list.", "    \n   \
    \ deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the derivative of a polynomial with coefficients $x$ and $x^3$. Test your function\
    \ with $x = [1, 2, 3, 4, 5]$ and $x^3 = [1, 2, 3, 4, 5]$.", "    deriv = zeros(length(xs))\
    \ \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i]\
    \ * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.3>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the derivative of a polynomial given its coefficients.\nThe function\
    \ should take in a vector of coefficients and return a vector of coefficients.\n\
    The function should return an error if the number of coefficients is less than\
    \ 3.\nThe function should return an error if the coefficients are not in increasing\
    \ order.\nThe function should return an error if the coefficients are not in decreasing\
    \ order.\nThe function should return an error if the coefficients are not in increasing\
    \ or decreasing order.\nThe function should return an error if the coefficients\
    \ are not in increasing or decreasing order.\nThe function should return an error\
    \ if the coefficients are not in increasing or decreasing order.\nThe function\
    \ should return an error if the coefficients are not in increasing or decreasing\
    \ order.\nThe function should return an error if the coefficients are not in increasing\
    \ or decreasing order.\nThe function should return an error if the coefficients\
    \ are not in increasing or decreasing order.\nThe function should return an error\
    \ if the coefficients are not in increasing or decreasing order.\nThe function\
    \ should return an error if the coefficients are not in increasing or decreasing\
    \ order.\nThe function should return an error if the coefficients are not in increasing\
    \ or decreasing order.\nThe function should return an error if the coefficients\
    \ are not in increasing or decreasing order.\nThe function should return an error\
    \ if the coefficients are not in increasing or decreasing order.\nThe function\
    \ should return an error if the coefficients are not in increasing or decreasing\
    \ order.\nThe function should return an error if the coefficients are not in increasing\
    \ or decreasing order.\nThe function should return an error if the coefficients\
    \ are not in increasing or decreasing order.\nThe function should return an error\
    \ if the coefficients are not in increasing or decreasing order.\nThe function\
    \ should return an error if the coefficients are not in increasing or decreasing\
    \ order.\nThe function should return an error if the coefficients are not in increasing\
    \ or decreasing order.\nThe function should return an error if the coefficients\
    \ are not in increasing or decreasing order.\nThe function should return an error\
    \ if the coefficients are not in increasing or decreasing order.\nThe function\
    \ should return an error if the coefficients are not in increasing or decreasing\
    \ order.\nThe function should return an error if the coefficients are not in increasing\
    \ or decreasing order.\nThe function should return an error if the coefficients\
    \ are not in increasing or decreasing order.\nThe function should return an error\
    \ if the coefficients are not in increasing or decreasing order.\nThe function\
    \ should return an error if the coefficients are not in increasing or decreasing\
    \ order.\nThe ", "    \n    derivative = zeros(length(xs))\n    \n    for i =\
    \ 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return derivative\n\
    end", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend", "   \
    \ deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the derivative of a polynomial with given coefficients.", "    \n    derivative\
    \ = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n    \n    for i in 2:length(xs)\n\
    \        derivative[i] = xs[i] - derivative[i-1]\n    end\n    \n    return derivative\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\n\
    Write a function that calculates the integral of a polynomial function using trapezoidal\
    \ rule.", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in\
    \ 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>",
  "    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n    \
    \    derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial with given coefficients.",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>", "    deriv = zeros(length(xs))\
    \ \n    deriv[1] = xs[1] \n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ computes the derivative of a polynomial with given coefficients.", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n     \
    \   deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise:\
    \ Write a function that calculates the derivative of a polynomial given its coefficients.",
  "    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n    \
    \    derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the derivative of a polynomial with n terms."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
