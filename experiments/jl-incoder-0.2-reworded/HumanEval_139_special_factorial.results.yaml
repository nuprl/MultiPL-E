language: jl
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    factorial_series(n::Int64)::Int64\nusing\
    \ Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdgz3gvuh.jl:19\nin expression starting at\
    \ /tmp/tmpdgz3gvuh.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    # Tests\n@test special_factorial(1) == factorial(1)\n@test special_factorial(2)\
    \ == factorial(2)\n@test special_factorial(3) == factorial(3)\n@test special_factorial(4)\
    \ == factorial(4)\n@test special_factorial(5) == factorial(5)\n@test special_factorial(6)\
    \ == factorial(6)\n@test special_factorial(7) == factorial(7)\n@test special_factorial(8)\
    \ == factorial(8)\n@test special_factorial(9) == factorial(9)\n@test special_factorial(10)\
    \ == factorial(10)\n@test special_factorial(11) == factorial(11)\n@test special_factorial(12)\
    \ == factorial(12)\n@test special_factorial(13) == factorial(13)\n@test special_factorial(14)\
    \ == factorial(14)\n@test special_factorial(15) == factorial(15)\n@test special_factorial(16)\
    \ == factorial(16)\n@test special_factorial(17) == factorial(17)\n@test special_factorial(18)\
    \ == factorial(18)\n@test special_factorial(19) == factorial(19)\n@test special_factorial(20)\
    \ == factorial(20)\n@test special_factorial(21) == factorial(21)\n@test special_factorial(22)\
    \ == factorial(22)\n@test special_factorial(23) == factorial(23)\n@test special_factorial(24)\
    \ == factorial(24)\n@test special_factorial(25) == factorial(25)\n@test special_factorial(26)\
    \ == factorial(26)\n@test special_factorial(27) == factorial(27)\n@test special_factorial(28)\
    \ == factorial(28)\n@test special_factorial(29) == factorial(29)\n@test special_factorial(30)\
    \ == factorial(30)\n@test special_factorial(31) == factorial(31)\n@test special_factorial(32)\
    \ == factorial(32)\n@test special_factorial(33) == factorial(33)\n@test special_factorial(34)\
    \ == factorial(34)\n@test special_factorial(35) == factorial(35)\n@test special_factorial(36)\
    \ == factorial(36)\n@test special_factorial(37) == factorial(37)\n@test special_factorial(38)\
    \ == factorial(38)\n@test special_factorial(39) == factorial(39)\n@test special_factorial(40)\
    \ == factorial(40)\n@test special_factorial(41) == factorial(41)\n@test special_factorial(42)\
    \ == factorial(42)\n@test special_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdc8alts5.jl:18\nin expression starting at\
    \ /tmp/tmpdc8alts5.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplqstmasf.jl:18\nin expression starting at\
    \ /tmp/tmplqstmasf.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nspecial_factorial(4)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates the factorial of a given number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkpppn3jy.jl:18\nin expression starting at\
    \ /tmp/tmpkpppn3jy.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that computes the factorial of a number given as\
    \ an input argument. The function should raise an error if the input is not positive.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpebud8ek7.jl:19\nin expression starting at\
    \ /tmp/tmpebud8ek7.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuuxn1s3v.jl:19\nin expression starting at\
    \ /tmp/tmpuuxn1s3v.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphgy4tk5i.jl:18\nin expression starting at\
    \ /tmp/tmphgy4tk5i.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n \nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnh28mi7v.jl:18\nin expression starting at\
    \ /tmp/tmpnh28mi7v.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    factorial_series(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpacs_9yw7.jl:18\nin expression starting at\
    \ /tmp/tmpacs_9yw7.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 1\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <text>\nExercise 10\nWrite a function that calculates the factorial of a number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxcoiz1qb.jl:19\nin expression starting at\
    \ /tmp/tmpxcoiz1qb.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp28x07nyc.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp28x07nyc.jl:16\n\
    in expression starting at /tmp/tmp28x07nyc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwizox2rc.jl:18\nin expression starting at\
    \ /tmp/tmpwizox2rc.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        factorial(n) * special_factorial(n - 1)\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmparq273qf.jl:18\nin expression starting at\
    \ /tmp/tmparq273qf.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will receive a number as input and return the\
    \ factorial of this number.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp79eey_c4.jl:19\nin expression starting at\
    \ /tmp/tmp79eey_c4.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9z1dsi72.jl:19\nin expression starting at\
    \ /tmp/tmp9z1dsi72.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n# Test\nspecial_factorial(4)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the factorial of a given number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp9luianum.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9luianum.jl:16\n\
    in expression starting at /tmp/tmp9luianum.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpbw7sbk_w.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbw7sbk_w.jl:16\n\
    in expression starting at /tmp/tmpbw7sbk_w.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the factorial of a given number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeehuwwt1.jl:19\nin expression starting at\
    \ /tmp/tmpeehuwwt1.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp28x07nyc.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp28x07nyc.jl:16\n\
    in expression starting at /tmp/tmp28x07nyc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a given number. Your function should receive\
    \ a number as input and should return the factorial of this number.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8f_9itxm.jl:18\nin expression starting at\
    \ /tmp/tmp8f_9itxm.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpydqc1laz.jl:19\nin expression starting at\
    \ /tmp/tmpydqc1laz.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a number given as an input parameter and returns\
    \ the factorial as a Float64. Test your function with different numbers. What\
    \ happens if you pass it a negative number? What happens if you pass it a number\
    \ larger than the maximum representable number in Float64?\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp_3dpfs67.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_3dpfs67.jl:16\n\
    in expression starting at /tmp/tmp_3dpfs67.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that calculates the factorial of a given number.\
    \ Your function should receive an integer as input and should return the factorial\
    \ of this integer.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpegf5hk0o.jl:18\nin expression starting at\
    \ /tmp/tmpegf5hk0o.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n<text>\n\
    The factorial function will receive an integer as input and should return the\
    \ factorial of this integer.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkr_jsnk2.jl:18\nin expression starting at\
    \ /tmp/tmpkr_jsnk2.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpehbgr_k2.jl:19\nin expression starting at\
    \ /tmp/tmpehbgr_k2.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a number given as an input parameter and returns\
    \ the factorial as a Float64. Test your function with several examples:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpacwebv0e.jl:18\nin expression starting at\
    \ /tmp/tmpacwebv0e.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpezfgg643.jl:19\nin expression starting at\
    \ /tmp/tmpezfgg643.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4_ywivl0.jl:18\nin expression starting at\
    \ /tmp/tmp4_ywivl0.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Testing the function\n@assert special_factorial(4) ==\
    \ 288\n</cell>\n<text>\nExercise 2\nWrite a function that computes the factorial\
    \ of a number given as an input argument.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8_o2ebeh.jl:19\nin expression starting at\
    \ /tmp/tmp8_o2ebeh.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq29umxro.jl:19\nin expression starting at\
    \ /tmp/tmpq29umxro.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n-1) * n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)::Int64\n    \n \
    \   Calculates the factorial series up to n.\n    \n    For example:\n    >>>\
    \ factorial_series(4)\n    2432902008176640000\n    \n    The function will receive\
    \ an integer as input and should return the factorial\n    series of this integer.\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t\
    @test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb7_he_hk.jl:19\nin expression starting at\
    \ /tmp/tmpb7_he_hk.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n@time factorial(10000);\n</cell>\n<code language=julia-1.4>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise: Write a function that\
    \ calculates the factorial of a number using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm18h5mtj.jl:19\nin expression starting at\
    \ /tmp/tmpm18h5mtj.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa0thizs2.jl:19\nin expression starting at\
    \ /tmp/tmpa0thizs2.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The factorial of a number n is defined as:\n    factorial(n) = n!\n    where\
    \ n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy953m43m.jl:18\nin expression starting at\
    \ /tmp/tmpy953m43m.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdovojavp.jl:18\nin expression starting at\
    \ /tmp/tmpdovojavp.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.4>\n\
    # Test the function\nspecial_factorial(4)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the factorial of a given number using recursion.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv2eoec6r.jl:18\nin expression starting at\
    \ /tmp/tmpv2eoec6r.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuuxn1s3v.jl:19\nin expression starting at\
    \ /tmp/tmpuuxn1s3v.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n-1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm6j6d4x8.jl:18\nin expression starting at\
    \ /tmp/tmpm6j6d4x8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        n * special_factorial(n - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpisqjs2z4.jl:19\nin expression starting at\
    \ /tmp/tmpisqjs2z4.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.0>\n\
    # Test the function \nspecial_factorial(4)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that computes the factorial of a given number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpokp5xtp3.jl:18\nin expression starting at\
    \ /tmp/tmpokp5xtp3.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @time factorial(100000);\n</cell>\n<code language=julia-1.5>\n@time special_factorial(100000);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a given number using recursion.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\
    \t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph0ukwuwl.jl:18\nin expression starting at\
    \ /tmp/tmph0ukwuwl.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n-1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfwhutx7n.jl:19\nin expression starting at\
    \ /tmp/tmpfwhutx7n.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial of\
    \ a number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpml2xyk7n.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpml2xyk7n.jl:16\n\
    in expression starting at /tmp/tmpml2xyk7n.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt_9rsp3s.jl:19\nin expression starting at\
    \ /tmp/tmpt_9rsp3s.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the factorial of a given number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplh2un3hm.jl:19\nin expression starting at\
    \ /tmp/tmplh2un3hm.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\nspecial_factorial(4)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that calculates the factorial of a given number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqccv1e70.jl:19\nin expression starting at\
    \ /tmp/tmpqccv1e70.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nspecial_factorial(4)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates the factorial of a given number. \nThe function should\
    \ receive an integer as input and should return the factorial of this integer.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp82im5o4p.jl:18\nin expression starting at\
    \ /tmp/tmp82im5o4p.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the factorial of a number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp75g25xbm.jl:19\nin expression starting at\
    \ /tmp/tmp75g25xbm.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqfey2r2o.jl:18\nin expression starting at\
    \ /tmp/tmpqfey2r2o.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo589tsw6.jl:19\nin expression starting at\
    \ /tmp/tmpo589tsw6.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7586i2jd.jl:18\nin expression starting at\
    \ /tmp/tmp7586i2jd.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the factorial of a given number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjxme6b54.jl:18\nin expression starting at\
    \ /tmp/tmpjxme6b54.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx1lblbtm.jl:18\nin expression starting at\
    \ /tmp/tmpx1lblbtm.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<text>\nExercise\n\
    Write a function that calculates the factorial of a given number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa3ypyj4l.jl:18\nin expression starting at\
    \ /tmp/tmpa3ypyj4l.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a number using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplwpfu1c5.jl:18\nin expression starting at\
    \ /tmp/tmplwpfu1c5.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ error(\"Negative factorial is not defined\")\n    elseif n == 0\n        1\n\
    \    else\n        factorial(n) * special_factorial(n - 1)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates the factorial of a given\
    \ number. Your function should receive an integer as input and should return the\
    \ factorial of this integer.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa_97af83.jl:21\nin expression starting at\
    \ /tmp/tmpa_97af83.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial_series(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxo36by4m.jl:18\nin expression starting at\
    \ /tmp/tmpxo36by4m.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<text>\n\
    Exercise 9\nWrite a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsqi9rv95.jl:18\nin expression starting at\
    \ /tmp/tmpsqi9rv95.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a number using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvr1rz84v.jl:18\nin expression starting at\
    \ /tmp/tmpvr1rz84v.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that will calculate the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpayge3064.jl:18\nin expression starting at\
    \ /tmp/tmpayge3064.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)::Int64\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpjvu40zj1.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjvu40zj1.jl:16\n\
    in expression starting at /tmp/tmpjvu40zj1.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2u7v6_0t.jl:18\nin expression starting at\
    \ /tmp/tmp2u7v6_0t.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n \nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzry79pw7.jl:18\nin expression starting at\
    \ /tmp/tmpzry79pw7.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp47tq8guc.jl:19\nin expression starting at\
    \ /tmp/tmp47tq8guc.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a number using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpepsxc1_z.jl:18\nin expression starting at\
    \ /tmp/tmpepsxc1_z.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdovojavp.jl:18\nin expression starting at\
    \ /tmp/tmpdovojavp.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<text>\nExercise\
    \ 3: Write a function that calculates the factorial of a number. Test your function\
    \ with several different inputs. What happens if you enter a negative number?\
    \ What happens if you enter a number that is too big to fit into an Int64?\nusing\
    \ Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpamf6re53.jl:18\nin expression starting at\
    \ /tmp/tmpamf6re53.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphgy4tk5i.jl:18\nin expression starting at\
    \ /tmp/tmphgy4tk5i.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the factorial of a given number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpha2ex6rl.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpha2ex6rl.jl:16\n\
    in expression starting at /tmp/tmpha2ex6rl.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukrr75vx.jl:19\nin expression starting at\
    \ /tmp/tmpukrr75vx.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo5bcdw06.jl:18\nin expression starting at\
    \ /tmp/tmpo5bcdw06.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_a_3ybh7.jl:18\nin expression starting at\
    \ /tmp/tmp_a_3ybh7.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpzjx0xgy7.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzjx0xgy7.jl:16\n\
    in expression starting at /tmp/tmpzjx0xgy7.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukrr75vx.jl:19\nin expression starting at\
    \ /tmp/tmpukrr75vx.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n-1) * n\nend\n</cell>\n<code language=julia-1.3>\n\
    special_factorial(4)\n</cell>\n<text>\nExercise 3\nWrite a function that calculates\
    \ the factorial of a number using recursion.\nusing Test\n\n@testset begin\n\n\
    candidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphjdpdgkc.jl:18\nin expression starting at\
    \ /tmp/tmphjdpdgkc.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n-1) * n\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    factorial(n::Int64)::Int64\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo_l012pa.jl:18\nin expression starting at\
    \ /tmp/tmpo_l012pa.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n@time factorial(10000);\n</cell>\n<code language=julia-1.3>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmk5qd8sl.jl:19\nin expression starting at\
    \ /tmp/tmpmk5qd8sl.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <text>\nThe function special_factorial is recursive, meaning that it calls itself\
    \ until it reaches the base case (when n = 0). In this case, the base case is\
    \ when n = 0. Thus, special_factorial will always return 1.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp18v3i0pm.jl:19\nin expression starting at\
    \ /tmp/tmp18v3i0pm.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk340jaij.jl:18\nin expression starting at\
    \ /tmp/tmpk340jaij.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        factorial(n) * (n - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a number using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgkfvoxq7.jl:19\nin expression starting at\
    \ /tmp/tmpgkfvoxq7.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates the factorial of a number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqy9ohbu2.jl:19\nin expression starting at\
    \ /tmp/tmpqy9ohbu2.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuuxn1s3v.jl:19\nin expression starting at\
    \ /tmp/tmpuuxn1s3v.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\nend\n</cell>\n<text>\nExercise\
    \ 7\nWrite a function that computes the factorial of a given number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpygbcsevj.jl:18\nin expression starting at\
    \ /tmp/tmpygbcsevj.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n<text>\n\
    Exercise 9\nWrite a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqze1gdha.jl:18\nin expression starting at\
    \ /tmp/tmpqze1gdha.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    factorial_series(n::Int64)::Int64\nusing\
    \ Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdacselcy.jl:19\nin expression starting at\
    \ /tmp/tmpdacselcy.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuuxn1s3v.jl:19\nin expression starting at\
    \ /tmp/tmpuuxn1s3v.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_oasi388.jl:18\nin expression starting at\
    \ /tmp/tmp_oasi388.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt9tvu9z7.jl:18\nin expression starting at\
    \ /tmp/tmpt9tvu9z7.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"The factorial of a number is the product of all\
    \ the numbers from 1 to that number. \nThe factorial of 0 is 1.\nusing Test\n\n\
    @testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbslq5kim.jl:19\nin expression starting at\
    \ /tmp/tmpbslq5kim.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg82zasa9.jl:18\nin expression starting at\
    \ /tmp/tmpg82zasa9.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_fj3yzmh.jl:19\nin expression starting at\
    \ /tmp/tmp_fj3yzmh.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n-1) * n\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp90pucr93.jl:18\nin expression starting at\
    \ /tmp/tmp90pucr93.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp6yq9ksj.jl:18\nin expression starting at\
    \ /tmp/tmpp6yq9ksj.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpioo_1ji4.jl:19\nin expression starting at\
    \ /tmp/tmpioo_1ji4.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpke38fa63.jl:19\nin expression starting at\
    \ /tmp/tmpke38fa63.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpts9ynkxw.jl:18\nin expression starting at\
    \ /tmp/tmpts9ynkxw.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"The factorial of a number n is defined as:\n\
    \    factorial(n) = n!\n    where n > 0\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpcxuhbl8l.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcxuhbl8l.jl:16\n\
    in expression starting at /tmp/tmpcxuhbl8l.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc2kxocmd.jl:19\nin expression starting at\
    \ /tmp/tmpc2kxocmd.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nspecial_factorial(4)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the factorial of a number given as an input parameter.\
    \ \nThe function should receive a number as input parameter and should return\
    \ the factorial of this number.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpez1nwxa5.jl:18\nin expression starting at\
    \ /tmp/tmpez1nwxa5.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\nThe factorial of a number is the product of all\
    \ the numbers from 1 to that number.\nFor example, factorial(5) = product(1,2,3,4,5)\
    \ = 1*2*3*4*5 = 120.\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeapj1g4f.jl:19\nin expression starting at\
    \ /tmp/tmpeapj1g4f.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        factorial(n) * special_factorial(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj9jp1jag.jl:18\nin expression starting at\
    \ /tmp/tmpj9jp1jag.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph_mv9mhq.jl:19\nin expression starting at\
    \ /tmp/tmph_mv9mhq.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nThe factorial of a number is the product of all the numbers from 1 to\
    \ that number.\nThe factorial of a negative number is defined as the product of\
    \ the negative number\nwith the factorial of the positive number.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphu7c058y.jl:18\nin expression starting at\
    \ /tmp/tmphu7c058y.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipnrhmnt.jl:19\nin expression starting at\
    \ /tmp/tmpipnrhmnt.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.3>\n\
    @time factorial(10000);\n@time special_factorial(10000);\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the factorial of a given number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9eqor_n_.jl:18\nin expression starting at\
    \ /tmp/tmp9eqor_n_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test your function with the above example\n@assert\
    \ special_factorial(4) == 288\n</cell>\n<text>\nTask 3\nWrite a function that\
    \ calculates the sum of all integers up to and including n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp4mrnlliq.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4mrnlliq.jl:16\n\
    in expression starting at /tmp/tmp4mrnlliq.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"The factorial of a number is the product of all positive integers less than\
    \ or equal to it.\n    For example:\n    >>> factorial(5)\n    120\n    \n   \
    \ The function will receive an integer as input and should return the factorial\
    \ of this integer.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0qmag47w.jl:18\nin expression starting at\
    \ /tmp/tmp0qmag47w.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdovojavp.jl:18\nin expression starting at\
    \ /tmp/tmpdovojavp.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 2.1\nWrite a function\
    \ that calculates the factorial of a given integer n using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6lz0i5ry.jl:19\nin expression starting at\
    \ /tmp/tmp6lz0i5ry.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time factorial(10000);\n@time special_factorial(10000);\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the factorial of a given integer $n$. \n\
    The function should receive an integer as input and should return the factorial\
    \ of this integer.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp5__lrwq.jl:18\nin expression starting at\
    \ /tmp/tmpp5__lrwq.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp21vojdgr.jl:18\nin expression starting at\
    \ /tmp/tmp21vojdgr.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn8sbhfoq.jl:18\nin expression starting at\
    \ /tmp/tmpn8sbhfoq.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 1\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8z1pp6zn.jl:19\nin expression starting at\
    \ /tmp/tmp8z1pp6zn.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 1\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n\
    \    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpckszwajd.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpckszwajd.jl:16\n\
    in expression starting at /tmp/tmpckszwajd.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n-1) * n\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\nThe factorial of a number is the product of its digits, starting from\
    \ 1 \nand ending with 9. For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120.\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxm9h5ath.jl:18\nin expression starting at\
    \ /tmp/tmpxm9h5ath.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxtu3m0je.jl:18\nin expression starting at\
    \ /tmp/tmpxtu3m0je.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will calculate the factorial\
    \ of a given number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpu8xmip_7.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu8xmip_7.jl:16\n\
    in expression starting at /tmp/tmpu8xmip_7.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp10lq_6fe.jl:18\nin expression starting at\
    \ /tmp/tmp10lq_6fe.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphgy4tk5i.jl:18\nin expression starting at\
    \ /tmp/tmphgy4tk5i.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        factorial(n) * special_factorial(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8vnscped.jl:18\nin expression starting at\
    \ /tmp/tmp8vnscped.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuuxn1s3v.jl:19\nin expression starting at\
    \ /tmp/tmpuuxn1s3v.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @time factorial(10000)\n</cell>\n<code language=julia-1.5>\n@time special_factorial(10000)\n\
    </cell>\n<code language=julia-1.5>\n@time factorial(100000)\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100000)\n</cell>\n<code language=julia-1.5>\n@time factorial(1000000)\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(1000000)\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(10000000)\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000000)\n</cell>\n<code language=julia-1.5>\n@time factorial(100000000)\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(100000000)\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(1000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ factorial(10000000000)\n</cell>\n<code language=julia-1.5>\n@time special_factorial(10000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time factorial(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time special_factorial(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time factorial(1000000000000)\n</cell>\n<code language=julia-1.5>\n@time special_factorial(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time factorial(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time special_factorial(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time factorial(1000000000000000)\n</cell>\n<code language=julia-1.5>\n@time special_factorial(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time factorial(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time special_factorial(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(1000000000000000000\nusing Test\n\n\
    @testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkw77m_83.jl:18\nin expression starting at\
    \ /tmp/tmpkw77m_83.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfef8nz8h.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfef8nz8h.jl:1\n\
    in expression starting at /tmp/tmpfef8nz8h.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2bkns4si.jl:19\nin expression starting at\
    \ /tmp/tmp2bkns4si.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    factorial_series(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiacfpizo.jl:18\nin expression starting at\
    \ /tmp/tmpiacfpizo.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n \nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy3z765n8.jl:18\nin expression starting at\
    \ /tmp/tmpy3z765n8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuuxn1s3v.jl:19\nin expression starting at\
    \ /tmp/tmpuuxn1s3v.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgrs6odby.jl:18\nin expression starting at\
    \ /tmp/tmpgrs6odby.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else if n == 1 \n        1\n    else if n == 2 \n        2\n    else\
    \ if n == 3 \n        6\n    else if n == 4 \n        24\n    else if n == 5 \n\
    \        120\n    else if n == 6 \n        720\n    else if n == 7 \n        5040\n\
    \    else if n == 8 \n        40320\n    else if n == 9 \n        362880\n   \
    \ else if n == 10 \n        3628800\n    else if n == 11 \n        39916800\n\
    \    else if n == 12 \n        479001600\n    else if n == 13 \n        6227020800\n\
    \    else if n == 14 \n        87178291200\n    else if n == 15 \n        1307674368000\n\
    \    else if n == 16 \n        20922789888000\n    else if n == 17 \n        355687428096000\n\
    \    else if n == 18 \n        6402373705728000\n    else if n == 19 \n      \
    \  121645100408832000\n    else if n == 20 \n        2432902008176640000\n   \
    \ else if n == 21 \n        51090942171709440000\n    else if n == 22 \n     \
    \   1124000727777607680000\n    else if n == 23 \n        25852016738884976640000\n\
    \    else if n == 24 \n        620448401733239439360000\n    else if n == 25 \n\
    \        15511210043330985984000000\n    else if n == 26 \n        403291461126605635584000000\n\
    \    else if n == 27 \n        10888869450418352160768000000\n    else if n ==\
    \ 28 \n        304888344611713860501504000000\n    else if n == 29 \n        8841761993739701954543616000000\n\
    \    else if n == 30 \n        265252859812191058636308480000000\n    else if\
    \ n == 31 \n        8222838654177922817725562880000000\n    else if n == 32 \n\
    \        263130836933693530167218012160000000\n    else if n == 33 \n        8683317618811886495518194401280000000\n\
    \    else if n == 34 \n        295232799039604140847618609643520000000\n    else\
    \ if n == \nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t\
    @test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp59j8m5c_.jl:15\nin expression starting at\
    \ /tmp/tmp59j8m5c_.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsfmtp079.jl:18\nin expression starting at\
    \ /tmp/tmpsfmtp079.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)::Int64\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpku_hsdmy.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpku_hsdmy.jl:16\n\
    in expression starting at /tmp/tmpku_hsdmy.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the factorial of a given number. Recall that factorial is defined\
    \ as:\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpps7u3qne.jl:18\nin expression starting at\
    \ /tmp/tmpps7u3qne.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpklse_ukt.jl:18\nin expression starting at\
    \ /tmp/tmpklse_ukt.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a number using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpalq8hs0f.jl:18\nin expression starting at\
    \ /tmp/tmpalq8hs0f.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdjb0dqd3.jl:19\nin expression starting at\
    \ /tmp/tmpdjb0dqd3.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpgai51i3p.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgai51i3p.jl:16\n\
    in expression starting at /tmp/tmpgai51i3p.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n@time factorial(10000);\n</cell>\n<code language=julia-1.3>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp076k1ijt.jl:19\nin expression starting at\
    \ /tmp/tmp076k1ijt.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n@time factorial(10000);\n</cell>\n<code language=julia-1.3>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukumqos3.jl:19\nin expression starting at\
    \ /tmp/tmpukumqos3.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\nThe factorial of a number is the product of all\
    \ positive integers less than or equal to that number.\nThe factorial of a number\
    \ n is defined as:\n    factorial(n) = n!\n    where n > 0\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpculdz0fk.jl:19\nin expression starting at\
    \ /tmp/tmpculdz0fk.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyg63_fi5.jl:19\nin expression starting at\
    \ /tmp/tmpyg63_fi5.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The factorial of a number n is defined as:\n    factorial(n) = n!\n    where\
    \ n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy953m43m.jl:18\nin expression starting at\
    \ /tmp/tmpy953m43m.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqvs0x_5s.jl:18\nin expression starting at\
    \ /tmp/tmpqvs0x_5s.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpke38fa63.jl:19\nin expression starting at\
    \ /tmp/tmpke38fa63.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 1\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpvi6e_5cv.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvi6e_5cv.jl:16\n\
    in expression starting at /tmp/tmpvi6e_5cv.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz5mjlkr8.jl:18\nin expression starting at\
    \ /tmp/tmpz5mjlkr8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"The factorial of a number is the product of all numbers\
    \ from 1 to that number\n(inclusive). The factorial of a negative number is the\
    \ product of all numbers from 1 to\nthat negative number (inclusive). The factorial\
    \ of 0 is 1.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1v8wcq64.jl:19\nin expression starting at\
    \ /tmp/tmp1v8wcq64.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpke38fa63.jl:19\nin expression starting at\
    \ /tmp/tmpke38fa63.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<text>\nExercise 7: Write a function that calculates the factorial of\
    \ a given number using recursion.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\
    \t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpbil3tm5e.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbil3tm5e.jl:16\n\
    in expression starting at /tmp/tmpbil3tm5e.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 1\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <text>\nExercise 5\nWrite a function that returns the factorial of a number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt5t469ag.jl:19\nin expression starting at\
    \ /tmp/tmpt5t469ag.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that computes the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpaxmaalcb.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaxmaalcb.jl:16\n\
    in expression starting at /tmp/tmpaxmaalcb.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n-1) * n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpljjao6ha.jl:19\nin expression starting at\
    \ /tmp/tmpljjao6ha.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplur3kric.jl:19\nin expression starting at\
    \ /tmp/tmplur3kric.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)\nusing Test\n\n\
    @testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps8i4v452.jl:19\nin expression starting at\
    \ /tmp/tmps8i4v452.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n-1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdb9pzetr.jl:18\nin expression starting at\
    \ /tmp/tmpdb9pzetr.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpye1nw6q1.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpye1nw6q1.jl:16\n\
    in expression starting at /tmp/tmpye1nw6q1.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)::Int64\n   \
    \ Computes the factorial series up to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwf9xj2zy.jl:19\nin expression starting at\
    \ /tmp/tmpwf9xj2zy.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    factorial_series(n::Int64)::Int64\nusing Test\n\n@testset begin\n\n\
    candidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4yw1rywb.jl:18\nin expression starting at\
    \ /tmp/tmp4yw1rywb.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ error(\"Negative factorial is not defined\")\n    elseif n == 0\n        1\n\
    \    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates the factorial of a given\
    \ number. \nThe function should receive an integer as input and should return\
    \ the factorial of this integer.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\
    \t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpp7eumier.jl:15 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp7eumier.jl:18\n\
    in expression starting at /tmp/tmpp7eumier.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else if n == 1 \n        1\n    else if n == 2 \n        2\n    else\
    \ if n == 3 \n        6\n    else if n == 4 \n        24\n    else if n == 5 \n\
    \        120\n    else if n == 6 \n        720\n    else if n == 7 \n        5040\n\
    \    else if n == 8 \n        40320\n    else if n == 9 \n        362880\n   \
    \ else if n == 10 \n        3628800\n    else if n == 11 \n        39916800\n\
    \    else if n == 12 \n        479001600\n    else if n == 13 \n        6227020800\n\
    \    else if n == 14 \n        87178291200\n    else if n == 15 \n        1307674368000\n\
    \    else if n == 16 \n        20922789888000\n    else if n == 17 \n        355687428096000\n\
    \    else if n == 18 \n        6402373705728000\n    else if n == 19 \n      \
    \  121645100408832000\n    else if n == 20 \n        2432902008176640000\n   \
    \ else if n == 21 \n        51090942171709440000\n    else if n == 22 \n     \
    \   1124000727777607680000\n    else if n == 23 \n        25852016738884976640000\n\
    \    else if n == 24 \n        620448401733239439360000\n    else if n == 25 \n\
    \        15511210043330985984000000\n    else if n == 26 \n        403291461126605635584000000\n\
    \    else if n == 27 \n        10888869450418352160768000000\n    else if n ==\
    \ 28 \n        304888344611713860501504000000\n    else if n == 29 \n        8841761993739701954543616000000\n\
    \    else if n == 30 \n        265252859812191058636308480000000\n    else if\
    \ n == 31 \n        8222838654177922817725562880000000\n    else if n == 32 \n\
    \        1764607523034234804210512590720000000\n    else if n == 33 \n       \
    \ 35184372088824009143985093056640000000\n    else if n == 34 \n        703687441776648028677463972509\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_utlhino.jl:15\nin expression starting at\
    \ /tmp/tmp_utlhino.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function \nspecial_factorial(4)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a given\
    \ number. \nThe function should receive a number as input and should return the\
    \ factorial of this number.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb1_rw6sy.jl:19\nin expression starting at\
    \ /tmp/tmpb1_rw6sy.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ysid3t8.jl:18\nin expression starting at\
    \ /tmp/tmp2ysid3t8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial_series(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfj7b3vny.jl:18\nin expression starting at\
    \ /tmp/tmpfj7b3vny.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsf1x64gj.jl:19\nin expression starting at\
    \ /tmp/tmpsf1x64gj.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.3>\n\
    # Tests\n@test special_factorial(4) == 288\n@test special_factorial(5) == 120\n\
    @test special_factorial(6) == 720\n@test special_factorial(7) == 5040\n@test special_factorial(8)\
    \ == 40320\n@test special_factorial(9) == 362880\n@test special_factorial(10)\
    \ == 3628800\n@test special_factorial(11) == 39916800\n@test special_factorial(12)\
    \ == 479001600\n@test special_factorial(13) == 6227020800\n@test special_factorial(14)\
    \ == 87178291200\n@test special_factorial(15) == 1307674368000\n@test special_factorial(16)\
    \ == 20922789888000\n@test special_factorial(17) == 355687428096000\n@test special_factorial(18)\
    \ == 6402373705728000\n@test special_factorial(19) == 121645100408832000\n@test\
    \ special_factorial(20) == 2432902008176640000\n@test special_factorial(21) ==\
    \ 51090942171709440000\n@test special_factorial(22) == 1124000727777607680000\n\
    @test special_factorial(23) == 25852016738884976640000\n@test special_factorial(24)\
    \ == 620448401733239439360000\n@test special_factorial(25) == 15511210043330985984000000\n\
    @test special_factorial(26) == 403291461126605635584000000\n@test special_factorial(27)\
    \ == 10888869450418352160768000000\n@test special_factorial(28) == 304888344611713860501504000000\n\
    @test special_factorial(29) == 8841761993739701954543616000000\n@test special_factorial(30)\
    \ == 265252859812191058636308480000000\n@test special_factorial(31) == 8222838654177922817725562880000000\n\
    @test special_factorial(32) == 263130836933693530167218012160000000\n@test special_factorial(33)\
    \ == 8683317618811886495518194401280000000\n@test special_factorial(34) == 30055048221625332791556221320000000\n\
    @test special_factorial(35) == 6658219\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb9z27u2u.jl:18\nin expression starting at\
    \ /tmp/tmpb9z27u2u.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)::Array{Int64}\n\
    \    \n    Calculates the factorial series up to n\n    \n    Arguments:\n   \
    \ \n    - `n` - an integer\n    \n    Returns:\n    \n    - `factorial_series`\
    \ - an array of integers containing the factorial series up to n\n    \n    Usage:\n\
    \    \n    ```julia\n    factorial_series(10)\n    ```\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9xdbc7bo.jl:19\nin expression starting at\
    \ /tmp/tmp9xdbc7bo.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a given number. Your function should receive\
    \ an integer as input and should return the factorial of this integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq21118ol.jl:18\nin expression starting at\
    \ /tmp/tmpq21118ol.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ error(\"factorial function only accepts positive integers\")\n    elseif n ==\
    \ 0\n        return 1\n    else\n        return factorial(n) * special_factorial(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2i7ct8sb.jl:20\nin expression starting at\
    \ /tmp/tmp2i7ct8sb.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxxu9rnmt.jl:18\nin expression starting at\
    \ /tmp/tmpxxu9rnmt.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"The factorial of a number is the product of all positive\
    \ integers less than or equal to it.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppvwz5917.jl:19\nin expression starting at\
    \ /tmp/tmppvwz5917.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(1000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(1000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf8_b47fw.jl:19\nin expression starting at\
    \ /tmp/tmpf8_b47fw.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxxu9rnmt.jl:18\nin expression starting at\
    \ /tmp/tmpxxu9rnmt.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  error(\"n must be positive\")\n    else if n == 1\n        1\n    else\n  \
    \      special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjitfmzjb.jl:15\nin expression starting at\
    \ /tmp/tmpjitfmzjb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq29umxro.jl:19\nin expression starting at\
    \ /tmp/tmpq29umxro.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"The factorial of a number is the product of all positive integers less than\
    \ or equal to that number. \n    For example:\n    >>> factorial(5)\n    120\n\
    \    >>> factorial(0)\n    1\n    >>> factorial(10)\n    3628800\n    >>> factorial(100)\n\
    \    3628800\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuqsuqp20.jl:18\nin expression starting at\
    \ /tmp/tmpuqsuqp20.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time factorial(100000);\n</cell>\n<code language=julia-1.5>\n@time special_factorial(100000);\n\
    </cell>\n<text>\nExercise\nWrite a function that calculates the factorial of a\
    \ given number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4uvl20a7.jl:18\nin expression starting at\
    \ /tmp/tmp4uvl20a7.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr2so8grq.jl:18\nin expression starting at\
    \ /tmp/tmpr2so8grq.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial_series(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfj7b3vny.jl:18\nin expression starting at\
    \ /tmp/tmpfj7b3vny.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that calculates the factorial of a given integer $n$. Your function should receive\
    \ an integer as input and should return the factorial of this integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp5bbpwek.jl:18\nin expression starting at\
    \ /tmp/tmpp5bbpwek.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n# TEST special_factorial (5b)\n@test special_factorial(4)\
    \ == 288\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a given number multiplied by itself n times.\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpc6hbotwg.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc6hbotwg.jl:16\n\
    in expression starting at /tmp/tmpc6hbotwg.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The factorial of a number is the product of all positive integers less than\
    \ or equal to it.\n    For example:\n    >>> factorial(5)\n    120\n    \n   \
    \ The function will receive an integer as input and should return the factorial\
    \ of this integer.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzyn6zmze.jl:18\nin expression starting at\
    \ /tmp/tmpzyn6zmze.jl:18\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ error(\"Negative factorial not allowed\")\n    elseif n == 0\n        1\n  \
    \  else\n        factorial(n) * special_factorial(n - 1)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the factorial of a given number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkda51bti.jl:19\nin expression starting at\
    \ /tmp/tmpkda51bti.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a number using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpghrpcf3z.jl:18\nin expression starting at\
    \ /tmp/tmpghrpcf3z.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nThe factorial of a number is the product of its digits. For example, the\n\
    factorial of 7 is 1*2*3*4*5*6*7 = 72.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprl4w9w0r.jl:18\nin expression starting at\
    \ /tmp/tmprl4w9w0r.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        factorial(n) * (n - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time factorial(100000);\n</cell>\n<code language=julia-1.5>\n@time special_factorial(100000);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8t1puef4.jl:19\nin expression starting at\
    \ /tmp/tmp8t1puef4.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<text>\n\
    The factorial function will receive an integer as input and should return the\
    \ factorial of this integer.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi2ukgdkz.jl:19\nin expression starting at\
    \ /tmp/tmpi2ukgdkz.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp_p3l7bi6.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_p3l7bi6.jl:16\n\
    in expression starting at /tmp/tmp_p3l7bi6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr2so8grq.jl:18\nin expression starting at\
    \ /tmp/tmpr2so8grq.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<text>\n\
    The factorial function will receive an integer as input and should return the\
    \ factorial of this integer.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi2ukgdkz.jl:19\nin expression starting at\
    \ /tmp/tmpi2ukgdkz.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 1\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpp5up0xp8.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp5up0xp8.jl:16\n\
    in expression starting at /tmp/tmpp5up0xp8.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6mzp74mw.jl:19\nin expression starting at\
    \ /tmp/tmp6mzp74mw.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)::Int64\nusing\
    \ Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvk_fztw8.jl:19\nin expression starting at\
    \ /tmp/tmpvk_fztw8.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4fsbadim.jl:18\nin expression starting at\
    \ /tmp/tmp4fsbadim.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    # Exercise 3\n\"\"\"The factorial of a number n is defined as:\n    factorial(n)\
    \ = n!\n    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpftf0ftli.jl:18\nin expression starting at\
    \ /tmp/tmpftf0ftli.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function with different inputs\n@test special_factorial(4) == 288\n\
    @test special_factorial(5) == 720\n@test special_factorial(6) == 5040\n@test special_factorial(7)\
    \ == 40320\n@test special_factorial(8) == 362880\n@test special_factorial(9) ==\
    \ 3628800\n@test special_factorial(10) == 39916800\n@test special_factorial(11)\
    \ == 479001600\n@test special_factorial(12) == 6227020800\n@test special_factorial(13)\
    \ == 87178291200\n@test special_factorial(14) == 1307674368000\n@test special_factorial(15)\
    \ == 20922789888000\n@test special_factorial(16) == 355687428096000\n@test special_factorial(17)\
    \ == 6402373705728000\n@test special_factorial(18) == 121645100408832000\n@test\
    \ special_factorial(19) == 2432902008176640000\n@test special_factorial(20) ==\
    \ 51090942171709440000\n@test special_factorial(21) == 1124000727777607680000\n\
    @test special_factorial(22) == 25852016738884976640000\n@test special_factorial(23)\
    \ == 620448401733239439360000\n@test special_factorial(24) == 15511210043330985984000000\n\
    @test special_factorial(25) == 403291461126605635584000000\n@test special_factorial(26)\
    \ == 10888869450418352160768000000\n@test special_factorial(27) == 304888344611713860501504000000\n\
    @test special_factorial(28) == 8841761993739701954543616000000\n@test special_factorial(29)\
    \ == 265252859812191058636308480000000\n@test special_factorial(30) == 8222838654177922817725562880000000\n\
    @test special_factorial(31) == 263130836933693530167218012160000000\n@test special_factorial(32)\
    \ == 82228386541779228177255628800000000\n@test special_factorial(33) == 2631308369336935301672180121600000000\n\
    @test special_factorial(34) == 82228386541779228177255\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdl89zqp8.jl:18\nin expression starting at\
    \ /tmp/tmpdl89zqp8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt_9rsp3s.jl:19\nin expression starting at\
    \ /tmp/tmpt_9rsp3s.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n \nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph11zulwo.jl:18\nin expression starting at\
    \ /tmp/tmph11zulwo.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpehbgr_k2.jl:19\nin expression starting at\
    \ /tmp/tmpehbgr_k2.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6mzp74mw.jl:19\nin expression starting at\
    \ /tmp/tmp6mzp74mw.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr2so8grq.jl:18\nin expression starting at\
    \ /tmp/tmpr2so8grq.jl:18\n"
  stdout: ''
