name: HumanEval_112_reverse_delete
language: jl
prompt: "\"\"\"Task\n    We are given two strings s and c, you have to deleted all\
  \ the characters in s that are equal to any character in c\n    then check if the\
  \ result string is palindrome.\n    A string is called palindrome if it reads the\
  \ same backward as forward.\n    You should return a tuple containing the result\
  \ string and true/false for the check.\n    Example\n    >>> reverse_delete(\"abcde\"\
  , \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n   \
  \ (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    (\"cdedc\"\
  , true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
  \ Bool} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
  abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"\
  acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\
  \t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
  , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
  , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
  @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
  , \"mia\") == (\"\", true))\nend\n"
completions: ["    if length(s)==0 || length(c)==0\n        return (\"\", false)\n\
    \    end\n    \n    if s[0]==c[0]\n        return (s[1:], true)\n    end\n   \
    \ \n    if s[0]!=c[0]\n        return (s[1:], false)\n    end\n    \n    return\
    \ (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"", "    if length(s)==0\
    \ || length(c)==0 \n        return (s, false)\n    end\n    \n    if s[end]==c[0]\
    \ \n        return (reverse_delete(s[1:end-1], c[1:end-1]), true)\n    end\n \
    \   \n    if s[end]!=c[0] \n        return (s, false)\n    end\n    \n    if s[end]==c[0]\
    \ \n        return (reverse_delete(s[1:end-1], c[1:end-1]), true)\n    end\n \
    \   \n    if s[end]!=c[0] \n        return (s, false)\n    end\n    \n    if s[end]==c[0]\
    \ \n        return (reverse_delete(s[1:end-1], c[1:end-1]), true)\n    end\n \
    \   \n    if s[end]!=c[0] \n        return (s, false)\n    end\n    \n    if s[end]==c[0]\
    \ \n        return (reverse_delete(s[1:end-1], c[1:end-1]), true)\n    end\n \
    \   \n    if s[end]!=c[0] \n        return (s, false)\n    end\n    \n    if s[end]==c[0]\
    \ \n        return (reverse_delete(s[1:end-1], c[1:end-1]), true)\n    end\n \
    \   \n    if s[end]!=c[0] \n        return (s, false)\n    end\n    \n    if s[end]==c[0]\
    \ \n        return (reverse_delete(s[1:end-1], c[1:end-1]), true)\n    end\n \
    \   \n    if s[end]!=c[0] \n        return (s, false)\n    end\n    \n    if s[end]==c[0]\
    \ \n        return (reverse_delete(s[1:end-1], c[1:end-1]), true)\n    end\n \
    \   \n    if s[end]!=c[0] \n        return (s, false)\n    end\n    \n    if s[end]==c[0]\
    \ \n        return (reverse_delete(s[1:end-1], c[1:end-1]), true)\n    end\n \
    \   \n    if s[end]!=c[0] \n        return (s, false)\n    end\n    \n    if s[end]==c[0]\
    \ \n        return (reverse_delete(s[1:end-1], c[1:end-1]), true)\n    end\n \
    \   \n    if s[end]!=c[0] \n        return (s, false)\n    end\n    \n    if s[end]==c[0]\
    \ \n        return (reverse_delete(s[1:end-1], c[1:end-1]), true)\n    end\n \
    \   \n    if s[end]!=c[0] \n        return (s, false)\n    end\n    \n    if s[end]==c[0]\
    \ \n        return (reverse_delete(s[1:end-1], c[1:end-1]), true)\n    end\n \
    \   \n    if s[end]!=c[0] \n        return (s, false)\n    end\n    \n    if s[end]==c[0]\
    \ \n        return (reverse_delete(s[1:end-1], c[1:end-1]), true)\n    end\n \
    \   \n    if s[end]!=c[0] \n        return (s, false)\n    end\n    \n    if ",
  "    if length(s)==0 then return (s, false)\n    if length(c)==0 then return (s,\
    \ true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>", "    if length(s)==0 || length(c)==0\
    \ \n        return (\"\", false)\n    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    \n    if s[0]!=c[0]\n        return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    \n    return (reverse_delete(s[1:], c[1:]), false)\nend\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n", "    if length(s)==0 then return\
    \ (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then\
    \ return (reverse_delete(s[1:], c[1:]), false)\n    else return (reverse_delete(s[1:],\
    \ c), true)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</",
  "    if length(s)==0 || length(c)==0\n        return (\"false\", false)\n    end\n\
    \    if length(s) mod length(c)==0\n        deleted = s[length(s):length(s)]\n\
    \    else\n        deleted = s[length(s):length(s)+length(c)]\n    end\n    if\
    \ deleted == c\n        return (\"true\", true)\n    else\n        return (\"\
    false\", false)\n    end\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\"\
    , \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")", "    if length(c) < length(s) \n        return (s, false)\n    \n    let\
    \ rev_s = reverse(s)\n    let rev_c = reverse(c)\n    \n    if rev_s == rev_c\
    \ \n        return (s, true)\n    else \n        return (s, false)\nend\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n", "    if length(s)==0 || length(c)==0 \n        return (\"\
    false\", false)\n    else if length(s)==1 \n        return (reverse_delete(s,c),true)\n\
    \    else if length(c)==1 \n        return (reverse_delete(s,c),true)\n    else\
    \ if s[length(s)-1]==c[0] \n        return (reverse_delete(s,c[1:end-1]),true)\n\
    \    else \n        return (reverse_delete(s,c[1:end-1]),false)\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n", "    if length(s)==0\
    \ || length(c)==0\n        return (s, false)\n    end\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if length(s)==0\
    \ || length(c)==0\n        return (s, true)\n    end\n    if length(s) is 1\n\
    \        return (s[end], true)\n    end\n    if length(c) is 1\n        return\
    \ (s[end], true)\n    end\n    if s[end] <> c[1]\n        return (s, false)\n\
    \    end\n    \n    if s[end] == c[1]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[2:end]), true)\n    end\n    \n    if s[end] == c[2]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[3:end]), true)\n    end\n    \n    if s[end] == c[3]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[4:end]), true)\n    end\n    \n    if s[end] == c[4]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[5:end]), true)\n    end\n    \n    if s[end] == c[5]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[6::end]), true)\n    end\n    \n    if s[end] == c[6]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[7:end]), true)\n    end\n    \n    if s[end] == c[7]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[8:end]), true)\n    end\n    \n    if s[end] == c[8]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[9:end]), true)\n    end\n    \n    if s[end] == c[9]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[10:end]), true)\n    end\n    \n    if s[end] == c[10]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[11:end]), true)\n    end\n    \n    if s[end] == c[11]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[12:end]), true)\n    end\n    \n    if s[end] == c[12]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[13:end]), true)\n    end\n    \n    if s[end] == c[13]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[14:end]), true)\n    end\n    \n    if s[end] == c[14]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[15:end]), true)\n    end\n    \n    if s[end] == c[15", "    if length(s)==0\
    \ || length(c)==0\n        return (s,false)\n    end\n    if length(s)==1\n  \
    \      return (s,true)\n    end\n    if length(c)==1\n        return (s,false)\n\
    \    end\n    if s[end-1]==c[1]\n        return (reverse_delete(s[end-1:end],c[2:end]),true)\n\
    \    end\n    if s[end-1]!=c[1]\n        return (reverse_delete(s[end-1:end],c[2:end]),false)\n\
    \    end\n    return (reverse_delete(s[end-1:end],c[2:end]),true)\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(s)==0 || length(c)==0 \n        return\
    \ (\"\", false)\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    if length(s)==0 || length(c)==0 \n\
    \        return (\"false\", false)\n    else if length(s)==1 && length(c)==1 \n\
    \        return (\"true\", true)\n    else if length(s)==1 && length(c)==0 \n\
    \        return (\"false\", false)\n    else if length(s)==0 && length(c)==1 \n\
    \        return (\"true\", true)\n    else if length(s)==0 && length(c)==0 \n\
    \        return (\"false\", false)\n    else if length(s)==1 && length(c)==1 \n\
    \        return (\"true\", true)\n    else if length(s)==1 && length(c)==0 \n\
    \        return (\"false\", false)\n    else if length(s)==0 && length(c)==1 \n\
    \        return (\"true\", true)\n    else if length(s)==0 && length(c)==0 \n\
    \        return (\"false\", false)\n    else if length(s)==1 && length(c)==1 \n\
    \        return (\"true\", true)\n    else if length(s)==1 && length(c)==0 \n\
    \        return (\"false\", false)\n    else if length(s)==0 && length(c)==1 \n\
    \        return (\"true\", true)\n    else if length(s)==0 && length(c)==0 \n\
    \        return (\"false\", false)\n    else if length(s)==1 && length(c)==1 \n\
    \        return (\"true\", true)\n    else if length(s)==1 && length(c)==0 \n\
    \        return (\"false\", false)\n    else if length(s)==0 && length(c)==1 \n\
    \        return (\"true\", true)\n    else if length(s)==0 && length(c)==0 \n\
    \        return (\"false\", false)\n    else if length(s)==1 && length(c)==1 \n\
    \        return (\"true\", true)\n    else if length(s)==1 && length(c)==0 \n\
    \        return (\"false\", false)\n    else if length(s)==0 && length(c)==1 \n\
    \        return (\"true\", true)\n    else if length(s)==0 && length(c)==0 \n\
    \        return (\"false\", false)\n    else if length(s)==1 && length(c)==1 \n\
    \        return (\"true\", true)\n    else if length(s)==1 && length(c)==0 \n\
    \        return (\"false\", false)\n    else if length(s)==0 && length(c)==1 \n\
    \        return (\"true\", true)\n    else if length(s)==0 && length(c)==0 \n\
    \        return (\"false\", false)\n    else if length(s)==1 && length(c)==1 \n\
    \        return (\"true\", true)\n    else if length(s)==1 && length(c)==0 \n\
    \        return (\"false\", false)\n    else if length(s)==0 && length(c)==1 \n\
    \        return (\"", "    if length(s)==0 || length(c)==0\n        return (s,\
    \ false)\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    if length(s)==0 then return (s, false)\n    if\
    \ length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>", "    if length(s)==0 || length(c)==0 \n        return (\"\
    false\", false)\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    if length(s)==0 || length(c)==0\n       \
    \ return (s, false)\n    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    \n    if s[0]!=c[0]\n        return (s, false)\n    \n  \
    \  return (reverse_delete(s[1:], c[1:]), false)\nend", "    if length(c) < length(s)\
    \ \n        return (s, false)\n    else \n        \n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  ", "    if length(s)==0 || length(c)==0\n        return (s, false)\n    end\n\
    \    if s[length(s)-1]==c\n        return reverse_delete(s[0..length(s)-1], c)\
    \ + s[length(s)-1]\n    else\n        return reverse_delete(s[0..length(s)-1],\
    \ c) + s[length(s)-1] + reverse_delete(s, c)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if length(s)==0 || length(c)==0 then return (s,\
    \ false)\n    else if length(s)==1 then return (s, false)\n    else if length(c)==1\
    \ then return (s, false)\n    else if s[length(s)-1]==c then \n        return\
    \ (reverse_delete(substring(s, 1, length(s)-1), c), true)\n    else if c[length(c)-1]==s\
    \ then \n        return (reverse_delete(substring(s, 1, length(s)-1), c), true)\n\
    \    else if s[length(s)-1]==c || c[length(c)-1]==s then \n        return (reverse_delete(substring(s,\
    \ 1, length(s)-1), c), false)\n    else if s[length(s)-1]==c && c[length(c)-1]==s\
    \ then \n        return (reverse_delete(substring(s, 1, length(s)-1), c), false)\n\
    \    else if s[length(s)-1]==c && c[length(c)-1]!=s then \n        return (reverse_delete(substring(s,\
    \ 1, length(s)-1), c), false)\n    else if s[length(s)-1]!=c && c[length(c)-1]==s\
    \ then \n        return (reverse_delete(substring(s, 1, length(s)-1), c), false)\n\
    \    else if s[length(s)-1]!=c && c[length(c)-1]!=s then \n        return (reverse_delete(substring(s,\
    \ 1, length(s)-1), c), false)\n    else if s[length(s)-1]!=c && c[length(c)-1]!=s\
    \ then \n        return (reverse_delete(substring(s, 1, length(s)-1), c), false)\n\
    \    else if s[length(s)-1]!=c && c[length(c)-1]!=s then \n        return (reverse_delete(substring(s,\
    \ 1, length(s)-1), c), false)\n    else if s[length(s)-1]!=c && c[length(c)-1]!=s\
    \ then \n        return (reverse_delete(substring(s, 1, length(s)-1), c), false)\n\
    \    else if s[length(s)-1]!=c && c[length(c)-1]!=s then \n        return (reverse_delete(substring(s,\
    \ 1, length(s)-1), c), false)\n    else if s[length(s)-1]!=c && c[length(c)-1]!=s\
    \ then \n        return (reverse_delete(substring(s, 1, length(s)-1), c), false)\n\
    \    else if s[length(s)-1]!=c && c[length(c)-1]!=s then \n        return (reverse_delete(substring(s,\
    \ 1, length(s)-1), c), false)\n    else if s[length(s)-1]!=c && c[length(c)-1]!=s\
    \ then \n        return (reverse_delete(substring(s, 1, length(s)-1), c), false)\n\
    \    else if s[length(s)-1]!=c && c[", "    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    else return (reverse_delete(s, c[1:]), false)\nend\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell", "    if length(c) < length(s) \n        return (s, false)\n\
    \    else if length(c) > length(s) \n        return (s, false)\n    else if s\
    \ == c \n        return (s, true)\n    else if s[length(s)] == c \n        return\
    \ (s, true)\n    else if s[length(s)] == s[length(s)-1] \n        return (s, true)\n\
    \    else \n        return (s, false)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")", "    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    else return (reverse_delete(s[1:], c), false)\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    if length(s)==0 || length(c)==0\n        return (s,\
    \ false)\n    end\n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    else\n        return (reverse_delete(s[1:], c[1:]), false)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>", "    \n    if length(s)==0\
    \ then return (s, false)\n    if length(c)==0 then return (s, false)\n    if length(s)==1\
    \ then return (s, false)\n    if length(c)==1 then return (s, false)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), false)\n    if s[0]!=c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]),\
    \ true)\nend", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    return (reverse_delete(s[1:], c), false)\nend", "    if length(s)==0\
    \ || length(c)==0 then return (s, false)\n    \n    let (s,l) = reverse_delete(tail(s),\
    \ c)\n    let (c,r) = reverse_delete(init(c), tail(c))\n    \n    if l == r then\
    \ return (s, true)\n    else return (s, false)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete", "    if length(s)==0\
    \ || length(c)==0 || length(s)==length(c) \n        return (\"false\",false)\n\
    \    end\n    if length(s)==length(c) \n        return (\"true\",true)\n    end\n\
    \    if s[end-1]==c\n        return reverse_delete(s[0..end-1],c)\n    end\n \
    \   return reverse_delete(s[0..end-1],c) + reverse_delete(s[end..end-1],c)\nend\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"", "    if length(s)==0 || length(c)==0\n        return (\"\"\
    , false)\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    if length(s)==0 || length(c)==0\n        return\
    \ (\"false\", false)\n    end\n    if length(s)==1\n        return (reverse_delete(s[1:],\
    \ c), true)\n    end\n    if length(c)==1\n        return (reverse_delete(s, c[1:]),\
    \ true)\n    end\n    if s[end-1]==c[0]\n        return (reverse_delete(s[end-1:end],\
    \ c[1:]), true)\n    end\n    if s[end-1]==c[1]\n        return (reverse_delete(s[end-1:end],\
    \ c[2:]), true)\n    end\n    if s[end-1]==c[2]\n        return (reverse_delete(s[end-1:end],\
    \ c[3:]), true)\n    end\n    if s[end-1]==c[3]\n        return (reverse_delete(s[end-1:end],\
    \ c[4:]), true)\n    end\n    if s[end-1]==c[4]\n        return (reverse_delete(s[end-1:end],\
    \ c[5:]), true)\n    end\n    if s[end-1]==c[5]\n        return (reverse_delete(s[end-1:end],\
    \ c[6:]), true)\n    end\n    if s[end-1]==c[6]\n        return (reverse_delete(s[end-1:end],\
    \ c[7:]), true)\n    end\n    if s[end-1]==c[7]\n        return (reverse_delete(s[end-1:end],\
    \ c[8:]), true)\n    end\n    if s[end-1]==c[8]\n        return (reverse_delete(s[end-1:end],\
    \ c[9:]), true)\n    end\n    if s[end-1]==c[9]\n        return (reverse_delete(s[end-1:end],\
    \ c[10:]), true)\n    end\n    if s[end-1]==c[10]\n        return (reverse_delete(s[end-1:end],\
    \ c[11:]), true)\n    end\n    if s[end-1]==c[11]\n        return (reverse_delete(s[end-1:end],\
    \ c[12:]), true)\n    end\n    if s[end-1]==c[12]\n        return (reverse_delete(s[end-1:end],\
    \ c[13:]), true)\n    end\n    if s[end-1]==c[13]\n        return (reverse_delete(s[end-1:end],\
    \ c[14:]), true)\n    end\n    if s[end-1]==c[14]\n        return (reverse_delete(s[end-1:end],\
    \ c[15:]), true)\n    end\n    if s[end-1]==c[15]\n        return (reverse_delete(s[end-1:end],\
    \ c[16:]), true)\n    end\n    if s[end-1]==c[16]\n        return (reverse_delete(s[end-1:end],\
    \ c[17:]), true)\n    end\n    if s[end-1]==c[17]", "    if length(c) < length(s)\
    \ \n        return (\"false\", false)\n    else if length(c) == length(s) \n \
    \       if c == reverse(s,0) \n            return (\"true\", true)\n        else\
    \ \n            return (\"false\", false)\n    else \n        return (reverse_delete(s,c[1:end-1]),\
    \ reverse_delete(s,c[1:end-1]) == reverse(s,0))\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n", "    if length(s)==0 || length(c)==0\n        return (\"\
    \", false)\n    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    if length(c) < length(s) \n \
    \       return (s, false)\n    else if length(c) == length(s) \n        return\
    \ (s, true)\n    else if length(c) > length(s) \n        return (s, false)\n \
    \   else \n        return (s, true)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>", "    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1:], c),\
    \ true)\nend", "    if length(s)==0 || length(c)==0\n        return (s, false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, false)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    else return (reverse_delete(s, c[1:]), false)\nend\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</", "    if length(s)==0 || length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==1 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==1 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==0 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==0 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==1 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==1 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==0 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==0 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==1 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==1 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==0 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==0 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==1 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==1 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==0 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==0 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==1 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==1 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==0 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==0 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==1 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==1 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==0 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==0 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==1 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==1 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==0 && length(c)==1 \n        return (\"", "  \
    \  if length(s)==0 || length(c)==0 \n        return (s, false)\n    else if length(s)==1\
    \ \n        return (s[end-1]==c[0], true)\n    else if length(c)==1 \n       \
    \ return (s[end-1]==c[0], true)\n    else\n        local s1=reverse(s[end-1:end])\n\
    \        local c1=reverse(c[end-1:end])\n        return (s1==c1, true)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>", "    if length(s)==0 || length(c)==0\n\
    \        return (s, false)\n    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    \n    return (reverse_delete(s[1:], c[1:]), false)\nend",
  "    if length(s)==0 then return (s, false)\n    if length(c)==0 then return (s,\
    \ true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>", "    if length(s)==0 || length(c)==0\n        return (s, false)\n\
    \    end\n    \n    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    else\n        return (reverse_delete(s, c[1:]), false)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n", "    if length(s)==0\
    \ || length(c)==0\n        return (\"\", false)\n    end\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n  \
    \  \n    if length(s)==0 || length(c)==0\n        return (s,false)\n    end\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  if length(s)==0 || length(c)==0\n        return (s, false)\n    \n    if s[0]==c[0]\n\
    \        return (reverse_delete(s[1:], c[1:]), true)\n    \n    return (reverse_delete(s[1:],\
    \ c[1:]), false)\nend\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n",
  "    if length(s)==0 || length(c)==0\n        return (s,false)\n    end\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    if length(s)==0 || length(c)==0 || length(s)==length(c) \n        return (s,\
    \ false)\n    \n    if s[length(s)-1]==c[0] \n        return (reverse_delete(s[0..length(s)]-c[1:],\
    \ c), true)\n    else \n        return (reverse_delete(s[0..length(s)-1], c),\
    \ false)\nend", "    \n    if length(s)==0 || length(c)==0\n        return (\"\
    false\", false)\n    end\n    \n    if s[end-1]==c[0]\n        return reverse_delete(s[end-2..end-1],\
    \ c[1:end-1])\n    end\n    \n    if s[end-1]==c[1]\n        return reverse_delete(s[end-2..end-1],\
    \ c[2:end-1])\n    end\n    \n    if s[end-1]==c[2]\n        return reverse_delete(s[end-2..end-1],\
    \ c[3:end-1])\n    end\n    \n    if s[end-1]==c[3]\n        return reverse_delete(s[end-2..end-1],\
    \ c[4:end-1])\n    end\n    \n    if s[end-1]==c[4]\n        return reverse_delete(s[end-2..end-1],\
    \ c[5:end-1])\n    end\n    \n    if s[end-1]==c[5]\n        return reverse_delete(s[end-2..end-1],\
    \ c[6:end-1])\n    end\n    \n    if s[end-1]==c[6]\n        return reverse_delete(s[end-2..end-1],\
    \ c[7:end-1])\n    end\n    \n    if s[end-1]==c[7]\n        return reverse_delete(s[end-2..end-1],\
    \ c[8:end-1])\n    end\n    \n    if s[end-1]==c[8]\n        return reverse_delete(s[end-2..end-1],\
    \ c[9:end-1])\n    end\n    \n    if s[end-1]==c[9]\n        return reverse_delete(s[end-2..end-1],\
    \ c[10:end-1])\n    end\n    \n    if s[end-1]==c[10]\n        return reverse_delete(s[end-2..end-1],\
    \ c[11:end-1])\n    end\n    \n    if s[end-1]==c[11]\n        return reverse_delete(s[end-2..end-1],\
    \ c[12:end-1])\n    end\n    \n    if s[end-1]==c[12]\n        return reverse_delete(s[end-2..end-1],\
    \ c[13:end-1])\n    end\n    \n    if s[end-1]==c[13]\n        return reverse_delete(s[end-2..end-1],\
    \ c[14:end-1])\n    end\n    \n    if s[end-1]==c[14]\n        return reverse_delete(s[end-2..end-1],\
    \ c[15:end-1])\n    end\n    \n    if s[end-1]==c[15]\n        return reverse_delete(s[end-2..end-1],\
    \ c[16:end-1])\n    end\n    \n    if s[end-1]==c[16]\n        return reverse_delete(s[end-2..end-1],\
    \ c[17:end-1])\n    end\n    \n    if s[end-1]==c[17", "    if length(s)==0 then\
    \ return (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), true)\n    return (reverse_delete(s[1:],\
    \ c[1:]), false)\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell",
  "    if length(s)==0 || length(c)==0\n        return (\"\", false)\n    end\n  \
    \  \n    if s[0]==c[0]\n        return (s[1:], true)\n    end\n    \n    if s[0]!=c[0]\n\
    \        return (s[1:], false)\n    end\n    \n    if reverse(s[1:])==reverse(s[2:end])\n\
    \        return (s[1:], true)\n    end\n    \n    return (\"\", false)\nend\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n", "    \n    if length(s)==0 || length(c)==0\n\
    \        return (s, false)\n    end\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    if length(s)==0 || length(c)==0\n \
    \       return (\"false\", false)\n    end\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    if length(s)==0 || length(c)==0\
    \ \n        return (\"false\", false)\n    end\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    if length(s)==0 || length(c)==0\n\
    \        return (s, false)\n    end\n    if length(s) mod length(c)==0\n     \
    \   return (s, true)\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ length(s)==0 then return (s, false)\n    if length(c)==0 then return (s, true)\n\
    \    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n    return\
    \ (reverse_delete(s[1:], c), true)\nend", "    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1:], c),\
    \ true)\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>", " \
    \   if length(s)==0 || length(c)==0\n        return (s, false)\n    end\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    if length(s)==0 then return (s, false)\n    if length(c)==0 then return (s,\
    \ true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>", "    if length(s)==0 || length(c)==0\n        return (\"false\"\
    ,false)\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    \n    \n    if length(s) <= length(c) || length(c) <=\
    \ length(s) \n        return (s, false)\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if length(c) < length(s) \n        return\
    \ (s, false)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if length(s)==0 || length(c)==0 \n\
    \        return (\"false\", false)\n    else if length(s)==1 \n        return\
    \ (reverse_delete(s[1..end-1], c), true)\n    else if length(c)==1 \n        return\
    \ (reverse_delete(s, c[1..end-1]), true)\n    else \n        \n        \n    \
    \    \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  ", "    if length(s)==0 || length(c)==0\n        return (s, false)\n    end\n\
    \    \n    if s[length(s)-1]==c[0]\n        return (reverse_delete(s[length(s)-2..-1],\
    \ c[1:end-1]), true)\n    else\n        return (reverse_delete(s[length(s)-2..-1],\
    \ c[1:end-1]), false)\n    end\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\"\
    , \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5", "    if length(s)==0 || length(c)==0\
    \ then return (s, false)\n    \n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    else return (reverse_delete(s[1:], c), false)\nend", "  \
    \  if length(c) < length(s) then return (s, false)\n    \n    let (left, right)\
    \ = partition(s == c, s)\n    \n    if left == \"\" then return (right, true)\n\
    \    else return (reverse_delete(left, c), true)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=", "    \n    if length(s)==0 || length(c)==0\n\
    \        return (\"false\", false)\n    end\n    \n    \n    if length(s)==1\n\
    \        return (\"true\", true)\n    end\n    \n    \n    if length(c)==1\n \
    \       return (reverse_delete(s[1..end-1], c[1..end-1]), true)\n    end\n   \
    \ \n    \n    if s[1..end-1] == c[1..end-1]\n        return (reverse_delete(s[2..end-1],\
    \ c[2..end-1]), true)\n    end\n    \n    \n    if s[1..end-1] != c[1..end-1]\n\
    \        return (reverse_delete(s[1..end-1], c[2..end-1]), false)\n    end\n \
    \   \nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete", "    if length(s)==0\
    \ || length(c)==0\n        return (s, false)\n    end\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if length(s)==0\
    \ || length(c)==0 \n        return (\"false\",false)\n    else if length(s)==1\n\
    \        return (c,true)\n    else if length(c)==1\n        return (s,true)\n\
    \    else\n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n", "    if length(s)==0 then\
    \ return (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), true)\n    else return (reverse_delete(s,\
    \ c[1:]), false)\nend\n</cell>\n<code language=julia-1.3>", "    if length(s)==0\
    \ || length(c)==0 \n        return (\"false\", false)\n    end\n    \n    \n \
    \   if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n    else\n\
    \        return (reverse_delete(s[1:], c[1:]), false)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba",
  "    if length(c) < length(s) \n        return (\"false\", false)\n    else \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        ", "    if length(s)==0 || length(c)==0\n        return\
    \ (s,false)\n    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:],c[1:]),true)\n\
    \    \n    return (reverse_delete(s[1:],c),false)\nend", "    if length(c) < length(s)\
    \ \n        return (\"false\", false)\n    else if length(c) > length(s)\n   \
    \     return (\"false\", false)\n    else\n        \n        \n        \n    \
    \    \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n", "    if\
    \ length(c) < length(s) \n        return (\"false\", false)\n    else if length(c)\
    \ == length(s) \n        return (\"true\", true)\n    else \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n", "    if length(s)==0 || length(c)==0 \n        return (\"false\",\
    \ false)\n    else if length(s)==1 \n        return (reverse_delete(s,c[1:end-1]),\
    \ true)\n    else if length(c)==1 \n        return (reverse_delete(s[1:end-1],c),\
    \ true)\n    else \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n", "    if length(s)==0 || length(c)==0\n\
    \        return (s, false)\n    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    \n    if s[0]!=c[0]\n        return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    \n    return (reverse_delete(s[1:], c[1:]), false)\nend",
  "    if length(c) < length(s) then return (s, false)\n    \n    \n    if length(s)\
    \ % 2 == 0 then \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n", "    if length(c) < length(s) \n        return (s, false)\n    else \n\
    \        return (delete(s, c), true)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>", "    if length(s)==0 then return\
    \ (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then\
    \ return (reverse_delete(s[1:], c[1:]), false)\n    else return (reverse_delete(s,\
    \ c[1:]), true)\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell",
  "    if length(s)==0 || length(c)==0\n        return (s, false)\n    \n    if s[0]==c[0]\n\
    \        return (reverse_delete(s[1:], c[1:]), true)\n    \n    return (reverse_delete(s[1:],\
    \ c), false)\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if length(s)==0 || length(c)==0 then return (s, false) else \n        if length(s)==1\
    \ then return (s, false) else \n            if length(c)==1 then return (s, false)\
    \ else \n                if s[0]==c then return (reverse_delete(s[1..], c), true)\
    \ else \n                    if s[0]!=c then return (reverse_delete(s[1..], c),\
    \ false) else \n                        if s[0]==c && reverse_delete(s[1..], c)==s\
    \ then return (s, true) else \n                            return (reverse_delete(s[1..],\
    \ c), false)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-", "    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>", "    if length(s)==0 || length(c)==0\
    \ || length(s)!=length(c) || length(c)==0\n        return (\"false\", false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n    \n  \
    \  if length(s)==0 || length(c)==0\n        return (s, false)\n    end\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if length(c)\
    \ < length(s) \n        return (s, false)\n    else if length(c) > length(s) \n\
    \        return (s, true)\n    else if c == reverse(s[length(s)..length(s)-1])\
    \ \n        return (s, true)\n    else \n        return (s, false)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</", "    if length(s)==0 || length(c)==0 \n        return\
    \ (\"false\",false)\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    if length(s)==0 || length(c)==0\n       \
    \ return (s, false)\n    end\n    if s[0]==c[0]\n        s=reverse_delete(s[1:],c[1:])\n\
    \        return (s,true)\n    end\n    if s[0]!=c[0]\n        s=reverse_delete(s[1:],c)\n\
    \        return (s,true)\n    end\n    s=reverse_delete(s[1:],c[1:])\n    return\
    \ (s,false)\nend", "    if length(s)==0 || length(c)==0\n        return (\"false\"\
    , false)\n    else if length(s)==1\n        return (reverse_delete(s[1..end-1],\
    \ c), true)\n    else if length(c)==1\n        return (reverse_delete(s, c[1..end-1]),\
    \ true)\n    else\n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n", "    if length(s)==0 || length(c)==0\
    \ \n        return (\"false\", false)\n    else if length(s)==1 \n        return\
    \ (reverse_delete(s,c),true)\n    else if length(c)==1 \n        return (reverse_delete(s,c),true)\n\
    \    else\n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        ",
  "    if length(s)==0 then return (s, false)\n    if length(c)==0 then return (s,\
    \ false)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), true)\n\
    \    else return (reverse_delete(s, c[1:]), false)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</", "    if length(c) < length(s) \n        return (s, false)\n    else\
    \ if length(c) == length(s) \n        if c == reverse(s,0) \n            return\
    \ (s, true)\n        else \n            return (\"\", false)\n    else \n    \
    \    return (\"\", false)\nend", "    if length(s)==0 \n        return (\"\",\
    \ false)\n    end\n    if length(c)==0 \n        return (s, true)\n    end\n \
    \   if s[end-1]==c[0] \n        return (reverse_delete(s[end-1:end], c[1:end-1]),\
    \ true)\n    end\n    if s[end-1]!=c[0] \n        return (s, false)\n    end\n\
    \    return (reverse_delete(s[end-1:end], c[1:end-1]), false)\nend\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete",
  "    if length(s)==0 || length(c)==0\n        return (s, true)\n    end\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if length(s)==0 then return (s, false)\n    if length(c)==0 then return (s,\
    \ true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    else return (reverse_delete(s, c[1:]), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>", "    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=", "    if length(s)==0 || length(c)==0\n\
    \        return (s, false)\n    end\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    if length(c) < length(s) \n \
    \       return (\"false\", false)\n    else if length(c) == length(s) \n     \
    \   if s == c \n            return (\"true\", true)\n        else \n         \
    \   return (\"false\", false)\n    else \n        \n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      ", "    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), false)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, false)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend", "  \
    \  if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n    end\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    if length(s)==0 || length(c)==0 then return (s, false)\n    if s[0]==c[0] then\
    \ return (reverse_delete(s[1:], c[1:]), true)\n    else return (reverse_delete(s,\
    \ c[1:]), false)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0", "    if length(s)==0 || length(c)==0 \n        return\
    \ (\"false\",false)\n    else if length(s)==1 \n        return (reverse_delete(s,c),true)\n\
    \    else if length(c)==1 \n        return (reverse_delete(s,c),true)\n    else\
    \ if s[0]==c[0] \n        return (reverse_delete(s[1:],c[1:]),true)\n    else\
    \ if s[0]!=c[0] \n        return (reverse_delete(s[1:],c[1:]),false)\n    else\
    \ \n        return (reverse_delete(s[1:],c[1:]),false)\n    end\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThe question was about how to solve the problem in O(n) time,\
    \ not how to solve it in O(n^2) time.\n<|/ c |>\n<| c |>\nI didn't say that it's\
    \ impossible to solve it in O(n) time. I said that it's impossible to solve it\
    \ in O(n^2) time.\n<|/ c |>\n<| c |>\nI didn't say that it's impossible to solve\
    \ it in O(n) time. I said that it's impossible to solve it in O(n^2) time.\n<|/\
    \ c |>\n<| c |>\nI didn't say that it's impossible to solve it in O(n) time. I\
    \ said that it's impossible to solve it in O(n^2) time.\n<|/ c |>\n<| c |>\nI\
    \ didn't say that it's impossible to solve it in O(n) time. I said that it's impossible\
    \ to solve it in O(n^2) time.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    if length(s)==0\
    \ || length(c)==0 \n        return (\"\", false)\n    \n    \n    if s[0]==c[0]\n\
    \        return (s[1:], true)\n    \n    if s[0]!=c[0]\n        return (s, false)\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    if length(s)==0 || length(c)==0\n        return (s, false)\n    end\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    if length(s)==0 || length(c)==0 || length(s)!=length(c) || length(c)!=1\
    \ \n        return (\"false\", false)\n    end\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, false)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>", "    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s[1:], c), true)\nend\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</", "    if length(s)==0 || length(c)==0\n        return (\"false\"\
    , false)\n    end\n    if length(s)==1\n        return (\"true\", true)\n    end\n\
    \    if length(c)==1\n        return (reverse_delete(s[1..end-1], c[1..end-1]),\
    \ true)\n    end\n    if s[end-1]==c[0]\n        return (reverse_delete(s[1..end-1],\
    \ c[1..end-1]), true)\n    end\n    if s[end-1]!=c[0]\n        return (reverse_delete(s[1..end-1],\
    \ c[1..end-1]), false)\n    end\n    return (reverse_delete(s[1..end-1], c[1..end-1]),\
    \ true)\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n", "    if length(s)==0 || length(c)==0\n        return (s, false)\n  \
    \  end\n    if s[0]==c[0]\n        s=reverse_delete(s[1:], c[1:])\n        return\
    \ (s, true)\n    end\n    if s[0]!=c[0]\n        s=reverse_delete(s[1:], c)\n\
    \        return (s, false)\n    end\n    s=reverse_delete(s, c[1:])\n    return\
    \ (s, true)\nend\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell", "    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>", "    if length(s)==0 || length(c)==0\n\
    \        return (\"\", false)\n    end\n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    if length(s)==0 || length(c)==0\n\
    \        return (\"false\", false)\n    end\n    if length(s)==1\n        return\
    \ (reverse_delete(s[1:], c), true)\n    end\n    if length(c)==1\n        return\
    \ (reverse_delete(s, c[1:]), true)\n    end\n    if s[end]==c[1]\n        return\
    \ (reverse_delete(s[1:end-1], c[2:end]), true)\n    end\n    if s[end]!=c[1]\n\
    \        return (reverse_delete(s[1:end-1], c[2:end]), false)\n    end\n    return\
    \ (reverse_delete(s[1:end-1], c[2:end]), true)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n", "    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1:], c),\
    \ true)\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>", " \
    \   if length(s)==0 || length(c)==0 then return (s, false)\n    else if length(s)==1\
    \ then return (s, false)\n    else if length(c)==1 then return (s, false)\n  \
    \  else if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n    else\
    \ if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]), false)\n    else return\
    \ (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend", "   \
    \ if length(s)==0 || length(c)==0\n        return (\"false\", false)\n    end\n\
    \    if length(s) is 1\n        return (c, true)\n    end\n    if length(c) is\
    \ 1\n        return (s, true)\n    end\n    if s[end-1]==c[1]\n        return\
    \ (reverse_delete(s[end-1:end], c[end-1:end]), true)\n    end\n    if s[end-1]!=c[1]\n\
    \        return (reverse_delete(s[end-1:end], c[end-1:end]), false)\n    end\n\
    \    return (reverse_delete(s[end-1:end], c[end-1:end]), true)\nend\n</cell>\n\
    <code language=julia-1.0>", "    if length(c) < length(s) \n        error(\"The\
    \ length of c should be greater than the length of s\")\n    end\n    \n    if\
    \ length(c) == 0 \n        return (s, true)\n    end\n    \n    if length(c) ==\
    \ 1 \n        if c == s[end] \n            return (s[end], true)\n        end\n\
    \        return (s, false)\n    end\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n    if length(s)==0\
    \ || length(c)==0\n        return (s, false)\n    end\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if length(s)==0 ||\
    \ length(c)==0\n        return (\"false\", false)\n    end\n    \n    \n    if\
    \ length(find(s,c)) == length(find(reverse(s, c), c))\n        return (\"true\"\
    , true)\n    end\n    \n    return (\"false\", false)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")", "    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    else return (reverse_delete(s, c[1:]), true)\nend", "    \n    if\
    \ length(s)==0 || length(c)==0\n        return (s, false)\n    end\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  if length(s)==0 || length(c)==0\n        return (s, false)\n    \n    if s[0]==c[0]\n\
    \        return (reverse_delete(s[1:], c[1:]), true)\n    \n    return (reverse_delete(s[1:],\
    \ c[1:]), false)\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n",
  "    if length(s)==0 then return (s, false)\n    if length(c)==0 then return (s,\
    \ true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>", "    if length(s)==0 || length(c)==0\n        return (s, false)\n\
    \    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n\
    \    \n    return (reverse_delete(s[1:], c[1:]), false)\nend", "    if length(s)==0\
    \ || length(c)==0 \n        return (\"false\", false)\n    \n    if s[0]==c[0]\n\
    \        return (reverse_delete(s[1:], c[1:]), true)\n    \n    return (reverse_delete(s[1:],\
    \ c[1:]), false)\nend", "    if length(s)==0 || length(c)==0 then return (s, false)\n\
    \    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n    else\
    \ return (reverse_delete(s, c[1:]), true)\nend", "    if length(s)==0 then return\
    \ (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then\
    \ return (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1:],\
    \ c[1:]), true)\nend", "    if length(c) < length(s) \n        error(\"c is shorter\
    \ than s\")\n    end\n    \n    \n    if length(s) % 2 != 0 \n        error(\"\
    s is not a palindrome\")\n    end\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    if length(s)==0 then return\
    \ (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then\
    \ return (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1:],\
    \ c), true)\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>", "    if length(s)==0 || length(c)==0 \n        return\
    \ (\"false\", false)\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    if length(s)==0 || length(c)==0\n       \
    \ return (s, false)\n    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    \n    else if s[0]!=c[0]\n        return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    \n    else\n        return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    end\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\"\
    , \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab", "    if length(s)==0 then return (s, false)\n    if length(c)==0 then return\
    \ (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>", "    if length(c) < length(s) \n        return (s, false)\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if length(s)==0 || length(c)==0 \n        return (s,\
    \ false)\n    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    \n    if s[0]!=c[0]\n        return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    \n    return (reverse_delete(s[1:], c[1:]), true)\nend", "    if\
    \ length(s)==0 || length(c)==0 \n        return (\"false\",false)\n    else if\
    \ length(s)==1 \n        return (reverse_delete(s,c),true)\n    else if length(c)==1\
    \ \n        return (reverse_delete(s,c),true)\n    else if s[0]==c[0]\n      \
    \  return (reverse_delete(s[1:],c[1:]),true)\n    else if s[0]!=c[0]\n       \
    \ return (reverse_delete(s[1:],c[1:]),false)\n    else\n        return (reverse_delete(s[1:],c[1:]),false)\n\
    \    end\nend\n\"\"\"\n    We are given two strings s and c, you have to delete\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"", "    if length(s)==0 || length(c)==0\n  \
    \      return (s, false)\n    end\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    if length(s)==0 || length(c)==0\n\
    \        return (s, false)\n    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    \n    if s[0]!=c[0]\n        return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    \n    return (reverse_delete(s[1:], c[1:]), true)\nend",
  "    if length(s)==0 || length(c)==0 then return (s, false)\n    if s[0]==c[0] then\
    \ return (reverse_delete(s[1:], c[1:]), false)\n    else return (reverse_delete(s[1:],\
    \ c), true)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>", "    if length(s)==0 || length(c)==0\n        return\
    \ (\"false\", false)\n    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    \n    return (reverse_delete(s[1:], c[1:]), false)\nend",
  "    if length(s)==0 || length(c)==0\n        return (\"false\",false)\n    end\n\
    \    if length(find(s,c))==0\n        return (\"false\",false)\n    end\n    if\
    \ length(find(s,c))>0\n        delete!(s,find(s,c))\n    end\n    if length(find(s,c))==0\n\
    \        return (\"false\",false)\n    end\n    if length(find(s,c))>0\n     \
    \   delete!(s,find(s,c))\n    end\n    if length(find(s,c))==0\n        return\
    \ (\"false\",false)\n    end\n    if length(find(s,c))>0\n        delete!(s,find(s,c))\n\
    \    end\n    if length(find(s,c))==0\n        return (\"false\",false)\n    end\n\
    \    if length(find(s,c))>0\n        delete!(s,find(s,c))\n    end\n    if length(find(s,c))==0\n\
    \        return (\"false\",false)\n    end\n    if length(find(s,c))>0\n     \
    \   delete!(s,find(s,c))\n    end\n    if length(find(s,c))==0\n        return\
    \ (\"false\",false)\n    end\n    if length(find(s,c))>0\n        delete!(s,find(s,c))\n\
    \    end\n    if length(find(s,c))==0\n        return (\"false\",false)\n    end\n\
    \    if length(find(s,c))>0\n        delete!(s,find(s,c))\n    end\n    if length(find(s,c))==0\n\
    \        return (\"false\",false)\n    end\n    if length(find(s,c))>0\n     \
    \   delete!(s,find(s,c))\n    end\n    if length(find(s,c))==0\n        return\
    \ (\"false\",false)\n    end\n    if length(find(s,c))>0\n        delete!(s,find(s,c))\n\
    \    end\n    if length(find(s,c))==0\n        return (\"false\",false)\n    end\n\
    \    if length(find(s,c))>0\n        delete!(s,find(s,c))\n    end\n    if length(find(s,c))==0\n\
    \        return (\"false\",false)\n    end\n    if length(find(s,c))>0\n     \
    \   delete!(s,find(s,c))\n    end\n    if length(find(s,c))==0\n        return\
    \ (\"false\",false)\n    end\n    if length(find(s,c))>0\n        delete!(s,find(s,c))\n\
    \    end\n    if length(find(s,c))==0\n        return (\"false\",false)\n    end\n\
    \    if length(find(s,c))>0\n        delete!(s,find(s,c))\n    end", "    if length(s)==0\
    \ then return (s, false)\n    if length(c)==0 then return (s, true)\n    if length(s)==1\
    \ then return (s, true)\n    if length(c)==1 then return (s, false)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), false)\n    if s[0]!=c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), true)\n    return (reverse_delete(s[1:], c[1:]),\
    \ true)\nend", "    \n    if length(s)==0 || length(c)==0 \n        return (\"\
    false\", false)\n    end\n    \n    if s[0]==c[0] \n        return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    end\n    \n    if s[0]!=c[0] \n        return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    end\n    \n    return (reverse_delete(s[1:], c[1:]), false)\n\
    end\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcded", "    if length(s)==0 || length(c)==0 \n        return\
    \ (\"false\", false) \n    else if length(s)==1 \n        return (reverse_delete(s[1:],\
    \ c), true) \n    else if length(c)==1 \n        return (reverse_delete(s, c[1:]),\
    \ true) \n    else \n        \n        if s[0]==c[0] \n            return (reverse_delete(s[1:],\
    \ c[1:]), true) \n        else \n            return (reverse_delete(s, c[1:]),\
    \ false) \nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\",\
    \ \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>", "    if length(s)==0 || length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==1 \n        return (reverse_delete(s, c), true)\n\
    \    else if length(c)==1 \n        return (reverse_delete(s, c), true)\n    else\
    \ if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n    else\n\
    \        return (reverse_delete(s[1:], c[1:]), false)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5", " \
    \   if length(s)==0 || length(c)==0\n        return (\"\", false)\n    end\n \
    \   if length(c)>length(s) \n        return (\"\", false)\n    end\n    if s[end-1]==c[0]\n\
    \        return (reverse_delete(s[end-1:end], c[end-1]), true)\n    end\n    if\
    \ s[end-1]!=c[0]\n        return (\"\", false)\n    end\n    return (reverse_delete(s[end-1:end],\
    \ c[end-1]), false)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\"\
    , \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-", "    if length(s)==0 || length(c)==0\n\
    \        return (s,false)\n    end\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    \n    \n    if length(s)==0 ||\
    \ length(c)==0\n        return (s,false)\n    end\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    if length(s)==0 || length(c)==0\n\
    \        return (\"false\", false)\n    end\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    if length(s)==0 then return\
    \ (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then\
    \ return (reverse_delete(s[1:], c[1:]), false)\n    if s[0]!=c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), true)\n    return (reverse_delete(s[1:], c[1:]),\
    \ true)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=", "    if length(s)==0 || length(c)==0 \n        return (s, false)\n\
    \    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n\
    \    \n    if s[0]!=c[0]\n        return (reverse_delete(s[1:], c[1:]), false)\n\
    \    \n    return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=", "    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>", "    \n    if length(s)==0 ||\
    \ length(c)==0\n        return (s, false)\n    end\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if length(s)==0 then\
    \ return (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1:],\
    \ c), true)\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>",
  "    if length(s)==0 || length(c)==0 \n        return (\"false\",false)\n    end\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    if length(c) < length(s) \n        return (s, false)\n    else if length(c)\
    \ == length(s) \n        if c == reverse(s[length(s)..]) \n            return\
    \ (s[length(s)..], true)\n        else \n            return (s, false)\n    else\
    \ \n        return (s, false)\nend", "    if length(c) < length(s) then return\
    \ (s, false)\n    \n    let rev_s = reverse(s)\n    let rev_c = reverse(c)\n \
    \   \n    if rev_s == rev_c then return (s, true)\n    else return (s, false)\n\
    end", "    if length(s)==0 then return (s, false)\n    if length(c)==0 then return\
    \ (s, false)\n    if length(s)==1 then return (s, false)\n    if length(c)==1\
    \ then return (s, false)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), true)\n\
    \    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]), true)\n    return\
    \ (reverse_delete(s[1:], c[1:]), true)\nend", "    if length(s)==0 || length(c)==0\n\
    \        return (\"\", false)\n    end\n    \n    \n    if s[0]==c[0]\n      \
    \  \n        if length(s)==1\n            return (\"\", false)\n        else\n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n", "    if length(s)==0\
    \ || length(c)==0 \n        return (s, false)\n    \n    if s[0]==c[0] \n    \
    \    return (reverse_delete(s[1:], c[1:]), true)\n    \n    if s[0]!=c[0] \n \
    \       return (reverse_delete(s[1:], c[1:]), false)\n    \n    return (reverse_delete(s[1:],\
    \ c[1:]), reverse_delete(s, c[1:]))\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n", "    if length(s)==0 || length(c)==0 \n        return (\"\", false)\n\
    \    end\n    if s[length(s)-1]==c[0] \n        return (s[0..length(s):-1], true)\n\
    \    end\n    if s[length(s)-1]!=c[0] \n        return (s[0..length(s):-1], false)\n\
    \    end\n    reverse_delete(s[1..end-1], c[1:end-1])\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</", "    if length(s)==0 || length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==1 \n        return (reverse_delete(s[1:], c),\
    \ true)\n    else if length(c)==1 \n        return (reverse_delete(s, c[1:]),\
    \ true)\n    else \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        ",
  "    if length(s)==0 || length(c)==0\n        return (s, false)\n    end\n    \n\
    \    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n    else\n\
    \        return (s, false)\n    end\nend", "    if length(s)==0 || length(c)==0\n\
    \        return (s, false)\n    end\n    if length(s)==1\n        return (s[end-1]\
    \ == c, true)\n    end\n    if length(c)==1\n        return (s[end-1] == c, true)\n\
    \    end\n    if s[end-1] == c\n        return (reverse_delete(s[end-2:end], c),\
    \ true)\n    end\n    if s[end-1] != c\n        return (reverse_delete(s[end-2:end],\
    \ c), false)\n    end\n    return (reverse_delete(s[end-1:end-2], c), true)\n\
    end\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n",
  "    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n    else\
    \ if length(s)==1 \n        return (reverse_delete(s,c), true)\n    else if length(c)==1\n\
    \        return (reverse_delete(s,c), true)\n    else\n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        ", "    if length(s)==0 || length(c)==0\
    \ || length(s)==length(c) || length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 \n        return (reverse_delete(s,c[1:end-1]), true)\n\
    \    else if length(c)==1 \n        return (reverse_delete(s[1:end],c), true)\n\
    \    else\n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n",
  "    if length(s)==0 || length(c)==0 then return (s, false)\n    if length(s)==1\
    \ then return (s, false)\n    if length(c)==1 then return (s, false)\n    if s[length(s)-1]==c\
    \ then return (reverse_delete(substring(s,1,length(s)-1), c), true)\n    if s[length(s)-1]!=c\
    \ then return (reverse_delete(substring(s,1,length(s)-1), c), false)\n    if c[length(c)-1]==c\
    \ then return (reverse_delete(substring(s,1,length(s)-1), c), true)\n    if c[length(c)-1]!=c\
    \ then return (reverse_delete(substring(s,1,length(s)-1), c), false)\n    return\
    \ (reverse_delete(substring(s,1,length(s)-1), c), false)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete", "    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1:], c),\
    \ true)\nend\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>", " \
    \   if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n    else\
    \ if length(s)==1\n        return (s[end-1]==c[1], true)\n    else if length(c)==1\n\
    \        return (s[end-1]==c[1], true)\n    else\n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        ", "    if length(s)==0 then\
    \ return (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), false)\n    if s[0]!=c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), true)\n    return (reverse_delete(s[1:], c[1:]),\
    \ true)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=", "    if length(s)==0 || length(c)==0\n        return (s, false)\n\
    \    end\n    \n    if s[end]==c[0]\n        return (reverse_delete(s[end+1:end+length(c)-1],\
    \ c[1:end-1]), true)\n    else\n        return (reverse_delete(s[end+1:end+length(c)-1],\
    \ c[1:end-1]), false)\n    end\nend", "    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, false)\n    if length(s)==1 then return (s,\
    \ false)\n    if length(c)==1 then return (s, false)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), true)\n    if s[0]!=c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), reverse_delete(s,\
    \ c[1:]))\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\",\
    \ \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab",
  "    if length(s)==0 || length(c)==0 || length(s) != length(c) || length(c) != 1\n\
    \        return (\"false\",false)\n    end\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    if length(c) < length(s) \n        error(\"The\
    \ length of c should be greater than the length of s\")\n    end\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    if\
    \ length(s)==0 || length(c)==0\n        return (s, true)\n    end\n    \n    if\
    \ length(s)==1\n        return (s, true)\n    end\n    \n    if length(c)==1\n\
    \        return (s, false)\n    end\n    \n    if s[end-1]==c[0]\n        delete!(s,\
    \ end-1)\n        return (s, true)\n    end\n    \n    if s[end-1]!=c[0]\n   \
    \     delete!(s, end-1)\n        return (s, false)\n    end\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(s)==0\
    \ || length(c)==0 then return (s, false)\n    if length(s)==1 then return (s,\
    \ false)\n    if length(c)==1 then return (s, false)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1..end-1], c), true)\nend\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-", "    if\
    \ length(s)==0 || length(c)==0\n        return (\"false\", false)\n    end\n \
    \   if length(s)==1\n        return (\"true\", true)\n    end\n    if length(c)==1\n\
    \        return (reverse_delete(s, c[1:end-1]), true)\n    end\n    if s[end]==c[0]\n\
    \        return (reverse_delete(s[2:end], c[1:end-1]), true)\n    end\n    return\
    \ (reverse_delete(s[2:end], c[1:end-1]), false)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>", "    if length(s)==0 || length(c)==0\n\
    \        return (s, false)\n    end\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    if length(s)==0 || length(c)==0\n\
    \        return (\"\", false)\n    end\n    if s[0]==c[0]\n        return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    else\n        return (reverse_delete(s, c[1:]), false)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if length(s)==0 then\
    \ return (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), true)\n    else return (reverse_delete(s,\
    \ c[1:]), false)\nend\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"bc\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"bc\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"bc\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"bc\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"bc\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    bc\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"bc\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"bc\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"bc\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"bc\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"bc\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"bc\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"bc\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    bc\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"bc\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"bc\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"bc\")\n</cell",
  "    \n    \n    if length(s) <= length(c) || length(c) <= length(s) \n        return\
    \ (\"false\", false)\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if length(c) < length(s) \n        return (s, false)\n    else\
    \ if length(c) > length(s) \n        return (s, true)\n    else \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n", "    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c), true)\nend", "    if length(s)==0\
    \ || length(c)==0 \n        return (\"false\", false)\n    else if length(s)==1\
    \ && length(c)==1 \n        return (\"true\", true)\n    else if length(s)==1\
    \ && length(c)>1 \n        return (\"false\", false)\n    else if length(s)>1\
    \ && length(c)==1 \n        return (\"false\", false)\n    else if length(s)>1\
    \ && length(c)>1 \n        return (\"false\", false)\n    else if length(s)==1\
    \ && length(c)==1 \n        return (\"true\", true)\n    else if length(s)==1\
    \ && length(c)>1 \n        return (\"true\", true)\n    else if length(s)>1 &&\
    \ length(c)==1 \n        return (\"true\", true)\n    else if length(s)>1 && length(c)>1\
    \ \n        return (\"true\", true)\n    else if length(s)==0 && length(c)==0\
    \ \n        return (\"false\", false)\n    else if length(s)==0 && length(c)>0\
    \ \n        return (\"false\", false)\n    else if length(s)>0 && length(c)==0\
    \ \n        return (\"false\", false)\n    else if length(s)>0 && length(c)>0\
    \ \n        return (\"false\", false)\n    else if length(s)==0 && length(c)==0\
    \ \n        return (\"true\", true)\n    else if length(s)==0 && length(c)>0 \n\
    \        return (\"true\", true)\n    else if length(s)>0 && length(c)==0 \n \
    \       return (\"true\", true)\n    else if length(s)>0 && length(c)>0 \n   \
    \     return (\"true\", true)\n    else if length(s)==0 && length(c)==0 \n   \
    \     return (\"true\", true)\n    else if length(s)==0 && length(c)>0 \n    \
    \    return (\"true\", true)\n    else if length(s)>0 && length(c)==0 \n     \
    \   return (\"true\", true)\n    else if length(s)>0 && length(c)>0 \n       \
    \ return (\"true\", true)\n    else if length(s)==0 && length(c)==0 \n       \
    \ return (\"true\", true)\n    else if length(s)==0 && length(c)>0 \n        return\
    \ (\"true\", true)\n    else if length(s)==0 && length(c)==0 \n        return\
    \ (\"true\", true)\n    else if length(s)==0 && length(c)>0 \n        return (\"\
    true\", true)\n    else if length(s)==0 && length(c)==0 \n        return (\"true\"\
    , true)\n    else if length(s)==0 && length(c)>0 \n        return (\"true\", true)\n\
    \    else if length(s)==0 && length(c)==0 \n        return (\"true\", true)\n\
    \    else ", "    if length(s)==0 || length(c)==0\n        return (s, false)\n\
    \    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n\
    \    \n    if s[0]!=c[0]\n        return (reverse_delete(s[1:], c[1:]), false)\n\
    \    \n    return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=", "    if length(s)==0 || length(c)==0\n \
    \       return (s, false)\n    end\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    if length(c) < length(s) then\
    \ return (s, false) else return (reverse_delete(s, substring(s, 0, length(c)))\
    \ , \n    reverse_delete(s, substring(s, length(c), length(s)))==reverse(s))\n\
    end\n\"\"\"\n    We are given two strings s and c, you have to delete all the\
    \ characters in s that are equal to any character in c\n    then check if the\
    \ result string is palindrome.\n    A string is called palindrome if it reads\
    \ the same backward as forward.\n    You should return a tuple containing the\
    \ result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"", "    if length(s)==0 || length(c)==0 \n \
    \       return (\"false\", false)\n    end\n    if s[length(s)-1]==c[0] \n   \
    \     return reverse_delete(s[length(s)-2..-1], c[1:length(c)])\n    else\n  \
    \      return reverse_delete(s[length(s)-2..-1], c[1:length(c)])\n    end\nend\n\
    </cell>\n<code language=julia-1.0>", "    if length(s)==0 || length(c)==0 \n \
    \       return (\"false\",false)\n    end\n    if length(s) mod length(c)==0 \n\
    \        return (\"false\",false)\n    end\n    if s[end-1]==c[0] \n        return\
    \ (reverse_delete(s[end-1:end],c[1:end-1]),true)\n    end\n    if s[end-1]!=c[0]\
    \ \n        return (reverse_delete(s[end-1:end],c[1:end-1]),false)\n    end\n\
    \    return (reverse_delete(s[end-1:end],c[1:end-1]),true)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>", "    if length(s)==0 then return\
    \ (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then\
    \ return (reverse_delete(s[1:], c[1:]), true)\n    else return (reverse_delete(s[1:],\
    \ c), false)\nend", "    if length(s)==0 || length(c)==0 || length(s)==length(c)\
    \ || length(c)==0 \n        then return (s, false)\n    else \n        let (s,r)\
    \ = reverse_delete(substring(s,1,length(s)-1),substring(c,1,length(c))) \n   \
    \     let (s,r) = reverse_delete(substring(s,1,length(s)-1),substring(c,1,length(c)))\
    \ \n        return (s,r==reverse(s))\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>", "    if length(s)==0 || length(c)==0\n\
    \        return (s, true)\n    end\n    \n    if length(s) >= length(c)\n    \
    \    deleted = s[length(s)-length(c):length(s)] \n        return (deleted, true)\n\
    \    else\n        deleted = s[length(s)-length(c)+1:length(s)] \n        return\
    \ (deleted, false)\n    end\nend", "    if length(s)==0 || length(c)==0 \n   \
    \     return (\"false\", false)\n    end\n    \n    \n    if s[0]==c[0]\n    \
    \    \n        \n        if reverse_delete(s[1:], c[1:]) == (\"false\", false)\n\
    \            return (\"true\", true)\n        end\n        \n    else\n      \
    \  \n        if reverse_delete(s[1:], c[1:]) == (\"true\", true)\n           \
    \ return (\"false\", true)\n        end\n    end\n    \n    return (\"false\"\
    , false)\nend", "    if length(s)==0 || length(c)==0 \n        return (\"false\"\
    , false)\n    end\n    if length(s) mod length(c)==0 \n        return (\"false\"\
    , false)\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    else return (reverse_delete(s, c[1:]),\
    \ true)\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c), true)\nend", "    if length(s)==0\
    \ then return (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), false)\n    else return (reverse_delete(s,\
    \ c[1:]), true)\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell",
  "    if length(c) < length(s) \n        return (s, false)\n    \n    let (left,\
    \ right) = partition(s, c)\n    \n    if left == \"\"\n        return (right,\
    \ true)\n    \n    if right == \"\"\n        return (left, true)\n    \n    let\
    \ (left, right) = reverse_delete(left, c)\n    let (left, right) = reverse_delete(right,\
    \ c)\n    \n    return (left + right, left == right)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"", "    if length(s)==0 then return (s, false)\n    if length(c)==0 then return\
    \ (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]), true)\n    return\
    \ (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=", "    if length(c) < length(s) \n       \
    \ return (\"false\", false)\n    else if length(c) == length(s) \n        if c\
    \ == reverse(s) \n            return (\"true\", true)\n        else \n       \
    \     return (\"false\", false)\n    else \n        return (reverse_delete(substring(s,\
    \ 0, length(c)), c), reverse_delete(substring(s, length(c)), c))\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
