name: HumanEval_29_filter_by_prefix
language: jl
prompt: "\"\"\" Filter an input vector of strings only for ones that start with a\
  \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
  abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"\
  \nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
  \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
  , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
  ])\nend\n"
completions: ["    strings = filter((x) -> startswith(prefix, x), strings)\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that filters an input vector of strings only for ones that end with a given\
    \ suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"", "   \
    \ \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end", "    filter_by_prefix(\n        map(x -> startswith(x, prefix), strings),\n\
    \        prefix\n    )\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(string,\
    \ prefix) returns a vector containing only strings that start with the given prefix.",
  "    strings = filter( x -> startswith(prefix, x), strings)\n    return strings\n\
    end", "    \n    prefix_len = length(prefix)\n    \n    strings = filter( x ->\
    \ startswith(x, prefix), strings)\n    \n    strings = filter( x -> length(x)\
    \ > prefix_len, strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input vector of strings only for\
    \ ones that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n  \
    \  []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\"]\n    \"\"\"", "    \n    strings = strings[:]\n    \n    for\
    \ string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that filters an input vector of strings only for\
    \ ones that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"\
    , \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    cd\")\n[\"bcd\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings =\
    \ Vector{String}()\n    \n    for string in strings\n        if string.startswith(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters strings by a predicate that returns true if the string\
    \ starts with \"a\" and false otherwise. For example, filter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\") should return [\"abc\", \"array\"].", " \
    \   \n    strings = filter( x -> startswith(prefix, x), strings)\n    \n    return\
    \ strings\nend", "    \n    strings = strings[:]\n    \n    for s in strings\n\
    \        if startswith(prefix, s)\n            delete!(s, prefix)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input vector of strings only for\
    \ ones that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n  \
    \  []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"array\"]\n    \"\"\"", "    \n    strings = strings[:]\n  \
    \  \n    for s in strings\n        if startswith(prefix, s)\n            delete!(s,\
    \ prefix)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}",
  "    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abde\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd", "    \n    strings = filter(x->startswith(x, prefix), strings)\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix([],\
    \ \"a\")", "    strings = filter((x) -> startswith(prefix, x), strings)\n    return\
    \ strings\nend", "    \n    strings = strings[:]\n    \n    strings = filter((x)\
    \ -> startswith(prefix, x), strings)\n    \n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vector, prefix)", "    \n    prefix_length\
    \ = length(prefix)\n    \n    if prefix_length == 0\n        return strings\n\
    \    \n    strings_filtered = Vector{String}(undef, 0)\n    \n    for string in\
    \ strings\n        if startswith(string, prefix)\n            push!(strings_filtered,\
    \ string)\n        end\n    end\n    \n    return strings_filtered\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an array\
    \ of strings only for those that end with a given suffix.", "    \n    strings\
    \ = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end", "    \n    strings = strings[:]\n    \n    for s in strings\n        if\
    \ startswith(s, prefix)\n            delete!(s, prefix)\n        end\n    end\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vector,\
    \ prefix)", "    strings = filter(x->startswith(x, prefix), strings)\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vector,\
    \ prefix)", "    strings = filter(x->startswith(x, prefix), strings)\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that filters an input vector of strings only for ones that end with a given\
    \ suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix",
  "    \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end", "    strings = filter(x->startswith(x,prefix), strings)\n    return strings\n\
    end", "    \n    filtered_strings = Vector{String}()\n    \n    for string in\
    \ strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters an input vector of strings only\
    \ for ones that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n\
    \    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\"]\n    \"\"\"", "    \n    prefix_length = length(prefix)\n   \
    \ \n    strings = filter(x->startswith(String(x), prefix), strings)\n    \n  \
    \  strings = filter(x->startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter(x->startswith(String(x), prefix), strings)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter(x->startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter(x->startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter(x->startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter(x->startswith(String(x), prefix), strings)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter(x->startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter(x->startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter(x->startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter(x->startswith(String(x), prefix), strings)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter(x->startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter(x->startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter(x->startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter(x->startswith(String(x), prefix), strings)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter(x->startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter(x->startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter(x->startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter(x->startswith(String(x), prefix), strings)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter(x->startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter(x->startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter(x->", "    \n    strings = strings[:]\n    \n    strings\
    \ = filter( x -> startswith(x, prefix), strings)\n    \n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"a\")\n</cell>\n<text>\nExercise 3: Filter a vector of strings\
    \ based on a regular expression", "    \n    strings = filter(x->startswith(x,\
    \ prefix), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise: Write a function that filters strings by a prefix and suffix.", "  \
    \  \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"", "   \
    \ \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n    \n\
    \    for string in strings\n        if string.startswith(prefix)\n           \
    \ strings = filter!(x -> x != string, strings)\n        end\n    end\n    \n \
    \   return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"", "   \
    \ \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(s,\
    \ prefix)\n            delete!(s, prefix)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters strings by a predicate that returns true if the string starts with\
    \ a given prefix.", "    strings = filter(x->startswith(x, prefix), strings)\n\
    \    return strings\nend", "    \n    strings = strings[:]\n    \n    for string\
    \ in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend", "    strings = filter(x->startswith(x,\
    \ prefix), strings)\n    return strings\nend", "    \n    strings = strings[:]\n\
    \    \n    for s in strings\n        if startswith(prefix, s)\n            delete!(s,\
    \ prefix)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vector, prefix)", "    \n    prefix_length\
    \ = length(prefix)\n    \n    strings = filter(x->startswith(prefix, x), strings)\n\
    \    \n    if prefix_length == 0\n        strings\n    else\n        map(x->substring(x,\
    \ prefix_length), strings)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2: filter_by_prefix", "    strings = strings[start:end] \n    \n    return\
    \ strings\nend", "    strings = filter( x -> startswith(prefix, x), strings)\n\
    \    return strings\nend", "    strings = filter( x -> startswith(x, prefix),\
    \ strings)\n    return strings\nend", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix) == true\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that filters an input vector of strings only\
    \ for ones that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n\
    \    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\"]\n    \"\"\"", "    strings = strings[start:end]\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ vector of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\"]\n    \"\"\"", "    \n    strings = strings[:]\n    \n\
    \    for s in strings\n        if startswith(prefix, s)\n            delete!(s,\
    \ prefix)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(String[], String)", "    \n    prefix_length\
    \ = length(prefix)\n    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if string.startswith(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ vector of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\"]\n    \"\"\"", "    \n    strings = strings[:]\n    \n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  strings.remove(string)\n        end\n    end\n    \n    return strings\nend",
  "    \n    prefix_length = length(prefix)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    if prefix_length == 0\n        return strings\n\
    \    else\n        \n        prefix_strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n        \n        prefix_strings = filter(x->length(x) >\
    \ prefix_length, prefix_strings)\n        \n        return prefix_strings\n  \
    \  end\nend", "    \n    prefix_length = length(prefix)\n    \n    strings_filtered\
    \ = Vector{String}()\n    \n    for string in strings\n        if startswith(string,\
    \ prefix)\n            strings_filtered << string\n        end\n    end\n    \n\
    \    return strings_filtered\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"cde\", \"array\"]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\",\
    \ \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bc\")\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"abc\", \"cde\", \"array\"]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bcdcde\")\n[\"\
    abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"bcdcdea\")\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeab\")\n[\"abc\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabd\"\
    )\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcdeabdc\")\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabdca\")\n[\"abc\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabdcab\"\
    )\n[\"abc", "    strings = filter( x -> startswith(prefix, x), strings)\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters an input vector of strings only for ones that end with a given\
    \ suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"", "   \
    \ strings = filter((x) -> startswith(prefix, x), strings)\n    return strings\n\
    end", "    strings = filter( x -> startswith(prefix, x), strings)\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that filters an input vector of strings only for ones that end with a given\
    \ suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"", "   \
    \ \n    strings = strings[:]\n    \n    strings = filter(x->startswith(x, prefix),\
    \ strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that filters an input vector of strings only for\
    \ ones that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n  \
    \  []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"array\"]\n    \"\"\"", "    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    return strings\nend", "    strings = filter((x) -> startswith(prefix,\
    \ x), strings)\n    return strings\nend", "    filter!(x -> startswith(prefix,\
    \ x), strings)\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise: Write\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"", "    filter!(x -> startswith(x, prefix), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an array of strings only for those that\
    \ end with a given suffix.", "    \n    strings = strings[:]\n    \n    prefix_idx\
    \ = 1\n    \n    for string in strings\n        if string.startswith(prefix)\n\
    \            strings[prefix_idx] = string\n            prefix_idx += 1\n     \
    \   end\n    end\n    \n    return strings\nend", "    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input vector of strings only for\
    \ ones that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n  \
    \  []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\"]\n    \"\"\"", "    \n    strings = strings[:]\n    \n    for\
    \ string in strings\n        if string.starts_with(prefix)\n            remove!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters strings by a prefix, but only if the\
    \ prefix is at the start of the string.", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend", "    \n    strings\
    \ = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that filters an\
    \ input vector of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"", "    strings = strings[beginswith(strings,\
    \ prefix)]\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that filters strings by a regex pattern.", "    \n    filter_by_prefix(\n  \
    \      filter(\n            x -> startswith(prefix, x),\n            strings),\n\
    \        prefix)\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vector,\
    \ prefix)", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            delete!(strings, string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 3: Filtering by prefix\nWrite a function that filters an input vector of strings\
    \ only for ones that start with a given prefix.\nFor example, given the following\
    \ input vector:", "    strings = filter(x->startswith(x, prefix), strings)\n \
    \   return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}", "    \n    strings = strings[:]\n    \n  \
    \  for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\n\
    Exercise 3: Filter a vector of strings for strings that end with a given suffix\n\
    Write a function that filters a vector of strings only for strings that end with\
    \ a given suffix.\nFor example, given the following input:", "    \n    strings\
    \ = strings[:]\n    \n    strings = filter(x->startswith(prefix, x), strings)\n\
    \    \n    return strings\nend", "    \n    strings = strings[:]\n    \n    for\
    \ s in strings\n        if startswith(s, prefix)\n            delete!(s, prefix)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an array of strings based on whether\
    \ they end with a given suffix.", "    \n    strings = filter(x->startswith(x,\
    \ prefix), strings)\n    \n    return strings\nend", "    \n    prefix_length\
    \ = length(prefix)\n    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if startswith(string, prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ vector of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"ab\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"bc\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrays\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\"\
    )\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n\
    []\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n",
  "    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters strings by a prefix and suffix.", "    strings = strings[:]\n\
    \    strings = filter((x) -> startswith(prefix, x), strings)\n    return strings\n\
    end", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings =\
    \ Vector{String}()\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"", "    \n    strings = strings[:]\n    \n    for string in strings\n      \
    \  if string.starts_with(prefix)\n            strings.remove(string)\n       \
    \ end\n    end\n    \n    return strings\nend", "    strings = strings[2:end]\n\
    \    return strings\nend", "    strings = strings[2:end-1]\n    strings = strings[strings.startsWith(prefix)]\n\
    \    return strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that filters\
    \ input strings based on whether they start with a given prefix.", "    strings\
    \ = filter(x->startswith(x, prefix), strings)\n    return strings\nend", "   \
    \ strings = filter((x) -> startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input vector of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"c\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"de\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"b", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            delete!(strings, string)\n\
    \        end\n    end\n    \n    return strings\nend", "    \n    strings = strings[:]\n\
    \    \n    strings = filter( x -> startswith(x, prefix), strings)\n    \n    return\
    \ strings\nend", "    \n    prefix_length = length(prefix)\n    \n    strings_filtered\
    \ = Vector{String}()\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings_filtered << string\n        end\n    end\n    \n    return\
    \ strings_filtered\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"", "    strings = filter( x -> startswith(prefix, x), strings)\n    return strings\n\
    end", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings =\
    \ Vector{String}()\n    \n    for string in strings\n        if startswith(string,\
    \ prefix)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input vector of strings only for\
    \ ones that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"b\")\n[\"abc\"\
    , \"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"c\"\
    )\n[\"abc\", \"bcd\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"d\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"f\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"g\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"h\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"i\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"j\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"k\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"l\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"m\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"n\")\n[\"abc\", \"bcd\", \"cde", "    strings\
    \ = filter((x) -> startswith(x, prefix), strings)\n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ vector of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\"]\n    \"\"\"", "    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2: filter_by_prefix", "    \n    strings = strings[:]\n    \n    for\
    \ string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend", "    \n    strings\
    \ = strings[:]\n    \n    strings = filter((x) -> startswith(x, prefix), strings)\n\
    \    \n    return strings\nend", "    \n    strings = strings[:]\n    \n    for\
    \ s in strings\n        if startswith(s, prefix)\n            delete!(s, prefix)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters strings by a regular expression. \n\
    The function should take as input a vector of strings and a regular expression\
    \ and return a vector of strings that match the regular expression. \nThe function\
    \ should return an empty vector if the input vector is empty or if the input vector\
    \ does not contain any strings that match the regular expression.", "    strings\
    \ = strings[findall(s -> startswith(s, prefix), strings)]\n    return strings\n\
    end", "    strings = strings[:]\n    strings = filter(x->startswith(x, prefix),\
    \ strings)\n    return strings\nend", "    \n    strings = strings[:]\n    \n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 3: Write a function that filters an input vector\
    \ of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\"]\n    \"\"\"", "    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    return strings\nend", "    strings = strings[findall(s ->\
    \ startswith(s, prefix), strings)]\n    return strings\nend", "    \n    prefix_length\
    \ = length(prefix)\n    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_prefix()\nWrite a function that\
    \ filters an input vector of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"e\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcde\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdea\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeab\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeaba\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabac\")\n[\"abc\", \"bcd\"]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabacd\")\n\
    [\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcdcdeabacde\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"bcdcdeabacdea\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd", "    \n    strings = strings[:]\n    \n    prefix_len = len(prefix)\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3: Filtering by substrings\n\
    Write a function that filters an input vector of strings only for ones that contain\
    \ a given substring.\n    >>> filter_by_substring([], \"a\")\n    []\n    >>>\
    \ filter_by_substring([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"\
    abc\"]\n    >>> filter_by_substring([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    bc\")\n    [\"abc\", \"bcd\"]\n    >>> filter_by_substring([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"cd\")\n    [\"cde\"]\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n    [\"array\"]\n    \"\"\"",
  "    strings = filter(x->startswith(x,prefix), strings)\n    return strings\nend",
  "    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nfilter_by_prefix([], \"a\")", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        remove!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3: Filter an input vector\
    \ of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\"]\n    \"\"\"", "    \n    prefix_length = length(prefix)\n\
    \    \n    strings_filtered = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            strings_filtered << string\n\
    \        end\n    end\n    \n    return strings_filtered\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ vector of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"", "    strings = filter(x->startswith(x,\
    \ prefix), strings)\n    return strings\nend", "    filter!(x -> startswith(x,\
    \ prefix), strings)\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L,\
    \ P) returns a new vector L of all elements of L that start with the prefix P.",
  "    strings = filter(x->startswith(prefix, x), strings)\n    return strings\nend",
  "    strings = strings[strings .starts_with(prefix)]\n    return strings\nend",
  "    strings = filter(x->startswith(x, prefix), strings)\n    return strings\nend\n\
    </cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"a\")\n</cell>\n<text>\nExercise: Write a function that filters\
    \ an input vector of strings only for ones that end with a given suffix.\n   \
    \ >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\",\
    \ \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"", "    \n  \
    \  prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"", "    strings = filter((x) -> startswith(prefix, x), strings)\n    return\
    \ strings\nend", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            remove!(strings, string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise: Write a function that filters an input vector of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n\
    \    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\"]\n    \"\"\"", "    strings = strings[start:end]\nend\n</cell>\n<code\
    \ language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3: Filter an input vector of strings only\
    \ for ones that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n\
    \    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"array\"]\n    \"\"\"", "    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input vector of strings only for\
    \ ones that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n  \
    \  []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\"]\n    \"\"\"", "    strings = filter(x->startswith(x, prefix),\
    \ strings)\n    return strings\nend", "    \n    strings = strings[:]\n    \n\
    \    strings = filter( x -> startswith(x, prefix), strings)\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters an input vector of strings only for ones that end with a given\
    \ suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"de\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cde\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"dea\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"de\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"dea\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"de\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"dea\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"de\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"dea\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"de\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"dea\")\n[\"cde\"]", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"x\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"y\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"z\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abc\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"bcd\")\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"cde\")\n[\"cde\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"x\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"y\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"z\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abc\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"bcd\")\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array", "    \n    strings = filter(x->startswith(x, prefix),\
    \ strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input vector of strings only for\
    \ ones that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\"\
    , \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    e\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcde\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdea\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeab\")\n[\"abc\", \"array\"]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabc\")\n[\"\
    abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcdcdearray\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcdearraya\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"bcdcdearrayab\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdearrayabc\")\n[\"array", "    filter!(x\
    \ -> startswith(prefix, x), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that filters an input vector of strings only for\
    \ ones that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n  \
    \  []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\"]\n    \"\"\"", "    \n    strings = strings[:]\n    \n    for\
    \ string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend", "    \n    prefix_length\
    \ = length(prefix)\n    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if startswith(string, prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters strings by a regular expression.\
    \ For example, given the following input:", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend", "    strings =\
    \ strings[findall(startswith(strings, prefix))]\n    return strings\nend", " \
    \   \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end", "    \n    strings = strings[:]\n    \n    for s in strings\n        if\
    \ startswith(prefix, s)\n            delete!(s, prefix)\n        end\n    end\n\
    \    \n    return strings\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that filters an input vector of strings only for ones that end with a given\
    \ suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n\"\"\"", "    \n\
    \    strings = filter( x -> startswith(prefix, x), strings)\n    \n    return\
    \ strings\nend", "    strings = filter(x->startswith(prefix, x), strings)\n  \
    \  return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"", "   \
    \ \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 3: Filtering by Prefix\nWrite\
    \ a function that filters an input vector of strings only for ones that start\
    \ with a given prefix.\nThis function should take as input a vector of strings\
    \ and a prefix string.\nThe function should return a vector of strings that start\
    \ with the given prefix.\nFor example, given the following input vector:", " \
    \   \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 4\nWrite a function that filters\
    \ an input vector of strings only for ones that end with a given suffix.\n>>>\
    \ filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"ab\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]", "    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.3>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input vector of strings only for\
    \ ones that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\"\
    , \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    c\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrays\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abce\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abced\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abcede\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abcedef\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abcedefg\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abcedefgh\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abcedefghi\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abcedefghij\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abcedefghijk\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abcedefghijkl\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abcedef", "    \n    strings = strings[:]\n\
    \    \n    for s in strings\n        if startswith(s, prefix)\n            delete!(s,\
    \ prefix)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}",
  "    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(s,\
    \ prefix)\n            delete!(s, prefix)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3: Filter an\
    \ input vector of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"", "    strings\
    \ = strings[findall(startswith(strings, prefix))]\n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vector, prefix)", "    \n    strings\
    \ = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end", "    \n    prefix_length = length(prefix)\n    \n    strings = filter( x\
    \ -> startswith(String(x), prefix), strings)\n    \n    if prefix_length == 0\n\
    \        return strings\n    else\n        return filter( x -> startswith(String(x),\
    \ prefix), strings)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters an input vector of strings only for ones that end with a given\
    \ suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdc\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdce\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdcef\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdcefg\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"b", "    \n    strings = filter( x -> startswith(prefix, x), strings)\n\
    \    \n    return strings\nend", "    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}", "    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abdc\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdce\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcef\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefg\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj", "    \n    prefix_length = length(prefix)\n\
    \    \n    if prefix_length == 0\n        return strings\n    end\n    \n    strings\
    \ = filter_by_prefix(strings, prefix[1:prefix_length])\n    \n    if prefix_length\
    \ == length(prefix)\n        return strings\n    end\n    \n    strings = filter_by_prefix(strings,\
    \ prefix[prefix_length+1:end])\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ vector of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vector, prefix)",
  "    strings = filter(x->startswith(x, prefix), strings)\n    return strings\nend",
  "    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end", "    strings = filter(x->startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input vector of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"ab\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abde\")\n[]\n>>> filter_by_suffix([\"abc\",\
    \ \"bcd\", \"cde\", \"array\"], \"abdez\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdeza\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezab\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezabc\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezabcd\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezabcde\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabcdez\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabcdeza\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabcdezab\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabcdezabc\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabcdezabcd\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabcdezabcde\")\n[]\n>>> filter_by_suffix",
  "    strings = strings[findall(x -> startswith(x, prefix), strings)]\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vec)",
  "    \n    prefix_length = length(prefix)\n    \n    strings = filter(x->startswith(x,\
    \ prefix), strings)\n    \n    strings = filter(x->length(x) > prefix_length,\
    \ strings)\n    \n    return strings\nend", "    strings = filter(x->startswith(x,\
    \ prefix), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} \n    filter(x\
    \ -> startswith(x, prefix), L)\nend", "    strings = filter((x) -> startswith(prefix,\
    \ x), strings)\n    return strings\nend", "    \n    strings = strings[:]\n  \
    \  \n    for string in strings\n        if string.starts_with(prefix)\n      \
    \      delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end", "    strings = filter(x->startswith(x, prefix), strings)\n    return strings\n\
    end", "    \n    strings = strings[:]\n    \n    for s in strings\n        if\
    \ startswith(prefix, s)\n            delete!(s, prefix)\n        end\n    end\n\
    \    \n    return strings\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that filters strings based on whether they start with a given prefix.", "  \
    \  strings = filter(x->startswith(prefix, x), strings)\n    return strings\nend",
  "    \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vector,\
    \ prefix)", "    strings = filter(x->startswith(x, prefix), strings)\n    return\
    \ strings\nend", "    \n    prefix_length = length(prefix)\n    \n    strings\
    \ = filter( x -> startswith(prefix, x), strings)\n    \n    if prefix_length ==\
    \ 0\n        strings\n    else\n        prefix = prefix[1:prefix_length]\n   \
    \     filter_by_prefix(strings, prefix)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that filters an input vector of strings only for ones\
    \ that end with a given suffix.", "    \n    strings = strings[:]\n    \n    for\
    \ string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input vector of strings only for\
    \ ones that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\"\
    , \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"de\"\
    )\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"arrays\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"bcd\")\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcds\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"bcdc\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"bcdcde\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcdes\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcdes\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcdes\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcdes\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcdes\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcdes\")\n[]\n>>> filter", "    \n    strings = strings[:]\n\
    \    \n    strings = filter(x->startswith(prefix, x), strings)\n    \n    return\
    \ strings\nend", "    strings = filter(x->startswith(prefix, x), strings)\n  \
    \  return strings\nend", "    strings = filter(x->startswith(x, prefix), strings)\n\
    \    return strings\nend", "    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), L)\n\
    end", "    \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input vector of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"",
  "    \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end", "    \n    strings = strings[:]\n    \n    for string in strings\n     \
    \   if string.starts_with(prefix)\n            delete!(strings, string)\n    \
    \    end\n    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that filters an input vector of strings only for ones that end\
    \ with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcde\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdea\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeab\")\n[\"abc\", \"array\"]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabc\")\n[\"\
    abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcdcdeabcde\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"bcdcdeabcdea\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabcdeab\")\n[\"abc\", \"array\"]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabcdeabc\"\
    )\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcdcdeabcdeabcde\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"bcdcdeabcdeabcdea\")\n[\"abc\", \"array\"]\n\
    >>> filter", "    strings = filter( x -> startswith(prefix, x), strings)\n   \
    \ return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vec)",
  "    \n    filtered_strings = copy(strings)\n    for string in strings\n       \
    \ if string.starts_with(prefix)\n            filtered_strings = remove(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_prefix", "    strings = filter((x)\
    \ -> startswith(prefix, x), strings)\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\
    \ is similar to filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String},\
    \ except that it does not modify the input vector.", "    strings = strings[:]\n\
    \    strings = filter((x) -> startswith(prefix, x), strings)\n    return strings\n\
    end", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings =\
    \ Vector{String}()\n    \n    for string in strings\n        if string.startswith(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that filters strings by a regular expression. For example, given the following\
    \ input:", "    \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        strings = filter!(x -> x != string, strings)\n        end\n    end\n\
    \    \n    return strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that filters an input vector of strings only for ones that end with a given\
    \ suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"", "   \
    \ \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end", "    strings = filter(x->startswith(x, prefix), strings)\n    return strings\n\
    end", "    strings = filter(x->startswith(x, prefix), strings)\n    return strings\n\
    end", "    \n    prefix_len = length(prefix)\n    \n    strings = strings[:]\n\
    \    \n    for s in strings\n        if startswith(s, prefix)\n            strings\
    \ = filter!(s => startswith(s, prefix), strings)\n        end\n    end\n    \n\
    \    return strings\nend\n</cell>\n<text>\nExercise 4\nWrite a function that filters\
    \ strings by a regular expression. \nFor example, given the following input vector:",
  "    \n    prefix_length = length(prefix)\n    \n    if prefix_length == 0\n   \
    \     return strings\n    end\n    \n    strings = filter_by_prefix(strings, prefix[1:prefix_length])\n\
    \    \n    if prefix_length == 0\n        return strings\n    end\n    \n    strings\
    \ = filter_by_prefix(strings, prefix[prefix_length+1:end])\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abde\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abdez\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdeza\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezab\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezabd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezabde\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdez\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezabdeza\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezab\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezabd\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abdezabdezabde\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"b", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            delete!(strings, string)\n\
    \        end\n    end\n    \n    return strings\nend", "    \n    prefix_length\
    \ = length(prefix)\n    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if startswith(string, prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.3>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ vector of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        remove!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise: Write a function that filters\
    \ an input vector of strings only for ones that end with a given suffix.\n   \
    \ >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\",\
    \ \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"",
  "    strings = filter(x->startswith(x, prefix), strings)\n    return strings\nend",
  "    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"de\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cde\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"b", "    \n    strings = strings[:]\n\
    \    \n    i = 0\n    while i < length(strings)\n        if strings[i] == prefix\n\
    \            i += 1\n        else\n            i += 1\n        end\n    end\n\
    \    \n    return strings[i+1:end]\nend", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2: filter_by_prefix\nWrite a function that filters an input vector of\
    \ strings only for ones that start with a given prefix.\nThis function should\
    \ take as input a vector of strings and a prefix string.\nThe function should\
    \ return a new vector of strings that only contains strings that start with the\
    \ given prefix.\nFor example, given the following input vector:", "    strings\
    \ = strings[strings .starts_with(prefix)]\n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_prefix", "    \n    strings\
    \ = strings[:]\n    \n    strings = filter((x) -> startswith(prefix, x), strings)\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"de\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix",
  "    filter!(x -> startswith(x, prefix), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} - filter a\
    \ vector of strings only for the ones that start with a given prefix.\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} - filter a vector of strings only for the ones\
    \ that start with a given prefix.\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\
    \ - filter a vector of strings only for the ones that start with a given prefix.\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} - filter a\
    \ vector of strings only for the ones that start with a given prefix.\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} - filter a vector of strings only for the ones\
    \ that start with a given prefix.\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\
    \ - filter a vector of strings only for the ones that start with a given prefix.\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} - filter a\
    \ vector of strings only for the ones that start with a given prefix.\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} - filter a vector of strings only for the ones\
    \ that start with a given prefix.\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\
    \ - filter a vector of strings only for the ones that start with a given prefix.\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} - filter a\
    \ vector of strings only for the ones that start with a given prefix.\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} - filter a vector of strings only for the ones\
    \ that start with a given prefix.\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\
    \ - filter a vector of strings only for the ones that start with a given prefix.\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} - filter a\
    \ vector of strings only for the ones that start with a given prefix.\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} - filter a vector of strings only for the ones\
    \ that start with a given prefix.\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} ",
  "    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n", "    \n    strings\
    \ = strings[:]\n    \n    prefix_len = length(prefix)\n    \n    for string in\
    \ strings\n        if startswith(string, prefix)\n            strings = filter!(x\
    \ -> startswith(x, prefix), strings)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vector::Vector{String},\
    \ prefix::String)::Vector{String}", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ vector of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\"]\n    \"\"\"", "    \n    filter_by_prefix(\n        filter(x\
    \ -> startswith(prefix, x), strings),\n        prefix\n    )\nend", "    \n  \
    \  strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that filters an input vector of strings only for ones that end with a given\
    \ suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"", "   \
    \ \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n    \n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters strings by a prefix\
    \ and suffix.", "    \n    strings = strings[:]\n    \n    for s in strings\n\
    \        if startswith(s, prefix)\n            delete!(s, prefix)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}", "    \n\
    \    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vector, prefix)",
  "    strings = filter(x->startswith(prefix, x), strings)\n    return strings\nend",
  "    strings = strings[start:end]\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that filters an input vector of strings only for ones that end with a given\
    \ suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"", "   \
    \ \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(s,\
    \ prefix)\n            delete!(s, prefix)\n        end\n    end\n    \n    return\
    \ strings\nend", "    strings = strings[:]\n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    strings\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that filters an input vector of\
    \ strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters strings by a regular expression. For\
    \ example, given the following input vector:", "    \n    strings = strings[:]\n\
    \    \n    for s in strings\n        if startswith(s, prefix)\n            delete!(s,\
    \ prefix)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input vector of strings only for\
    \ ones that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\"\
    , \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"array\"\
    )\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abde\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter", "   \
    \ strings = filter(x->startswith(prefix, x), strings)\n    return strings\nend",
  "    \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            remove!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend", "    strings = filter(x->startswith(prefix, x), strings)\n  \
    \  return strings\nend", "    \n    strings = strings[:]\n    \n    for string\
    \ in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend", "    filter!(x -> startswith(prefix,\
    \ x), strings)\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vector,\
    \ prefix)", "    \n    prefix_length = length(prefix)\n    \n    strings = filter(x\
    \ -> startswith(String(x), prefix), strings)\n    \n    if prefix_length == 0\n\
    \        strings\n    else\n        filter(x -> startswith(String(x), prefix),\
    \ strings)\n    end\nend\n</cell>\n<text>\nExercise 3: filter_by_prefix", "  \
    \  \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n    \n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  strings.remove(string)\n        end\n    end\n    \n    return strings\nend",
  "    strings = strings[:]\n    strings = filter(x->startswith(x, prefix), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"", "   \
    \ \n    strings = strings[:]\n    \n    strings = filter((x) -> startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} - Filter a\
    \ vector of strings only for ones that start with a given prefix.\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} - Filter a vector of strings only for ones that\
    \ start with a given prefix.\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\
    \ - Filter a vector of strings only for ones that start with a given prefix.\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} - Filter a\
    \ vector of strings only for ones that start with a given prefix.\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} - Filter a vector of strings only for ones that\
    \ start with a given prefix.\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\
    \ - Filter a vector of strings only for ones that start with a given prefix.\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} - Filter a\
    \ vector of strings only for ones that start with a given prefix.\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} - Filter a vector of strings only for ones that\
    \ start with a given prefix.\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\
    \ - Filter a vector of strings only for ones that start with a given prefix.\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} - Filter a\
    \ vector of strings only for ones that start with a given prefix.\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} - Filter a vector of strings only for ones that\
    \ start with a given prefix.\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\
    \ - Filter a vector of strings only for ones that start with a given prefix.\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} - Filter a\
    \ vector of strings only for ones that start with a given prefix.\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} - Filter a vector of strings only for ones that\
    \ start with a given prefix.\nfilter_by_prefix(L::Vector{String}, prefix::String)::",
  "    \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 3: Filtering by prefix\nWrite a function\
    \ that filters an input vector of strings only for ones that start with a given\
    \ prefix.\nFor example, given the following input vector:", "    strings = filter((x)\
    \ -> startswith(x, prefix), strings)\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ vector of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"", "    \n    strings = strings[:]\n\
    \    \n    for s in strings\n        if startswith(s, prefix)\n            delete!(s,\
    \ prefix)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vector, prefix)", "    \n    strings\
    \ = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 2: filter_by_prefix\nWrite a function\
    \ that filters an input vector of strings only for ones that end with a given\
    \ suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
