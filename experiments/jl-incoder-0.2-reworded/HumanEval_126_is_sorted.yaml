name: HumanEval_126_is_sorted
language: jl
prompt: "\"\"\"\n    Given a vector of numbers, return whether or not they are sorted\n\
  \    in ascending order. If vector has more than 1 duplicate of the same\n    number,\
  \ return false. Assume no negative numbers and only integers.\n\n    Examples\n\
  \    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5])\n    true\n\
  \    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1, 2, 3, 4, 5,\
  \ 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n    >>> is_sorted([1,\
  \ 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2, 2, 3, 3, 4])\n    true\n\
  \    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
  \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
  \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
  \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
  \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
  \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4]) ==\
  \ false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
  \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
completions: ["    sorted = sort(lst)\n    return length(sorted) == length(lst)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    sorted = sort(lst)\n    uniques = unique(sorted)\n\
    \    lengths = countmap(uniques)\n    return all(lengths[v] == lengths[v+1] for\
    \ v in uniques)\nend\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4,\
    \ 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test\
    \ is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5,\
    \ 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4,\
    \ 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test\
    \ is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5,\
    \ 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4,\
    \ 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test\
    \ is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5,\
    \ 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4,\
    \ 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test\
    \ is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5,\
    \ 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4,\
    \ 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test\
    \ is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5,\
    \ 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4,\
    \ 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test\
    \ is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5,\
    \ 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4,\
    \ 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_", "    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of numbers and returns a vector of booleans indicating whether each number is\
    \ greater than the previous number. Assume no negative numbers and only integers.",
  "    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n            break\n    end\n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4,\
    \ 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n\
    @test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([", "    sort(lst) ==\
    \ lst\nend", "    sorted = sort(lst)\n    return sorted == lst\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([1, 2, 3, 4, 5]) == true\n@assert\
    \ is_sorted([1, 3, 2, 4, 5]) == false\n@assert is_sorted([1, 2, 3, 4, 5, 6]) ==\
    \ true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == true\n@assert is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) == false\n@assert is_sorted([1, 2, 2, 3, 3, 4]) == true\n\
    @assert is_sorted([1, 2, 2, 2, 3, 4]) == false\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of unique elements in a vector. Assume\
    \ no duplicates.", "    sorted = true\n    for x in lst\n        if x != x\n \
    \           sorted = false\n            break\n    return sorted\nend", "    sorted\
    \ = true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend", "    sorted = true\n   \
    \ for x in lst\n        if x != sort(x)\n            sorted = false\n        \
    \    break\n    end\n    return sorted\nend", "    sorted = true\n    for x in\
    \ lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend", "    sorted = true\n    for x in lst\n    \
    \    if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11])", "    sorted = true\n \
    \   for x in lst\n        if x != sort(x)\n            sorted = false\n      \
    \      break\n    end\n    return sorted\nend", "    sorted = sort(lst)\n    return\
    \ sorted == lst\nend", "    sorted = true\n    for x in lst\n        if x != sort(x)\n\
    \            sorted = false\n            break\n    end\n    return sorted\nend",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    sort(lst) == lst\n\
    end\n</cell>\n<text>\nis_sorted() tests for sorted order. is_sorted() returns\
    \ true if the list is in ascending order, and false if the list is in descending\
    \ order. is_sorted() also returns false if the list has duplicates.", "    \n\
    \    sorted = true\n    \n    for x in lst\n        if x != last(lst)\n      \
    \      sorted = false\n            break\n        end\n    end\n    \n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>", "    sorted = sort(lst)\n\
    \    return sorted == lst\nend", "    sorted = true\n    for x in lst\n      \
    \  if x != x\n            sorted = false\n            break\n    end\n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5",
  "    \n    sorted = false\n    for x in lst\n        if x != sort(x)\n         \
    \   sorted = true\n            break\n        end\n    end\n    return sorted\n\
    end", "    \n    sorted = true\n    for x in lst\n        if x != sort(x)\n  \
    \          sorted = false\n            break\n    end\n    return sorted\nend",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_sorted(lst)\
    \ == true\n        return true\n    \n    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        return true\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert\
    \ is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n\
    @assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1])\
    \ == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3,\
    \ 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, ", "    sorted = true\n    for x in lst\n        if x != sort(x)\n\
    \            sorted = false\n            break\n    end\n    return sorted\nend",
  "    \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    sorted = sort(lst)\n    uniques = unique(sorted)\n    return length(uniques)\
    \ == length(sorted)\nend", "    \n    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        for (i,val) in enumerate(sorted)\n            if val\
    \ != lst[i]\n                return false\n            end\n        end\n    \
    \    return true\n    else\n        return false\n    end\nend", "    sorted =\
    \ true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>",
  "    sorted = false\n    for x in lst\n        if x < lst[end(x)]\n            sorted\
    \ = true\n        else\n            sorted = false\n        end\n    end\n   \
    \ return sorted\nend", "    sorted = true\n    seen = Set()\n    for x in lst\n\
    \        if x in seen\n            sorted = false\n            break\n       \
    \ seen.add(x)\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>",
  "    sorted = sort(lst)\n    last = sorted[end]\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(", "    sorted = true\n    for x in lst\n        if x\
    \ != sort(x)\n            sorted = false\n            break\n    end\n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of unique\
    \ elements in a vector. Assume that there are no duplicate elements.", "    sorted\
    \ = true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1])\
    \ == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4,\
    \ 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n", "    sorted\
    \ = true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend", "    sorted = sort(lst)\n\
    \    sorted.length == 1\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1, 1]) == false\n@assert\
    \ is_sorted([5, 2, 3, 4, 1, 2, 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1,\
    \ 2, 1, 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1]) == false\n\
    @assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 2, 1]) == false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 2, 1, 1, 1, 2, 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2,\
    \ 1, 1, 1, 2, 1, 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2,\
    \ 1, 1, 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 2,\
    \ 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1])\
    \ == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1])\
    \ == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1,\
    \ 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1,\
    \ 1, 2, 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1,\
    \ 2, 1, 1, 1, 2, 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2,\
    \ 1, 1, 1, 2, 1, 1, 1, 2, 1, 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2,\
    \ 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]) == false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1]) == false\n@assert\
    \ is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2,\
    \ 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1,\
    \ 1, 1, 2, 1, 1, 1, 2, 1, 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1,\
    \ 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]) == false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1])\
    \ == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1,\
    \ 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1,\
    \ 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1]) == false\n\
    @assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1,\
    \ 1, 2, 1, 1, 1, 2, 1, 1, 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1,\
    \ 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1]) == false\n\
    @assert is_sorted([5, ", "    sorted = sort(lst)\n    uniques = unique(sorted)\n\
    \    return length(uniques) == length(sorted)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a vector of numbers and returns\
    \ the number of unique numbers in the vector. Assume no negative numbers and only\
    \ integers.", "    sorted = false\n    for x in lst\n        if x != sort(x)\n\
    \            sorted = true\n            break\n    end\n    return sorted\nend\n\
    </cell>\n<text>\nis_sorted_by() is a function that takes a function and a list\
    \ of numbers and returns true if the list of numbers is sorted using the given\
    \ function.", "    sorted = sort(lst)\n    return sorted == lst\nend\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, ", "    \n    sorted_list\
    \ = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n        return\
    \ true\n    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n    \
    \    return true\n    else\n        return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of unique elements in a vector.\
    \ Assume that there are no duplicate elements in the vector.", "    sorted = sort(lst)\n\
    \    last = sorted[end]\n    last = last.last if length(sorted) > 1 else last\n\
    \    for x in lst\n        if x != last\n            return false\n    return\
    \ true\nend", "    sorted = true\n    for x in lst\n        if x != sort(x)\n\
    \            sorted = false\n            break\n    end\n    return sorted\nend",
  "    \n    sorted = false\n    \n    for x in lst\n        if x != sort(x)\n   \
    \         sorted = true\n            break\n        end\n    end\n    \n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])", "    if is_sorted(lst) ==\
    \ true\n        return true\n    \n    sorted = sort(lst)\n    if length(sorted)\
    \ == length(lst)\n        return true\n    \n    return false\nend", "    sorted\
    \ = true\n    sorted = sorted && (lst.head == lst.last)\n    for x in lst[1:end-1]\n\
    \        sorted = sorted && (lst.head < x)\n    end\n    sorted\nend\n</cell>\n\
    <text>\nis_sorted()", "    if is_sorted(lst) == true\n        return true\n  \
    \  \n    last = lst[1]\n    \n    for i in lst[2:end]\n        if i == last\n\
    \            return false\n        last = i\n    return true\nend", "    sorted\
    \ = true\n    sorted = sorted && (lst.head == lst.last)\n    for i in lst.tail:\n\
    \        if i != lst.head\n            sorted = sorted && (lst.head < i)\n   \
    \     end\n    end\n    return sorted\nend", "    sorted = sort(lst)\n    return\
    \ all(sorted == lst)\nend\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted(", "  \
    \  sorted = false\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = true\n            break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.0>\n\
    @test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1, 1])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 2])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 2, 3, 4])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test\
    \ is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3,\
    \ 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2,\
    \ 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test\
    \ is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3,\
    \ 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2,\
    \ 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test\
    \ is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3,\
    \ 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2,\
    \ 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test\
    \ is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3,\
    \ 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2,\
    \ 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test\
    \ is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3,\
    \ 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2,\
    \ 3, 4, 1, 2, 3, 4, ", "    sorted = false\n    for x in lst\n        if x !=\
    \ sort(x)\n            sorted = true\n            break\n    end\n    return sorted\n\
    end", "    if is_sorted(lst) == true\n        return true\n    \n    sorted =\
    \ sort(lst)\n    \n    if length(sorted) == length(lst)\n        return true\n\
    \    \n    return false\nend", "    sorted = true\n    for x in lst\n        if\
    \ x != sort(x)\n            sorted = false\n            break\n    end\n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    count_sort(lst)",
  "    sorted = false\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = true\n            break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.3>\n\
    @test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of numbers and returns the number of unique numbers in the\
    \ vector. Assume no duplicates.", "    \n    sort(lst) == lst\nend", "    sorted\
    \ = true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend", "    if is_sorted(lst) ==\
    \ true\n        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    sorted_list = sort(lst)\n    unique_elements\
    \ = unique(sorted_list)\n    return length(unique_elements) == length(sorted_list)\n\
    end\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])", "    sort(lst) == lst\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])", "    \n    local i = 1\n    while i <= length(lst)\n\
    \        if lst[i-1] == lst[i]\n            i = i + 1\n        else\n        \
    \    return false\n        end\n    end\n    return true\nend\n</cell>\n<text>\n\
    is_sorted_by() is a function that takes two arguments: a predicate and a vector.\
    \ It returns true if the predicate is true for all elements of the vector, false\
    \ otherwise. is_sorted_by() also takes an optional third argument, which is the\
    \ value to return if the predicate is false. is_sorted_by() also takes an optional\
    \ fourth argument, which is the value to return if the predicate is true.", " \
    \   sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n            break\n    end\n    return sorted\nend", "    sorted_list\
    \ = sort(lst)\n    return sorted_list == lst\nend", "    sorted = true\n    for\
    \ x in lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend", "    \n    sorted_list = sort(lst)\n    \n\
    \    if length(sorted_list) == length(lst)\n        return true\n    else\n  \
    \      return false\n    end\nend", "    sorted = true\n    for x in lst\n   \
    \     if x != sort(x)\n            sorted = false\n        end\n    end\n    return\
    \ sorted\nend", "    sorted = sort(lst)\n    uniques = unique(sorted)\n    return\
    \ length(uniques) == length(sorted)\nend", "    sorted = false\n    for x in lst\n\
    \        if x != sort(x)\n            sorted = true\n            break\n     \
    \   end\n    end\n    return sorted\nend", "    \n    sorted = sort(lst)\n   \
    \ \n    if length(sorted) == length(lst)\n        return true\n    else\n    \
    \    return false\n    end\nend", "    sorted = false\n    sorted = true\n   \
    \ for x in lst\n        if x != sort(x)\n            sorted = false\n        \
    \    break\n        end\n    end\n    return sorted\nend", "    lst = sort(lst)\n\
    \    last = lst[1]\n    for x in lst[2:end]\n        if last < x\n           \
    \ return false\n        last = x\n    return true\nend", "    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend", "    \n    sorted = true\n  \
    \  for x in lst\n        if x != sort(x)\n            sorted = false\n       \
    \     break\n    end\n    return sorted\nend", "    \n    if length(lst) == 1\
    \ \n        return true\n    \n    last = lst[1]\n    \n    for i in lst[2:end]\n\
    \        if i == last\n            return false\n        last = i\n    end\n \
    \   \n    return true\nend", "    sorted = sort(lst)\n    uniques = unique(sorted)\n\
    \    return length(uniques) == length(sorted)\nend", "    sorted = false\n   \
    \ for x in lst\n        if x != sort(x)\n            sorted = true\n         \
    \   break\n        end\n    end\n    return sorted\nend", "    if is_sorted(lst)\
    \ == true\n        return true\n    \n    last = lst[1]\n    for x in lst[2:end]\n\
    \        if x == last\n            return false\n        last = x\n    return\
    \ true\nend", "    sorted = false\n    for x in lst\n        if x != sort(x)\n\
    \            sorted = true\n            break\n        end\n    end\n    return\
    \ sorted\nend", "    \n    if length(lst) == 1 \n        return true\n    end\n\
    \    \n    last = lst[1]\n    for i in lst[2:end]\n        if i > last\n     \
    \       return false\n        end\n        last = i\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 4, 3, 2, 1]) ==\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3,\
    \ 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, ", "    \n    sorted_bool = sort(lst)\
    \ == lst\n    \n    if length(lst) == length(unique(lst))\n        return sorted_bool\n\
    \    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        return true\n    else\n        return false\n    end\nend", "    \n \
    \   sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns true if the given vector is sorted in descending order. Assume\
    \ no negative numbers and only integers.", "    sorted = sort(lst)\n    length(sorted)\
    \ == length(lst) && all(sorted .== lst)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n\
    @assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5, 4, 3, 2, 1])\
    \ == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]", "    \n    sorted_list = sort(lst)\n    \n    if length(sorted_list)\
    \ == length(lst)\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5,\
    \ 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3,\
    \ 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test\
    \ is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5,\
    \ 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3,\
    \ 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test\
    \ is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5,\
    \ 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3,\
    \ 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test\
    \ is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5,\
    \ 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3,\
    \ 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test\
    \ is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5,\
    \ 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3,\
    \ 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test\
    \ is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5,\
    \ 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3,\
    \ 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test\
    \ is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, ", "    if is_sorted(unique(lst))\n\
    \        return true\n    else\n        return false\n    end\nend", "    if is_sorted(sort(lst))\n\
    \        return true\n    return false\nend\n</cell>\n<code language=julia-1.4>\n\
    @test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns true if the vector is sorted in descending order. Assume no negative\
    \ numbers and only integers.", "    \n    sorted = true\n    \n    for x in lst\n\
    \        if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    \n    return sorted\nend", "    sorted = true\n    for x in lst\n       \
    \ if x != sort(x)\n            sorted = false\n            break\n    end\n  \
    \  return sorted\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    sorted = true\n    sorted = sorted && all(lst.==sort(lst))\n    return sorted\n\
    end", "    sorted = true\n    for x in lst\n        if x != x\n            sorted\
    \ = false\n            break\n    end\n    return sorted\nend", "    sorted =\
    \ false\n    for x in lst\n        if x != sort(x)\n            sorted = true\n\
    \            break\n    end\n    return sorted\nend", "    sorted_list = sort(lst)\n\
    \    \n    if length(sorted_list) == length(lst)\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  sorted = sort(lst)\n    uniques = unique(sorted)\n    return length(uniques)\
    \ <= length(sorted)\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]", "    \n    sorted\
    \ = true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend\n</cell>\n<text>\nis_sorted_by()\
    \ function\nGiven a vector of numbers, return whether or not they are sorted\n\
    in ascending order. If vector has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.", "    sorted = sort(lst)\n\
    \    return length(sorted) == length(lst)\nend\n</cell>\n<code language=julia-1.5>",
  "    sorted = sort(lst)\n    sorted.length == 1\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([1, 2, 3, 4, 5]) == true\n@assert is_sorted([1, 3, 2, 4, 5])\
    \ == false\n@assert is_sorted([1, 2, 3, 4, 5, 6]) == true\n@assert is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) == true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == false\n\
    @assert is_sorted([1, 2, 2, 3, 3, 4]) == true\n@assert is_sorted([1, 2, 2, 2,\
    \ 3, 4]) == false\n</cell>\n<text>\nis_sorted() is a higher-order function. It\
    \ takes another function as its argument, which is called for each element of\
    \ the vector to determine whether the element should be kept in the sorted order.\
    \ is_sorted() returns a boolean vector, which is true if the vector is sorted,\
    \ and false otherwise.", "    sorted = sort(lst)\n    last = sorted[end]\n   \
    \ for x in sorted\n        if x != last\n            return false\n    return\
    \ true\nend", "    sorted = true\n    for x in lst\n        if x != sort(x)\n\
    \            sorted = false\n            break\n    end\n    return sorted\nend",
  "    sorted = sort(lst)\n    uniques = unique(sorted)\n    return length(uniques)\
    \ == length(sorted)\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 6]) == true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == false\n@assert is_sorted([5, 1, 2, 2, 3, 3, 4]) == true\n@assert is_sorted([5,\
    \ 1, 2, 2, 2, 3, 4]) == false\n@assert is_sorted([5, 1, 2, 2, 3, 3, 4, 5]) ==\
    \ true\n@assert is_sorted([5, 1, 2, 2, 2, 3, 4, 5]) == false\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of numbers and returns the number\
    \ of unique numbers in the vector. Assume no negative numbers and only integers.",
  "    if is_sorted(lst) == true\n        return true\n    \n    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        return true\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 4, 3,\
    \ 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert ",
  "    sorted_list = sort(lst)\n    \n    trues = zeros(length(sorted_list), Bool)\n\
    \    \n    for i = 1:length(sorted_list)\n        if sorted_list[i] != sorted_list[i-1]\n\
    \            trues[i] = true\n        else\n            trues[i] = false\n   \
    \     end\n    end\n    \n    return trues\nend\n</cell>\n<code language=julia-1.4>\n\
    @time is_sorted(rand(1:10000));\n</cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n\
    </cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n</cell>\n\
    <code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n</cell>\n<code language=julia-1.4>\n\
    @time is_sorted(rand(1:10000));\n</cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n\
    </cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n</cell>\n\
    <code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n</cell>\n<code language=julia-1.4>\n\
    @time is_sorted(rand(1:10000));\n</cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n\
    </cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n</cell>\n\
    <code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n</cell>\n<code language=julia-1.4>\n\
    @time is_sorted(rand(1:10000));\n</cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n\
    </cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n</cell>\n\
    <code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n</cell>\n<code language=julia-1.4>\n\
    @time is_sorted(rand(1:10000));\n</cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n\
    </cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n</cell>\n\
    <code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n</cell>\n<code language=julia-1.4>\n\
    @time is_sorted(rand(1:10000));\n</cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n\
    </cell>\n<code language=julia-1.4>\n", "    sort(lst) == lst\nend", "    sorted\
    \ = sort(lst)\n    sorted.length == 1\nend", "    sorted = true\n    for x in\
    \ lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend", "    if is_sorted(lst) == true\n        return\
    \ true\n    \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n\
    \        return true\n    \n    return false\nend", "    sorted = false\n    for\
    \ x in lst\n        if x != sort(x)\n            sorted = true\n            break\n\
    \    end\n    return sorted\nend", "    lst = sort(lst)\n    return lst == lst\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1])\
    \ == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4,\
    \ 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([",
  "    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n            break\n    end\n    return sorted\nend\n</cell>\n<text>\n\
    is_sorted() returns a boolean. True or false. True means it's sorted. False means\
    \ it's not sorted. is_sorted() returns true if the list is sorted, and false if\
    \ not.", "    sorted = true\n    for x in lst\n        if x != sort(x)\n     \
    \       sorted = false\n            break\n    end\n    return sorted\nend", " \
    \   sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n            break\n    end\n    return sorted\nend", "    sort(lst)\
    \ == lst\nend", "    if is_sorted(unique(lst))\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<text>\nis_sorted() is a generic function and can take\
    \ any type that implements Base.eltype(). Vector{Int64} implements eltype() with\
    \ Int64, so is_sorted() will work for any Vector{Int64}. is_sorted() also works\
    \ for other types that implement eltype() with other types. For example, Vector{Int}\
    \ implements eltype() with Float64, so is_sorted() will work for any Vector{Int}.",
  "    sorted = false\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = true\n            break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.0>\n\
    @test is_sorted([1, 2, 3, 4, 5])\n@test is_sorted([1, 3, 2, 4, 5])\n@test is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n@test is_sorted([1, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n@test is_sorted([1, 2, 2, 3, 3, 4])\n@test is_sorted([1,\
    \ 2, 2, 2, 3, 4])\n@test is_sorted([2, 2, 2, 2, 3, 4])\n@test is_sorted([2, 2,\
    \ 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2,\
    \ 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2,\
    \ 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3,\
    \ 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n\
    @test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test\
    \ is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2,\
    \ 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2,\
    \ 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2,\
    \ 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2,\
    \ 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3,\
    \ 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n\
    @test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test\
    \ is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2,\
    \ 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2,\
    \ 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2,\
    \ 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2,\
    \ 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3,\
    \ 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n\
    @test is_sorted([2, 2, 2, 2, 3, 3])\n@", "    sorted = true\n    for x in lst\n\
    \        if x != sort(x)\n            sorted = false\n        end\n    end\n \
    \   return sorted\nend", "    \n    sorted = true\n    \n    for x in lst\n  \
    \      if x != sort(x)\n            sorted = false\n            break\n      \
    \  end\n    end\n    \n    return sorted\nend\n</cell>\n<text>\nis_sorted_by()\
    \ is a function that takes a function and a list of numbers and returns true if\
    \ the list of numbers is sorted according to the function.", "    \n    sorted\
    \ = sort(lst)\n    if length(sorted) == length(lst)\n        return true\n   \
    \ else \n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell", "    sorted\
    \ = true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.4>\n\
    @assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 2])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 3]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 4]) == false\n@assert is_sorted([5, 3, 2, 4, 5]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 6]) == false\n@assert is_sorted([5, 3, 2, 4, 7]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 8]) == false\n@assert is_sorted([5, 3, 2, 4, 9]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 10]) == false\n@assert is_sorted([5, 3, 2, 4, 11]) == true\n@assert\
    \ is_sorted([5, 3, 2, 4, 12]) == false\n@assert is_sorted([5, 3, 2, 4, 13]) ==\
    \ true\n@assert is_sorted([5, 3, 2, 4, 14]) == false\n@assert is_sorted([5, 3,\
    \ 2, 4, 15]) == true\n@assert is_sorted([5, 3, 2, 4, 16]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 17]) == true\n@assert is_sorted([5, 3, 2, 4, 18]) == false\n@assert\
    \ is_sorted([5, 3, 2, 4, 19]) == true\n@assert is_sorted([5, 3, 2, 4, 20]) ==\
    \ false\n@assert is_sorted([5, 3, 2, 4, 21]) == true\n@assert is_sorted([5, 3,\
    \ 2, 4, 22]) == false\n@assert is_sorted([5, 3, 2, 4, 23]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 24]) == false\n@assert is_sorted([5, 3, 2, 4, 25]) == true\n@assert\
    \ is_sorted([5, 3, 2, 4, 26]) == false\n@assert is_sorted([5, 3, 2, 4, 27]) ==\
    \ true\n@assert is_sorted([5, 3, 2, 4, 28]) == false\n@assert is_sorted([5, 3,\
    \ 2, 4, 29]) == true\n@assert is_sorted([5, 3, 2, 4, 30]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 31]) == true\n@assert is_sorted([5, 3, 2, 4, 32]) == false\n@assert\
    \ is_sorted([5, 3, 2, 4, 33]) == true\n@assert is_sorted([5, 3, 2, 4, 34]) ==\
    \ false\n@assert is_sorted([5, 3, 2, 4, 35]) == true\n@assert is_sorted([5, 3,\
    \ 2, 4, 36]) == false\n@assert is_sorted([5, 3, 2, 4, 37]) == true\n@assert ",
  "    sorted = sort(lst)\n    uniques = unique(sorted)\n    return length(uniques)\
    \ == length(sorted)\nend", "    sort(lst) == lst\nend\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 2, 3, 4, 1])\n</cell>\n<text>\nExercise: Write a function\
    \ that checks whether a vector is sorted in descending order.", "    sorted =\
    \ sort(lst)\n    return sorted == lst\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 1, 2, 3, 4, 6]) == true\n@assert is_sorted([5, 1, 2, 3,\
    \ 4, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n\
    </cell>\n<text>\nExercise: Write a function that returns whether or not a vector\
    \ is sorted in descending order. Assume no negative numbers and only integers.",
  "    sort(lst) == lst\nend", "    sorted = true\n    for x in lst\n        if x\
    \ != sort(x)\n            sorted = false\n            break\n    end\n    return\
    \ sorted\nend", "    sorted = sort(lst)\n    length(sorted) == length(lst) &&\
    \ all(sorted .== lst)\nend", "    lst = sort(lst)\n    last = lst[1]\n    for\
    \ i in 2:length(lst)\n        if lst[i] != last\n            return false\n  \
    \      last\n    end\n    return true\nend\n</cell>\n<text>\nis_sorted_by() function\n\
    Given a vector of numbers, return whether or not they are sorted\nin ascending\
    \ order by the given function. If vector has more than 1\nduplicate of the same\
    \ number, return false. Assume no negative numbers\nand only integers.", "   \
    \ if is_sorted(lst) == true\n        return true\n    \n    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        return true\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>", "    sorted = false\n    for\
    \ x in lst\n        if x != sort(x)\n            sorted = true\n            break\n\
    \    end\n    return sorted\nend", "    sorted = true\n    for x in lst\n    \
    \    if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend\n</cell>\n<text>\nis_sorted_by() function\nThis function\
    \ will take in a function and a list of numbers and return whether or not the\
    \ numbers are sorted in the order specified by the function.", "    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \   end\n    end\n    return sorted\nend", "    sorted_list = sort(lst)\n    \n\
    \    if length(sorted_list) == length(lst)\n        for (i,val) in enumerate(sorted_list)\n\
    \            if val != lst[i]\n                return false\n            end\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <text>\nis_sorted_by() is a function that takes a function and a list of numbers\
    \ and returns true if the function returns true for all the numbers in the list.\
    \ is_sorted_by() also takes a key function and a list of numbers and returns true\
    \ if the function returns true for all the numbers in the list that have the same\
    \ key as the key function.", "    \n    sorted_list = sort(lst)\n    \n    if\
    \ length(sorted_list) == length(lst)\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=juli", "    sorted =\
    \ sort(lst)\n    return sorted == lst\nend", "    sorted = true\n    for x in\
    \ lst\n        if x != x\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend", "    sorted = sort(lst)\n    return all(sorted == lst)\n\
    end", "    if is_sorted(sort(lst))\n        return true\n    else\n        return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7])\n@assert !is_sorted([5,\
    \ 1, 2, 3, 4, 6, 8, 7])\n@assert !is_sorted([5, 1, 2, 3, 4, 6, 8, 7])\n@assert\
    \ !is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9])\n@assert !is_sorted([5, 1, 2, 3, 4,\
    \ 6, 8, 7, 9, 10])\n@assert !is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11])\n\
    @assert !is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12])\n@assert !is_sorted([5,\
    \ 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13])\n@assert !is_sorted([5, 1, 2, 3, 4,\
    \ 6, 8, 7, 9, 10, 11, 12, 13, 14])\n@assert !is_sorted([5, 1, 2, 3, 4, 6, 8, 7,\
    \ 9, 10, 11, 12, 13, 14, 15])\n@assert !is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9,\
    \ 10, 11, 12, 13, 14, 15, 16])\n@assert !is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17])\n@assert !is_sorted([5, 1, 2, 3, 4, 6, 8, 7,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n@assert !is_sorted([5, 1, 2, 3, 4,\
    \ 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n@assert !is_sorted([5,\
    \ 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n@assert\
    \ !is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20, 21])\n@assert !is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22])\n@assert !is_sorted([5, 1, 2, 3, 4, 6, 8, 7,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n@assert !is_sorted([5,\
    \ 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24])\n@assert !is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n@assert !is_sorted([5, 1, 2, 3,\
    \ 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26])\n@assert !is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, ", "    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.3>\n\
    @test is_sorted([1, 2, 3, 4, 5])\n@test is_sorted([1, 3, 2, 4, 5])\n@test is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n@test is_sorted([1, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n@test is_sorted([1, 2, 2, 3, 3, 4])\n@test is_sorted([1,\
    \ 2, 2, 2, 3, 4])\n@test is_sorted([1, 1, 2, 2, 3, 4])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 3, 4])\n@test is_sorted([1, 1, 2, 2, 3, 3, 4])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 3, 3])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3,\
    \ 3])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n@test is_sorted([1, 1, 2, 2, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n@test is_sorted([1, 1, 2, 2, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\
    @test is_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, ", "    sorted\
    \ = sort(lst)\n    last = sorted[end]\n    last = last.last if length(sorted)\
    \ > 1 else last\n    return last == lst[1]\nend", "    sorted = true\n    seen\
    \ = Set()\n    for x in lst\n        if x in seen\n            sorted = false\n\
    \            break\n        seen.add(x)\n    end\n    return sorted\nend", " \
    \   sorted = true\n    sorted = sorted && all(lst.==sort(lst))\n    return sorted\n\
    end", "    sorted = true\n    for x in lst\n        if x != sort(x)\n        \
    \    sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6])\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</", "    \n  \
    \  sorted = true\n    \n    for x in lst\n        if x != sort(x)\n          \
    \  sorted = false\n            break\n    end\n    \n    return sorted\nend\n\
    </cell>\n<text>\nis_sorted() is a function that takes a vector of numbers and\
    \ returns true if the vector is sorted in ascending order. is_sorted() uses sort()\
    \ to sort the vector and checks to see if they are equal. If they are not, it\
    \ returns false. sort() is a function that sorts a vector of numbers in ascending\
    \ order. sort() is a function that sorts a vector of numbers in ascending order.\
    \ sort() is a function that sorts a vector of numbers in ascending order. sort()\
    \ is a function that sorts a vector of numbers in ascending order. sort() is a\
    \ function that sorts a vector of numbers in ascending order. sort() is a function\
    \ that sorts a vector of numbers in ascending order. sort() is a function that\
    \ sorts a vector of numbers in ascending order. sort() is a function that sorts\
    \ a vector of numbers in ascending order. sort() is a function that sorts a vector\
    \ of numbers in ascending order. sort() is a function that sorts a vector of numbers\
    \ in ascending order. sort() is a function that sorts a vector of numbers in ascending\
    \ order. sort() is a function that sorts a vector of numbers in ascending order.\
    \ sort() is a function that sorts a vector of numbers in ascending order. sort()\
    \ is a function that sorts a vector of numbers in ascending order. sort() is a\
    \ function that sorts a vector of numbers in ascending order. sort() is a function\
    \ that sorts a vector of numbers in ascending order. sort() is a function that\
    \ sorts a vector of numbers in ascending order. sort() is a function that sorts\
    \ a vector of numbers in ascending order. sort() is a function that sorts a vector\
    \ of numbers in ascending order. sort() is a function that sorts a vector of numbers\
    \ in ascending order. sort() is a function that sorts a vector of numbers in ascending\
    \ order. sort() is a function that sorts a vector of numbers in ascending order.\
    \ sort() is a function that sorts a vector of numbers in ascending order. sort()\
    \ is a function that sorts a vector of numbers in ascending order. sort() is a\
    \ function that sorts a vector of numbers in ascending order. sort() is a function\
    \ that sorts a vector of numbers in ascending order. sort() is a function that\
    \ sorts a vector of numbers in ascending order. sort() is a function that sorts\
    \ a vector of numbers in ascending order. sort() is a function that sorts a vector\
    \ of numbers in ascending order. sort() is a function that sorts a vector of numbers\
    \ in ascending order. sort() is a function that sorts a vector of numbers in ascending\
    \ order. sort() is a function that sorts a vector of numbers in ascending order.\
    \ sort() is a function that sorts a vector of numbers in ascending order. ", " \
    \   sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend", "    \n    sorted_list\
    \ = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n        return\
    \ true\n    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n            break\n    end\n    return sorted\nend", "    \n    sorted\
    \ = sort(lst)\n    \n    if length(sorted) == length(lst)\n        return true\n\
    \    else\n        return false\n    end\nend", "    sorted = true\n    for x\
    \ in lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 3, 2, 4, 1])\n</cell>", "    sorted = true\n    for x in lst\n\
    \        if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend", "    \n    sorted = false\n    \n    for x in lst\n\
    \        if x != sort(x)\n            sorted = true\n            break\n     \
    \   end\n    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])",
  "    sort(lst) == lst\nend", "    sorted = true\n    for x in lst\n        if x\
    \ != sort(x)\n            sorted = false\n            break\n    end\n    return\
    \ sorted\nend", "    sort(lst) == lst\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1])\
    \ == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3,\
    \ 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert ",
  "    sorted = sort(lst)\n    sorted.length == 1\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4,\
    \ 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2,\
    \ 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n\
    @assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4,\
    \ 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2,\
    \ 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n\
    @assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4,\
    \ 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2,\
    \ 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n\
    @assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4,\
    \ 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])", "    if is_sorted(lst) == true\n\
    \        return true\n    \n    counts = Dict{Int, Int}()\n    for i in lst\n\
    \        counts[i] = counts[i] + 1 \n    end\n    \n    for i in counts\n    \
    \    if counts[i] > 1\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>", "    sorted = true\n    for x in lst\n  \
    \      if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test is_sorted([1,\
    \ 2, 3, 4, 5])\n@test is_sorted([1, 3, 2, 4, 5])\n@test is_sorted([1, 2, 3, 4,\
    \ 5, 6])\n@test is_sorted([1, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1, 3, 2, 4,\
    \ 5, 6, 7])\n@test is_sorted([1, 2, 2, 3, 3, 4])\n@test is_sorted([1, 2, 2, 2,\
    \ 3, 4])\n@test is_sorted([1, 1, 2, 2, 3, 4])\n@test is_sorted([1, 1, 2, 2, 3,\
    \ 3, 4])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4])\n@test is_sorted([1, 1, 2,\
    \ 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 4, 5])\n@test is_sorted([1, 1, ", "    sorted = true\n    for x in lst\n   \
    \     if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend", "    sorted = true\n    for x in lst\n        if x !=\
    \ sort(x)\n            sorted = false\n            break\n    end\n    return\
    \ sorted\nend", "    \n    sort(lst) == lst\nend", "    sort(lst) == lst\nend",
  "    sorted = sort(lst)\n    return all(sorted == lst)\nend\n</cell>\n<text>\nis_sorted()\
    \ is a higher-order function that takes a function as an argument. is_sorted()\
    \ returns a function that takes an array and returns true if the array is sorted.",
  "    \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 2, 3, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2,\
    \ 2, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2,\
    \ 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3,\
    \ 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 3, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 2, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 2, 2, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2,\
    \ 2, 2, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2,\
    \ 2, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2,\
    \ 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3,\
    \ 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 3, 4, 5])\n</cell",
  "    sorted = true\n    for x in lst\n        if x != x\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend", "    sorted = true\n   \
    \ for x in lst\n        if x != sort(x)\n            sorted = false\n        end\n\
    \    end\n    return sorted\nend", "    sorted = sort(lst)\n    sorted.length\
    \ == 1\nend", "    sort(lst) == lst\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1])\
    \ == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2,\
    \ 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert ",
  "    sorted = sort(lst)\n    last = sorted[end]\n    for i in 1:length(lst)\n  \
    \      if lst[i] != last\n            return false\n        end\n    end\n   \
    \ return true\nend", "    if is_sorted(lst) == true\n        return true\n   \
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   return true\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    sort(lst) == lst\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])", "    sort(lst) == lst\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) == true\n@assert is_sorted([5, 1, 2, 3,\
    \ 4, 6, 7]) == true\n@assert is_sorted([5, 1, 2, 3, 4, 6, 8, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9]) == false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 6, 8, 7, 9, 10]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 8, 7,\
    \ 9, 10, 11]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11,\
    \ 12]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13])\
    \ == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14])\
    \ == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14,\
    \ 15]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13,\
    \ 14, 15, 16]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 8, 7,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22, 23]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 8, 7,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20, 21, 22, 23, 24, 25]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 8, 7,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, ", "    sorted =\
    \ true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend", "    sorted = true\n   \
    \ for x in lst\n        if x != sort(x)\n            sorted = false\n        \
    \    break\n    end\n    return sorted\nend", "    sorted = sort(lst)\n    return\
    \ all(sorted == lst)\nend\n</cell>\n<code language=julia-1.5>", "    sorted =\
    \ true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend", "    if is_sorted(lst) ==\
    \ true\n        return true\n    \n    sorted_list = sort(lst)\n    \n    if length(sorted_list)\
    \ == length(lst)\n        return true\n    else\n        return false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    sorted = true\n    for x in lst\n\
    \        if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend", "    sorted = true\n    for x in lst\n        if x !=\
    \ sort(x)\n            sorted = false\n            break\n    end\n    return\
    \ sorted\nend", "    sorted = sort(lst)\n    return sorted == lst\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([1, 2, 3, 4, 5]) == true\n@assert\
    \ is_sorted([1, 3, 2, 4, 5]) == false\n@assert is_sorted([1, 2, 3, 4, 5, 6]) ==\
    \ true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == true\n@assert is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) == false\n@assert is_sorted([1, 2, 2, 3, 3, 4]) == true\n\
    @assert is_sorted([1, 2, 2, 2, 3, 4]) == false\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of unique elements in a vector. Assume\
    \ no duplicates.", "    sorted = sort(lst)\n    uniques = unique(sorted)\n   \
    \ return length(uniques) == length(sorted)\nend\n</cell>\n<text>\nis_sorted()\
    \ returns a boolean, true if the given vector is sorted in ascending order, false\
    \ otherwise. is_sorted() also returns a vector of unique numbers in the given\
    \ vector, which is useful for checking if the given vector is sorted.", "    sort(lst)\
    \ == lst\nend", "    sorted_list = sort(lst)\n    length(sorted_list) == length(lst)\
    \ && all(issorted(sorted_list) == true)\nend\n</cell>\n<text>\nis_sorted() tests\
    \ if a vector is sorted in ascending order. is_sorted() returns true if the vector\
    \ is sorted in ascending order, and false otherwise. is_sorted() also returns\
    \ true if the vector is sorted in descending order, and false otherwise. is_sorted()\
    \ also returns true if the vector is sorted in any order, and false otherwise.\
    \ is_sorted() also returns true if the vector is sorted in any order except for\
    \ descending order, and false otherwise. is_sorted() also returns true if the\
    \ vector is sorted in any order except for ascending order, and false otherwise.\
    \ is_sorted() also returns true if the vector is sorted in any order except for\
    \ descending order and ascending order, and false otherwise.", "    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend", "    lst = sort(lst)\n    last\
    \ = lst[1]\n    for i in 2:length(lst)\n        if lst[i] > last\n           \
    \ return false\n        last = lst[i]\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>", "    sorted = true\n    for x in lst\n        if x\
    \ != sort(x)\n            sorted = false\n            break\n    end\n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([",
  "    sorted = false\n    seen = Set()\n    for x in lst\n        if x in seen\n\
    \            sorted = true\n        else\n            push!(seen, x)\n       \
    \ end\n    end\n    return sorted\nend\n</cell>\n<text>\nis_sorted_by() is a helper\
    \ function that returns a function that checks if a list is sorted by a specific\
    \ key. For example, we can sort a list of numbers by their value using the following\
    \ code:", "    \n    sorted = true\n    for x in lst\n        if x != sort(x)\n\
    \            sorted = false\n        end\n    end\n    return sorted\nend\n</cell>\n\
    <text>\nis_sorted_by() function", "    sorted = true\n    for x in lst\n     \
    \   if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test is_sorted([1,\
    \ 2, 3, 4, 5])\n@test is_sorted([1, 3, 2, 4, 5])\n@test is_sorted([1, 3, 2, 4,\
    \ 5, 6, 7])\n@test is_sorted([1, 2, 2, 3, 3, 4])\n@test is_sorted([1, 2, 2, 2,\
    \ 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ numbers and returns the number of unique numbers in the vector. Assume no duplicate\
    \ numbers.", "    sorted = true\n    for x in lst\n        if x != sort(x)\n \
    \           sorted = false\n            break\n    end\n    return sorted\nend",
  "    sort(lst) == lst\nend\n</cell>\n<text>\nis_sorted() is a higher-order function.\
    \ It takes another function as its argument, and returns a new function that takes\
    \ an argument and returns a boolean.", "    sorted = true\n    for x in lst\n\
    \        if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend\n</cell>\n<text>\nis_sorted_by() is a function that takes\
    \ a function and a list of numbers and returns true if the function returns true\
    \ for all the numbers in the list.", "    sorted = true\n    for x in lst\n  \
    \      if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend", "    if is_sorted(lst) == true\n        return true\n\
    \    else\n        true\n    end\nend", "    sorted = true\n    for x in lst\n\
    \        if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend", "    sorted = true\n    sorted = sorted && all(lst.==sort(lst))\n\
    \    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true", "    sorted\
    \ = false\n    for x in lst\n        if x != sort(x)\n            sorted = true\n\
    \            break\n    end\n    return sorted\nend", "    sorted = false\n  \
    \  sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n            break\n    end\n    return sorted\nend", "    sort(lst)\
    \ == lst\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 6]) == true\n@assert is_sorted([5, 1, 2, 3, 4, 7]) == false\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert ", "    sorted = true\n \
    \   for x in lst\n        if x != sort(x)\n            sorted = false\n      \
    \      break\n    end\n    return sorted\nend", "    sorted = true\n    for x\
    \ in lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend", "    sorted = sort(lst)\n    return length(sorted)\
    \ == length(lst) && all(sorted .== lst)\nend", "    \n    sorted = true\n    \n\
    \    for elt in lst\n        if elt != elt.prev\n            sorted = false\n\
    \            break\n        end\n    end\n    \n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([1, 2, 3, 4, 5])\n@test is_sorted([1,\
    \ 3, 2, 4, 5])\n@test is_sorted([1, 2, 3, 4, 5, 6])\n@test is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7])\n@test is_sorted([1, 3, 2, 4, 5, 6, 7])\n@test is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n@test is_sorted([1, 2, 2, 2, 3, 4])\n@test is_sorted([1, 1, 2,\
    \ 2, 3, 3, 4])\n@test is_sorted([1, 1, 2, 2, 3, 3, 4])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 1])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 1, 2])\n@test is_sorted([", "    sorted = true\n    for x in lst\n        if\
    \ x != sort(x)\n            sorted = false\n            break\n    end\n    return\
    \ sorted\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
