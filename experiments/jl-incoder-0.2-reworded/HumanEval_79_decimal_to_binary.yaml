name: HumanEval_79_decimal_to_binary
language: jl
prompt: "\"\"\"You will be given a number in decimal form and your task is to convert\
  \ it to\n    binary format. The function should return a string, with each character\
  \ representing a binary\n    number. Each character in the string will be '0' or\
  \ '1'.\n\n    There will be an extra couple of characters 'db' at the beginning\
  \ and at the end of the string.\n    The extra characters are there to help with\
  \ the format.\n\n    Examples:\n    >>> decimal_to_binary(15)\n    \"db1111db\"\n\
  \    >>> decimal_to_binary(32)\n    \"db100000db\"\n    \"\"\"\nfunction decimal_to_binary(decimal::Int64)::String\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = decimal_to_binary;\n\t@test(candidate(0)\
  \ == \"db0db\")\n\t@test(candidate(32) == \"db100000db\")\n\t@test(candidate(103)\
  \ == \"db1100111db\")\n\t@test(candidate(15) == \"db1111db\")\nend\n"
completions: ["    \n    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n\
    \        throw(ArgumentError(\"Decimal number must be between 2 and 64\"))\n \
    \   end\n    \n    for digit in decimal_to_binary(decimal - 2)\n        binary\
    \ += \"0\"\n    end\n    \n    for digit in decimal_to_binary(decimal - 1)\n \
    \       binary += \"1\"\n    end\n    \n    binary += \"db\"\n    \n    return\
    \ binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts a decimal number to binary and returns the string\
    \ in reverse order.", "    \n    binary_string = \"\"\n    \n    for digit in\
    \ decimal\n        binary_string += \"0\"\n    \n    binary_string += \"1\"\n\
    \    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary string to a decimal integer. Your\
    \ function should take in a string and return the decimal integer.", "    \n \
    \   binary = \"\"\n    \n    if decimal < 0\n        binary = \"\"\n    elseif\
    \ decimal < 2\n        binary = \"0\"\n    elseif decimal < 8\n        binary\
    \ = \"1\"\n    else\n        decimal = decimal - 2\n        binary = decimal_to_binary(decimal)\n\
    \    end\n    \n    return binary + decimal_to_binary(decimal - 2)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that converts a binary number to a decimal\
    \ number. Your function should take in a string and return a number.", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    binary = \"\"\n\
    \    \n    if decimal < 2:\n        binary = binary + \"0\"\n        return binary\n\
    \    \n    decimal = decimal % 2\n    \n    binary = binary + \"1\"\n    \n  \
    \  decimal = decimal / 2\n    \n    binary = binary + decimal_to_binary(decimal)\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to a decimal number. The function\
    \ should take in a string and return a Int64.", "    binary_string = \"\"\n  \
    \  decimal = decimal % 2\n    while decimal != 0\n        binary_string = binary_string\
    \ + \"0\"\n        decimal = decimal - 1\n    binary_string = binary_string +\
    \ \"1\"\n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that converts binary numbers to decimal numbers. A binary\
    \ number consists of an even number of 1s and an odd number of 0s. For example,\
    \ the binary number 0101 would be represented as 5 in decimal.", "    if decimal\
    \ < 0\n        error(\"decimal must be positive\")\n    end", "    binary = \"\
    \"\n    decimal = decimal % 2\n    decimal = decimal / 2\n    while decimal !=\
    \ 0\n        binary = binary + \"0\"\n        decimal = decimal / 2\n    binary\
    \ = binary + \"1\"\n    return binary\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that converts a binary number to a decimal number. The function should\
    \ take in a string and return a Int64.", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    binary_string = \"\"\n    \n    if decimal <\
    \ 0 \n        binary_string = \"db\"\n        decimal = -decimal\n    \n    binary_string\
    \ = \"db\" + binary_string\n    \n    binary_string = \"\"\n    \n    while(decimal\
    \ > 0)\n        binary_string = binary_string + \"0\"\n        decimal = decimal\
    \ - 1\n    \n    binary_string = \"db\" + binary_string\n    \n    return binary_string\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to a decimal number. The function should\
    \ take in a string with each character representing a binary number and return\
    \ the decimal number represented by the binary number.", "    \n    binary = \"\
    \"\n    \n    if decimal < 2 || decimal > 64\n        throw(ArgumentError(\"decimal\
    \ must be between 2 and 64\"))\n    end\n    \n    for i in decimal_to_binary(decimal\
    \ - 2)\n        binary += \"0\"\n    end\n    \n    for i in decimal_to_binary(decimal\
    \ - 1)\n        binary += \"1\"\n    end\n    \n    for i in decimal_to_binary(decimal\
    \ - 2)\n        binary += \"0\"\n    end\n    \n    return binary\nend", "   \
    \ if decimal < 0 \n        error(\"Decimal cannot be less than 0\")\n    else\
    \ if decimal > 2^(64 - 64) \n        error(\"Decimal cannot be greater than 2^(64\
    \ - 64)\")\n    else \n        binary = \"\"\n        decimal = decimal % 2\n\
    \        while decimal != 0 \n            binary = binary + \"0\"\n          \
    \  decimal = decimal // 2\n        binary = binary + \"1\"\n        binary = binary\
    \ + \"db\"\n        return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that converts binary numbers to decimal numbers. Each binary\
    \ number will be given as a string\n    consisting of '0' and '1'.", "    \n \
    \   binary_string = \"\"\n    \n    for digit in decimal\n        binary_string\
    \ += \"0\"\n    \n    binary_string += \"1\"\n    \n    return binary_string\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that converts a binary number to a decimal number. \nThe function\
    \ should take in a string and return the decimal number. \nThe string should only\
    \ contain '0' and '1' characters.", "    if decimal == 0 \n        return \"0\"\
    \n    else \n        binary_string = \"\"\n        binary_string += \"0\"\n  \
    \      binary_string += decimal_to_binary(decimal - 1)\n        binary_string\
    \ += \"1\"\n        return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that converts a binary string to\
    \ a decimal number. \nThe function should take in a binary string and return a\
    \ decimal number.", "    binary_string = \"\"\n    \n    for digit in decimal:\n\
    \        binary_string += if digit == 0 then \"0\" else \"1\"\n    return binary_string\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a decimal number to binary and returns the string in\
    \ reverse order.", "    \n    binary = \"\"\n    \n    if decimal < 2:\n     \
    \   binary = binary + \"0\"\n        return binary\n    \n    decimal = decimal\
    \ - 2\n    \n    while decimal > 0:\n        binary = binary + \"1\"\n       \
    \ decimal = decimal - 1\n    \n    binary = binary + \"db\"\n    \n    return\
    \ binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 3\n\
    Write a function that converts a binary number to decimal.", "    \n    binary\
    \ = \"\"\n    \n    if decimal < 2:\n        binary = binary + \"0\"\n       \
    \ return binary\n    \n    decimal = decimal - 2\n    \n    while decimal >= 2:\n\
    \        decimal = decimal / 2\n        binary = binary + \"1\"\n    \n    binary\
    \ = binary + \"0\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts binary numbers to\
    \ decimal numbers. \nThe function should take in a string with binary numbers\
    \ and return the decimal number. \nThe string will always have '0' or '1' at the\
    \ beginning. \nThe function should ignore the extra characters at the beginning\
    \ and end of the string.", "    \n    binary_string = \"\"\n    \n    for i in\
    \ decimal_to_binary(decimal)\n        binary_string += i\n    \n    return binary_string\n\
    end", "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n   \
    \     throw(ArgumentError(\"decimal must be between 2 and 64\"))\n    end", " \
    \   if decimal < 0\n        error(\"decimal number must be positive\")\n    else\
    \ if decimal > 2^(64-1)\n        error(\"decimal number too large\")\n    else\n\
    \        binary = \"\"\n        while decimal > 0\n            binary = binary\
    \ + \"0\"\n            decimal = decimal - 1\n        end\n        while decimal\
    \ > 0\n            binary = binary + \"1\"\n            decimal = decimal - 1\n\
    \        end\n        binary = binary + \"db\"\n        return binary\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that converts a binary number\
    \ to a decimal number. The function should take in a string and return a Int64.",
  "    \n    binary_string = \"\"\n    \n    if decimal < 0\n        binary_string\
    \ = \"db\"\n        decimal = -decimal\n    \n    binary_string += string_to_binary(decimal)\n\
    \    \n    return binary_string\nend", "    \n    binary_string = \"\"\n    \n\
    \    for digit in decimal\n        binary_string += if digit == 0 then \"0\" else\
    \ \"1\"\n    end\n    \n    binary_string += \"db\"\n    \n    return binary_string\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that converts a binary string\
    \ to a decimal string.", "    \n    binary = \"\"\n    \n    for digit in decimal\n\
    \        binary = binary + str((digit.to_binary() |> String.fromCharCode))\n \
    \   \n    binary = binary + \"db\"\n    \n    return binary\nend\n</cell>\n<code\
    \ language=julia-1.4>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.4>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a decimal number to binary and returns the string in reverse order.", "    \n\
    \    binary = \"\"\n    \n    if decimal < 0: \n        decimal = -decimal\n \
    \       \n    decimal = decimal % 2\n    \n    while decimal > 0: \n        binary\
    \ = binary + \"0\"\n        decimal = decimal - 1\n    \n    decimal = decimal\
    \ / 2\n    \n    while decimal > 0: \n        binary = binary + \"1\"\n      \
    \  decimal = decimal - 1\n    \n    binary = binary + \"b\"\n    \n    return\
    \ binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts a decimal number to hexadecimal.", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if decimal < 0\n        error(\"\
    decimal must be positive\")\n    elseif decimal > 2 ** 64\n        error(\"decimal\
    \ must be less than 2 ** 64\")\n    else\n        binary = \"\"\n        decimal\
    \ = decimal % 2\n        decimal = decimal / 2\n        decimal = decimal % 2\n\
    \        decimal = decimal / 2\n        decimal = decimal % 2\n        decimal\
    \ = decimal / 2\n        decimal = decimal % 2\n        decimal = decimal / 2\n\
    \        decimal = decimal % 2\n        decimal = decimal / 2\n        decimal\
    \ = decimal % 2\n        decimal = decimal / 2\n        decimal = decimal % 2\n\
    \        decimal = decimal / 2\n        decimal = decimal % 2\n        decimal\
    \ = decimal / 2\n        decimal = decimal % 2\n        decimal = decimal / 2\n\
    \        decimal = decimal % 2\n        decimal = decimal / 2\n        decimal\
    \ = decimal % 2\n        decimal = decimal / 2\n        decimal = decimal % 2\n\
    \        decimal = decimal / 2\n        decimal = decimal % 2\n        decimal\
    \ = decimal / 2\n        decimal = decimal % 2\n        decimal = decimal / 2\n\
    \        decimal = decimal % 2\n        decimal = decimal / 2\n        decimal\
    \ = decimal % 2\n        decimal = decimal / 2\n        decimal = decimal % 2\n\
    \        decimal = decimal / 2\n        decimal = decimal % 2\n        decimal\
    \ = decimal / 2\n        decimal = decimal % 2\n        decimal = decimal / 2\n\
    \        decimal = decimal % 2\n        decimal = decimal / 2\n        decimal\
    \ = decimal % 2\n        decimal = decimal / 2\n        decimal = decimal % 2\n\
    \        decimal = decimal / 2\n        decimal = decimal % 2\n        decimal\
    \ = decimal / 2\n        decimal = decimal % 2\n        decimal = decimal / 2\n\
    \        decimal = decimal % 2\n        decimal = decimal / 2\n        decimal\
    \ = decimal % 2\n        decimal = decimal / 2\n        decimal = decimal % 2\n\
    \        decimal = decimal / 2\n        decimal = decimal % 2\n        decimal\
    \ = decimal / 2\n        decimal = decimal % 2\n        decimal = decimal / 2\n\
    \        decimal = decimal % 2\n        decimal = decimal / 2\n        decimal\
    \ = decimal % 2\n        decimal = decimal / 2\n        decimal = decimal % 2\n\
    \        decimal = decimal / 2\n        decimal = decimal % 2\n        decimal\
    \ = decimal / 2\n        decimal = decimal % 2\n        decimal = decimal / 2\n\
    \        ", "    \n    binary = \"\"\n    \n    if decimal < 0: \n        decimal\
    \ = -decimal\n        \n    decimal = decimal % 2\n    \n    while decimal > 0:\
    \ \n        binary = binary + \"0\"\n        decimal = decimal - 1\n    \n   \
    \ decimal = decimal % 2\n    \n    while decimal > 0: \n        binary = binary\
    \ + \"1\"\n        decimal = decimal - 1\n    \n    binary = binary + \"b\"\n\
    \    \n    return binary\nend", "    \n    binary = \"\"\n    \n    if decimal\
    \ < 2 || decimal > 64\n        throw(ArgumentError(\"Decimal number must be between\
    \ 2 and 64\"))\n    end", "    \n    binary_string = \"\"\n    \n    if decimal\
    \ < 2:\n        binary_string = \"0\"\n        return binary_string\n    \n  \
    \  binary_string = \"1\"\n    \n    while(decimal > 0)\n        \n        binary_string\
    \ = binary_string + \"0\"\n        decimal = decimal - 1\n    \n    binary_string\
    \ = binary_string + \"1\"\n    \n    return binary_string\nend", "    \n    binary\
    \ = \"\"\n    \n    decimal = decimal % 2\n    \n    while decimal != 0\n    \
    \    binary = binary + \"0\"\n        decimal = decimal - 1\n    \n    binary\
    \ = binary + \"1\"\n    \n    binary = binary + \"db\"\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to a decimal number. The function should\
    \ take in a binary number as string and return the decimal number.", "    \n \
    \   binary_string = \"\"\n    \n    if decimal < 0: \n        binary_string =\
    \ \"-db\"\n        decimal = -decimal\n    \n    binary_string = \"db\" + string(decimal)\n\
    \    \n    return binary_string\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,binary,decimal\
    \ |>\n<code>", "    binary_string = \"\"\n    \n    for digit in decimal\n   \
    \     binary_string += if digit == 0 then \"0\" else \"1\"\n    end\n    \n  \
    \  return binary_string + \"db\"\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to a decimal number. Your\
    \ function should take in a binary string and return the decimal number.", " \
    \   \n    binary = \"\"\n    \n    if decimal < 2:\n        binary = \"0\"\n \
    \   \n    if decimal >= 2:\n        binary = \"1\"\n        \n        decimal\
    \ = decimal / 2\n        \n        while decimal > 0:\n            binary = \"\
    0\" + binary\n            decimal = decimal / 2\n            \n    return binary\
    \ + \"db\"\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 3\n\
    Write a function that converts a decimal number to hexadecimal format. Hexadecimal\
    \ format consists of two characters 'x' and\n'h', where x represents hexadecimal\
    \ digits and h represents hexadecimal letters.", "    \n    binary = \"\"\n  \
    \  \n    decimal = decimal % 2\n    \n    while decimal != 0\n        \n     \
    \   if decimal < 2\n            \n            binary += \"0\"\n            \n\
    \        else\n            \n            binary += \"1\"\n            \n     \
    \   decimal = decimal / 2\n        \n    end\n    \n    binary = binary[2:end]\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to decimal.", "    \n    binary\
    \ = \"\"\n    \n    for i in decimal_to_binary(decimal)\n        binary = binary\
    \ + i\n    end\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts decimal to binary\
    \ with base 16. Your function should return a string.", "    if decimal < 0\n\
    \        error(\"decimal must be positive\")\n    end\n    \n    binary = \"\"\
    \n    \n    if decimal < 2\n        binary = binary + \"0\"\n    end\n    \n \
    \   while decimal > 0\n        decimal = decimal / 2\n        binary = binary\
    \ + \"1\"\n    end\n    \n    if binary == \"0\"\n        binary = binary + \"\
    b\"\n    end\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts binary to decimal.",
  "    binary_string = \"\"\n    \n    if decimal < 2 || decimal > 64\n        return\
    \ \"Invalid input\"\n    \n    decimal = decimal % 2\n    \n    while decimal\
    \ != 0\n        binary_string = binary_string + \"0\"\n        decimal = decimal\
    \ - 1\n    \n    binary_string = binary_string + \"1\"\n    \n    binary_string\
    \ = \"db\" + binary_string\n    \n    return binary_string\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nProblem 7: Binary to Decimal\nWrite a\
    \ function that converts binary to decimal.", "    \n    if decimal < 0\n    \
    \    error(\"Decimal cannot be negative\")\n    end\n    \n    binary = \"\"\n\
    \    \n    while decimal != 0\n        binary = string(decimal%2) + binary\n \
    \       decimal = floor(decimal/2)\n    end\n    \n    binary = string(decimal%2)\
    \ + binary\n    \n    binary = string(decimal%2) + binary\n    \n    binary =\
    \ string(decimal%2) + binary\n    \n    binary = string(decimal%2) + binary\n\
    \    \n    binary = string(decimal%2) + binary\n    \n    binary = string(decimal%2)\
    \ + binary\n    \n    binary = string(decimal%2) + binary\n    \n    binary =\
    \ string(decimal%2) + binary\n    \n    binary = string(decimal%2) + binary\n\
    \    \n    binary = string(decimal%2) + binary\n    \n    binary = string(decimal%2)\
    \ + binary\n    \n    binary = string(decimal%2) + binary\n    \n    binary =\
    \ string(decimal%2) + binary\n    \n    binary = string(decimal%2) + binary\n\
    \    \n    binary = string(decimal%2) + binary\n    \n    binary = string(decimal%2)\
    \ + binary\n    \n    binary = string(decimal%2) + binary\n    \n    binary =\
    \ string(decimal%2) + binary\n    \n    binary = string(decimal%2) + binary\n\
    \    \n    binary = string(decimal%2) + binary\n    \n    binary = string(decimal%2)\
    \ + binary\n    \n    binary = string(decimal%2) + binary\n    \n    binary =\
    \ string(decimal%2) + binary\n    \n    binary = string(decimal%2) + binary\n\
    \    \n    binary = string(decimal%2) + binary\n    \n    binary = string(decimal%2)\
    \ + binary\n    \n    binary = string(decimal%2) + binary\n    \n    binary =\
    \ string(decimal%2) + binary\n    \n    binary = string(decimal%2) + binary\n\
    \    \n    binary = string(decimal%2) + binary\n    \n    binary = string(decimal%2)\
    \ + binary\n    \n    binary = string(decimal%2) + binary\n    \n    binary =\
    \ string(decimal%2) + binary\n    \n    binary = string(decimal%2) + binary\n\
    \    \n    binary = string(decimal%2) + binary\n    \n    binary = string(decimal%2)\
    \ + binary\n    \n    binary = string(decimal%2) + binary\n    \n    binary =\
    \ string(decimal%2) + binary\n    \n    binary = string(decimal%2) + binary\n\
    \    \n    binary = string(decimal%2) + binary\n    \n    binary = string(decimal%2)\
    \ + binary\n    \n    binary = string(decimal%2) + binary", "    binary = \"\"\
    \n    decimal = decimal % 2\n    while decimal != 0\n        binary = binary +\
    \ \"0\"\n        decimal = decimal / 2\n    binary = binary + \"1\"\n    return\
    \ binary\nend\n</cell>\n<code language=julia-1.0>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.0>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts binary numbers to decimal numbers. A binary number\
    \ consists of a\nsequence of 0s and 1s. Each digit represents a power of 2. For\
    \ example the binary number 0101 is\nequal to 8 in decimal.", "    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    binary = \"\"\n    \n\
    \    if decimal < 0: \n        decimal = -decimal\n        \n    decimal = decimal\
    \ % 2\n    \n    while decimal > 0: \n        binary = binary + \"1\"\n      \
    \  decimal = decimal // 2\n    \n    decimal = decimal % 2\n    \n    while decimal\
    \ > 0: \n        binary = binary + \"0\"\n        decimal = decimal // 2\n   \
    \ \n    binary = binary + \"db\"\n    \n    return binary\nend\n</cell>\n<text>\n\
    Now let's test our function", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    binary = \"\"\n    \n    if decimal > 0 \n        binary\
    \ = decimal_to_binary(decimal - 1)\n    end\n    \n    binary = binary + string(decimal,\
    \ \"b\")\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a decimal number to binary and returns the\
    \ string in reverse order.", "    \n    if decimal < 0\n        error(\"Decimal\
    \ cannot be negative\")\n    \n    binary = \"\"\n    \n    decimal = decimal\
    \ % 2\n    \n    while decimal != 0\n        binary = binary + \"0\"\n       \
    \ decimal = decimal - 1\n    \n    binary = binary + \"1\"\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal numbers. Your function should\
    \ take in a string with each character representing a binary number and\nconvert\
    \ it to decimal number. Your function should return an Int64 number.", "    \n\
    \    if decimal == 0 \n        return \"db0\"\n    \n    binary = \"\"\n    \n\
    \    decimal = decimal % 2\n    \n    while decimal != 0 \n        binary = binary\
    \ + \"0\"\n        decimal = decimal - 1\n    \n    binary = binary + \"1\"\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that converts a binary number to a decimal number. The function\
    \ should take in a string with each character representing a binary number and\
    \ return the decimal number.", "    \n    if decimal < 0\n        error(\"Decimal\
    \ number must be positive\")\n    end\n    \n    binary = \"\"\n    \n    for\
    \ i in decimal_to_binary(decimal - 1)\n        binary += \"0\"\n    end\n    \n\
    \    binary += \"1\"\n    \n    return binary\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that converts a decimal number to binary and returns the\
    \ string in reverse.", "    \n    binary_string = \"\"\n    \n    if decimal >\
    \ 0 \n        binary_string += \"1\"\n        \n        decimal_to_binary(decimal\
    \ - 1)\n    \n    binary_string += \"0\"\n    \n    return binary_string\nend\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that converts a decimal number to binary and returns the\
    \ string in reverse order.", "    \n    binary = \"\"\n    \n    if decimal <\
    \ 2:\n        binary = \"0\"\n    \n    if decimal < 16:\n        binary = \"\
    0\" + binary\n    \n    if decimal < 256:\n        binary = \"1\" + binary\n \
    \   \n    if decimal < 65536:\n        binary = \"10\" + binary\n    \n    if\
    \ decimal < 16777216:\n        binary = \"100\" + binary\n    \n    if decimal\
    \ < 4294967296:\n        binary = \"1000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"10000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"100000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"1000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"10000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"100000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"1000000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"10000000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"100000000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"1000000000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"10000000000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"100000000000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"1000000000000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"10000000000000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"100000000000000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"1000000000000000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"10000000000000000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"100000000000000000000\" + binary\n", "    \n    binary_string\
    \ = \"\"\n    \n    for i in decimal_to_binary(decimal)\n        binary_string\
    \ += i\n    end\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ decimal.", "    \n    binary_string = \"\"\n    \n    if decimal < 2:\n    \
    \    binary_string = \"0\"\n        return binary_string\n    \n    decimal_part\
    \ = decimal % 2\n    binary_string = \"1\"\n    \n    while decimal > 2:\n   \
    \     decimal = decimal / 2\n        binary_string = \"1\" + binary_string\n \
    \   \n    if decimal_part == 0:\n        binary_string = \"0\" + binary_string\n\
    \    \n    return binary_string", "    \n    binary = \"\"\n    \n    if decimal\
    \ < 0 \n        error(\"Decimal cannot be negative\")\n    \n    decimal = decimal\
    \ % 2\n    \n    if decimal > 0 \n        binary = decimal + binary\n    \n  \
    \  decimal = decimal / 2\n    \n    if decimal > 0 \n        binary = decimal\
    \ + binary\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n     \
    \   binary = decimal + binary\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary = decimal + binary\n    \n    decimal = decimal / 2\n \
    \   \n    if decimal > 0 \n        binary = decimal + binary\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = decimal + binary\n\
    \    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary =\
    \ decimal + binary\n    \n    decimal = decimal / 2\n    \n    if decimal > 0\
    \ \n        binary = decimal + binary\n    \n    decimal = decimal / 2\n    \n\
    \    if decimal > 0 \n        binary = decimal + binary\n    \n    decimal = decimal\
    \ / 2\n    \n    if decimal > 0 \n        binary = decimal + binary\n    \n  \
    \  decimal = decimal / 2\n    \n    if decimal > 0 \n        binary = decimal\
    \ + binary\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n     \
    \   binary = decimal + binary\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary = decimal + binary\n    \n    decimal = decimal / 2\n \
    \   \n    if decimal > 0 \n        binary = decimal + binary\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = decimal + binary\n\
    \    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary =\
    \ decimal + binary\n    \n    decimal = decimal / 2\n    \n    if decimal > 0\
    \ \n        binary = decimal + binary\n    \n    decimal = decimal / 2\n    \n\
    \    if decimal > 0 \n        binary = decimal + binary\n    \n    decimal = decimal\
    \ / 2\n    \n    if decimal > 0 \n        binary = decimal + binary\n    \n  \
    \  decimal = decimal / 2\n    \n    if decimal > 0 \n        binary = decimal\
    \ + binary\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n     \
    \   binary = decimal + binary\n    \n    decimal = ", "    if decimal == 0 \n\
    \        return \"0\"\n    else if decimal == 1 \n        return \"1\"\n    else\
    \ \n        binary_string = decimal_to_binary(decimal/2)\n        binary_string\
    \ += decimal_to_binary(decimal%2)\n        return binary_string\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal numbers. A binary number is represented as a string\n\
    with each character representing a binary number. Each character in the string\
    \ will be '0' or '1'.", "    \n    if decimal < 0 \n        error(\"Decimal cannot\
    \ be negative\")\n    else if decimal > 2^(64 - 64) \n        error(\"Decimal\
    \ cannot be greater than 2^64\")\n    else \n        binary = \"\"\n        \n\
    \        for i = 64 - 64 + 1 .. -1 \n            if decimal >= i \n          \
    \      binary = binary + \"1\"\n                decimal = decimal - i\n      \
    \      else \n                binary = binary + \"0\"\n                decimal\
    \ = decimal - i\n                \n        return binary + \"db\" + decimal_to_binary(decimal)\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 3\n\
    Write a function that will convert a binary number to decimal form. Your function\
    \ should take in a string\n    as input and return a string as output.", "   \
    \ \n    binary = \"\"\n    \n    if decimal < 2:\n        binary = binary + \"\
    0\"\n        return binary\n    \n    decimal = decimal % 2\n    \n    while decimal\
    \ > 0:\n        decimal = decimal // 2\n        binary = binary + \"1\"\n    \n\
    \    return binary\nend", "    \n    binary_string = \"\"\n    \n    if decimal\
    \ < 0 \n        binary_string = \"db\"\n        decimal = -decimal\n    \n   \
    \ while decimal != 0\n        binary_string = binary_string + \"0\"\n        decimal\
    \ = decimal - 1\n    \n    binary_string = binary_string + \"1\"\n    \n    return\
    \ binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts binary to decimal.", "    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    binary = \"\"\n    \n    if\
    \ decimal < 2 || decimal > 64\n        throw(ArgumentError(\"Decimal number must\
    \ be between 2 and 64\"))\n    end\n    \n    if decimal < 10\n        binary\
    \ = binary + \"0\"\n    end\n    \n    for i in reverse(decimal_to_binary(decimal\
    \ - 10))\n        binary = binary + \"1\"\n    end\n    \n    if decimal < 10\n\
    \        binary = binary + \"0\"\n    end\n    \n    return binary\nend", "  \
    \  \n    binary = \"\"\n    \n    if decimal < 2:\n        binary = binary + \"\
    0\"\n        return binary\n    \n    decimal = decimal % 2\n    \n    while decimal\
    \ > 0:\n        decimal = decimal // 2\n        binary = binary + \"1\"\n    \n\
    \    return binary", "    \n    binary_string = \"\"\n    \n    if decimal < 2\
    \ || decimal > 64\n        binary_string = \"Invalid input\"\n    else \n    \
    \    binary_string = \"db\"\n        \n        for i in 0..(decimal-1)\n     \
    \       binary_string += \"0\"\n        end\n        \n        for i in 0..(decimal-1)\n\
    \            binary_string += \"1\"\n        end\n        \n        binary_string\
    \ += \"db\"\n        \n        return binary_string\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a binary string to a decimal number. Your function should take in a binary string\
    \ and return a decimal number.", "    \n    binary = \"\"\n    \n    if decimal\
    \ < 2:\n        binary = binary + \"0\"\n        return binary\n    \n    decimal\
    \ = decimal % 2\n    \n    binary = binary + \"0\"\n    \n    decimal = decimal\
    \ / 2\n    \n    while decimal > 0:\n        decimal = decimal % 2\n        binary\
    \ = binary + \"1\"\n    \n    return binary\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the string with all the characters\
    \ in alphabetical order.", "    \n    binary_string = \"\"\n    \n    if decimal\
    \ < 2 || decimal > 64\n        binary_string = \"Invalid input\"\n        return\
    \ binary_string\n    \n    binary_string = \"db\"\n    \n    binary_string +=\
    \ decimal_to_binary(decimal / 2)\n    \n    binary_string += decimal_to_binary(decimal\
    \ % 2)\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that converts binary to decimal.",
  "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n        throw(ArgumentError(\"\
    decimal must be between 2 and 64\"))\n    end\n    \n    for i in decimal_to_binary(decimal\
    \ - 2)\n        binary += \"0\"\n    end\n    \n    for i in decimal_to_binary(decimal\
    \ - 1)\n        binary += \"1\"\n    end\n    \n    binary += \"db\"\n    \n \
    \   return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts binary numbers to decimal numbers. Your function\
    \ should take in a string with each character representing a binary number and\
    \ return a string with each character representing a decimal number. Each character\
    \ in the string will be a digit between 0 and 9.", "    \n    binary = \"\"\n\
    \    \n    for i in decimal_to_binary(decimal)\n        binary = binary + i\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a decimal number to its binary representation\
    \ in reverse order.", "    \n    if decimal < 0\n        error(\"Decimal number\
    \ must be positive\")\n    end\n    \n    binary = \"\"\n    \n    for i in decimal_to_binary(decimal\
    \ - 1)\n        binary += \"0\"\n    end\n    \n    binary += \"1\"\n    \n  \
    \  return binary\nend", "    binary = \"\"\n    for digit in decimal_to_binary(decimal)\n\
    \        binary += digit\n    end\n    return binary\nend\n</code>\n<|/ a tags=julia,binary,decimal\
    \ |>\n<| a tags=julia,binary,decimal |>\n<code>", "    \n    binary = \"\"\n \
    \   \n    if decimal < 0: \n        decimal = -decimal\n        \n    decimal\
    \ = decimal % 2\n    \n    while decimal > 0: \n        binary = binary + \"0\"\
    \n        decimal = decimal - 1\n    \n    decimal = decimal % 2\n    \n    while\
    \ decimal > 0: \n        binary = binary + \"1\"\n        decimal = decimal -\
    \ 1\n    \n    binary = binary + \"b\"\n    \n    return binary\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that will\
    \ convert a binary number to a decimal number. Your function should take in a\
    \ string and return a Int64.", "    \n    binary = \"\"\n    \n    decimal = decimal\
    \ % 2\n    \n    while decimal != 0\n        \n        binary = binary + \"0\"\
    \n        decimal = decimal // 2\n    \n    binary = binary + \"1\"\n    \n  \
    \  return binary\nend", "    \n    binary = \"\"\n    \n    if decimal < 2 ||\
    \ decimal > 64\n        throw(ArgumentError(\"decimal must be between 2 and 64\"\
    ))\n    end\n    \n    if decimal < 2\n        throw(ArgumentError(\"decimal must\
    \ be between 2 and 64\"))\n    end\n    \n    if decimal > 64\n        throw(ArgumentError(\"\
    decimal must be between 2 and 64\"))\n    end\n    \n    binary = string(64 -\
    \ decimal, \"0\") # 64 because decimal is 64 bits\n    \n    return binary\nend",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if decimal < 0\
    \ \n        error(\"Decimal cannot be negative\")\n    else if decimal > 2^(64\
    \ - 64) \n        error(\"Decimal cannot be greater than 2^64\")\n    else \n\
    \        binary = \"\"\n        for i = 64 - 64 + 1 downto 0 \n            if\
    \ decimal >= i \n                binary += \"1\"\n                decimal -= i\
    \ \n            else \n                binary += \"0\"\n                decimal\
    \ -= i \n        binary += \"db\"\n        return binary\n    end\nend", "   \
    \ \n    binary_string = \"\"\n    \n    if decimal > 0 \n        binary_string\
    \ = decimal_to_binary(decimal - 1)\n    \n    binary_string += if decimal < 10\
    \ \n        \"0\"\n    else\n        \"1\"\n    end\n    \n    return binary_string\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that will convert a decimal number to binary and return the string\
    \ in reverse order.", "    if decimal < 0\n        error(\"Decimal number must\
    \ be positive\")\n    else if decimal > 2^(64-1)\n        error(\"Decimal number\
    \ must be less than 2^64\")\n    else\n        binary = \"\"\n        decimal\
    \ = decimal % 2\n        while decimal > 0\n            binary = binary + \"0\"\
    \n            decimal = decimal - 1\n        binary = binary + \"1\"\n       \
    \ binary = binary + \"db\"\n        return binary\n    end\nend", "    \n    binary_string\
    \ = \"\"\n    \n    for digit in decimal\n        binary_string += if digit ==\
    \ 0 then \"0\" else \"1\"\n    end\n    \n    binary_string += \"db\"\n    \n\
    \    return binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts binary numbers to decimal numbers. You will\
    \ need to use the function you wrote in the previous exercise.", "    if decimal\
    \ < 0\n        error(\"decimal number must be positive\")\n    end\n    binary\
    \ = \"\"\n    decimal = decimal % 2\n    while decimal != 0\n        binary =\
    \ string(decimal) + binary\n        decimal = decimal / 2\n    end\n    binary\
    \ = string(decimal) + binary\n    binary = string(10) + binary\n    binary = string(1)\
    \ + binary\n    return binary\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that converts a binary number to a decimal number. The function should take\
    \ a\n    string as input, and return a Int64.", "    \n    binary = \"\"\n   \
    \ \n    decimal = decimal % 2\n    \n    if decimal > 0 \n        binary = binary\
    \ + \"1\"\n    else\n        binary = binary + \"0\"\n    \n    decimal = decimal\
    \ / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else\n\
    \        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if\
    \ decimal > 0 \n        binary = binary + \"1\"\n    else\n        binary = binary\
    \ + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n      \
    \  binary = binary + \"1\"\n    else\n        binary = binary + \"0\"\n    \n\
    \    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary = binary\
    \ + \"1\"\n    else\n        binary = binary + \"0\"\n    \n    decimal = decimal\
    \ / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else\n\
    \        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if\
    \ decimal > 0 \n        binary = binary + \"1\"\n    else\n        binary = binary\
    \ + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n      \
    \  binary = binary + \"1\"\n    else\n        binary = binary + \"0\"\n    \n\
    \    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary = binary\
    \ + \"1\"\n    else\n        binary = binary + \"0\"\n    \n    decimal = decimal\
    \ / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else\n\
    \        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if\
    \ decimal > 0 \n        binary = binary + \"1\"\n    else\n        binary = binary\
    \ + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n      \
    \  binary = binary + \"1\"\n    else\n        binary = binary + \"0\"\n    \n\
    \    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary = binary\
    \ + \"1\"\n    else\n        binary = binary + \"0\"\n    \n    decimal = decimal\
    \ / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else\n\
    \        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if\
    \ decimal > 0 \n        binary = binary + \"1\"\n    else\n        binary = binary\
    \ + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n      \
    \  binary = binary + \"1\"\n    else\n", "    binary_string = \"\"\n    \n   \
    \ if decimal < 2\n        binary_string = \"0\"\n    else\n        binary_string\
    \ = \"1\"\n    \n    binary_string *= decimal_to_binary(decimal - 2)\n    binary_string\
    \ += \"0\"\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a decimal number to\
    \ binary and returns the string in reverse order.", "    \n    binary = \"\"\n\
    \    \n    if decimal < 2 || decimal > 64\n        return \"Invalid decimal number\"\
    \n    \n    decimal = decimal % 2\n    \n    while decimal != 0\n        binary\
    \ = binary + \"0\"\n        decimal = decimal - 1\n    \n    binary = binary +\
    \ \"1\"\n    \n    return binary\nend", "    \n    binary = \"\"\n    \n    if\
    \ decimal < 2 || decimal > 64\n        return binary\n    \n    decimal = decimal\
    \ % 2\n    \n    while decimal != 0\n        binary = binary + \"0\"\n       \
    \ decimal = decimal / 2\n    \n    binary = binary + \"1\"\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a decimal number to hexadecimal format. The function\
    \ should return a string, with each character representing a hexadecimal number.\
    \ Each character in the string will be 0-9 or A-F. There will be an extra couple\
    \ of characters '0x' at the beginning and at the end of the string.", "    \n\
    \    binary = \"\"\n    \n    decimal = decimal % 2\n    \n    if decimal > 0\
    \ \n        binary = binary + \"1\"\n    else \n        binary = binary + \"0\"\
    \n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary =\
    \ binary + \"1\"\n    else \n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else \n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else \n     \
    \   binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary = binary + \"1\"\n    else \n        binary = binary +\
    \ \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else \n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else \n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else \n     \
    \   binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary = binary + \"1\"\n    else \n        binary = binary +\
    \ \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else \n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else \n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else \n     \
    \   binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary = binary + \"1\"\n    else \n        binary = binary +\
    \ \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else \n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else \n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    ", "    \n    binary = \"\"\n    \n    if decimal > 0 \n        binary =\
    \ decimal_to_binary(decimal - 1)\n        \n    binary += \"1\"\n    \n    if\
    \ decimal < 0 \n        binary += \"0\"\n        \n    return binary\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will convert a binary number to a decimal\
    \ number. The function should take in a string and return a Int64.", "    \n \
    \   binary_string = \"\"\n    \n    if decimal < 2 || decimal > 64\n        binary_string\
    \ = \"Invalid input\"\n        return binary_string\n    \n    binary_string =\
    \ decimal_to_binary(decimal / 2)\n    \n    if decimal % 2 == 0\n        binary_string\
    \ += \"0\"\n    else\n        binary_string += \"1\"\n    \n    return binary_string\
    \ + binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts binary numbers to decimal numbers. Your function\
    \ should take in a string and return a number.", "    \n    binary = \"\"\n  \
    \  \n    if decimal < 2 || decimal > 64\n        error(\"Invalid decimal number\"\
    )\n    end\n    \n    for index in 1:64\n        if decimal % 2 == 0\n       \
    \     binary += \"0\"\n        else\n            binary += \"1\"\n        end\n\
    \        decimal = decimal / 2\n    end\n    \n    binary = \"db\" + binary +\
    \ \"db\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a decimal number to\
    \ binary and returns the string in reverse order.", "    \n    binary = \"\"\n\
    \    \n    for i in decimal_to_binary(decimal)\n        binary = binary + i\n\
    \    end\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts binary to decimal.", "    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    if decimal < 0 \n        error(\"\
    decimal must be positive\")\n    \n    binary = \"\"\n    \n    decimal = decimal\
    \ % 2\n    \n    while decimal != 0\n        binary = binary + \"0\"\n       \
    \ decimal = decimal - 1\n    \n    binary = binary + \"1\"\n    \n    binary =\
    \ binary + \"db\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts binary to decimal.",
  "    binary_string = \"\"\n    for digit in decimal\n        binary_string += if\
    \ digit == 0 then \"0\" else \"1\"\n    return binary_string\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't answer the question at all. OP wants to know how to\
    \ convert decimal to binary in Haskell, not how to convert decimal to binary in\
    \ Python.\n<|/ c |>\n<| c |>\nI answered the question as asked, which was how\
    \ to convert decimal to binary in Haskell. OP asked how to convert decimal to\
    \ binary in Python. Haskell and Python are two different languages. OP asked how\
    \ to convert decimal to binary in Haskell. Haskell and Python are two different\
    \ languages. OP asked how to convert decimal to binary in Python. Haskell and\
    \ Python are two different languages. OP asked how to convert decimal to binary\
    \ in Haskell. Haskell and Python are two different languages. OP asked how to\
    \ convert decimal to binary in Python. Haskell and Python are two different languages.\
    \ OP asked how to convert decimal to binary in Haskell. Haskell and Python are\
    \ two different languages. OP asked how to convert decimal to binary in Python.\
    \ Haskell and Python are two different languages. OP asked how to convert decimal\
    \ to binary in Haskell. Haskell and Python are two different languages. OP asked\
    \ how to convert decimal to binary in Python. Haskell and Python are two different\
    \ languages. OP asked how to convert decimal to binary in Haskell. Haskell and\
    \ Python are two different languages. OP asked how to convert decimal to binary\
    \ in Python. Haskell and Python are two different languages. OP asked how to convert\
    \ decimal to binary in Haskell. Haskell and Python are two different languages.\
    \ OP asked how to convert decimal to binary in Python. Haskell and Python are\
    \ two different languages. OP asked how to convert decimal to binary in Haskell.\
    \ Haskell and Python are two different languages. OP asked how to convert decimal\
    \ to binary in Python. Haskell and Python are two different languages. OP asked\
    \ how to convert decimal to binary in Haskell. Haskell and Python are two different\
    \ languages. OP asked how to convert decimal to binary in Python. Haskell and\
    \ Python are two different languages. OP asked how to convert decimal to binary\
    \ in Haskell. Haskel", "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal\
    \ > 64\n        throw(ArgumentError(\"decimal must be between 2 and 64\"))\n \
    \   end\n    \n    binary = string(64 - decimal, \"0\")\n    \n    return binary\n\
    end", "    binary_string = \"\"\n    \n    for digit in decimal\n        binary_string\
    \ += if digit == 0 then \"0\" else \"1\"\n    end\n    \n    binary_string +=\
    \ \"db\"\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that converts a binary string to\
    \ a decimal integer.", "    \n    binary = \"\"\n    \n    if decimal < 0 \n \
    \       error(\"Decimal cannot be negative\")\n    \n    if decimal < 2 \n   \
    \     error(\"Decimal cannot be less than 2\")\n    \n    if decimal > 2^(64 -\
    \ 1) \n        error(\"Decimal cannot be greater than 2^(64 - 1)\")\n    \n  \
    \  decimal = decimal % 2\n    \n    binary = binary + string(decimal, \"b\")\n\
    \    \n    if decimal > 0 \n        binary = binary + \"b\"\n    \n    return\
    \ binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nProblem 3\n\
    Write a function that converts a binary number to a decimal number. The function\
    \ should take in a string\nwith each character representing a binary number and\
    \ return the decimal number. There will be an extra couple of\ncharacters 'db'\
    \ at the beginning and at the end of the string. The extra characters are there\
    \ to help with the format.", "    binary_string = \"\"\n    \n    for digit in\
    \ decimal\n        binary_string += \"0\"\n    \n    binary_string += \"1\"\n\
    \    \n    binary_string += \"db\"\n    \n    return binary_string\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that will\
    \ convert a binary number to a decimal number. Your function should take in a\
    \ string and return a number.", "    if decimal < 0\n        error(\"decimal number\
    \ must be positive\")\n    else if decimal > 2^(64 - 64)\n        error(\"decimal\
    \ number too large\")\n    else\n        binary = \"\"\n        while decimal\
    \ != 0\n            binary = binary + string(decimal % 2, base=2)\n          \
    \  decimal = decimal / 2\n        end\n        binary = binary + \"db\"\n    \
    \    binary = binary + string(decimal % 2, base=2)\n        binary = binary +\
    \ \"db\"\n        return binary\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that converts a binary number to a decimal number. Your function\
    \ should take in a string and return a Int64.", "    binary = \"\"\n    \n   \
    \ for digit in decimal\n        binary = binary + string_to_binary(\"0\", digit)\n\
    \    end\n    \n    binary = binary + \"db\"\n    return binary\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a binary number to decimal form. The function should take in a string and an\
    \ Int64 number. The function should return the decimal form of the binary number\
    \ passed in.", "    \n    binary_string = \"\"\n    \n    for digit in decimal\n\
    \        binary_string += \"0\"\n    \n    binary_string += \"1\"\n    \n    return\
    \ binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a decimal number to binary and returns the\
    \ string in reverse order.", "    if decimal < 0\n        error(\"Decimal number\
    \ must be positive\")\n    end\n    binary = \"\"\n    while decimal > 0\n   \
    \     binary = string(decimal % 2) + binary\n        decimal = decimal / 2\n \
    \   end\n    binary = string(decimal) + binary\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(", "    \n    if decimal < 0\n\
    \        error(\"Decimal number must be positive\")\n    end\n    \n    binary\
    \ = \"\"\n    \n    for digit in decimal\n        if digit == 0\n            binary\
    \ += \"0\"\n        elseif digit == 1\n            binary += \"1\"\n        else\n\
    \            error(\"Decimal number must be 0 or 1\")\n        end\n    end\n\
    \    \n    binary = binary[2:end]\n    \n    return binary\nend", "    \n    binary\
    \ = \"\"\n    \n    if decimal < 2:\n        binary = \"0\"\n    \n    if decimal\
    \ < 16:\n        binary = \"0\" + binary\n    \n    if decimal < 256:\n      \
    \  binary = \"1\" + binary\n    \n    if decimal < 65536:\n        binary = \"\
    10\" + binary\n    \n    if decimal < 16777216:\n        binary = \"11\" + binary\n\
    \    \n    if decimal < 4294967296:\n        binary = \"100\" + binary\n    \n\
    \    if decimal < 18446744073709551616:\n        binary = \"101\" + binary\n \
    \   \n    if decimal < 9223372036854775808:\n        binary = \"110\" + binary\n\
    \    \n    if decimal < 18446744073709551616:\n        binary = \"111\" + binary\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that will convert a decimal number to hexadecimal.", " \
    \   \n    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n        error(\"\
    Invalid decimal number\")\n    end\n    \n    for index in 1:64\n        if decimal\
    \ % 2 == 0\n            binary += \"0\"\n        else\n            binary += \"\
    1\"\n        end\n        decimal = decimal / 2\n    end\n    \n    binary = binary\
    \ + \"db\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a decimal number to\
    \ hexadecimal format. The function should return a string, with each character\
    \ representing a hexadecimal number. Each character in the string will be 0-9\
    \ or A-F. There will be an extra couple of characters 'h' at the beginning and\
    \ at the end of the string.", "    \n    if decimal < 0\n        error(\"decimal\
    \ must be positive\")\n    \n    binary = \"\"\n    \n    while decimal > 0\n\
    \        binary = string(decimal % 2) + binary\n        decimal = decimal / 2\n\
    \    end\n    \n    binary = string(decimal) + binary\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to decimal.", "    binary_string =\
    \ \"\"\n    \n    # Write your solution here\n    \n    return binary_string\n\
    end", "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n   \
    \     throw(ArgumentError(\"Decimal number must be between 2 and 64\"))\n    end",
  "    \n    binary_string = \"\"\n    \n    decimal = decimal % 2\n    \n    if decimal\
    \ > 0 \n        binary_string = \"1\" + binary_string\n    else\n        binary_string\
    \ = \"0\" + binary_string\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary_string = \"1\" + binary_string\n    else\n        binary_string\
    \ = \"0\" + binary_string\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary_string = \"1\" + binary_string\n    else\n        binary_string\
    \ = \"0\" + binary_string\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary_string = \"1\" + binary_string\n    else\n        binary_string\
    \ = \"0\" + binary_string\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary_string = \"1\" + binary_string\n    else\n        binary_string\
    \ = \"0\" + binary_string\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary_string = \"1\" + binary_string\n    else\n        binary_string\
    \ = \"0\" + binary_string\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary_string = \"1\" + binary_string\n    else\n        binary_string\
    \ = \"0\" + binary_string\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary_string = \"1\" + binary_string\n    else\n        binary_string\
    \ = \"0\" + binary_string\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary_string = \"1\" + binary_string\n    else\n        binary_string\
    \ = \"0\" + binary_string\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary_string = \"1\" + binary_string\n    else\n        binary_string\
    \ = \"0\" + binary_string\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary_string = \"1\" + binary_string\n    else\n        binary_string\
    \ = \"0\" + binary_string\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary_string = \"1\" + binary_string\n    else\n        binary_string\
    \ = \"0\" + binary_string\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary_string = \"1\" + binary_string\n    else\n        binary_string\
    \ = \"0\" + binary_string\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary_string = \"1\" + binary_string\n    else\n        binary_string\
    \ = \"0\" + binary_string\n    ", "    \n    binary = \"\"\n    \n    if decimal\
    \ < 2:\n        binary = binary + \"0\"\n        return binary\n    \n    if decimal\
    \ < 16:\n        binary = binary + \"0\"\n        return binary\n    \n    if\
    \ decimal < 256:\n        binary = binary + \"1\"\n        return binary\n   \
    \ \n    if decimal < 65536:\n        binary = binary + \"0\"\n        binary =\
    \ binary + \"1\"\n        return binary\n    \n    if decimal < 4294967296:\n\
    \        binary = binary + \"1\"\n        binary = binary + \"0\"\n        return\
    \ binary\n    \n    if decimal < 18446744073709551616:\n        binary = binary\
    \ + \"0\"\n        binary = binary + \"1\"\n        binary = binary + \"0\"\n\
    \        return binary\n    \n    if decimal < 9223372036854775808:\n        binary\
    \ = binary + \"1\"\n        binary = binary + \"0\"\n        binary = binary +\
    \ \"1\"\n        binary = binary + \"0\"\n        return binary\n    \n    if\
    \ decimal < 18446744073709551616:\n        binary = binary + \"0\"\n        binary\
    \ = binary + \"1\"\n        binary = binary + \"0\"\n        binary = binary +\
    \ \"1\"\n        binary = binary + \"0\"\n        return binary\n    \n    if\
    \ decimal < 9223372036854775808:\n        binary = binary + \"1\"\n        binary\
    \ = binary + \"0\"\n        binary = binary + \"1\"\n        binary = binary +\
    \ \"0\"\n        binary = binary + \"1\"\n        binary = binary + \"0\"\n  \
    \      return binary\n    \n    if decimal < 18446744073709551616:\n        binary\
    \ = binary + \"0\"\n        binary = binary + \"1\"\n        binary = binary +\
    \ \"0\"\n        binary = binary + \"1\"\n        binary = binary + \"0\"\n  \
    \      binary = binary + \"1\"\n        binary = binary + \"0\"\n        return\
    \ binary\n    \n    if decimal < 9223372036854775808:\n        binary = binary\
    \ + \"1\"\n        binary = binary + \"0\"\n        binary = binary + \"1\"\n\
    \        binary = binary + \"0\"\n        binary = binary + \"1\"\n        binary\
    \ = binary + \"0\"\n        binary = binary + \"1\"\n        binary = binary +\
    \ \"0\"\n        return binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = binary + \"0\"\n        binary = binary + \"1\"\n        binary\
    \ = binary + \"0\"\n        binary = binary + \"1\"\n        binary = binary +\
    \ \"0\"\n        binary = ", "    \n    binary_string = \"\"\n    \n    if decimal\
    \ > 0 \n        binary_string = \"1\"\n    else \n        binary_string = \"0\"\
    \n    \n    binary_string += decimal_to_binary(decimal - 1)\n    \n    return\
    \ binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that converts a decimal number to\
    \ binary and returns the string in reverse order.", "    \n    binary_string =\
    \ \"\"\n    \n    for i in decimal_to_binary(decimal)\n        binary_string +=\
    \ i\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary string to\
    \ a decimal number. The function should take in a string and return a Int64.",
  "    \n    binary_string = \"\"\n    \n    for digit in decimal:\n        if digit\
    \ == 0 or digit == 1:\n            binary_string += digit\n        else:\n   \
    \         binary_string += \"0\"\n    \n    binary_string += \"db\"\n    \n  \
    \  return binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to decimal form. Your function\
    \ should take in a string and return a string.", "    \n    binary_string = \"\
    \"\n    \n    if decimal < 2:\n        binary_string = \"0\"\n        return binary_string\n\
    \    \n    binary_string = \"1\"\n    \n    decimal = decimal / 2\n    \n    while\
    \ decimal > 0:\n        binary_string = \"0\" + binary_string\n        decimal\
    \ = decimal / 2\n    \n    return binary_string", "    \n    binary_string = \"\
    \"\n    \n    if decimal < 2 || decimal > 64\n        error(\"Invalid decimal\
    \ number\")\n    end\n    \n    for digit in decimal_to_binary(decimal - 2)\n\
    \        binary_string += \"0\"\n    end\n    \n    for digit in decimal_to_binary(decimal\
    \ - 1)\n        binary_string += \"1\"\n    end\n    \n    binary_string += \"\
    db\"\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that converts a binary number to\
    \ decimal.", "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n\
    \        return binary\n    \n    decimal = decimal % 2\n    \n    if decimal\
    \ < 10\n        binary = \"0\"\n    \n    binary = binary + binary\n    \n   \
    \ decimal = decimal / 2\n    \n    if decimal < 10\n        binary = \"0\" + binary\n\
    \    \n    binary = binary + binary\n    \n    decimal = decimal / 2\n    \n \
    \   if decimal < 10\n        binary = \"0\" + binary\n    \n    binary = binary\
    \ + binary\n    \n    decimal = decimal / 2\n    \n    if decimal < 10\n     \
    \   binary = \"0\" + binary\n    \n    binary = binary + binary\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal < 10\n        binary = \"0\" + binary\n\
    \    \n    binary = binary + binary\n    \n    decimal = decimal / 2\n    \n \
    \   if decimal < 10\n        binary = \"0\" + binary\n    \n    binary = binary\
    \ + binary\n    \n    decimal = decimal / 2\n    \n    if decimal < 10\n     \
    \   binary = \"0\" + binary\n    \n    binary = binary + binary\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal < 10\n        binary = \"0\" + binary\n\
    \    \n    binary = binary + binary\n    \n    decimal = decimal / 2\n    \n \
    \   if decimal < 10\n        binary = \"0\" + binary\n    \n    binary = binary\
    \ + binary\n    \n    decimal = decimal / 2\n    \n    if decimal < 10\n     \
    \   binary = \"0\" + binary\n    \n    binary = binary + binary\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal < 10\n        binary = \"0\" + binary\n\
    \    \n    binary = binary + binary\n    \n    decimal = decimal / 2\n    \n \
    \   if decimal < 10\n        binary = \"0\" + binary\n    \n    binary = binary\
    \ + binary\n    \n    decimal = decimal / 2\n    \n    if decimal < 10\n     \
    \   binary = \"0\" + binary\n    \n    binary = binary + binary\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal < 10\n        binary = \"0\" + binary\n\
    \    \n    binary = binary + binary\n    \n    decimal = decimal / 2\n    \n \
    \   if decimal < 10\n        binary = \"0\" + binary\n    \n    binary = binary\
    \ + binary\n    \n    decimal = decimal / 2\n    \n    if decimal ", "    \n \
    \   binary = \"\"\n    \n    if decimal > 0 \n        binary = decimal_to_binary(decimal\
    \ - 1)\n    end\n    \n    binary = binary + string(decimal, \"b\")\n    \n  \
    \  return binary\nend", "    \n    binary_string = \"\"\n    \n    \n    for digit\
    \ in decimal\n        binary_string += if digit == 0 then \"0\" else \"1\"\n \
    \   end\n    \n    binary_string += \"db\"\n    \n    return binary_string\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that converts a decimal number to\
    \ a binary number in reverse order. \nThe function should return a string, with\
    \ each character representing a binary number. Each character in the string will\
    \ be '0' or '1'.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    binary = \"\"\n    \n    if decimal > 0 \n        binary = decimal_to_binary(decimal\
    \ - 1)\n        \n    binary += \"1\"\n    \n    if decimal < 0 \n        binary\
    \ = binary + \"0\"\n        \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ decimal.", "    \n    binary = \"\"\n    \n    if decimal < 0 \n        error(\"\
    decimal must be positive\")\n    \n    if decimal > 2^(64 - 1) \n        error(\"\
    decimal must be less than 2^64\")\n    \n    decimal = decimal % 2\n    \n   \
    \ while decimal != 0\n        binary = binary + \"0\"\n        decimal = decimal\
    \ // 2\n    \n    binary = binary + \"1\"\n    \n    return binary\nend", "  \
    \  \n    binary_string = \"\"\n    \n    if decimal < 2 || decimal > 64\n    \
    \    error(\"Invalid input\")\n    end", "    \n    binary_string = \"\"\n   \
    \ \n    if decimal < 2:\n        binary_string = \"0\"\n    \n    if decimal <\
    \ 16:\n        binary_string = \"0\" + binary_string\n    \n    if decimal < 256:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 65536:\n\
    \        binary_string = \"1\" + binary_string + \"0\"\n    \n    if decimal <\
    \ 4294967296:\n        binary_string = \"1\" + binary_string + \"0\"\n    \n \
    \   if decimal < 18446744073709551616:\n        binary_string = \"1\" + binary_string\
    \ + \"0\"\n    \n    if decimal < 9223372036854775808:\n        binary_string\
    \ = \"1\" + binary_string + \"0\"\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"1\" + binary_string + \"0\"\n    \n    if decimal <\
    \ 9223372036854775808:\n        binary_string = \"1\" + binary_string + \"0\"\n\
    \    \n    if decimal < 18446744073709551616:\n        binary_string = \"1\" +\
    \ binary_string + \"0\"\n    \n    if decimal < 9223372036854775808:\n       \
    \ binary_string = \"1\" + binary_string + \"0\"\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"1\" + binary_string + \"0\"\n    \n    if decimal <\
    \ 9223372036854775808:\n        binary_string = \"1\" + binary_string + \"0\"\n\
    \    \n    if decimal < 18446744073709551616:\n        binary_string = \"1\" +\
    \ binary_string + \"0\"\n    \n    if decimal < 9223372036854775808:\n       \
    \ binary_string = \"1\" + binary_string + \"0\"\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"1\" + binary_string + \"0\"\n    \n    if decimal <\
    \ 9223372036854775808:\n        binary_string = \"1\" + binary_string + \"0\"\n\
    \    \n    if decimal < 18446744073709551616:\n        binary_string = \"1\" +\
    \ binary_string + \"0\"\n    \n    if decimal < 9223372036854775808:\n       \
    \ binary_string = \"1\" + binary_string + \"0\"\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"1\" + binary_string + \"0\"\n    \n    if decimal <\
    \ 922337203685477", "    \n    binary = \"\"\n    \n    if decimal < 2:\n    \
    \    binary = \"0\"\n    \n    if decimal < 16:\n        binary = \"0\" + binary\n\
    \    \n    if decimal < 256:\n        binary = \"1\" + binary\n    \n    if decimal\
    \ < 65536:\n        binary = \"10\" + binary\n    \n    if decimal < 4294967296:\n\
    \        binary = \"11\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"100\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"101\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"110\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"111\" + binary\n    \n    return binary\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(0)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(-1)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(-2)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(-3)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(-4)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(-5)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(-6)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(-7)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(-8)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(-9)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(-10)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(-11)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(-12)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(-13)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(-14)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(-15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(-16)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_", "    \n    binary_string = \"\"\n    \n    if decimal < 2 || decimal\
    \ > 64\n        return \"Invalid input\"\n    \n    binary_string = decimal_to_binary(decimal\
    \ / 2)\n    \n    if decimal % 2 == 0\n        binary_string += \"0\"\n    else\n\
    \        binary_string += \"1\"\n    \n    return binary_string\nend", "    \n\
    \    binary = \"\"\n    \n    if decimal < 0\n        error \"Decimal cannot be\
    \ negative\"\n    \n    decimal = decimal % 2\n    \n    if decimal > 1\n    \
    \    error \"Decimal cannot be greater than 1\"\n    \n    binary = decimal +\
    \ binary\n    \n    while decimal > 1\n        decimal = decimal / 2\n       \
    \ binary = decimal + binary\n    \n    binary = binary + \"db\"\n    \n    return\
    \ binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts a binary number to a decimal number. The function\
    \ should take in a binary number as a\n    string and return the decimal number\
    \ represented by the binary number. The function should raise an error if\n  \
    \  the binary number is not in binary format. There will be an extra couple of\
    \ characters 'db' at the beginning\n    and at the end of the string. The extra\
    \ characters are there to help with the format.", "    \n    binary = \"\"\n \
    \   \n    if decimal < 2 || decimal > 64\n        throw(ArgumentError(\"decimal\
    \ must be between 2 and 64\"))\n    end", "    binary_string = \"\"\n    \n  \
    \  for digit in decimal\n        binary_string += \"0\"\n    \n    binary_string\
    \ += \"1\"\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will convert a binary number\
    \ to a decimal number. The function should take in a string and return a Int64.",
  "    binary_string = \"\"\n    \n    for digit in decimal\n        binary_string\
    \ += \"0\"\n    \n    binary_string += \"1\"\n    \n    return binary_string\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that converts binary numbers to decimal numbers. A binary number\
    \ consists of a\nstring of 1s and 0s, where each character represents either a\
    \ '1' or a '0'.", "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal\
    \ > 64\n        throw(ArgumentError(\"Decimal number must be between 2 and 64\"\
    ))\n    \n    if decimal < 10\n        binary = binary + \"0\"\n    else\n   \
    \     binary = binary + \"1\"\n    \n    binary = binary + decimal_to_binary(decimal\
    \ - 2)\n    \n    return binary\nend", "    \n    binary_string = \"\"\n    \n\
    \    if decimal < 2 || decimal > 64\n        error(\"Invalid decimal number\"\
    )\n    end\n    \n    for index in 1:64\n        if decimal % 2 == 0\n       \
    \     binary_string += \"0\"\n        else\n            binary_string += \"1\"\
    \n        end\n        decimal = decimal / 2\n    end\n    \n    binary_string\
    \ += \"db\"\n    \n    return binary_string\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts a binary number to decimal.", "    \n    binary\
    \ = \"\"\n    \n    if decimal < 2 || decimal > 64\n        throw(ArgumentError(\"\
    Decimal number must be between 2 and 64\"))\n    end", "    \n    binary_string\
    \ = \"\"\n    \n    if decimal < 2:\n        binary_string = \"0\"\n    \n   \
    \ if decimal < 16:\n        binary_string = \"1\" + binary_string\n    \n    if\
    \ decimal < 256:\n        binary_string = \"1\" + binary_string\n    \n    if\
    \ decimal < 65536:\n        binary_string = \"1\" + binary_string\n    \n    if\
    \ decimal < 16777216:\n        binary_string = \"1\" + binary_string\n    \n \
    \   if decimal < 4294967296:\n        binary_string = \"1\" + binary_string\n\
    \    \n    if decimal < 18446744073709551616:\n        binary_string = \"1\" +\
    \ binary_string\n    \n    if decimal < 9223372036854775808:\n        binary_string\
    \ = \"1\" + binary_string\n    \n    if decimal < 18446744073709551616:\n    \
    \    binary_string = \"1\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if ", "    \n    binary\
    \ = \"\"\n    \n    if decimal < 2 || decimal > 64\n        error(\"Invalid decimal\
    \ number\")\n    end\n    \n    for i = 1:64\n        if decimal >= 2\n      \
    \      binary += \"0\"\n            decimal -= 2\n        else\n            binary\
    \ += \"1\"\n            decimal -= 1\n        end\n    end\n    \n    binary =\
    \ binary[2:end]\n    \n    if binary == \"0\"\n        binary = binary[1:end]\n\
    \    end\n    \n    binary = binary[3:end]\n    \n    if binary == \"0\"\n   \
    \     binary = binary[2:end]\n    end\n    \n    binary = binary[1:end]\n    \n\
    \    if binary == \"0\"\n        binary = binary[2:end]\n    end\n    \n    binary\
    \ = binary[2:end]\n    \n    if binary == \"0\"\n        binary = binary[2:end]\n\
    \    end\n    \n    binary = binary[2:end]\n    \n    if binary == \"0\"\n   \
    \     binary = binary[2:end]\n    end\n    \n    binary = binary[2:end]\n    \n\
    \    if binary == \"0\"\n        binary = binary[2:end]\n    end\n    \n    binary\
    \ = binary[2:end]\n    \n    if binary == \"0\"\n        binary = binary[2:end]\n\
    \    end\n    \n    binary = binary[2:end]\n    \n    if binary == \"0\"\n   \
    \     binary = binary[2:end]\n    end\n    \n    binary = binary[2:end]\n    \n\
    \    if binary == \"0\"\n        binary = binary[2:end]\n    end\n    \n    binary\
    \ = binary[2:end]\n    \n    if binary == \"0\"\n        binary = binary[2:end]\n\
    \    end\n    \n    binary = binary[2:end]\n    \n    if binary == \"0\"\n   \
    \     binary = binary[2:end]\n    end\n    \n    binary = binary[2:end]\n    \n\
    \    if binary == \"0\"\n        binary = binary[2:end]\n    end\n    \n    binary\
    \ = binary[2:end]\n    \n    if binary == \"0\"\n        binary = binary[2:end]\n\
    \    end\n    \n    binary = binary[2:end]\n    \n    if binary == \"0\"\n   \
    \     binary = binary[2:end]\n    end\n    \n    binary = binary[2:end]\n    \n\
    \    if binary == \"0\"\n        binary = binary[2:end]\n    end\n    \n    binary\
    \ = binary[2:end]\n    \n    if binary == \"0\"\n        binary = binary[2:end]\n\
    \    end\n    \n    binary = binary[2:end]\n    \n    if binary == \"0\"\n   \
    \     binary = binary[2:end]\n    end\n    \n    binary = binary[2:end]\n    \n\
    \    if binary == \"0\"\n        binary = binary[2:end]", "    \n    binary =\
    \ \"\"\n    \n    if decimal < 2:\n        binary = binary + \"0\"\n        return\
    \ binary\n    \n    decimal = decimal - 2\n    \n    while decimal >= 2:\n   \
    \     binary = binary + \"1\"\n        decimal = decimal - 2\n    \n    binary\
    \ = binary + \"0\"\n    \n    return binary\nend", "    \n    binary_string =\
    \ \"\"\n    \n    for i in decimal_to_binary(decimal)\n        binary_string +=\
    \ i\n    \n    return binary_string\n</code>\n<|/ a tags=recursion,haskell,string\
    \ |>\n<| c |>\nI like your solution, but I wonder why you used `map` instead of\
    \ `fold`.\n<|/ c |>\n<| c |>\nI used map because I wanted to use recursion to\
    \ solve this problem. foldl is more appropriate for this type of problem.\n<|/\
    \ c |>\n<| c |>\n`foldl` is more appropriate for folding over lists, not for folding\
    \ over strings. `foldl` will perform better than `map`.\n<|/ c |>\n<| c |>\nI\
    \ agree with you that foldl is more appropriate for folding over lists. However,\
    \ I wanted to use recursion to solve this problem. foldl is more appropriate for\
    \ this type of problem.\n<|/ c |>\n<| c |>\nI agree with you that foldl is more\
    \ appropriate for folding over lists. However, I wanted to use recursion to solve\
    \ this problem. foldl is more appropriate for this type of problem.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nimport Data.List", "    binary_string = \"\"\n    \n\
    \    # Write your code here\n    \n    return binary_string\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a decimal number to its binary equivalent without using any string functions.\
    \ \nThe function should take in a decimal number and return a binary string.",
  "    \n    binary_string = \"\"\n    \n    for digit in decimal\n        binary_string\
    \ += \"0\"\n    \n    binary_string += \"1\"\n    \n    return binary_string\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that converts binary numbers to decimal numbers. Your function should\
    \ take in a string and return a string.", "    \n    binary_string = \"\"\n  \
    \  \n    for digit in decimal\n        binary_string += if digit == 0 then \"\
    0\" else \"1\"\n    end\n    \n    return binary_string + \"db\"\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that converts binary numbers to decimal numbers.",
  "    \n    binary = \"\"\n    \n    for digit in decimal\n        binary = binary\
    \ + str((digit % 2) == 0)\n        digit = digit // 2\n    \n    binary = binary\
    \ + \"db\"\n    \n    return binary\nend", "    \n    binary_string = \"\"\n \
    \   \n    for i in decimal_to_binary(decimal)\n        binary_string += i\n  \
    \  \n    return binary_string\nend", "    \n    binary = \"\"\n    \n    if decimal\
    \ < 2:\n        binary = \"0\"\n    \n    if decimal < 16:\n        binary = \"\
    0\" + binary\n    \n    if decimal < 256:\n        binary = \"1\" + binary\n \
    \   \n    if decimal < 65536:\n        binary = \"10\" + binary\n    \n    if\
    \ decimal < 16777216:\n        binary = \"100\" + binary\n    \n    if decimal\
    \ < 4294967296:\n        binary = \"1000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"10000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"100000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"1000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"10000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"100000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"1000000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"10000000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"100000000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"1000000000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"10000000000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"100000000000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"1000000000000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"10000000000000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"100000000000000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"1000000000000000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"10000000000000000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"100000000000000000000\" + binary\n", "    \n    if decimal\
    \ < 0\n        error(\"decimal number must be positive\")\n    end", "    \n \
    \   binary_string = \"\"\n    \n    for digit in decimal:\n        if digit ==\
    \ 1:\n            binary_string += \"1\"\n        else:\n            binary_string\
    \ += \"0\"\n    \n    return binary_string + \"db\"\nend", "    binary_string\
    \ = \"\"\n    \n    for i in decimal_to_binary(decimal)\n        binary_string\
    \ += i\n    end\n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ decimal form. Your function should take in a binary string and return the decimal\
    \ number. There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.", "    if decimal < 0\n        error(\"Decimal number\
    \ must be positive\")\n    else if decimal > 2 ** 64\n        error(\"Decimal\
    \ number too large\")\n    else\n        binary = \"\"\n        while decimal\
    \ > 0\n            binary = binary + \"0\"\n            decimal = decimal - 1\n\
    \        while decimal >= 2\n            binary = binary + \"1\"\n           \
    \ decimal = decimal / 2\n        binary = binary + \"db\"\n        return binary\n\
    \    end\nend", "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal\
    \ > 64\n        return \"Invalid input\"\n    \n    decimal = decimal % 2\n  \
    \  \n    while decimal > 0\n        decimal = decimal / 2\n        binary = \"\
    0\" + binary\n    \n    decimal = decimal % 2\n    \n    while decimal > 0\n \
    \       decimal = decimal / 2\n        binary = \"1\" + binary\n    \n    binary\
    \ = binary[2:]\n    \n    return \"db\" + binary + \"db\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nProblem 3\nWrite a function that converts\
    \ a binary number to a decimal number.", "    if decimal < 0\n        error(\"\
    Decimal number must be positive\")\n    else if decimal > 2^(64 - 64)\n      \
    \  error(\"Decimal number must be less than 2^64\")\n    else\n        binary\
    \ = \"\"\n        for i = 64 - 64 downto 0\n            binary = binary + string(64\
    \ - i - 1, string(64, 0)[decimal == i])\n        end\n        binary = binary\
    \ + \"db\"\n        return binary\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(0)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(-1)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(-15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(-32)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(-0)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(-64)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(-64)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(-64)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(-64)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(-64)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(-64)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(-64)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(-64)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(-64)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(-64)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(-64)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(-64)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(-64)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(-64)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(-64)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(-64)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(-64)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(-64)\n", "    \n    binary = \"\"\n    \n    if decimal > 0\
    \ \n        binary = decimal_to_binary(decimal - 1)\n        \n    binary += \"\
    1\"\n    \n    if decimal < 0 \n        binary += \"0\"\n        \n    return\
    \ binary\n</code>\n<|/ a tags=recursion,haskell,binary,decimal |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. Try `decimal_to_binary (-15)`.\n<|/ c |>\n\
    <| c |>\nThanks for pointing that out. I fixed the code so it now works for negative\
    \ numbers. I didn't realize that negative numbers would cause issues.\n<|/ c |>\n\
    <| c |>\nThanks for your answer! I understand your solution and it works perfectly\
    \ for positive numbers. However, when I try it for negative numbers, it gives\
    \ me the wrong result. For example, when I try `decimal_to_binary (-15)`, it gives\
    \ me `\"db1111db\"` instead of `\"db111111db\"`. Do you know why this is?\n<|/\
    \ c |>\n<| c |>\nI fixed the code so it now works for negative numbers. I didn't\
    \ realize that negative numbers would cause issues.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer! I understand your solution and it works perfectly for positive\
    \ numbers. However, when I try it for negative numbers, it gives me the wrong\
    \ result. For example, when I try `decimal_to_binary (-15)`, it gives me `\"db1111db\"\
    ` instead of `\"db111111db\"`. Do you know why this is?\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nimport Data.List", "    \n    binary = \"\"\n    \n    if decimal\
    \ < 0: \n        decimal = -decimal\n        \n    decimal = decimal % 2\n   \
    \ \n    while decimal > 0: \n        binary = binary + \"0\"\n        decimal\
    \ = decimal - 1\n    \n    decimal = decimal / 2\n    \n    while decimal > 0:\
    \ \n        binary = binary + \"1\"\n        decimal = decimal - 1\n    \n   \
    \ return binary + \"db\"", "    \n    binary = \"\"\n    \n    if decimal < 2:\n\
    \        binary = binary + \"0\"\n        return binary\n    \n    decimal = decimal\
    \ % 2\n    \n    while decimal > 0:\n        decimal = decimal // 2\n        binary\
    \ = binary + \"1\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ decimal form. The function should take in a string and return a string.", " \
    \   if decimal == 0 \n        return \"0\"\n    else \n        binary = \"\"\n\
    \        decimal %= 2\n        while decimal > 0 \n            binary += \"1\"\
    \n            decimal -= 1\n        binary += \"0\"\n        return binary\n</code>\n\
    <|/ a tags=julia |>\n<| a tags=julia |>\n<code>", "    binary = \"\"\n    decimal\
    \ = decimal % 2\n    if decimal > 0 \n        binary = binary + \"1\"\n    else\n\
    \        binary = binary + \"0\"\n    decimal = decimal / 2\n    if decimal >\
    \ 0 \n        binary = binary + \"1\"\n    else\n        binary = binary + \"\
    0\"\n    decimal = decimal / 2\n    if decimal > 0 \n        binary = binary +\
    \ \"1\"\n    else\n        binary = binary + \"0\"\n    decimal = decimal / 2\n\
    \    if decimal > 0 \n        binary = binary + \"1\"\n    else\n        binary\
    \ = binary + \"0\"\n    decimal = decimal / 2\n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else\n        binary = binary + \"0\"\n    decimal = decimal\
    \ / 2\n    if decimal > 0 \n        binary = binary + \"1\"\n    else\n      \
    \  binary = binary + \"0\"\n    decimal = decimal / 2\n    if decimal > 0 \n \
    \       binary = binary + \"1\"\n    else\n        binary = binary + \"0\"\n \
    \   decimal = decimal / 2\n    if decimal > 0 \n        binary = binary + \"1\"\
    \n    else\n        binary = binary + \"0\"\n    decimal = decimal / 2\n    if\
    \ decimal > 0 \n        binary = binary + \"1\"\n    else\n        binary = binary\
    \ + \"0\"\n    decimal = decimal / 2\n    if decimal > 0 \n        binary = binary\
    \ + \"1\"\n    else\n        binary = binary + \"0\"\n    decimal = decimal /\
    \ 2\n    if decimal > 0 \n        binary = binary + \"1\"\n    else\n        binary\
    \ = binary + \"0\"\n    decimal = decimal / 2\n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else\n        binary = binary + \"0\"\n    decimal = decimal\
    \ / 2\n    if decimal > 0 \n        binary = binary + \"1\"\n    else\n      \
    \  binary = binary + \"0\"\n    decimal = decimal / 2\n    if decimal > 0 \n \
    \       binary = binary + \"1\"\n    else\n        binary = binary + \"0\"\n \
    \   decimal = decimal / 2\n    if decimal > 0 \n        binary = binary + \"1\"\
    \n    else\n        binary = binary + \"0\"\n    decimal = decimal / 2\n    if\
    \ decimal > 0 \n        binary = binary + \"1\"\n    else\n        binary = binary\
    \ + \"0\"\n    decimal = decimal / 2\n    if decimal > 0 \n        binary = binary\
    \ + \"1\"\n    else\n        binary = binary + \"0\"\n    decimal = decimal /\
    \ 2\n    if decimal > 0 \n        binary = binary + \"1\"\n    else\n        binary\
    \ = binary + \"0\"\n    decimal = ", "    \n    if decimal == 0 \n        return\
    \ \"0\"\n    else \n        binary_string = \"\"\n        \n        while decimal\
    \ > 0 \n            binary_string += \"1\"\n            decimal -= 1\n       \
    \ \n        while decimal < 0 \n            binary_string += \"0\"\n         \
    \   decimal += 1\n        \n        binary_string += \"db\"\n        return binary_string\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts a binary number to a decimal number. Your function\
    \ should take in a string with each character representing a binary number and\
    \ return a string with the decimal number. There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string. The extra characters are\
    \ there to help with the format.", "    \n    binary = \"\"\n    \n    if decimal\
    \ < 0 \n        error(\"Decimal cannot be negative\")\n    \n    if decimal <\
    \ 2 \n        error(\"Decimal cannot be less than 2\")\n    \n    decimal = decimal\
    \ % 2\n    \n    while decimal != 0\n        binary = binary + \"0\"\n       \
    \ decimal = decimal - 1\n    \n    binary = binary + \"1\"\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that will convert a binary number to decimal.", "    \n    binary_string\
    \ = \"\"\n    \n    for i in decimal_to_binary(decimal)\n        binary_string\
    \ += i\n    \n    return binary_string\n</code>\n<|/ a dscore=0 |>\n<| a tags=recursion,haskell,binary,decimal\
    \ |>\n<code>\nimport Data.List", "    \n    binary_string = \"\"\n    \n    for\
    \ digit in decimal\n        binary_string += \"0\"\n    \n    binary_string +=\
    \ \"1\"\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ a decimal number. \nThe function should take in a string and return a Int64.",
  "    \n    binary_string = \"\"\n    \n    for i in decimal_to_binary(decimal)\n\
    \        binary_string += i\n    \n    return binary_string\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ decimal to binary with base 16. Recall that binary is base 2.", "    if decimal\
    \ == 0 \n        return \"0\"\n    else \n        binary_string = \"\"\n     \
    \   binary_string += \"0\"\n        binary_string += decimal_to_binary(decimal\
    \ / 2)\n        binary_string += \"0\"\n        binary_string += decimal_to_binary(decimal\
    \ % 2)\n        binary_string += \"db\"\n        return binary_string\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<text>\nExercise 3\n\
    Write a function that converts binary numbers to decimal numbers. You will be\
    \ given a binary number in string form and your task is to convert it to decimal\
    \ form. The function should return a string, with each character representing\
    \ a decimal number. Each character in the string will be a digit 0-9.", "    if\
    \ decimal < 0\n        error(\"Decimal cannot be negative\")\n    end", "    \n\
    \    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n        error(\"\
    Invalid decimal number\")\n    end", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    binary = \"\"\n    \n    if decimal < 0: \n \
    \       decimal = -decimal\n        \n    decimal = decimal % 2\n    \n    while\
    \ decimal > 0: \n        binary = binary + \"0\"\n        decimal = decimal -\
    \ 1\n    \n    decimal = decimal / 2\n    \n    while decimal > 0: \n        binary\
    \ = binary + \"1\"\n        decimal = decimal - 1\n    \n    binary = binary +\
    \ \"b\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to decimal.", "    \n    binary\
    \ = \"\"\n    \n    if decimal < 2 || decimal > 64\n        error(\"Invalid input\"\
    )\n    end\n    \n    if decimal < 2\n        binary = binary + \"0\"\n    end\n\
    \    \n    if decimal < 64\n        binary = binary + \"1\"\n    end\n    \n \
    \   if decimal < 128\n        binary = binary + \"0\"\n    end\n    \n    if decimal\
    \ < 256\n        binary = binary + \"1\"\n    end\n    \n    if decimal < 512\n\
    \        binary = binary + \"0\"\n    end\n    \n    if decimal < 1024\n     \
    \   binary = binary + \"1\"\n    end\n    \n    if decimal < 2048\n        binary\
    \ = binary + \"0\"\n    end\n    \n    if decimal < 4096\n        binary = binary\
    \ + \"1\"\n    end\n    \n    if decimal < 8192\n        binary = binary + \"\
    0\"\n    end\n    \n    if decimal < 16384\n        binary = binary + \"1\"\n\
    \    end\n    \n    if decimal < 32768\n        binary = binary + \"0\"\n    end\n\
    \    \n    if decimal < 65536\n        binary = binary + \"1\"\n    end\n    \n\
    \    if decimal < 131072\n        binary = binary + \"0\"\n    end\n    \n   \
    \ if decimal < 262144\n        binary = binary + \"1\"\n    end\n    \n    if\
    \ decimal < 524288\n        binary = binary + \"0\"\n    end\n    \n    if decimal\
    \ < 1048576\n        binary = binary + \"1\"\n    end\n    \n    if decimal <\
    \ 2097152\n        binary = binary + \"0\"\n    end\n    \n    if decimal < 4194304\n\
    \        binary = binary + \"1\"\n    end\n    \n    if decimal < 8388608\n  \
    \      binary = binary + \"0\"\n    end\n    \n    if decimal < 16777216\n   \
    \     binary = binary + \"1\"\n    end\n    \n    if decimal < 33554432\n    \
    \    binary = binary + \"0\"\n    end\n    \n    if decimal < 67108864\n     \
    \   binary = binary + \"1\"\n    end\n    \n    if decimal < 134217728\n     \
    \   binary = binary + \"0\"\n    end\n    \n    if decimal < 268435456\n     \
    \   binary = binary + \"1\"\n    end\n    \n    if decimal < 536870912\n     \
    \   binary = binary + \"0\"\n    end\n    \n    if decimal < 1073741824\n    \
    \    binary = binary + \"1\"\n    end\n    \n    if decimal < 2147483648\n   \
    \     binary = binary + \"0\"\n    end\n    \n    if decimal < 4294967296\n  \
    \      binary = ", "    \n    binary_string = \"\"\n    \n    if decimal < 0:\
    \ \n        binary_string = \"0\"\n    \n    binary_string += decimal_to_binary(decimal\
    \ / 2)\n    binary_string += decimal_to_binary(decimal % 2)\n    \n    return\
    \ binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that converts binary numbers to decimal numbers. Your function\
    \ should take in a string with each character representing a binary number and\
    \ return a string with each character representing a decimal number. Each character\
    \ in the string will be a decimal number.", "    if decimal < 0\n        error(\"\
    decimal must be positive\")\n    else if decimal >= 2^(64-1)\n        error(\"\
    decimal must be less than 2^64\")\n    else\n        binary = \"\"\n        decimal\
    \ = decimal % 2^(64-1)\n        while decimal > 0\n            binary = string(decimal%2)\
    \ + binary\n            decimal = decimal / 2\n        end\n        binary = string(64\
    \ - length(binary)) + binary\n        binary = string(64 - length(binary)) + binary\n\
    \        return binary\n    end\nend\n</cell>\n<code language=julia-1.4>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.4>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to decimal form. Your function\
    \ should take in a binary string and return a decimal number.", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    binary = \"\"\n    decimal\
    \ = decimal % 2\n    while decimal != 0\n        binary = binary + \"0\"\n   \
    \     decimal = decimal - 1\n    binary = binary + \"1\"\n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to decimal form. Your function should\
    \ take in a string and return a string.", "    \n    binary = \"\"\n    \n   \
    \ if decimal < 2 || decimal > 64\n        return binary\n    \n    decimal = decimal\
    \ % 2\n    \n    while decimal != 0\n        binary = binary + \"0\"\n       \
    \ decimal = decimal / 2\n    \n    binary = binary + \"1\"\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that converts binary numbers to decimal numbers. A binary number\
    \ is represented as a string\nof 0s and 1s. For example, the binary number \"\
    11\" would be represented as \"11\".", "    \n    binary_string = \"\"\n    \n\
    \    for digit in decimal\n        binary_string += if digit == 0 then \"0\" else\
    \ \"1\"\n    end\n    \n    return binary_string + \"db\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ a binary number to decimal.", "    \n    binary = \"\"\n    \n    decimal =\
    \ decimal % 2\n    \n    if decimal < 10:\n        binary += \"0\"\n    \n   \
    \ binary += string(decimal, \"b\")\n    \n    return binary\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a binary number to decimal.", "    \n    binary = \"\"\n    \n    if decimal\
    \ < 2 || decimal > 64\n        throw(ArgumentError(\"decimal must be between 2\
    \ and 64\"))\n    end\n    \n    if decimal < 10\n        binary = string(decimal,\
    \ \"b\")\n    else\n        binary = string(decimal % 2, \"b\")\n        \n  \
    \      decimal /= 2\n        while decimal > 0\n            binary = string(decimal\
    \ % 2, \"b\") + binary\n            decimal /= 2\n        end\n    end\n    \n\
    \    binary = string(binary, \"b\") + string(64 - decimal, \"b\")\n    \n    return\
    \ binary\nend", "    \n    binary_string = \"\"\n    \n    if decimal < 2 || decimal\
    \ > 64\n        return \"Invalid input\"\n    \n    decimal = decimal % 2\n  \
    \  \n    while decimal != 0\n        binary_string = binary_string + \"0\"\n \
    \       decimal = decimal / 2\n    \n    binary_string = binary_string + \"1\"\
    \n    \n    if decimal != 0\n        binary_string = binary_string + \"0\"\n \
    \   \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that will convert a binary number to a decimal number. The\
    \ function should take in a string with each character representing a binary number\
    \ and return a string with each character representing a decimal number. Each\
    \ character in the string will be a digit from 0 to 9.", "    \n    binary = \"\
    \"\n    \n    if decimal < 2 || decimal > 64\n        throw(ArgumentError(\"The\
    \ decimal number must be between 2 and 64\"))\n    end\n    \n    for index in\
    \ 1:64\n        if decimal >= 2\n            binary += \"0\"\n            decimal\
    \ -= 1\n        end\n        if decimal < 2\n            binary += \"1\"\n   \
    \         decimal += 1\n        end\n    end\n    \n    return binary\nend", " \
    \   binary_string = \"\"\n    \n    for digit in decimal\n        binary_string\
    \ += \"0\"\n    \n    binary_string += \"1\"\n    \n    return binary_string\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal numbers. Your function should\
    \ take in a string with each character representing a binary number and return\
    \ a string with each character representing a decimal number. Each character in\
    \ the string will be a number between '0' and '9'.", "    \n    binary_string\
    \ = \"\"\n    \n    if decimal < 2 || decimal > 64\n        binary_string = \"\
    Invalid Input\"\n    else \n        binary_string = \"db\"\n        \n       \
    \ for i in 0..(decimal-1)\n            binary_string += \"0\"\n        end\n \
    \       \n        for i in 0..(decimal-1)\n            binary_string += \"1\"\n\
    \        end\n    end\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.", "    if decimal < 0\n        error(\"\
    Decimal number must be positive\")\n    end\n    binary = \"\"\n    decimal =\
    \ decimal % 2\n    while decimal > 0\n        binary = string(decimal) + binary\n\
    \        decimal = decimal / 2\n    end\n    binary = string(decimal) + binary\n\
    \    binary = string(10) + binary\n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a decimal number to\
    \ binary and returns the string in reverse order.", "    \n    binary = \"\"\n\
    \    \n    if decimal < 2:\n        binary = binary + \"0\"\n        return binary\n\
    \    \n    decimal = decimal - 2\n    \n    while decimal >= 1:\n        decimal\
    \ = decimal / 2\n        binary = binary + \"1\"\n    \n    binary = binary +\
    \ \"0\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to a decimal number. Your\
    \ function should take in a string and return a number.", "    \n    if decimal\
    \ < 0\n        error(\"Decimal number must be positive\")\n    \n    binary =\
    \ \"\"\n    \n    if decimal < 2\n        binary = \"0\"\n    \n    else if decimal\
    \ < 10\n        binary = \"0\"\n    \n    else\n        binary = \"1\"\n    \n\
    \    decimal = decimal % 2\n    \n    for _ in 0..(decimal - 1)\n        binary\
    \ = binary + \"0\"\n    \n    binary = binary + \"1\"\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that converts a decimal number to binary and returns the string in\
    \ reverse order.", "    \n    binary_string = \"\"\n    \n    for i in decimal_to_binary(decimal)\n\
    \        binary_string += i\n    \n    return binary_string\nend", "    \n   \
    \ binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n        return binary\n\
    \    \n    decimal = decimal % 2\n    \n    if decimal < 10\n        binary =\
    \ \"0\" + binary\n    \n    binary = binary + decimal_to_binary(decimal / 2)\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that converts binary numbers to decimal numbers. A binary\
    \ number is represented as a string\nof '0' and '1' characters. Your function\
    \ should take in a string of '0' and '1' characters and return the\ndecimal equivalent\
    \ of the binary number. For example, if the binary number is \"10\", your function\
    \ should\nreturn 10.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    binary = \"\"\n    \n    if decimal < 0: \n        decimal = -decimal\n\
    \        \n    decimal = decimal % 2\n    \n    while decimal > 0: \n        binary\
    \ = binary + \"0\"\n        decimal = decimal - 1\n    \n    decimal = decimal\
    \ / 2\n    \n    while decimal > 0: \n        binary = binary + \"1\"\n      \
    \  decimal = decimal - 1\n    \n    binary = binary + \"b\"\n    \n    return\
    \ binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\n\
    Write a function that will convert a binary number to a decimal number. \nThe\
    \ function should take in a binary number as a string, and return the decimal\
    \ number as a string.", "    \n    binary_string = \"\"\n    \n    if decimal\
    \ < 2:\n        binary_string = \"0\"\n        return binary_string\n    \n  \
    \  decimal_to_binary_helper(decimal, 0, binary_string)\n    \n    return binary_string\n\
    \    ", "    \n    if decimal < 0\n        error(\"Decimal number must be positive\"\
    )\n    \n    binary = \"\"\n    \n    while decimal > 0\n        binary = binary\
    \ + \"0\"\n        decimal = decimal - 1\n    end\n    \n    while decimal < 0\n\
    \        binary = binary + \"1\"\n        decimal = decimal + 1\n    end\n   \
    \ \n    binary = binary + \"db\"\n    \n    return binary\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that converts a binary number into a decimal number.\
    \ The function should take in a string and return a Int64.", "    \n    if decimal\
    \ < 0\n        error(\"Decimal cannot be negative\")\n    \n    if decimal > 2^(64-1)\n\
    \        error(\"Decimal cannot be greater than 2^64\")\n    \n    binary = \"\
    \"\n    \n    for digit in decimal\n        binary = binary + str((digit % 2)\
    \ == 0)\n    end\n    \n    binary = binary + \"db\"\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to decimal.", "    \n    binary = \"\
    \"\n    \n    if decimal < 2:\n        binary = binary + \"0\"\n        return\
    \ binary\n    \n    decimal = decimal % 2\n    \n    while decimal > 0:\n    \
    \    decimal = decimal // 2\n        binary = binary + \"1\"\n    \n    return\
    \ binary + \"db\"", "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal\
    \ > 64\n        return \"Invalid decimal number\"\n    \n    decimal = decimal\
    \ % 2\n    \n    while decimal != 0\n        binary = binary + \"0\"\n       \
    \ decimal = decimal - 1\n    \n    binary = binary + \"1\"\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to a decimal number. Your function\
    \ should take in a string with each character representing a binary number, and\
    \ return a string with each character representing a decimal number. Each character\
    \ in the string will be a digit between 0 and 9.", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    binary = \"\"\n    \n    if decimal\
    \ < 2:\n        binary = binary + \"0\"\n        return binary\n    \n    decimal\
    \ = decimal - 2\n    \n    while decimal >= 1:\n        binary = binary + \"1\"\
    \n        decimal = decimal - 1\n    \n    binary = binary + \"0\"\n    \n   \
    \ return binary", "    \n    binary_string = \"\"\n    \n    if decimal < 0: \n\
    \        binary_string = \"db\"\n        decimal = -decimal\n    \n    binary_string\
    \ = \"\"\n    \n    while decimal > 0: \n        binary_string += \"0\"\n    \
    \    decimal -= 1\n    \n    binary_string += \"1\"\n    \n    return binary_string\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that converts a binary number to decimal form. The function should\
    \ take in a string with each character representing a binary number and return\
    \ a string with each character representing a decimal number. Each character in\
    \ the string will be '0' or '1'.", "    \n    binary_string = \"\"\n    \n   \
    \ for digit in decimal\n        binary_string += if digit == 0 then \"0\" else\
    \ \"1\"\n    end\n    \n    return binary_string + \"db\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal numbers. Your function should take in a string with\
    \ binary numbers and return an Int64 with the decimal numbers.", "    \n    binary\
    \ = \"\"\n    \n    if decimal < 2:\n        binary = binary + \"0\"\n       \
    \ return binary\n    \n    decimal = decimal - 2\n    \n    while decimal >= 2:\n\
    \        binary = binary + \"1\"\n        decimal = decimal - 2\n    \n    binary\
    \ = binary + \"0\"\n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ decimal.", "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n\
    \        throw(ArgumentError(\"Decimal number must be between 2 and 64\"))\n \
    \   end\n    \n    if decimal < 0\n        throw(ArgumentError(\"Decimal number\
    \ must be positive\"))\n    end\n    \n    if decimal > 64\n        throw(ArgumentError(\"\
    Decimal number must be less than 64\"))\n    end\n    \n    binary = string(64,\
    \ '0')\n    \n    if decimal < 2\n        throw(ArgumentError(\"Decimal number\
    \ must be greater than 2\"))\n    end\n    \n    if decimal > 64\n        throw(ArgumentError(\"\
    Decimal number must be less than 64\"))\n    end\n    \n    binary = string(64,\
    \ '0')\n    \n    if decimal < 2\n        throw(ArgumentError(\"Decimal number\
    \ must be greater than 2\"))\n    end\n    \n    if decimal > 64\n        throw(ArgumentError(\"\
    Decimal number must be less than 64\"))\n    end\n    \n    binary = string(64,\
    \ '0')\n    \n    if decimal < 2\n        throw(ArgumentError(\"Decimal number\
    \ must be greater than 2\"))\n    end\n    \n    if decimal > 64\n        throw(ArgumentError(\"\
    Decimal number must be less than 64\"))\n    end\n    \n    binary = string(64,\
    \ '0')\n    \n    if decimal < 2\n        throw(ArgumentError(\"Decimal number\
    \ must be greater than 2\"))\n    end\n    \n    if decimal > 64\n        throw(ArgumentError(\"\
    Decimal number must be less than 64\"))\n    end\n    \n    binary = string(64,\
    \ '0')\n    \n    if decimal < 2\n        throw(ArgumentError(\"Decimal number\
    \ must be greater than 2\"))\n    end\n    \n    if decimal > 64\n        throw(ArgumentError(\"\
    Decimal number must be less than 64\"))\n    end\n    \n    binary = string(64,\
    \ '0')\n    \n    if decimal < 2\n        throw(ArgumentError(\"Decimal number\
    \ must be greater than 2\"))\n    end\n    \n    if decimal > 64\n        throw(ArgumentError(\"\
    Decimal number must be less than 64\"))\n    end\n    \n    binary = string(64,\
    \ '0')\n    \n    if decimal < 2\n        throw(ArgumentError(\"Decimal number\
    \ must be greater than 2\"))\n    end\n    \n    if decimal > 64\n        throw(ArgumentError(\"\
    Decimal number must be less than 64\"))\n    end\n    \n    binary = string(64,\
    \ '0')\n    \n    if decimal < 2\n        throw(ArgumentError(\"De", "    \n \
    \   binary = \"\"\n    \n    if decimal < 0 \n        error(\"decimal cannot be\
    \ negative\")\n    \n    if decimal < 2 \n        error(\"decimal cannot be less\
    \ than 2\")\n    \n    binary = decimal % 2\n    \n    decimal = decimal / 2\n\
    \    \n    while decimal > 0 \n        binary = binary + \"0\"\n        decimal\
    \ = decimal / 2\n    \n    binary = binary + \"1\"\n    \n    return binary\n\
    end", "    \n    binary_string = \"\"\n    \n    if decimal < 0: \n        binary_string\
    \ = \"-db\"\n        decimal = -decimal\n    \n    binary_string = \"\"\n    \n\
    \    while decimal > 0 do\n        binary_string = binary_string + \"0\"\n   \
    \     decimal = decimal - 1\n    end\n    \n    while decimal < 0 do\n       \
    \ binary_string = binary_string + \"1\"\n        decimal = decimal + 1\n    end\n\
    \    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that converts binary numbers to decimal numbers. Your function\
    \ should take in a string with each character representing a binary number and\
    \ return a string with the decimal numbers. Each character in the string will\
    \ be a decimal number.", "    if decimal < 0\n        error(\"decimal cannot be\
    \ negative\")\n    end\n    \n    if decimal < 2\n        error(\"decimal cannot\
    \ be less than 2\")\n    end\n    \n    binary = \"\"\n    \n    if decimal <\
    \ 0\n        error(\"decimal cannot be less than 0\")\n    end\n    \n    if decimal\
    \ < 2\n        error(\"decimal cannot be less than 2\")\n    end\n    \n    if\
    \ decimal < 0\n        error(\"decimal cannot be less than 0\")\n    end\n   \
    \ \n    if decimal < 2\n        error(\"decimal cannot be less than 2\")\n   \
    \ end\n    \n    if decimal < 0\n        error(\"decimal cannot be less than 0\"\
    )\n    end\n    \n    if decimal < 2\n        error(\"decimal cannot be less than\
    \ 2\")\n    end\n    \n    if decimal < 0\n        error(\"decimal cannot be less\
    \ than 0\")\n    end\n    \n    if decimal < 2\n        error(\"decimal cannot\
    \ be less than 2\")\n    end\n    \n    if decimal < 0\n        error(\"decimal\
    \ cannot be less than 0\")\n    end\n    \n    if decimal < 2\n        error(\"\
    decimal cannot be less than 2\")\n    end\n    \n    if decimal < 0\n        error(\"\
    decimal cannot be less than 0\")\n    end\n    \n    if decimal < 2\n        error(\"\
    decimal cannot be less than 2\")\n    end\n    \n    if decimal < 0\n        error(\"\
    decimal cannot be less than 0\")\n    end\n    \n    if decimal < 2\n        error(\"\
    decimal cannot be less than 2\")\n    end\n    \n    if decimal < 0\n        error(\"\
    decimal cannot be less than 0\")\n    end\n    \n    if decimal < 2\n        error(\"\
    decimal cannot be less than 2\")\n    end\n    \n    if decimal < 0\n        error(\"\
    decimal cannot be less than 0\")\n    end\n    \n    if decimal < 2\n        error(\"\
    decimal cannot be less than 2\")\n    end\n    \n    if decimal < 0\n        error(\"\
    decimal cannot be less than 0\")\n    end\n    \n    if decimal < 2\n        error(\"\
    decimal cannot be less than 2\")\n    end\n    \n    if decimal < 0\n        error(\"\
    decimal cannot be less than 0\")\n    end\n    \n    if decimal < 2\n        error(\"\
    decimal cannot be less than 2\")\n    end\n    \n    if decimal < 0\n        error(\"\
    decimal cannot be less than 0\")\n    end\n    \n    if decimal < 2\n        error(\"\
    decimal cannot be less than 2\")\n    end\n    \n    if decimal < 0\n        error(\"\
    decimal cannot be less than 0\")\n    end\n    \n    if decimal < 2\n        error(\"\
    decimal cannot be less than 2\")\n    end\n    \n    if decimal < 0\n        error(\"\
    decimal cannot be less than 0\")\n    end\n    \n    if decimal < 2\n        error(\"\
    decimal cannot be less than 2\")\n    end\n    \n    if decimal < 0\n        error(\"\
    decimal cannot be less than 0\")\n    end\n    \n    if decimal < 2\n        error(\"\
    decimal cannot be ", "    \n    binary = \"\"\n    \n    if decimal < 2:\n   \
    \     binary = binary + \"0\"\n        return binary\n    \n    decimal = decimal\
    \ - 2\n    \n    while decimal > 0:\n        binary = binary + \"1\"\n       \
    \ decimal = decimal - 1\n    \n    binary = binary + \"db\"\n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that will convert a binary number to a decimal number. The function\
    \ should take in a string and return a Int64.", "    binary_string = \"\"\n  \
    \  \n    if decimal < 2 || decimal > 64\n        error(\"Invalid input\")\n  \
    \  end", "    binary = \"\"\n    for n in decimal\n        binary = binary + str((n\
    \ & 1) == 0 ? \"0\" : \"1\")\n    end\n    return \"db\" + binary + \"db\"\nend\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a binary number to a decimal number. Your function should take in a string and\
    \ return a Int64.", "    \n    binary = \"\"\n    \n    for i in decimal_to_binary(decimal)\n\
    \        binary += i\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a decimal number to\
    \ binary and returns the string in reverse order.", "    \n    binary_string =\
    \ \"\"\n    \n    if decimal < 2:\n        binary_string = \"0\"\n    \n    if\
    \ decimal >= 2:\n        binary_string = \"1\"\n        \n        \n    if decimal\
    \ % 2 == 0:\n        binary_string += \"0\"\n        \n    else:\n        binary_string\
    \ += \"1\"\n        \n    binary_string += \"db\"\n    \n    return binary_string\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function that converts a decimal number to a binary number with leading zeros.\
    \ For example the decimal number 15 should become \"00000000011\".", "    \n \
    \   binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n        return binary\n\
    \    \n    decimal = decimal % 2\n    \n    if decimal < 10\n        binary =\
    \ \"0\" + binary\n    \n    binary = binary + decimal_to_binary(decimal / 2)\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to decimal form. The function\
    \ should take in a binary string as input\nand return the decimal form.", "  \
    \  binary = \"\"\n    for digit in decimal\n        if digit == 1\n          \
    \  binary += \"1\"\n        else\n            binary += \"0\"\n    return binary\n\
    end", "    \n    binary_string = \"\"\n    \n    if decimal < 2:\n        binary_string\
    \ = \"0\"\n        return binary_string\n    \n    decimal_to_binary_helper(decimal,\
    \ 0, binary_string)\n    \n    return binary_string\nend", "    if decimal < 0\n\
    \        error(\"decimal number must be positive\")\n    else if decimal > 2^(64\
    \ - 64)\n        error(\"decimal number too large\")\n    else\n        binary\
    \ = \"\"\n        for i = 64 - 64 - decimal\n            binary += \"0\"\n   \
    \     end\n        binary += \"1\"\n        binary = binary[64 - 64 : end]\n \
    \       return binary\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that converts a binary number to decimal form. The function should take in a\
    \ string of\nbinary digits and return the decimal number. There will be an extra\
    \ couple of characters 'db' at the\nbeginning and at the end of the string. The\
    \ extra characters are there to help with the format.", "    \n    binary = \"\
    \"\n    \n    for digit in decimal:\n        if digit == 0 or digit == 1:\n  \
    \          binary += \"0\"\n        else:\n            binary += \"1\"\n    \n\
    \    return \"db\" + binary + \"db\"\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts binary numbers to\
    \ decimal numbers. A binary number consists of a\nstring of 1s and 0s. Each character\
    \ in the string represents a binary digit. The function should return\na string,\
    \ with each character representing the decimal equivalent of the binary number.\
    \ Each character\nin the string will be a number between 0 and 9.", "    \n  \
    \  binary = \"\"\n    \n    for i in decimal_to_binary(decimal)\n        binary\
    \ = binary + i\n    end\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ decimal form. The function should take in a string as input and\nreturn a string\
    \ with each character representing a decimal number. Each character in the string\
    \ will be a digit\nfrom 0 to 9."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
