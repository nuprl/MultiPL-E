name: HumanEval_55_fib
language: jl
prompt: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n\
  \    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) ==\
  \ 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
  \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
completions: ["    if n < 2 \n        then return n\n    else \n        return fib(n-2)\
    \ + fib(n-1)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise\nWrite a recursive function named fib_r(n::Int64) that returns\
    \ the nth Fibonacci number.", "    if n == 0\n        0\n    else if n == 1\n\
    \        1\n    else\n        fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't answer the question of how to write this in Julia.\
    \ Also, the question is about Fibonacci numbers, not Fibonacci sequences.\n<|/\
    \ c |>\n<| c |>\nI agree, this is an answer to the question of how to write this\
    \ in Julia. Fibonacci numbers are a special case of Fibonacci sequences.\n<|/\
    \ c |>\n<| c |>\nI agree with you, but I thought it would be useful to show how\
    \ to write this in Julia. Also, Julia has `fib` function which does exactly this.\n\
    <|/ c |>\n<| c |>\nI agree with you, but I thought it would be useful to show\
    \ how to write this in Julia. Also, Julia has `fib` function which does exactly\
    \ this.\n<|/ c |>\n<| c |>\nI agree with you, but I thought it would be useful\
    \ to show how to write this in Julia. Also, Julia has `fib` function which does\
    \ exactly this.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    if n < 2 \n       \
    \ then return n\n    else \n        return fib(n-2) + fib(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a recursive\
    \ function fib_rec(n::Int64)::Int64 that returns the n-th Fibonacci number.",
  "    if n == 0 \n        0\n    else if n == 1 \n        1\n    else \n        fib(n\
    \ - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n@code_native fib(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.", "    if n < 2 \n        then return\
    \ n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a function that computes the n-th\
    \ Fibonacci number using memoization.", "    if n == 0 || n == 1 \n        then\
    \ return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a dscore=2 |>\n<code>", "    if n < 2\n        1\n    else\n\
    \        fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<|\
    \ a tags=julia,fibonacci |>\n<code>", "    if n == 0\n        0\n    elseif n\
    \ == 1\n        1\n    else\n        fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/\
    \ a |>\n<| c |>\nThis code does not work. `fib(1)` returns `1`, not `0`.\n<|/\
    \ c |>\n<| c |>\nThe code works, just tested it. The problem was the missing `else`\
    \ clause.\n<|/ c |>\n<| c |>\nThe code works, just tested it. The problem was\
    \ the missing `else` clause.\n<|/ c |>\n<| c |>\nThe code works, just tested it.\
    \ The problem was the missing `else` clause.\n<|/ c |>\n<| c |>\nThe code works,\
    \ just tested it. The problem was the missing `else` clause.\n<|/ c |>\n<| a dscore=5\
    \ |>\nThe Fibonacci sequence is defined as:\n<code>\n0, 1, 1, 2, 3, 5, 8, 13,\
    \ 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597\n</code>\nThe first two numbers\
    \ are 0 and 1, and each subsequent number is the sum of the two preceding ones:\n\
    <code>\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597\n\
    </code>\nThe first two numbers are 0 and 1, and each subsequent number is the\
    \ sum of the two preceding ones:\n<code>\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55,\
    \ 89, 144, 233, 377, 610, 987, 1597\n</code>\nThe first two numbers are 0 and\
    \ 1, and each subsequent number is the sum of the two preceding ones:\n<code>\n\
    0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597\n</code>\n\
    The first two numbers are 0 and 1, and each subsequent number is the sum of the\
    \ two preceding ones:\n<code>\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233,\
    \ 377, 610, 987, 1597\n</code>\nThe first two numbers are 0 and 1, and each subsequent\
    \ number is the sum of the two preceding ones:\n<code>\n0, 1, 1, 2, 3, 5, 8, 13,\
    \ 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597\n</code>\nThe first two numbers\
    \ are 0 and 1, and each subsequent number is the sum of the two preceding ones:\n\
    <code>\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597\n\
    </code>\nThe first two numbers are 0 and 1, and ", "    if n == 0\n        0\n\
    \    elseif n == 1\n        1\n    else\n        fib(n - 1) + fib(n - 2)\nend\n\
    </code>\n<|/ a |>\n<| c |>\nThis is not an answer to the question. He is asking\
    \ how to implement the Fibonacci sequence in Julia.\n<|/ c |>\n<| c |>\nThe question\
    \ was how to implement the Fibonacci sequence in Julia. He is asking how to implement\
    \ the Fibonacci sequence in Julia.\n<|/ c |>\n<| c |>\nThe question was how to\
    \ implement the Fibonacci sequence in Julia. He is asking how to implement the\
    \ Fibonacci sequence in Julia.\n<|/ c |>\n<| c |>\nThe question was how to implement\
    \ the Fibonacci sequence in Julia. He is asking how to implement the Fibonacci\
    \ sequence in Julia.\n<|/ c |>\n<| c |>\nThe question was how to implement the\
    \ Fibonacci sequence in Julia. He is asking how to implement the Fibonacci sequence\
    \ in Julia.\n<|/ c |>\n<| a tags=julia,fibonacci |>\nThe Fibonacci sequence is\
    \ defined as:\n<code>\nF(n) = F(n-1) + F(n-2)\n</code>\nwhere F(0) = 0 and F(1)\
    \ = 1. \nIn Julia, you can implement this as:\n<code>", "    if n<2 then return\
    \ n\n    else return fib(n-1)+fib(n-2)\nend\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=julia,fibonacci |>\n<code>", "    if n <= 1 \n        then 1 \n       \
    \ else fib(n-1) + fib(n-2) \nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    <code>", "    if n <= 1 \n        then 1\n        else fib(n-1) + fib(n-2)\nend\n\
    </cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise 3\n\
    Write a function that computes the n-th Fibonacci number using recursion.", " \
    \   if n<2 then return n\n    else return fib(n-1)+fib(n-2)\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a recursive function named fib_r(n::Int64) that returns the\
    \ nth Fibonacci number.", "    if n == 0\n        0\n    elseif n == 1\n     \
    \   1\n    else\n        fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a |>\n<| c\
    \ |>\nI like your solution, but I wonder why you use an `Int64` instead of `Int`?\n\
    <|/ c |>\n<| c |>\n`Int64` is more efficient than `Int` because `Int` uses `Int64`\
    \ internally and `Int64` uses `Int` internally. `Int64` is also more efficient\
    \ than `Int` because `Int` uses `Int64` internally and `Int64` uses `Int` internally.\n\
    <|/ c |>\n<| c |>\n`Int64` is more efficient than `Int` because `Int` uses `Int64`\
    \ internally and `Int64` uses `Int` internally. `Int64` is also more efficient\
    \ than `Int` because `Int` uses `Int64` internally and `Int64` uses `Int` internally.\n\
    <|/ c |>\n<| c |>\n`Int64` is more efficient than `Int` because `Int` uses `Int64`\
    \ internally and `Int64` uses `Int` internally. `Int64` is also more efficient\
    \ than `Int` because `Int` uses `Int64` internally and `Int64` uses `Int` internally.\n\
    <|/ c |>\n<| c |>\n`Int64` is more efficient than `Int` because `Int` uses `Int64`\
    \ internally and `Int64` uses `Int` internally. `Int64` is also more efficient\
    \ than `Int` because `Int` uses `Int64` internally and `Int64` uses `Int` internally.\n\
    <|/ c |>\n<| a dscore=5 |>\nThe most efficient way to compute Fibonacci numbers\
    \ is to store them in a data structure that supports efficient lookup. For example,\
    \ a hash table (a hash map) can provide O(1) lookup.\n<code>\nfibs = Dict{Int,\
    \ Int}()\nfibs[1] = 1\nfibs[2] = 1\nfibs[n] = fibs[n-1] + fibs[n-2] for n in 1:n\n\
    </code>\n<|/ a tags=fibonacci,julia |>\n<| c |>\nThis is very inefficient, since\
    \ it requires O(n) space to store the numbers. A better solution would be to store\
    \ the numbers in a `Vector` and then use binary search to find the correct index\
    \ to use.\n<|/ c |>", "    if n == 0 \n        0\n    else if n == 1 \n      \
    \  1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do this\
    \ without recursion?\n<|/ c |>\n<| c |>\nI guess you could use a while loop, but\
    \ I wouldn't recommend it for performance reasons.\n<|/ c |>\n<| c |>\nI guess\
    \ you could use a while loop, but I wouldn't recommend it for performance reasons.\n\
    <|/ c |>\n<| c |>\nI guess you could use a while loop, but I wouldn't recommend\
    \ it for performance reasons.\n<|/ c |>\n<| c |>\nI guess you could use a while\
    \ loop, but I wouldn't recommend it for performance reasons.\n<|/ c |>\n<| a tags=julia,fibonacci,recursion\
    \ |>\n<code>", "    if n == 0\n        0\n    else if n == 1\n        1\n    else\n\
    \        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise\nWrite a function that calculates the n-th\
    \ Fibonacci number using recursion.", "    if n <= 1 \n        then 1\n      \
    \  else fib(n-1) + fib(n-2)\n    end\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| c |>\nThis doesn't work. `fib` returns `Int64` but `fib(n-1)` returns\
    \ `Int`.\n<|/ c |>\n<| c |>\nI fixed the code. Thanks for pointing that out.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "    if n < 2 \n        then return n\n \
    \       else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that calculates the\
    \ n-th Fibonacci number using recursion.", "    if n <= 1\n        1\n    else\n\
    \        fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a function that returns the n-th\
    \ Fibonacci number using recursion.", "    if n == 0 \n        then return 0\n\
    \    else if n == 1 \n        then return 1\n    else \n        return fib(n -\
    \ 1) + fib(n - 2)\nend\n</cell>\n<text>\nExercise: Write a recursive function\
    \ fib_r(n::Int64)::Int64 that returns the nth Fibonacci number.", "    if n ==\
    \ 0 \n        then return 1\n    else if n == 1 \n        then return 1\n    else\
    \ \n        return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ n-th Fibonacci number using recursion.", "    if n < 2\n        1\n    else\n\
    \        fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n\
    </cell>\n<text>\nExercise: Write a function that calculates the n-th Fibonacci\
    \ number using recursion.", "    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the n-th Fibonacci number.", "    if n == 0 \n        then return\
    \ 1\n    else if n == 1 \n        then return 1\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n\
    <text>\nExercise: Write a recursive function fib_rec(n::Int64)::Int64 which returns\
    \ the nth Fibonacci number.", "    if n <= 1 \n        then return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.", "    if n == 0 \n        0\n    else\
    \ if n == 1 \n        1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| c |>\nThis code doesn't work. `fib` returns\
    \ `Int64` but `fib` expects `Int`. `fib` should be `fib(::Int64)`.\n<|/ c |>\n\
    <| c |>\nThe code works, I just tested it. The problem was that I used `fib` instead\
    \ of `fib(::Int64)` in the last line of the function.\n<|/ c |>\n<| c |>\nYes,\
    \ I tested it too. `fib` returns `Int64` but `fib` expects `Int`. `fib` should\
    \ be `fib(::Int64)`.\n<|/ c |>\n<| c |>\nI edited the answer to fix the problem\
    \ you mentioned.\n<|/ c |>\n<| c |>\nThe code still doesn't work. `fib` returns\
    \ `Int64` but `fib` expects `Int`. `fib` should be `fib(::Int64)`.\n<|/ c |>\n\
    <| a dscore=3 |>\nThe accepted answer does not work for me. \n<code>\njulia> fib(10)\n\
    ERROR: MethodError: no method matching fib(::Int64)\nClosest candidates are:\n\
    \  fib(::Int) at REPL[11]:1\nStacktrace:\n [1] top-level scope at none:0\n</code>\n\
    I changed it to:\n<code>", "    if n == 0 \n        then return 1\n    else if\
    \ n == 1 \n        then return 1\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a dscore=2 |>\n<code>", "    if\
    \ n <= 1\n        1\n    else\n        fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the n-th Fibonacci number using a while loop.", "    if n < 2 \n\
    \        then return 1\n        else return fib(n-1) + fib(n-2)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that calculates the n-th Fibonacci number using recursion.",
  "    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that computes the n-th\
    \ Fibonacci number using recursion.", "    if n < 2\n    then return 1\n    else\
    \ return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,fibonacci\
    \ |>\n<code>", "    if n<2 \n        then return n\n        else return fib(n-1)+fib(n-2)\n\
    \    end\nend\n</code>\n<|/ a |>\n<| c |>\nI like your solution, however it would\
    \ be better to use a recursive function instead of a loop. Recursive functions\
    \ are more efficient than loops.\n<|/ c |>\n<| c |>\nI agree with you, however\
    \ I wanted to keep it simple and clear.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ however I wanted to keep it simple and clear.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, however I wanted to keep it simple and clear.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, however I wanted to keep it simple and clear.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>", "    if n == 0 \n        then return 0\n    else if n == 1 \n \
    \       then return 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the n-th Fibonacci number using recursion.", "    if n < 2\n  \
    \      1\n    else\n        fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype fib(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the n-th Fibonacci number modulo 1000000007 (the remainder\
    \ after dividing by 1000000007).", "    if n < 2 \n        then return n\n   \
    \     else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to execute the code\
    \ in the cell and time how long it takes to run. Here we see that fib(10) takes\
    \ about 1.2 seconds to run. Let's try it again with @time fib(10) and @time fib(100).",
  "    if n <= 1 \n        then return n\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the n-th Fibonacci number using recursion.", " \
    \   if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=julia,fibonacci,recursion |>\n<code>", "    if n == 0 \n     \
    \   then return 0\n    else if n == 1 \n        then return 1\n    else return\
    \ fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number using recursion.", "    if n <= 1 \n \
    \       then 1\n        else fib(n-1) + fib(n-2)\n    end\nend\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=0 |>\n<code>", "    if n == 0\n        0\n    elseif\
    \ n == 1\n        1\n    else\n        fib(n - 1) + fib(n - 2)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| c |>\nThis is not the fastest solution. `fib(n)`\
    \ can be computed as `fib(n-1) + fib(n-2)` without recursion.\n<|/ c |>\n<| c\
    \ |>\nI agree, this is much faster than the recursive solution. However I wanted\
    \ to show how to implement the recursive solution in Julia.\n<|/ c |>\n<| c |>\n\
    I agree, this is much faster than the recursive solution. However I wanted to\
    \ show how to implement the recursive solution in Julia.\n<|/ c |>\n<| c |>\n\
    I agree, this is much faster than the recursive solution. However I wanted to\
    \ show how to implement the recursive solution in Julia.\n<|/ c |>\n<| c |>\n\
    I agree, this is much faster than the recursive solution. However I wanted to\
    \ show how to implement the recursive solution in Julia.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>", "    if n < 2 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n\
    </cell>\n<text>\nExercise: Write a recursive function fib_rec that computes the\
    \ nth Fibonacci number using recursion.", "    if n < 2\n        1\n    else\n\
    \        fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n\
    </cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a recursive function fib_rec(n::Int64) that returns the nth Fibonacci\
    \ number.", "    if n < 2 \n        then return n\n        else return fib(n-2)\
    \ + fib(n-1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return n-th\
    \ Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n\
    \    21\n    \"\"\"", "    if n == 0 || n == 1 \n        then return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=fibonacci,julia,recursion |>\n<code>", "    if n == 0\n        0\n    else\
    \ if n == 1\n        1\n    else\n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a function that calculates the n-th Fibonacci number using recursion.",
  "    if n < 2 \n        then return n\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    if n == 0 \n\
    \        then return 0\n    else if n == 1 \n        then return 1\n    else \n\
    \        return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| c |>\nThe `fib` function can be written more concisely as `fib(n) = n\
    \ < 2 ? n : fib(n-1) + fib(n-2)`\n<|/ c |>\n<| a tags=julia,fibonacci |>\nI wrote\
    \ a Julia package for Fibonacci numbers, called Fibonacci.jl. It has the following\
    \ features:", "    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a recursive function fib_rec(n::Int64)::Int64 that returns the n-th Fibonacci\
    \ number.", "    if n <= 1 \n        then 1\n        else fib(n-1) + fib(n-2)\n\
    \    end\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\nThanks for your\
    \ answer! I really appreciate it!\n<|/ c |>\n<| c |>\nThis doesn't work for me.\
    \ `fib` returns `ERROR: LoadError: UndefVarError: fib not defined`\n<|/ c |>\n\
    <| c |>\nI guess you forgot to `include` the file containing the `fib` function.\n\
    <|/ c |>\n<| c |>\nI did forget to `include` the file containing the `fib` function.\
    \ I just tried it again and it worked. Thanks again!\n<|/ c |>\n<| a |>\nA recursive\
    \ solution:\n<code>", "    if n == 0 || n == 1 \n        return n\n    else \n\
    \        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that calculates the\
    \ n-th Fibonacci number using memoization.", "    if n == 0 || n == 1 \n     \
    \   then return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=juli", "    if n < 0 \n        error(\"fib:\
    \ n must be non-negative\")\n    else if n == 0 \n        1\n    else if n ==\
    \ 1 \n        1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise: Write a function that returns the nth Fibonacci\
    \ number modulo some modulus.", "    if n < 2\n        1\n    else\n        fib(n-1)\
    \ + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.", "    if n <= 1\n        1\n    else\n\
    \        fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a recursive function fib_r(n::Int64)::Int64\
    \ that returns the n-th Fibonacci number.", "    if n <= 1 \n        then 1\n\
    \        else fib(n-1) + fib(n-2)\n    end\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis is not the Fibonacci sequence. Fibonacci numbers start at 0 and\
    \ 1, not 1 and 1.\n<|/ c |>\n<| c |>\nI know, I wrote it that way because I wanted\
    \ to show that you can do recursion in Julia without having to use loops. I guess\
    \ I should have used the word \"sequence\" instead of \"number\"\n<|/ c |>\n<|\
    \ c |>\nI guess I should have used the word \"sequence\" instead of \"number\"\
    \n<|/ c |>\n<| c |>\nI guess I should have used the word \"sequence\" instead\
    \ of \"number\"\n<|/ c |>\n<| c |>\nI guess I should have used the word \"sequence\"\
    \ instead of \"number\"\n<|/ c |>\n<| a |>\n<code>", "    if n < 2 \n        then\
    \ return 1\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the n-th Fibonacci number using recursion.", "    if n == 0\
    \ \n        then return 0\n    else if n == 1 \n        then return 1\n    else\
    \ \n        fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise: Write a recursive function named fibonacci\
    \ that returns the nth Fibonacci number.", "    if n<2 \n        then return 1\n\
    \        else return fib(n-1)+fib(n-2)\n    end\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| c |>\nThis is not the most efficient solution. `fib(n)` will call `fib(n-1)`\
    \ and `fib(n-2)` each time. Instead, `fib(n)` should call `fib(n-1)` and `fib(n-2)`\
    \ only once, store the results, and return them each time `fib(n)` is called.\n\
    <|/ c |>\n<| c |>\nThe question was about Julia, not Python.\n<|/ c |>\n<| c |>\n\
    The question was about Julia, not Python.\n<|/ c |>\n<| c |>\nThe question was\
    \ about Julia, not Python.\n<|/ c |>\n<| a tags=julia,fibonacci |>\nThe Julia\
    \ language is designed for concise and efficient code. \nThe code below is more\
    \ efficient than other solutions posted here. It uses memoization to speed up\
    \ the calculation. \n<code>", "    if n == 0 \n        0\n    else if n == 1 \n\
    \        1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a function that computes the n-th\
    \ Fibonacci number using recursion.", "    if n < 2\n        1\n    else\n   \
    \     fib(n-2) + fib(n-1)\nend\n</cell>\n<code language=julia-1.5>\n@code_native\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@code_native fib(1)\n</cell>\n\
    <code language=julia-1.5>\n@code_native fib(8)\n</cell>\n<text>\nExercise 3\n\
    Write a recursive function fib_rec(n::Int64) which returns the nth Fibonacci number.",
  "    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise 1\n\
    Write a function that returns the n-th Fibonacci number in Julia.", "    if n\
    \ == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1) +\
    \ fib(n-2)\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "    if\
    \ n <= 1 \n        then 1\n        else fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a recursive\
    \ function fib_rec that computes the n-th Fibonacci number.", "    if n < 0 \n\
    \        error(\"fib expects non-negative integer\")\n    else if n == 0 \n  \
    \      1\n    else if n == 1 \n        1\n    else \n        fib(n - 1) + fib(n\
    \ - 2)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that computes the factorial\
    \ of a number. \nThe factorial of a number $n$ is defined as", "    if n == 0\n\
    \        0\n    else if n == 1\n        1\n    else\n        fib(n - 1) + fib(n\
    \ - 2)\nend\n</code>\n<|/ a |>\n<| c |>\nThis is not the Fibonacci sequence. Fibonacci\
    \ numbers grow exponentially and are calculated using the formula F(n) = F(n-1)\
    \ + F(n-2) where F(0) = F(1) = 1 and F(1) = 1. Your code does not do this.\n<|/\
    \ c |>\n<| c |>\nThe code does exactly what it says it does. If you want a Fibonacci\
    \ sequence then you need to use an exponential growth formula. Your code does\
    \ not do this.\n<|/ c |>\n<| c |>\nThe code does exactly what it says it does.\
    \ If you want a Fibonacci sequence then you need to use an exponential growth\
    \ formula. Your code does not do this.\n<|/ c |>\n<| c |>\nThe code does exactly\
    \ what it says it does. If you want a Fibonacci sequence then you need to use\
    \ an exponential growth formula. Your code does not do this.\n<|/ c |>\n<| c |>\n\
    The code does exactly what it says it does. If you want a Fibonacci sequence then\
    \ you need to use an exponential growth formula. Your code does not do this.\n\
    <|/ c |>\n<| a tags=fibonacci,julia,recursion |>\n<code>", "    if n < 2 \n  \
    \      then return n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a function that computes the n-th Fibonacci number using memoization.",
  "    if n == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to work for me.\
    \ `fib(1)` returns `1` instead of `0`.\n<|/ c |>\n<| c |>\nI tested it on Julia\
    \ 0.6.2 and it works. What Julia version are you using?\n<|/ c |>\n<| c |>\nI'm\
    \ using 0.6.2. I tried it on 0.6.2 and it didn't work. I'm on 0.6.2 as well. I'm\
    \ on 0.6.2 on Windows. I wonder if it's a bug in 0.6.2.\n<|/ c |>\n<| c |>\nI\
    \ tested it on 0.6.2 and it works. What Julia version are you using?\n<|/ c |>\n\
    <| c |>\nI'm using 0.6.2. I tried it on 0.6.2 and it didn't work. I'm on 0.6.2\
    \ as well. I'm on 0.6.2 on Windows. I wonder if it's a bug in 0.6.2.\n<|/ c |>\n\
    <| a tags=julia |>\nThe accepted answer doesn't work for me. Here's a version\
    \ that does:\n<code>", "    if n == 0 || n == 1 \n        then return n\n    else\
    \ \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ n-th Fibonacci number using recursion.", "    if n <= 1\n        1\n    else\n\
    \        fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec that\
    \ computes the nth Fibonacci number recursively.", "    if n == 0 \n        then\
    \ return 0\n    else if n == 1 \n        then return 1\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<text>\nThe Fibonacci sequence is defined\
    \ by the recurrence relation:", "    if n == 0 then return 1\n    if n == 1 then\
    \ return 1\n    return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.0>",
  "    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\nThis is not the\
    \ most efficient solution, since it calls fib twice for each iteration. An alternative\
    \ would be to store the results in a vector and return the last element of the\
    \ vector.\n<|/ c |>\n<| c |>\nI agree, this is an inefficient solution. However,\
    \ the OP asked for \"a solution that does not use recursion\". My answer was meant\
    \ to be a solution that does not use recursion.\n<|/ c |>\n<| c |>\nI agree, this\
    \ is an inefficient solution. However, the OP asked for \"a solution that does\
    \ not use recursion\". My answer was meant to be a solution that does not use\
    \ recursion.\n<|/ c |>\n<| c |>\nThe OP asked for a solution that does not use\
    \ recursion. My answer was meant to be a solution that does not use recursion.\n\
    <|/ c |>\n<| c |>\nI agree, this is an inefficient solution. However, the OP asked\
    \ for \"a solution that does not use recursion\". My answer was meant to be a\
    \ solution that does not use recursion.\n<|/ c |>\n<| a dscore=5 |>\nA simple\
    \ recursive function would be:\n<code>", "    if n < 2 \n        then return n\n\
    \        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5",
  "    if n == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a recursive function named fib_r(n::Int64) that returns\
    \ the nth Fibonacci number.", "    if n == 0 \n        then return 0\n    else\
    \ if n == 1 \n        then return 1\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a tags=julia,fibonacci |>\n<code>",
  "    if n == 0 \n        then return 1\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| a dscore=2 |>\n<code>", "    if n < 2\n    then 1\n    else fib(n-2)\
    \ + fib(n-1)\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/19674544)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to implement\
    \ a Fibonacci function and I provided a solution. He also asked how to use recursion\
    \ to implement a Fibonacci function. I provided a solution as well as some explanation\
    \ as to how it works. I believe this to be a good answer.\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question. He asked how to implement a Fibonacci\
    \ function and I provided a solution. He also asked how to use recursion to implement\
    \ a Fibonacci function. I provided a solution as well as some explanation as to\
    \ how it works. I believe this to be a good answer.\n<|/ c |>\n<| c |>\nI believe\
    \ this does answer the question. He asked how to implement a Fibonacci function\
    \ and I provided a solution. He also asked how to use recursion to implement a\
    \ Fibonacci function. I provided a solution as well as some explanation as to\
    \ how it works. I believe this to be a good answer.\n<|/ c |>\n<| c |>\nI believe\
    \ this does answer the question. He asked how to implement a Fibonacci function\
    \ and I provided a solution. He also asked how to use recursion to implement a\
    \ Fibonacci function. I provided a solution as well as some explanation as to\
    \ how it works. I believe this to be a good answer.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>", "    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n\
    </cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise 3\n\
    Write a function that computes the n-th Fibonacci number using recursion.", " \
    \   if n <= 1 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.4>\n@time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the n-th Fibonacci number using recursion.", "    if n == 0\
    \ || n == 1 \n        then return n\n    else \n        return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a recursive function named fib_r(n::Int64) which returns the\
    \ nth Fibonacci number.", "    if n < 0 \n        error(\"Fibonacci number does\
    \ not exist\")\n    else if n == 0 \n        1\n    else if n == 1 \n        1\n\
    \    else \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that computes the n-th\
    \ Fibonacci number using recursion.", "    if n == 0 \n        0\n    else if\
    \ n == 1 \n        1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| c |>\nThis is not the fastest solution, since\
    \ it calls fib(N) twice for each recursive call. Also, Julia has tail recursion\
    \ optimization, so this can be done in one pass.\n<|/ c |>\n<| c |>\nI agree,\
    \ this is slower than the other solutions. I guess it depends on how you define\
    \ \"fastest\".\n<|/ c |>\n<| c |>\nI guess it depends on how you define \"fastest\"\
    . Fastest in terms of execution time, not memory usage.\n<|/ c |>\n<| c |>\nI\
    \ guess it depends on how you define \"fastest\". Fastest in terms of execution\
    \ time, not memory usage.\n<|/ c |>\n<| c |>\nI guess it depends on how you define\
    \ \"fastest\". Fastest in terms of execution time, not memory usage.\n<|/ c |>\n\
    <| a tags=julia,fibonacci |>\n<code>", "    if n < 2 \n        then return 1\n\
    \        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ nth Fibonacci number in a given range.", "    if n < 2 \n        then return\
    \ n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a function that returns the n-th\
    \ Fibonacci number in Julia", "    if n < 2 \n        then return n\n        else\
    \ return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the\
    \ n-th Fibonacci number using recursion.", "    if n == 0 \n        0\n    else\
    \ if n == 1 \n        1\n    else \n        fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the n-th Fibonacci number using recursion.", "    if n == 0 ||\
    \ n == 1 \n        then return n\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nThe function\
    \ fib(n::Int64) is a recursive function which calls itself twice in each call.\
    \ \nThe first call fib(n-1) will take O(n) time because of the recursive call.\
    \ \nThe second call fib(n-2) will take O(n) time because of the recursive call.\
    \ \nThe third call fib(n-3) will take O(n) time because of the recursive call.\
    \ \nThe fourth call fib(n-4) will take O(n) time because of the recursive call.\
    \ \nThe fifth call fib(n-5) will take O(n) time because of the recursive call.\
    \ \nThe sixth call fib(n-6) will take O(n) time because of the recursive call.\
    \ \nThe seventh call fib(n-7) will take O(n) time because of the recursive call.\
    \ \nThe eighth call fib(n-8) will take O(n) time because of the recursive call.\
    \ \nThe ninth call fib(n-9) will take O(n) time because of the recursive call.\
    \ \nThe tenth call fib(n-10) will take O(n) time because of the recursive call.\
    \ \nThe eleventh call fib(n-11) will take O(n) time because of the recursive call.\
    \ \nThe twelfth call fib(n-12) will take O(n) time because of the recursive call.\
    \ \nThe thirteenth call fib(n-13) will take O(n) time because of the recursive\
    \ call. \nThe fourteenth call fib(n-14) will take O(n) time because of the recursive\
    \ call. \nThe fifteenth call fib(n-15) will take O(n) time because of the recursive\
    \ call. \nThe sixteenth call fib(n-16) will take O(n) time because of the recursive\
    \ call. \nThe seventeenth call fib(n-17) will take O(n) time because of the recursive\
    \ call. \nThe eighteenth call fib(n-18) will take O(n) time because of the recursive\
    \ call. \nThe nineteenth call fib(n-19) will take O(n) time because of the recursive\
    \ call. \nThe twentieth call fib(n-20) will take O(n) time because of the recursive\
    \ call. \nThe twenty-first call fib(n-21) will take O(n) time because of the recursive\
    \ call. \nThe twenty-second call fib", "    if n < 0 \n        error(\"Fibonacci\
    \ number must be positive\")\n    else if n == 0 \n        0\n    else if n ==\
    \ 1 \n        1\n    else \n        fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that computes the n-th\
    \ Fibonacci number using recursion.", "    if n < 2 \n        then return n\n\
    \    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ n-th Fibonacci number using recursion.", "    if n < 2 \n        then return\
    \ n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will give you a rough idea of\
    \ how long each function call takes. In this case, fib(10) took about 1.2 seconds\
    \ to run. Let's see what happens when we call fib with an argument that's too\
    \ large:", "    if n == 0 then return 1\n    else if n == 1 then return 1\n  \
    \  else return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,fibonacci,recursion\
    \ |>\n<code>", "    if n == 0 \n        then return 0\n    else if n == 1 \n \
    \       then return 1\n    else \n        fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that calculates the n-th Fibonacci number using recursion.", "    if n < 2\n\
    \        1\n    else\n        fib(n-2) + fib(n-1)\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| a dscore=3 |>\n<code>", "    if n<2 then return n\n    else return fib(n-1)+fib(n-2)\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,fibonacci |>\n<code>", "    if\
    \ n == 0 \n        then return 0\n    else if n == 1 \n        then return 1\n\
    \    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ n-th Fibonacci number using recursion.", "    if n < 2\n        1\n    else\n\
    \        fib(n-2) + fib(n-1)\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n\
    </cell>\n<text>\nExercise: Write a function that calculates the n-th Fibonacci\
    \ number using recursion.", "    if n < 2 \n        then return 1\n        else\
    \ return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the n-th Fibonacci number in a list.", "    if n ==\
    \ 0 \n        0\n    else if n == 1 \n        1\n    else \n        fib(n - 1)\
    \ + fib(n - 2)\nend\n</cell>\n<text>\nFibonacci numbers are a special case of\
    \ factorial numbers. A factorial number $n!$ is defined as the product of all\
    \ positive integers less than or equal to $n$:", "    if n == 0 || n == 1 \n \
    \       return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the n-th Fibonacci number using\
    \ recursion.", "    if n <= 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe recursive\
    \ solution is very elegant, but it is also very inefficient. Try it on a big enough\
    \ input, and you'll see that it's very slow.\n<|/ c |>\n<| c |>\nI agree with\
    \ you. But the recursive solution is also very elegant and efficient. :)\n<|/\
    \ c |>\n<| c |>\nI agree, it is very elegant, but it is also very inefficient.\
    \ Try it on a big enough input, and you'll see that it's very slow.\n<|/ c |>\n\
    <| c |>\nI agree with you. But the recursive solution is also very elegant and\
    \ efficient. :)\n<|/ c |>\n<| c |>\nI agree with you. But the recursive solution\
    \ is also very elegant and efficient. :)\n<|/ c |>\n<| a |>\n<code>", "    if\
    \ n < 2 \n        then return 1\n        else return fib(n-1) + fib(n-2)\n   \
    \ end\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise\nWrite a function that computes the n-th Fibonacci number using memoization.",
  "    if n == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n\
    <code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that computes the factorial of a given number. \nThe factorial of a\
    \ number $n$ is defined as\n$$\nn! = n  (n-1)  (n-2)  ...  2  1\n$$\nFor example,\
    \ for $n=5$, the factorial is $5! = 5 x 4 x 3 x 2 x 1 = 120$.", "    if n < 2\n\
    \        1\n    else\n        fib(n-2) + fib(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n\
    \    1\n    >>> fib(8)\n    21\n    \"\"\"", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else \n        return fib(n\
    \ - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fi", "    if n == 0 \n        0\n    else if n ==\
    \ 1 \n        1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/\
    \ a tags=julia,fibonacci |>\n<| c |>\nThis does not answer the question. OP asked\
    \ for a solution in Julia, not Python.\n<|/ c |>\n<| c |>\nThis answer does not\
    \ answer the question. OP asked for a solution in Julia, not Python.\n<|/ c |>\n\
    <| a tags=julia,fibonacci |>\n<code>", "    if n < 2 \n        then return n\n\
    \    else \n        return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| c |>\nThis is not the fastest solution. `fib(n)` can be calculated using\
    \ only `O(1)` memory and `O(1)` time.\n<|/ c |>\n<| c |>\nThe fastest solution\
    \ is `fib(n)` can be calculated using only `O(1)` memory and `O(1)` time.\n<|/\
    \ c |>\n<| c |>\nThe fastest solution is `fib(n)` can be calculated using only\
    \ `O(1)` memory and `O(1)` time.\n<|/ c |>\n<| c |>\nThe fastest solution is `fib(n)`\
    \ can be calculated using only `O(1)` memory and `O(1)` time.\n<|/ c |>\n<| c\
    \ |>\nThe fastest solution is `fib(n)` can be calculated using only `O(1)` memory\
    \ and `O(1)` time.\n<|/ c |>\n<| a tags=julia,fibonacci |>\n<code>", "    if n\
    \ == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1) +\
    \ fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype fib(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the n-th Fibonacci\
    \ number using recursion.", "    if n == 0\n        0\n    else\n        fib(n\
    \ - 1) + fib(n - 2)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not an\
    \ answer to the question. He is asking how to implement the Fibonacci sequence\
    \ in Julia.\n<|/ c |>\n<| c |>\nThe question was how to implement the Fibonacci\
    \ sequence in Julia. He was asking how to implement the Fibonacci sequence in\
    \ Julia.\n<|/ c |>\n<| c |>\nThe question was how to implement the Fibonacci sequence\
    \ in Julia. He was asking how to implement the Fibonacci sequence in Julia.\n\
    <|/ c |>\n<| c |>\nThe question was how to implement the Fibonacci sequence in\
    \ Julia. He was asking how to implement the Fibonacci sequence in Julia.\n<|/\
    \ c |>\n<| c |>\nThe question was how to implement the Fibonacci sequence in Julia.\
    \ He was asking how to implement the Fibonacci sequence in Julia.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>", "    if n == 0 \n        then return 0\n    else if\
    \ n == 1 \n        then return 1\n    else \n        return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @", "    if n == 0 \n        then return 0\n    else if n == 1 \n        then\
    \ return 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nThe Fibonacci sequence\
    \ is defined by the recurrence relation:", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else \n        return fib(n\
    \ - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the n-th Fibonacci\
    \ number using the following formula:", "    if n == 0\n        0\n    elseif\
    \ n == 1\n        1\n    else\n        fib(n - 1) + fib(n - 2)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci,recursion |>\n<| c |>\nThis doesn't answer the question,\
    \ which is about how to write recursive functions in Julia.\n<|/ c |>\n<| c |>\n\
    The question was about how to write recursive functions in Julia. Your answer\
    \ doesn't do that. Your answer doesn't even use recursion.\n<|/ c |>\n<| c |>\n\
    The question was about how to write recursive functions in Julia. Your answer\
    \ doesn't do that. Your answer doesn't even use recursion.\n<|/ c |>\n<| c |>\n\
    The question was about how to write recursive functions in Julia. Your answer\
    \ doesn't do that. Your answer doesn't even use recursion.\n<|/ c |>\n<| c |>\n\
    The question was about how to write recursive functions in Julia. Your answer\
    \ doesn't do that. Your answer doesn't even use recursion.\n<|/ c |>\n<| a tags=julia,fibonacci,recursion\
    \ |>\nThe recursive solution is very similar to the iterative solution:\n<code>",
  "    if n == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.0>\n@code_native fib(10)\n\
    </cell>\n<code language=julia-1.0>\n@code_native fib(1)\n</cell>\n<code language=julia-1.0>\n\
    @code_native fib(8)\n</cell>\n<text>\nExercise 3\nWrite a recursive function which\
    \ returns the n-th Fibonacci number using memoization.", "    if n <= 1\n    \
    \    1\n    else\n        fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=julia,fibonacci |>\nIn Julia 1.1 you can use the Fibonacci function\
    \ from the Base package:\n<code>\njulia> Base.Fibonacci(10)\n55\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "    if n < 2\n        1\n    else\n\
    \        fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    The accepted answer uses recursion and is therefore not tail recursive. \nA tail\
    \ recursive solution is one that does not use recursion and is therefore more\
    \ efficient. \nThe accepted answer uses recursion and is therefore not tail recursive.\
    \ \nA tail recursive solution is one that does not use recursion and is therefore\
    \ more efficient. \nThe accepted answer uses recursion and is therefore not tail\
    \ recursive. \nA tail recursive solution is one that does not use recursion and\
    \ is therefore more efficient. \nThe accepted answer uses recursion and is therefore\
    \ not tail recursive. \nA tail recursive solution is one that does not use recursion\
    \ and is therefore more efficient. \nThe accepted answer uses recursion and is\
    \ therefore not tail recursive. \nA tail recursive solution is one that does not\
    \ use recursion and is therefore more efficient. \nThe accepted answer uses recursion\
    \ and is therefore not tail recursive. \nA tail recursive solution is one that\
    \ does not use recursion and is therefore more efficient. \nThe accepted answer\
    \ uses recursion and is therefore not tail recursive. \nA tail recursive solution\
    \ is one that does not use recursion and is therefore more efficient. \nThe accepted\
    \ answer uses recursion and is therefore not tail recursive. \nA tail recursive\
    \ solution is one that does not use recursion and is therefore more efficient.\
    \ \nThe accepted answer uses recursion and is therefore not tail recursive. \n\
    A tail recursive solution is one that does not use recursion and is therefore\
    \ more efficient. \nThe accepted answer uses recursion and is therefore not tail\
    \ recursive. \nA tail recursive solution is one that does not use recursion and\
    \ is therefore more efficient. \nThe accepted answer uses recursion and is therefore\
    \ not tail recursive. \nA tail recursive solution is one that does not use recursion\
    \ and is therefore more efficient. \nThe accepted answer uses recursion and is\
    \ therefore not tail recursive. \nA tail recursive solution is one that does not\
    \ use recursion and is therefore more efficient. \nThe accepted answer uses recursion\
    \ and is therefore not tail recursive. \nA tail recursive solution is one that\
    \ does not use recursion and is therefore more efficient. \nThe accepted answer\
    \ uses recursion and is therefore not tail recursive. \nA tail recursive solution\
    \ is one that does not use recursion and is therefore more efficient. \nThe accepted\
    \ answer uses recursion and is therefore not tail", "    if n==0 || n==1 \n  \
    \      return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| a |>\n<code>", "    if n < 2 \n        then\
    \ return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a recursive\
    \ function named fib_r(n::Int64) that returns the nth Fibonacci number.", "  \
    \  if n == 0 || n == 1 \n        then return n\n    else \n        fib(n - 1)\
    \ + fib(n - 2)\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>", " \
    \   if n == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return n-th Fibonacci\
    \ number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n  \
    \  21\n    \"\"\"", "    if n < 0 \n        error(\"n must be positive\")\n  \
    \  else if n == 0 \n        1\n    else if n == 1 \n        1\n    else \n   \
    \     fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci,performance\
    \ |>\n<| a dscore=3 |>\n<code>", "    if n < 2 \n        then return 1\n    else\
    \ \n        return fib(n-2) + fib(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 3\nWrite a Julia function named fib_iter\
    \ that returns the nth Fibonacci number using recursion.", "    if n == 0 \n \
    \       then return 0\n    else if n == 1 \n        then return 1\n    else \n\
    \        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe Fibonacci sequence is defined by the recurrence\
    \ relation:", "    if n == 0 || n == 1 \n        then return n\n    else \n  \
    \      return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=juli", "    if n\
    \ < 2\n    then return 1\n    else return fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| c |>\nThis does not answer the question. OP\
    \ asked for Julia, not Python.\n<|/ c |>\n<| c |>\nThis is not an answer to OP's\
    \ question. OP asked for Julia, not Python.\n<|/ c |>\n<| c |>\nThe question was\
    \ about Julia, not Python. Julia is very similar to Python.\n<|/ c |>\n<| c |>\n\
    The question was about Julia, not Python. Julia is very similar to Python.\n<|/\
    \ c |>\n<| c |>\nThe question was about Julia, not Python. Julia is very similar\
    \ to Python.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "    if n < 2 \n        then\
    \ return n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the nth Fibonacci number using recursion.",
  "    if n < 0 \n        error(\"fib: n must be non-negative\")\n    else if n ==\
    \ 0 \n        1\n    else if n == 1 \n        1\n    else \n        fib(n-1) +\
    \ fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return n-th Fibonacci\
    \ number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n  \
    \  21\n    \"\"\"", "    if n < 0 \n        error(\"n must be >= 0\")\n    else\
    \ if n == 0 \n        1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fi", "    if n == 0 then return 0\n    if n == 1 then return 1\n    return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=juli", "    if n\
    \ == 0 \n        then return 0\n    else if n == 1 \n        then return 1\n \
    \   else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.", "    if n < 2\n        1\n    else\n\
    \        fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.", "    if n == 0\n        0\n    elseif\
    \ n == 1\n        1\n    else\n        fib(n - 1) + fib(n - 2)\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis is not an answer to the question. An answer should\
    \ explain what was wrong in the original code and how you fixed it.\n<|/ c |>\n\
    <| c |>\nI agree with you, but I believe that my answer will help the OP understand\
    \ why his code doesn't work. He will learn something new and will help him to\
    \ understand why his code doesn't work. He will learn something new and will help\
    \ him to understand why his code doesn't work. He will learn something new and\
    \ will help him to understand why his code doesn't work. He will learn something\
    \ new and will help him to understand why his code doesn't work. He will learn\
    \ something new and will help him to understand why his code doesn't work. He\
    \ will learn something new and will help him to understand why his code doesn't\
    \ work. He will learn something new and will help him to understand why his code\
    \ doesn't work. He will learn something new and will help him to understand why\
    \ his code doesn't work. He will learn something new and will help him to understand\
    \ why his code doesn't work. He will learn something new and will help him to\
    \ understand why his code doesn't work. He will learn something new and will help\
    \ him to understand why his code doesn't work. He will learn something new and\
    \ will help him to understand why his code doesn't work. He will learn something\
    \ new and will help him to understand why his code doesn't work. He will learn\
    \ something new and will help him to understand why his code doesn't work. He\
    \ will learn something new and will help him to understand why his code doesn't\
    \ work. He will learn something new and will help him to understand why his code\
    \ doesn't work. He will learn something new and will help him to understand why\
    \ his code doesn't work. He will learn something new and will help him to understand\
    \ why his code doesn't work. He will learn something new and will help him to\
    \ understand why his code doesn't work. He will learn something new and will help\
    \ him to understand why his code doesn't work. He will learn something new and\
    \ will help him to understand why his code doesn't work. He will learn something\
    \ new and will help him to understand ", "    if n < 2 \n        then return n\n\
    \    else \n        return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise: Write a recursive function fib_rec(n::Int64)::Int64 that returns the\
    \ n-th Fibonacci number.", "    if n <= 1 \n        then return n\n    else \n\
    \        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-",
  "    if n == 0 \n        0\n    else if n == 1 \n        1\n    else \n        fib(n\
    \ - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n\
    </cell>\n<text>\nExercise: Write a function that computes the n-th Fibonacci number\
    \ using recursion.", "    if n == 0 || n == 1 \n        then return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=juli",
  "    if n == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\nI like this\
    \ solution, but I wonder if there is a way to avoid the recursion. For example,\
    \ `fib(n) = (n <= 2) ? n : fib(n-1) + fib(n-2)` would avoid the recursion.\n<|/\
    \ c |>\n<| c |>\nYes, that would work. Although it would be more efficient to\
    \ just use a loop. `fib(n) = (n <= 2) ? n : fib(n-1) + fib(n-2)` would avoid the\
    \ recursion.\n<|/ c |>\n<| c |>\nI agree, that would be more efficient. I was\
    \ just wondering if there was a way to avoid the recursion.\n<|/ c |>\n<| c |>\n\
    I added a recursive solution that avoids the recursion.\n<|/ c |>\n<| a |>\n<code>",
  "    if n < 2\n    then return 1\n    else return fib(n-2) + fib(n-1)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| c |>\nThis is not the most efficient solution.\
    \ Recursion is expensive.\n<|/ c |>\n<| c |>\nI agree, this is just an example\
    \ to show how it can be done.\n<|/ c |>\n<| c |>\nI agree, this is just an example\
    \ to show how it can be done.\n<|/ c |>\n<| a dscore=4 |>\nIn Julia 1.1 you can\
    \ use the Fibonacci function from the Base package:\n<code>\njulia> Base.Fibonacci(10)\n\
    55\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a tags=julia,fibonacci |>\nIn Julia\
    \ 1.1 you can use the Fibonacci function from the Base package:\n<code>\njulia>\
    \ Base.Fibonacci(10)\n55\n</code>\n<|/ a dscore=4 |>\n<| a tags=julia,fibonacci\
    \ |>\nIn Julia 1.1 you can use the Fibonacci function from the Base package:\n\
    <code>\njulia> Base.Fibonacci(10)\n55\n</code>\n<|/ a dscore=4 |>\n<| a tags=julia,fibonacci\
    \ |>\nIn Julia 1.1 you can use the Fibonacci function from the Base package:\n\
    <code>\njulia> Base.Fibonacci(10)\n55\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3\
    \ |>\nIn Julia 1.1 you can use the Fibonacci function from the Base package:\n\
    <code>\njulia> Base.Fibonacci(10)\n55\n</code>\n<|/ a tags=julia,fibonacci |>\n\
    <| a tags=julia,fibonacci |>\nIn Julia 1.1 you can use the Fibonacci function\
    \ from the Base package:\n<code>\njulia> Base.Fibonacci(10)\n55\n</code>\n<|/\
    \ a dscore=3 |>\n<| a tags=julia,fibonacci |>\nIn Julia 1.1 you can use the Fibonacci\
    \ function from the Base package:\n<code>\njulia> Base.Fibonacci(10)\n55\n</code>\n\
    <|/ a dscore=3 |>\n<| a tags=julia,fibonac", "    if n < 2 \n        then return\
    \ n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the\
    \ sum of all even Fibonacci numbers up to $n$:", "    if n < 2\n    then return\
    \ 1\n    else return fib(n-2) + fib(n-1)\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| a dscore=2 |>\n<code>", "    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n == 0 \n        1\n    else if n == 1 \n        1\n    else \n\
    \        fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the n-th Fibonacci\
    \ number using recursion.", "    if n == 0\n        0\n    else\n        fib(n-1)\
    \ + fib(n-2)\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=3 |>\nThe Fibonacci\
    \ sequence is defined as:", "    if n < 2 \n        then return n\n        else\
    \ return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n\
    \    1\n    >>> fib(8)\n    21\n    \"\"\"", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the n-th Fibonacci number using\
    \ memoization.", "    if n == 0 || n == 1 \n        then return n\n    else \n\
    \        return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This is not an answer to the question. He is asking about a recursive solution.\
    \ Your answer does not show how to do that.\n<|/ c |>\n<| c |>\nI added a recursive\
    \ solution\n<|/ c |>\n<| c |>\nThis is not an answer to the question. He is asking\
    \ about a recursive solution. Your answer does not show how to do that.\n<|/ c\
    \ |>\n<| c |>\nI added a recursive solution\n<|/ c |>\n<| c |>\nThis is not an\
    \ answer to the question. He is asking about a recursive solution. Your answer\
    \ does not show how to do that.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    if\
    \ n < 2 \n        then return n\n        else return fib(n-2) + fib(n-1)\n   \
    \ end\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the n-th Fibonacci number using a\
    \ while loop.", "    if n <= 1 \n        then 1\n        else fib(n-1) + fib(n-2)\n\
    \    end\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a tags=julia,fibonacci\
    \ |>\n<code>", "    if n == 0 || n == 1 \n        then return n\n    else \n \
    \       return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\"\
    \"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n \
    \   1\n    >>> fib(8)\n    21\n    \"\"\"", "    if n < 2\n        1\n    else\n\
    \        fib(n-2) + fib(n-1)\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nThe recursive solution is very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also very elegant, but it is also very inefficient.\
    \ \nThe iterative solution is also ", "    if n <= 1\n        1\n    else\n  \
    \      fib(n-2) + fib(n-1)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the n-th Fibonacci\
    \ number using recursion.", "    if n < 2\n    then return 1\n    else return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Return n-th\
    \ Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n\
    \    21\n    \"\"\"", "    if n < 2\n    then return n\n    else return fib(n-2)\
    \ + fib(n-1)\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n\
    <text>\nExercise\nWrite a function that calculates the n-th Fibonacci number using\
    \ recursion.", "    if n <= 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not an\
    \ answer to the question. He is asking for a recursive solution. He is also asking\
    \ for a solution that is faster than the naive recursive solution. Your answer\
    \ does not provide any solution that is faster than the naive recursive solution.\
    \ He is also asking for a solution that is faster than the naive recursive solution.\
    \ Your answer does not provide any solution that is faster than the naive recursive\
    \ solution.\n<|/ c |>\n<| c |>\nThe question was about how to implement a recursive\
    \ solution. He asked for a recursive solution and I provided one. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution", "    if n\
    \ < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| c |>\nThis is not an efficient solution. `fib(n)` will call `fib(n-1)`\
    \ and `fib(n-2)` each time it calls itself. This can be avoided by storing the\
    \ results in a `Vector{Int64}`.\n<|/ c |>\n<| c |>\nI agree with you. But the\
    \ question was about how to implement the algorithm, not about efficiency. Anyway,\
    \ I added a more efficient solution.\n<|/ c |>\n<| c |>\nI agree with you, but\
    \ I thought it would be nice to have both solutions available for people who want\
    \ to implement the algorithm themselves.\n<|/ c |>\n<| c |>\nI added a more efficient\
    \ solution that does not call `fib(n-1)` and `fib(n-2)` each time it calls itself.\n\
    <|/ c |>\n<| c |>\nI added a more efficient solution that does not call `fib(n-1)`\
    \ and `fib(n-2)` each time it calls itself.\n<|/ c |>\n<| a tags=julia,fibonacci\
    \ |>\nThe most efficient way is to use memoization:\n<code>", "    if n == 0\n\
    \        0\n    else if n == 1\n        1\n    else\n        fib(n - 1) + fib(n\
    \ - 2)\nend\n</cell>\n<code language=julia-1.0>\n@code_native fib(10)\n</cell>\n\
    <code language=julia-1.0>\n@code_native fib(1)\n</cell>\n<code language=julia-1.0>\n\
    @code_native fib(8)\n</cell>\n<text>\nExercise 3\nWrite a function that computes\
    \ the n-th Fibonacci number using recursion.", "    if n == 0 || n == 1 \n   \
    \     then return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that calculates the n-th Fibonacci number using recursion.", "    if n == 0\n\
    \        0\n    else\n        fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| c |>\nThis code does not work. `fib` returns `Int64` but `fib(n-1) +\
    \ fib(n-2)` returns `Int`.\n<|/ c |>\n<| c |>\nThanks, I fixed the code. Now it\
    \ works.\n<|/ c |>\n<| a dscore=3 |>\n<code>", "    if n < 2 \n        then return\
    \ n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec(n::Int64)::Int64\
    \ that returns the nth Fibonacci number.", "    if n < 2\n        1\n    else\n\
    \        fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.", "    if n < 2 \n        then return\
    \ n\n    else \n        return fib(n-2) + fib(n-1)\nend\n</cell>\n<code language=julia-1.1>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec(n::Int64)::Int64\
    \ that returns the n-th Fibonacci number.", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ the n-th Fibonacci number using the recursive formula.", "    if n == 0 || n\
    \ == 1 \n        return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n\
    </cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise 3\n\
    Write a recursive function named fib_r(n::Int64) that returns the nth Fibonacci\
    \ number.", "    if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\n\
    end\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a recursive function fib_rec that computes the n-th Fibonacci number.",
  "    if n == 0\n        0\n    else\n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a function\
    \ that calculates the n-th Fibonacci number using memoization.", "    if n<2 \n\
    \        then return n\n        else return fib(n-1)+fib(n-2)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>", "    if n == 0\n        0\n    elseif n ==\
    \ 1\n        1\n    else\n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"", "    if n\
    \ < 2 \n        then return n\n    else \n        return fib(n-2) + fib(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a Julia function that computes the Fibonacci series up to $n$. \nThe\
    \ function should take $n$ as an argument. \nThe function should return the $n$th\
    \ Fibonacci number.", "    if n < 2\n    then 1\n    else fib(n-2) + fib(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a recursive function fib_r(n::Int64)::Int64 that returns the nth Fibonacci\
    \ number using recursion.", "    if n < 2 \n        then return n\n        else\
    \ return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ n-th Fibonacci number using memoization.", "    if n < 2\n        1\n    else\n\
    \        fib(n-2) + fib(n-1)\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ n <= 1 \n        then return n\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a dscore=3 |>\n\
    The Fibonacci sequence is defined as:\n<code>\nF(n) = F(n-1) + F(n-2)\n</code>\n\
    In Julia, this can be written as:\n<code>", "    if n == 0 || n == 1 \n      \
    \  then return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>", "    if n == 0 \n        then return 0\n\
    \    else if n == 1 \n        then return 1\n    else \n        fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that calculates the\
    \ n-th Fibonacci number using recursion.", "    if n < 2 \n        then return\
    \ n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<text>\n\
    The Fibonacci sequence is defined by the recurrence relation:", "    if n == 0\
    \ || n == 1 \n        return n\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5", "    if n == 0 then return 1\n\
    \    if n == 1 then return 1\n    return fib(n - 1) + fib(n - 2)\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia,fibonacci |>\n<code>", "    if n < 2 \n   \
    \     then return n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that computes the n-th Fibonacci number using recursion.", "    if\
    \ n < 0 \n        error(\"fib expects non-negative integer\")\n    else if n ==\
    \ 0 \n        1\n    else \n        fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert fib(10) == 55\n@assert fib(0) == 1\n@assert fib(8) == 21\n</cell>\n<text>\n\
    Exercise: Write a function that returns the n-th Fibonacci number modulo m.",
  "    if n == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise\nWrite a recursive function named fib_r(n::Int64) that returns\
    \ the n-th Fibonacci number.", "    if n < 2\n        1\n    else\n        fib(n-1)\
    \ + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a tags=julia,fibonacci\
    \ |>\n<code>", "    if n<2\n    then return 1\n    else return fib(n-1)+fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the n-th Fibonacci number using recursion.",
  "    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ Fibonacci number of the given number $n$, starting from $0$.", "    if n < 2\n\
    \        1\n    else\n        fib(n-1) + fib(n-2)\n    end\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis is not the most efficient solution, since it requires\
    \ O(n) space to store the results. A more efficient solution would use an array.\
    \ Also, `fib(n-1) + fib(n-2)` can be replaced with `fib(n-1) + fib(n-2)`.\n<|/\
    \ c |>\n<| c |>\nThe question was about how to implement the Fibonacci function\
    \ in Julia. Your solution does not use any arrays. Also, your solution does not\
    \ use recursion.\n<|/ c |>\n<| c |>\nThe question was about how to implement the\
    \ Fibonacci function in Julia. Your solution does not use any arrays. Also, your\
    \ solution does not use recursion.\n<|/ c |>\n<| c |>\nThe question was about\
    \ how to implement the Fibonacci function in Julia. Your solution does not use\
    \ any arrays. Also, your solution does not use recursion.\n<|/ c |>\n<| c |>\n\
    The question was about how to implement the Fibonacci function in Julia. Your\
    \ solution does not use any arrays. Also, your solution does not use recursion.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "    if n<2 then return n\n    else return\
    \ fib(n-1)+fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise\n\
    Write a function that calculates the n-th Fibonacci number using memoization.",
  "    if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=julia,fibonacci |>\n<code>", "    if n < 2 \n   \
    \     then return n\n        else return fib(n-2) + fib(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a recursive\
    \ function fib_rec that returns the n-th Fibonacci number.", "    if n < 2 \n\
    \        then return n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 3\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.", "    if n < 2\n        1\n    else\n\
    \        fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<|\
    \ c |>\nThis is not the most efficient solution. `fib(n)` can be calculated with\
    \ `fib(n-1)` and `fib(n-2)` only once.\n<|/ c |>\n<| c |>\nI agree, this is just\
    \ an example to show how to implement the Fibonacci function with recursion.\n\
    <|/ c |>\n<| c |>\nI agree, this is just an example to show how to implement the\
    \ Fibonacci function with recursion.\n<|/ c |>\n<| a dscore=3 |>\n<code>", " \
    \   if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise: Write a recursive function fib_rec(n::Int64)::Int64 that returns the\
    \ n-th Fibonacci number.", "    if n < 2 \n        then return n\n        else\
    \ return fib(n-1) + fib(n-2)\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=fibonacci,julia\
    \ |>\nI wrote a package for Fibonacci numbers in Julia. \n<code>\nusing Fibonacci",
  "    if n < 2 \n        then return n\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5", "    if n < 2 \n        then return\
    \ n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise: Write a recursive function fib_r(n::Int64) that returns the nth Fibonacci\
    \ number.", "    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\n\
    end\n</code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\nThis is not the most efficient\
    \ way to calculate Fibonacci numbers. It is O(n^2) in complexity. Here is a better\
    \ way: https://stackoverflow.com/a/46634829/12695027\n<|/ c |>\n<| a tags=julia,fibonacci\
    \ |>\n<code>", "    if n == 0 || n == 1 \n        then return n\n    else \n \
    \       return fib(n-1) + fib(n-2)\nend\n</cell>\n<text>\nThe Fibonacci sequence\
    \ is defined by the recurrence relation:", "    if n < 2 \n        then return\
    \ n\n    else \n        return fib(n-2) + fib(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise 3\nWrite a recursive\
    \ function named fib_r(n::Int64) that returns the nth Fibonacci number.", "  \
    \  if n < 2\n    then return 1\n    else return fib(n-2) + fib(n-1)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| c |>\nThis does not answer the question. The\
    \ question is asking how to implement the Fibonacci function using recursion.\n\
    <|/ c |>\n<| c |>\nThe question was how to implement the Fibonacci function using\
    \ recursion. My answer does exactly that. Did you read the question?\n<|/ c |>\n\
    <| c |>\nThe question is asking how to implement the Fibonacci function using\
    \ recursion. Your answer does not do that. Your answer does not use recursion.\n\
    <|/ c |>\n<| c |>\nThe question was how to implement the Fibonacci function using\
    \ recursion. My answer does exactly that. Did you read the question?\n<|/ c |>\n\
    <| c |>\nThe question was how to implement the Fibonacci function using recursion.\
    \ My answer does exactly that. Did you read the question?\n<|/ c |>\n<| a tags=julia,fibonacci\
    \ |>\n<code>", "    if n <= 1 \n        then 1 \n        else fib(n-1) + fib(n-2)\
    \ \nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nIn Julia 1.1, you can use\
    \ the Fibonacci function from the Itertools package:\n<code>\nusing Itertools\n\
    fibonacci(10)\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a tags=julia,fibonacci\
    \ |>\n<code>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
