language: jl
name: HumanEval_40_triples_sum_to_zero
results:
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = true\n    triples_sum_to_zero[2]\
    \ = true\n    triples_sum_to_zero[3] = true\n    \n    for x in l\n        if\
    \ triples_sum_to_zero[x] == true\n            triples_sum_to_zero[x+3] = true\n\
    \        end\n    end\n    \n    return triples_sum_to_zero\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers as an input, and\
    \ returns true if the vector contains three distinct elements that sum to zero,\
    \ and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqixtwi5z.jl:32\nin expression starting at\
    \ /tmp/tmpqixtwi5z.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n    end\n    \n    if sum == 0 \n   \
    \     return false\n    end\n    \n    sum = 0\n    for i in l\n        sum +=\
    \ i\n    end\n    \n    if sum == 0 \n        return false\n    end\n    \n  \
    \  sum = 0\n    for i in l\n        sum += i\n    end\n    \n    if sum == 0 \n\
    \        return false\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0]) == false\n@test triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@test triples_sum_to_zero([1, 2, 3, 7]) == false\n@test\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@test triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function called triples_sum_to_zero\
    \ that takes a vector of integers as an input.\nIt returns true if there are three\
    \ distinct elements in the vector that sum to zero, and false otherwise.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9d791lr_.jl:48\nin expression starting at\
    \ /tmp/tmp9d791lr_.jl:48\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for x in l\n        sum += x\n        if sum == 0 \n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0])\n@test triples_sum_to_zero([1, 3, -2,\
    \ 1])\n@test triples_sum_to_zero([1, 2, 3, 7])\n@test triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n@test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers as an input, and returns\
    \ true if the vector has all positive integers, and false otherwise.\nusing Test\n\
    \n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3,\
    \ 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5s2n86iu.jl:28\nin expression starting at\
    \ /tmp/tmp5s2n86iu.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpp8zjds9g.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp8zjds9g.jl:1\n\
    in expression starting at /tmp/tmpp8zjds9g.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n\
    <text>\nExercise 3\nWrite a function called triples_sum_to_zero that takes a vector\
    \ of integers as an input.\nIt returns true if there are three distinct elements\
    \ in the vector that sum to zero, and false otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) ==\
    \ false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3,\
    \ -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjad3uxxm.jl:20\nin expression starting at\
    \ /tmp/tmpjad3uxxm.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum > 0\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function called triples_sum_to_zero that takes an array of integers as an\
    \ input, and returns true if there are three distinct elements in the array that\
    \ sum to zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjordaxo4.jl:27\nin expression starting at\
    \ /tmp/tmpjordaxo4.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n    it\
    \ returns true if there are three distinct elements in the vector that\n    sum\
    \ to zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpudvrp12t.jl:27\nin expression starting at\
    \ /tmp/tmpudvrp12t.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = sum([triples_sum_to_zero(triple) for triple in l])\n    triples_sum_to_zero\
    \ < 3\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers as an input,\
    \ and returns true if the vector contains exactly three distinct elements that\
    \ sum to zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmzrin5fv.jl:21\nin expression starting at\
    \ /tmp/tmpmzrin5fv.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0 \n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers as an input, and returns\
    \ a vector of booleans indicating whether each of the integers in the vector is\
    \ positive, negative or zero.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3a04wqkk.jl:28\nin expression starting at\
    \ /tmp/tmp3a04wqkk.jl:28\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\n4.3 The function is_power_of_two\nWrite a function\
    \ that checks if a number is a power of two. Your function should take one number\
    \ as an input.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpot6hbti4.jl:27\nin expression starting at\
    \ /tmp/tmpot6hbti4.jl:27\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    \n    for x in l\n        if triples_sum_to_zero[x]\
    \ == 1\n            return true\n        end\n    end\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1, 3, 5, 0])\
    \ == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert triples_sum_to_zero([1,\
    \ 2, 3, 7]) == false\n@assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n\
    @assert triples_sum_to_zero([1]) == false\n</cell>\n<text>\nProblem 7: Write a\
    \ function that takes an array of integers and returns an array of integers such\
    \ that each element of the new array is equal to the sum of the three previous\
    \ elements in the original array. For example, if the input array is [10, 5, 1,\
    \ 3, 6, 4, 2], the output array should be [10, 15, 1, 18, 6, 24, 2].\nusing Test\n\
    \n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3,\
    \ 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzp91kmjb.jl:31\nin expression starting at\
    \ /tmp/tmpzp91kmjb.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1,3,5,0])\n@test triples_sum_to_zero([1,3,-2,1])\n\
    @test triples_sum_to_zero([1,2,3,7])\n@test triples_sum_to_zero([2,4,-5,3,9,7])\n\
    @test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector of integers as an input, and returns true if there are three\
    \ distinct elements in the vector that sum to zero, and false otherwise.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppcc2r8t_.jl:27\nin expression starting at\
    \ /tmp/tmppcc2r8t_.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum > 0\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n    it\
    \ returns true if there are three distinct elements in the vector that\n    sum\
    \ to zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphoxprwt5.jl:27\nin expression starting at\
    \ /tmp/tmphoxprwt5.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for x in l\n        sum += x\n        if sum == 0 \n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\n4.5 Write a function that takes an array of integers\
    \ and returns an array of integers where the integers are the multiples of 3 or\
    \ 5 that come before the first 3 or 5 integers in the array. For example, if the\
    \ array is [3, 6, 9, 12, 15], the function should return [3, 6, 9, 12].\nusing\
    \ Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa5d_yr1z.jl:28\nin expression starting at\
    \ /tmp/tmpa5d_yr1z.jl:28\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = l .== 0 .|| l .== -3 .|| l .== -6 .|| l .== -9 \n    return triples_sum_to_zero\
    \ \nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for x in l\n        sum += x\n        if sum == 0\n            return\
    \ true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  triples_sum_to_zero takes a vector of integers as an input.\n    it returns\
    \ true if there are three distinct elements in the vector that\n    sum to zero,\
    \ and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpks08z70x.jl:26\nin expression starting at\
    \ /tmp/tmpks08z70x.jl:26\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples\
    \ = Vector{Int64}()\n    for i in l\n        if triples.length == 0 || triples[end]\
    \ == i\n            triples.push(i)\n        elseif triples[end] == i\n      \
    \      triples[end] = triples[end - 1]\n        else\n            triples[end]\
    \ = i\n        end\n    end\n    triples_sum_to_zero(triples)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3,\
    \ 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp5nkcmwqr.jl:35\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  type Array has no
    field length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]
    triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmp5nkcmwqr.jl:20\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5nkcmwqr.jl:35 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5nkcmwqr.jl:34\ntest set: Error
    During Test at /tmp/tmp5nkcmwqr.jl:36\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  type Array has no field length\n  Stacktrace:\n   [1] getproperty\n     @
    ./Base.jl:42 [inlined]\n   [2] triples_sum_to_zero(l::Vector{Int64})\n     @ Main
    /tmp/tmp5nkcmwqr.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5nkcmwqr.jl:36 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5nkcmwqr.jl:34\ntest set: Error
    During Test at /tmp/tmp5nkcmwqr.jl:37\n  Test threw exception\n  Expression: candidate([1,
    3, -2, 1]) == true\n  type Array has no field length\n  Stacktrace:\n   [1] getproperty\n     @
    ./Base.jl:42 [inlined]\n   [2] triples_sum_to_zero(l::Vector{Int64})\n     @ Main
    /tmp/tmp5nkcmwqr.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5nkcmwqr.jl:37 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5nkcmwqr.jl:34\ntest set: Error
    During Test at /tmp/tmp5nkcmwqr.jl:38\n  Test thr'
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n    it\
    \ returns true if there are three distinct elements in the vector that\n    sum\
    \ to zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpudvrp12t.jl:27\nin expression starting at\
    \ /tmp/tmpudvrp12t.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers as an input, and returns true if there are three distinct\
    \ elements in the vector that sum to zero, and false otherwise.\nusing Test\n\n\
    @testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5,\
    \ 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3jo1i0wv.jl:25\nin expression starting at\
    \ /tmp/tmp3jo1i0wv.jl:25\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l)\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes\
    \ a vector of integers as an input.\n    it returns true if there are three distinct\
    \ elements in the vector that\n    sum to zero, and false otherwise.\nusing Test\n\
    \n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3,\
    \ 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpezxaq2hj.jl:20\nin expression starting at\
    \ /tmp/tmpezxaq2hj.jl:20\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l |> filter(x->x==0 || x==-3 || x==-7, l) |> length==3\n    return triples_sum_to_zero\n\
    end\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(vec(1:10000));\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ as an input, and returns true if the vector contains three distinct elements\
    \ that sum to zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: ArgumentError: Invalid use of @view macro: argument must\
    \ be a reference expression A[...].\nStacktrace:\n [1] var\"@view\"(__source__::LineNumberNode,\
    \ __module__::Module, ex::Any)\n   @ Base ./views.jl:136\n [2] #macroexpand#51\n\
    \   @ ./expr.jl:115 [inlined]\n [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n\
    \ [4] docm(source::LineNumberNode, mod::Module, meta::Any, ex::Any, define::Bool)\
    \ (repeats 2 times)\n   @ Base.Docs ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any})\n   @ Core ./boot.jl:517\nin expression starting\
    \ at /tmp/tmpc7fcbu71.jl:1\nin expression starting at /tmp/tmpc7fcbu71.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    \n    for i = 1:length(l)\n        if l[i] > 0 && l[i]\
    \ < 3 && l[i] + l[i+1] + l[i+2] < 0\n            triples_sum_to_zero[i] = true\n\
    \        end\n    end\n    \n    return !any(triples_sum_to_zero)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time triples_sum_to_zero(vec(1:100000));\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector of integers as an input\
    \ and returns a vector of booleans indicating whether each element in the vector\
    \ is odd.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf8k2vxlf.jl:29\nin expression starting at\
    \ /tmp/tmpf8k2vxlf.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum > 0\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers as an input, and returns\
    \ true if there are three distinct elements in the vector that sum to zero, and\
    \ false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0a_xrl5_.jl:28\nin expression starting at\
    \ /tmp/tmp0a_xrl5_.jl:28\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0 \n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns true if the vector has exactly three distinct elements\
    \ that sum to zero.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph7mvwxg9.jl:28\nin expression starting at\
    \ /tmp/tmph7mvwxg9.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    triples_sum_to_zero\
    \ = false\n    \n    triples_sum_to_zero = triples_sum_to_zero or l[1]==0 or l[2]==0\
    \ or l[3]==0\n    triples_sum_to_zero = triples_sum_to_zero or l[1]==l[2] or l[1]==l[3]\
    \ or l[2]==l[3]\n    triples_sum_to_zero = triples_sum_to_zero or l[1]==l[2] or\
    \ l[1]==l[3] or l[2]==l[3] or l[1]==l[3] or l[2]==l[3]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero or l[1]==l[2] or l[1]==l[3] or l[2]==l[3] or l[1]==l[3]\
    \ or l[2]==l[3]\n    triples_sum_to_zero = triples_sum_to_zero or l[1]==l[2] or\
    \ l[1]==l[3] or l[2]==l[3] or l[1]==l[3] or l[2]==l[3]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero or l[1]==l[2] or l[1]==l[3] or l[2]==l[3] or l[1]==l[3]\
    \ or l[2]==l[3]\n    triples_sum_to_zero = triples_sum_to_zero or l[1]==l[2] or\
    \ l[1]==l[3] or l[2]==l[3] or l[1]==l[3] or l[2]==l[3]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero or l[1]==l[2] or l[1]==l[3] or l[2]==l[3] or l[1]==l[3]\
    \ or l[2]==l[3]\n    triples_sum_to_zero = triples_sum_to_zero or l[1]==l[2] or\
    \ l[1]==l[3] or l[2]==l[3] or l[1]==l[3] or l[2]==l[3]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero or l[1]==l[2] or l[1]==l[3] or l[2]==l[3] or l[1]==l[3]\
    \ or l[2]==l[3]\n    triples_sum_to_zero = triples_sum_to_zero or l[1]==l[2] or\
    \ l[1]==l[3] or l[2]==l[3] or l[1]==l[3] or l[2]==l[3]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero or l[1]==l[2] or l[1]==l[3] or l[2]==l[3] or l[1]==l[3]\
    \ or l[2]==l[3]\n    triples_sum_to_zero = triples_sum_to_zero or \nusing Test\n\
    \n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3,\
    \ 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpaf4g6c_5.jl:17 expected\
    \ \"end\", got \"or\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaf4g6c_5.jl:21\n\
    in expression starting at /tmp/tmpaf4g6c_5.jl:21\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \    return false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers as an input, and returns true if there are three distinct\
    \ elements in the vector that sum to zero, and false otherwise.\nusing Test\n\n\
    @testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5,\
    \ 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprxzwd_8r.jl:25\nin expression starting at\
    \ /tmp/tmprxzwd_8r.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l |> filter((x) -> x == 0, \n        reduce(+, \n            map(x ->\
    \ x == 0 ? x : x - 1, \n                filter(x -> x == 0, \n               \
    \     reduce(+, \n                        map(x -> x == 0 ? x : x - 1, \n    \
    \                        filter(x -> x == 0, \n                              \
    \  reduce(+, \n                                    map(x -> x == 0 ? x : x - 1,\
    \ \n                                        filter(x -> x == 0, \n           \
    \                                 reduce(+, \n                               \
    \                 map(x -> x == 0 ? x : x - 1, \n                            \
    \                        filter(x -> x == 0, \n                              \
    \                          reduce(+, \n                                      \
    \                      map(x -> x == 0 ? x : x - 1, \n                       \
    \                                         filter(x -> x == 0, \n             \
    \                                                       reduce(+, \n         \
    \                                                               map(x -> x ==\
    \ 0 ? x : x - 1, \n                                                          \
    \                  filter(x -> x == 0, \n                                    \
    \                                            reduce(+, \n                    \
    \                                                                map(x -> x ==\
    \ 0 ? x : x - 1, \n                                                          \
    \                              filter(x -> x == 0, \n                        \
    \                                                                    reduce(+,\
    \ \n                                                                         \
    \                       map(x -> x == 0 ? x : x - 1, \n                      \
    \                                                                            \
    \  filter(x -> x == 0, \n                                                    \
    \                                                    reduce(+, \n            \
    \                                                                            \
    \                    map(x -> x == 0 ? x : x - 1, \n                         \
    \                                                                            \
    \           filter(x -> x == 0, \n                                           \
    \                                                                         reduce(+,\
    \ \n                                                                         \
    \                                               map(x -> x == 0 ? x : x - 1, \n\
    \                                                                            \
    \                                                filter(x -> x == 0, \n      \
    \                                                                            \
    \                                              reduce(+, \n                  \
    \                                                                            \
    \                                      map(x -> x == 0 ? x : x - 1, \n       \
    \                                                                            \
    \                                                     filter(x -> x == 0, \n \
    \                                                                            \
    \                                                               reduce(+, \n \
    \                                                                            \
    \                                                                   map(x -> x\
    \ == 0 ? x : x - 1, \n                                                       \
    \                                                                            \
    \                 filter(x -> x == 0, \n                                     \
    \                                                                            \
    \                                       reduce(+, \n                         \
    \                                                                            \
    \                                                       map(x -> x == 0 ? x :\
    \ x - 1, \n                                                                  \
    \                                                                            \
    \                  filter(x -> x == 0, \n                                    \
    \                                                                            \
    \                                                    reduce(+, \n            \
    \                                                                            \
    \                                                                            \
    \    map(x -> x == 0 ? x : x - 1, \n                                         \
    \                                                                            \
    \                                                       filter(x -> x == 0, \n\
    \                                                                            \
    \                                                                            \
    \                        reduce(+, \n                                        \
    \                                                                            \
    \                                                                map(x -> x ==\
    \ 0 ? x : x - 1, \n                                                          \
    \                                                                            \
    \                                                  filter(x -> x == 0, \n    \
    \                                                                            \
    \                                                                            \
    \                                reduce(+, \n                                \
    \                                                                            \
    \                                                                            \
    \        map(x -> x == 0 ? x : x - 1, \n                                     \
    \                                                                            \
    \                                                                            \
    \   filter(x -> x == 0, \n                                                   \
    \                                                                            \
    \                                                                     reduce(+,\
    \ \n                                                                         \
    \                                                                            \
    \                                                   map(x -> x == 0 ? x : x -\
    \ 1, \n                                                                      \
    \                                                                            \
    \                                                          filter(x -> x == 0,\
    \ \n                                                                         \
    \                                                                            \
    \                                                           reduce(+, \n     \
    \                                                                            \
    \                                                                            \
    \                                                       map(x -> x == 0 ? x :\
    \ x - 1, \n                                                                  \
    \                                                                            \
    \                                                                          filter(x\
    \ -> x == 0, \n                                                              \
    \                                                                            \
    \                                                                            \
    \      reduce(+, \n                                                          \
    \                                                                            \
    \                                                                            \
    \              map(x -> x == 0 ? x : x - 1, \n                               \
    \                                                                            \
    \                                                                            \
    \                                             filter(x -> x == \nusing Test\n\n\
    @testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5,\
    \ 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpei46zta1.jl:78\nin expression starting at\
    \ /tmp/tmpei46zta1.jl:78\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a vector of integers as an input.\n    it returns true if there are three\
    \ distinct elements in the vector that\n    sum to zero, and false otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplurebo5c.jl:25\nin expression starting at\
    \ /tmp/tmplurebo5c.jl:25\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers as an input, and returns true if the vector contains three distinct\
    \ elements that sum to zero, and false otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\
    \t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe6cm9wrq.jl:20\nin expression starting at\
    \ /tmp/tmpe6cm9wrq.jl:20\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t\
    @test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpahjzby0e.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpahjzby0e.jl:34\n  Expression: candidate([1,\
    \ 3, -2, 1]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahjzby0e.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahjzby0e.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpahjzby0e.jl:37\n  Expression: candidate([2, 4, -5, 3, 9, 7])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpahjzby0e.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahjzby0e.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n    it\
    \ returns true if there are three distinct elements in the vector that\n    sum\
    \ to zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpudvrp12t.jl:27\nin expression starting at\
    \ /tmp/tmpudvrp12t.jl:27\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l .== 0 .* @view l .== 0 .* @view l .== 0\n    return sum(triples_sum_to_zero)\
    \ == 3\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(vec(1:1000000));\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an array of integers\
    \ and returns an array of integers such that each element in the new array is\
    \ equal to the product of all the numbers in the original array except the one\
    \ that it is currently on.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: ArgumentError: Invalid use of @view macro: argument must\
    \ be a reference expression A[...].\nStacktrace:\n [1] var\"@view\"(__source__::LineNumberNode,\
    \ __module__::Module, ex::Any)\n   @ Base ./views.jl:136\n [2] #macroexpand#51\n\
    \   @ ./expr.jl:115 [inlined]\n [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n\
    \ [4] docm(source::LineNumberNode, mod::Module, meta::Any, ex::Any, define::Bool)\
    \ (repeats 2 times)\n   @ Base.Docs ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any})\n   @ Core ./boot.jl:517\nin expression starting\
    \ at /tmp/tmpa_qgpa_z.jl:1\nin expression starting at /tmp/tmpa_qgpa_z.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for x in l\n        sum += x\n        if sum == 0\n            return true\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp5osfnfr6.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5osfnfr6.jl:1\n\
    in expression starting at /tmp/tmp5osfnfr6.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples\
    \ = zeros(Int64, 3)\n    for el in l\n        triples[el] += 1\n        if triples[el]\
    \ == 3\n            return true\n        end\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpgu8o_g9o.jl:32\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  BoundsError: attempt
    to access 3-element Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n     @
    ./array.jl:861 [inlined]\n   [2] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpgu8o_g9o.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgu8o_g9o.jl:32 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgu8o_g9o.jl:31\ntest set: Error
    During Test at /tmp/tmpgu8o_g9o.jl:33\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  BoundsError: attempt to access 3-element Vector{Int64}
    at index [5]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpgu8o_g9o.jl:20\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgu8o_g9o.jl:33 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgu8o_g9o.jl:31\ntest set: Error
    During Test at /tmp/tmpgu8o_g9o.jl:34\n  Test threw exception\n  Expression: candidate([1,
    3, -2, 1]) == true\n  BoundsError: attempt to access 3-element Vector{Int64} at
    index [-2]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpgu8o_g9o.jl:20\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgu8o_g9o.jl:34 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-'
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns true if there are three distinct elements in the vector\
    \ that sum to zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8jkpzlma.jl:20\nin expression starting at\
    \ /tmp/tmp8jkpzlma.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n@doc\
    \ triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code\
    \ language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n@doc\
    \ triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code\
    \ language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n@doc\
    \ triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code\
    \ language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n@doc\
    \ triples_sum_to_zero([1,2,-3,4])\n</\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpztzbaszd.jl:20\nin expression starting at\
    \ /tmp/tmpztzbaszd.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n    it\
    \ returns true if there are three distinct elements in the vector that\n    sum\
    \ to zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppqh02mi9.jl:27\nin expression starting at\
    \ /tmp/tmppqh02mi9.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = true\n    triples_sum_to_zero[2]\
    \ = true\n    triples_sum_to_zero[3] = true\n    triples_sum_to_zero = triples_sum_to_zero[l\
    \ .- 1]\n    return triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n    it\
    \ returns true if there are three distinct elements in the vector that\n    sum\
    \ to zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiqr_5xal.jl:25\nin expression starting at\
    \ /tmp/tmpiqr_5xal.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0\n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n    it\
    \ returns true if there are three distinct elements in the vector that\n    sum\
    \ to zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw0xmyk69.jl:28\nin expression starting at\
    \ /tmp/tmpw0xmyk69.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    triples_sum_to_zero = triples_sum_to_zero\
    \ + l\n    triples_sum_to_zero = triples_sum_to_zero .== 0\n    return triples_sum_to_zero[1]\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    triples_sum_to_zero takes\
    \ a vector of integers as an input.\n    it returns true if there are three distinct\
    \ elements in the vector that\n    sum to zero, and false otherwise.\nusing Test\n\
    \n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3,\
    \ 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiktai5e5.jl:26\nin expression starting at\
    \ /tmp/tmpiktai5e5.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a vector of integers as an input, and returns true if\
    \ there are three distinct elements in the vector that sum to zero, and false\
    \ otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr7v2_2e8.jl:27\nin expression starting at\
    \ /tmp/tmpr7v2_2e8.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8css8f0v.jl:20\nin expression starting at\
    \ /tmp/tmp8css8f0v.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers as an input, and returns true if\
    \ there are three distinct elements in the vector that sum to zero, and false\
    \ otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ruquv3x.jl:27\nin expression starting at\
    \ /tmp/tmp4ruquv3x.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples\
    \ = Vector{Int64}()\n    for i in l\n        triples.push(i)\n    end\n    triples_sum_to_zero(triples)\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7y99j56.jl:24\nin expression starting at\
    \ /tmp/tmps7y99j56.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    triples_sum_to_zero\
    \ = false\n    \n    for x in l\n        if x != 0\n            if x != l[1]\n\
    \                if x != l[2]\n                    if x != l[3]\n            \
    \            if x != l[4]\n                            if x != l[5]\n        \
    \                        if x != l[6]\n                                    if\
    \ x != l[7]\n                                        if x != l[8]\n          \
    \                                  if x != l[9]\n                            \
    \                    if x != l[10]\n                                         \
    \           if x != l[11]\n                                                  \
    \      if x != l[12]\n                                                       \
    \     if x != l[13]\n                                                if x != l[14]\n\
    \                                                    if x != l[15]\n         \
    \                                               if x != l[16]\n              \
    \                                              if x != l[17]\n               \
    \                                 if x != l[18]\n                            \
    \                        if x != l[19]\n                                     \
    \                   if x != l[20]\n                                          \
    \                  if x != l[21]\n                                           \
    \     if x != l[22]\n                                                    if x\
    \ != l[23]\n                                                        if x != l[24]\n\
    \                                                            if x != l[25]\n \
    \                                               if x != l[26]\n              \
    \                                      if x != l[27]\n                       \
    \                                 if x != l[28]\n                            \
    \                                if x != l[29]\n                             \
    \                   if x != l[30]\n                                          \
    \          if x != l[31]\n                                                   \
    \     if x != l[32]\n                                                        \
    \    if x != l[33]\n                                                if x != l[34]\n\
    \                                                    if x != l[35]\n         \
    \                                               if x != l[36]\n              \
    \                                              if x != l[37]\n               \
    \                                 if x != l[38]\n                            \
    \                        if x != l[39]\n                                     \
    \                   if x != l[40]\n                                          \
    \                  if x != l[41]\n                                           \
    \     if x != l[42]\n                                                    if x\
    \ != l[43]\n                                                        if x != l[44]\n\
    \                                                            if x != l[45]\n \
    \                                               if x != l[46]\n              \
    \                                      if x != l[47]\n                       \
    \                                 if x != l[48]\n                            \
    \                                if x != l[49]\n                             \
    \                   if x != l[50]\n                                          \
    \          if x != l[51]\n                                                   \
    \     if x != l[52]\n                                                        \
    \    if x != l[53]\n                                                if x != l[54]\n\
    \                                                    if x != l[55]\n         \
    \                                               if x != l[56]\n              \
    \                                              if x != l[57]\n               \
    \                                 if x != l[58]\n\nusing Test\n\n@testset begin\n\
    \ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\
    \t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjtxwbj_a.jl:1\nin expression starting at /tmp/tmpjtxwbj_a.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    \n    for i in 1:length(l)\n      \
    \  if triples_sum_to_zero[i] == 1\n            if l[i] == 0 || l[i] == -1\n  \
    \              return false\n            else\n                triples_sum_to_zero[i]\
    \ = 0\n            end\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    triples_sum_to_zero takes a vector of integers\
    \ as an input.\n    it returns true if there are three distinct elements in the\
    \ vector that\n    sum to zero, and false otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\
    \t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkpkpauq5.jl:35\nin expression starting at\
    \ /tmp/tmpkpkpauq5.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples\
    \ = Vector{Int64}()\n    for i in l\n        triples.push(i)\n    end\n    triples_sum_to_zero(triples)\n\
    end\n</cell>\n<code language=julia-1.3>\n@time triples_sum_to_zero(1:100000);\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ as an input, and returns true if the vector contains three distinct elements\
    \ that sum to zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvkf82agb.jl:24\nin expression starting at\
    \ /tmp/tmpvkf82agb.jl:24\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = sum([triples_sum_to_zero(triple) for triple in l])\n    triples_sum_to_zero\
    \ == 0 \nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes as input a vector of integers\
    \ and returns true if the vector contains exactly three distinct elements that\
    \ sum to zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzwwrqiv4.jl:21\nin expression starting at\
    \ /tmp/tmpzwwrqiv4.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.3>\n@doc triples_sum_to_zero\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers as an input,\
    \ and returns true if the vector contains three distinct elements that sum to\
    \ zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_f1xvuw8.jl:20\nin expression starting at\
    \ /tmp/tmp_f1xvuw8.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l |> Vector{Int64}\n    triples_sum_to_zero[triples_sum_to_zero == 0]\
    \ = true\n    triples_sum_to_zero[triples_sum_to_zero .== 1] = false\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 2] = false\n    triples_sum_to_zero[triples_sum_to_zero .== 3] = false\n\
    \    triples_sum_to_zero[triples_sum_to_zero .== 4] = false\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 5] = false\n    triples_sum_to_zero[triples_sum_to_zero .== 6] = false\n\
    \    triples_sum_to_zero[triples_sum_to_zero .== 7] = false\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 8] = false\n    triples_sum_to_zero[triples_sum_to_zero .== 9] = false\n\
    \    triples_sum_to_zero[triples_sum_to_zero .== 10] = false\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 11] = false\n    triples_sum_to_zero[triples_sum_to_zero .== 12] = false\n\
    \    triples_sum_to_zero[triples_sum_to_zero .== 13] = false\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 14] = false\n    triples_sum_to_zero[triples_sum_to_zero .== 15] = false\n\
    \    triples_sum_to_zero[triples_sum_to_zero .== 16] = false\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 17] = false\n    triples_sum_to_zero[triples_sum_to_zero .== 18] = false\n\
    \    triples_sum_to_zero[triples_sum_to_zero .== 19] = false\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 20] = false\n    triples_sum_to_zero[triples_sum_to_zero .== 21] = false\n\
    \    triples_sum_to_zero[triples_sum_to_zero .== 22] = false\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 23] = false\n    triples_sum_to_zero[triples_sum_to_zero .== 24] = false\n\
    \    triples_sum_to_zero[triples_sum_to_zero .== 25] = false\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 26] = false\n    triples_sum_to_zero[triples_sum_to_zero .\nusing Test\n\
    \n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3,\
    \ 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"triples_sum_to_zero\
    \ .\" at /tmp/tmpn0k43750.jl:46\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn0k43750.jl:46\n\
    in expression starting at /tmp/tmpn0k43750.jl:46\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = true\n    triples_sum_to_zero[2]\
    \ = true\n    triples_sum_to_zero[3] = true\n    for x in l\n        if triples_sum_to_zero[x]\
    \ == true\n            triples_sum_to_zero[x+3] = true\n        end\n    end\n\
    \    return triples_sum_to_zero[1] && triples_sum_to_zero[2] && triples_sum_to_zero[3]\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns an array of booleans indicating whether each of the integers is\
    \ a multiple of 3.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjxk8qgj4.jl:29\nin expression starting at\
    \ /tmp/tmpjxk8qgj4.jl:29\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t\
    @test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpahjzby0e.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpahjzby0e.jl:34\n  Expression: candidate([1,\
    \ 3, -2, 1]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahjzby0e.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahjzby0e.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpahjzby0e.jl:37\n  Expression: candidate([2, 4, -5, 3, 9, 7])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpahjzby0e.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahjzby0e.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples\
    \ = Vector{Int64}()\n    for x in l\n        if triples.length() == 0\n      \
    \      triples.push(x)\n        elseif triples.length() == 3\n            if triples.last()\
    \ == x\n                triples.pop()\n            else\n                triples.push(x)\n\
    \            end\n        else\n            if triples.last() == x\n         \
    \       triples.pop()\n            else\n                triples.push(x)\n   \
    \         end\n        end\n    end\n    return triples.length() == 0\nend\n</cell>\n\
    <code language=julia-1.5>\n@test triples_sum_to_zero([1, 3, 5, 0])\n@test triples_sum_to_zero([1,\
    \ 3, -2, 1])\n@test triples_sum_to_zero([1, 2, 3, 7])\n@test triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n@test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers as an input, and returns\
    \ true if the vector contains three distinct elements that sum to zero, and false\
    \ otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_f9dhbbq.jl:38\nin expression starting at\
    \ /tmp/tmp_f9dhbbq.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a vector of integers as an input, and returns true if\
    \ there are two distinct elements in the vector that sum to zero, and false otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbrc9bp_m.jl:27\nin expression starting at\
    \ /tmp/tmpbrc9bp_m.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n    it\
    \ returns true if there are three distinct elements in the vector that\n    sum\
    \ to zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpudvrp12t.jl:27\nin expression starting at\
    \ /tmp/tmpudvrp12t.jl:27\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    l\
    \ = sort(l)\n    \n    if length(l) == 3\n        \n        if l[1] == l[2]\n\
    \            \n            if l[1] == 0\n                \n                return\
    \ true\n            else\n                \n                return false\n   \
    \         end\n        else\n            \n            return true\n        end\n\
    \    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\
    \"\n    triples_sum_to_zero takes a vector of integers as an input.\n    it returns\
    \ true if there are three distinct elements in the vector that\n    sum to zero,\
    \ and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr5d2naub.jl:40\nin expression starting at\
    \ /tmp/tmpr5d2naub.jl:40\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum > 0\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an array of integers and returns an array of integers\
    \ where the integers are the multiples of 3 or 5 that sum to zero.\nusing Test\n\
    \n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3,\
    \ 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp84rn2q6c.jl:27\nin expression starting at\
    \ /tmp/tmp84rn2q6c.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        sum -= i\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\n4.3 Exercise: Write a function that takes an array\
    \ of integers and returns the number of distinct elements that sum to zero.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe_9uj8w9.jl:27\nin expression starting at\
    \ /tmp/tmpe_9uj8w9.jl:27\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = false \n    for x in l \n        if x == 0 \n            triples_sum_to_zero\
    \ = true \n            break \n        triples_sum_to_zero = false \n        for\
    \ y in l \n            if y == 0 \n                triples_sum_to_zero = true\
    \ \n                break \n                \n    return triples_sum_to_zero \n\
    end \nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp6wubjjg1.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6wubjjg1.jl:1\n\
    in expression starting at /tmp/tmp6wubjjg1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum > 0\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0])\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, -2, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 2, 3, 7])\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes as input a vector of integers and returns true if there are three\
    \ distinct elements in the vector that sum to zero, and false otherwise.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd34eq0vf.jl:28\nin expression starting at\
    \ /tmp/tmpd34eq0vf.jl:28\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    triples_sum_to_zero\
    \ = false\n    \n    for x in l\n        if x == 0\n            triples_sum_to_zero\
    \ = true\n            break\n        elseif x == 1\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 2\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 3\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 4\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 5\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 6\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 7\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 8\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 9\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 10\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 11\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 12\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 13\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 14\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 15\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 16\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 17\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 18\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 19\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 20\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 21\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 22\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 23\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 24\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 25\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 26\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 27\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 28\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 29\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 30\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 31\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif x == 32\n            triples_sum_to_zero\
    \ = false\n            break\n        elseif \nusing Test\n\n@testset begin\n\n\
    candidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t\
    @test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing condition in \"elseif\" at /tmp/tmpaem8lnsc.jl:121\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpaem8lnsc.jl:122\nin expression\
    \ starting at /tmp/tmpaem8lnsc.jl:122\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0])\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, -2, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 2, 3, 7])\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes as input a vector of integers and returns true if the vector contains\
    \ three distinct elements that sum to zero, and false otherwise.\nusing Test\n\
    \n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3,\
    \ 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxvcrypnd.jl:27\nin expression starting at\
    \ /tmp/tmpxvcrypnd.jl:27\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples\
    \ = Vector{Int64}()\n    triples_sum_to_zero(triples, l)\n    return length(triples)\
    \ == 3\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpz236rzn3.jl:27\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates
    are:\n    triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpz236rzn3.jl:17\n  Stacktrace:\n   [1]
    triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpz236rzn3.jl:19\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz236rzn3.jl:27 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz236rzn3.jl:26\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a vector of integers as an input, and returns true if\
    \ the vector contains three distinct elements that sum to zero, and false otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp805d4xgo.jl:27\nin expression starting at\
    \ /tmp/tmp805d4xgo.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l |> sort() |> length() == 3\n    return triples_sum_to_zero\nend\n\
    </cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([1, 3, 5, 0])\n\
    @test triples_sum_to_zero([1, 3, -2, 1])\n@test triples_sum_to_zero([1, 2, 3,\
    \ 7])\n@test triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n@test triples_sum_to_zero([1])\n\
    </cell>\n<text>\nExercise: Write a function that takes a vector of integers as\
    \ an input, and returns true if the vector contains three distinct elements that\
    \ sum to zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: ArgumentError: Invalid use of @view macro: argument must\
    \ be a reference expression A[...].\nStacktrace:\n [1] var\"@view\"(__source__::LineNumberNode,\
    \ __module__::Module, ex::Any)\n   @ Base ./views.jl:136\n [2] #macroexpand#51\n\
    \   @ ./expr.jl:115 [inlined]\n [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n\
    \ [4] docm(source::LineNumberNode, mod::Module, meta::Any, ex::Any, define::Bool)\
    \ (repeats 2 times)\n   @ Base.Docs ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any})\n   @ Core ./boot.jl:517\nin expression starting\
    \ at /tmp/tmpol5jhm0z.jl:1\nin expression starting at /tmp/tmpol5jhm0z.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers as an input, and returns true if\
    \ there are three distinct elements in the vector that sum to zero, and false\
    \ otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph8m0wycb.jl:27\nin expression starting at\
    \ /tmp/tmph8m0wycb.jl:27\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ as an input, and returns true if the vector contains three distinct elements\
    \ that sum to zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7k5g2whf.jl:20\nin expression starting at\
    \ /tmp/tmp7k5g2whf.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp0wit4lmp.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0wit4lmp.jl:1\n\
    in expression starting at /tmp/tmp0wit4lmp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for x in l\n        sum += x\n        if sum == 0\n            return true\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp5osfnfr6.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5osfnfr6.jl:1\n\
    in expression starting at /tmp/tmp5osfnfr6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples\
    \ = Vector{Int64}()\n    for x in l\n        if x > 0\n            if x % 3 ==\
    \ 0\n                triples.push(x)\n            elseif x % 3 == 1\n        \
    \        if triples.contains(x+1)\n                    triples.push(x)\n     \
    \           else\n                    triples.push(x)\n                end\n \
    \           elseif x % 3 == 2\n                if triples.contains(x-1)\n    \
    \                triples.push(x)\n                else\n                    triples.push(x)\n\
    \                end\n            end\n        end\n    end\n    return length(triples)\
    \ == 3\nend\n</cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([1,\
    \ 3, 5, 0])\n@test triples_sum_to_zero([1, 3, -2, 1])\n@test triples_sum_to_zero([1,\
    \ 2, 3, 7])\n@test triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n@test triples_sum_to_zero([1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ as an input, and returns true if the vector contains three distinct elements\
    \ that sum to zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf74p37m2.jl:40\nin expression starting at\
    \ /tmp/tmpf74p37m2.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0 \n            return\
    \ true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\
    \t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq19yf4jy.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpq19yf4jy.jl:35\n  Expression: candidate([1,\
    \ 3, -2, 1]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq19yf4jy.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq19yf4jy.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpq19yf4jy.jl:38\n  Expression: candidate([2, 4, -5, 3, 9, 7])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq19yf4jy.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq19yf4jy.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for x in l\n        sum += x\n        if sum == 0 \n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\n4.3 Exercise: Write a function that takes a vector\
    \ of integers as an input and returns the number of integers in the vector that\
    \ sum to zero.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqe2s0k2c.jl:28\nin expression starting at\
    \ /tmp/tmpqe2s0k2c.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l .== 0 .* @view l .== 0 .* @view l .== 0\n    return triples_sum_to_zero\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: ArgumentError: Invalid use of @view macro: argument must\
    \ be a reference expression A[...].\nStacktrace:\n [1] var\"@view\"(__source__::LineNumberNode,\
    \ __module__::Module, ex::Any)\n   @ Base ./views.jl:136\n [2] #macroexpand#51\n\
    \   @ ./expr.jl:115 [inlined]\n [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n\
    \ [4] docm(source::LineNumberNode, mod::Module, meta::Any, ex::Any, define::Bool)\
    \ (repeats 2 times)\n   @ Base.Docs ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any})\n   @ Core ./boot.jl:517\nin expression starting\
    \ at /tmp/tmpothdybvc.jl:1\nin expression starting at /tmp/tmpothdybvc.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum > 0\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns a vector of booleans\
    \ indicating whether each element in the vector is positive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) ==\
    \ false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3,\
    \ -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3am3r90d.jl:27\nin expression starting at\
    \ /tmp/tmp3am3r90d.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\n4.2 Exercise: Find all subsets of a set\nWrite a function all_subsets(l::Vector{Int64})\
    \ that takes as input a vector of integers and returns all subsets of the input\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvrd0zx8b.jl:20\nin expression starting at\
    \ /tmp/tmpvrd0zx8b.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    \n    for x in l\n        if triples_sum_to_zero[x]\
    \ == 1\n            return true\n        end\n    end\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([1, 3, 5, 0])\n\
    </cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([1, 3, -2, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([1, 2, 3, 7])\n\
    </cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([2, 4, -5, 3, 9,\
    \ 7])\n</cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([1])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers as an input,\
    \ and returns true if the vector has three distinct elements that sum to zero,\
    \ and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqmimhdl9.jl:31\nin expression starting at\
    \ /tmp/tmpqmimhdl9.jl:31\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers as an input, and returns true if\
    \ there are three distinct elements in the vector that sum to zero, and false\
    \ otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvjnsj7j9.jl:27\nin expression starting at\
    \ /tmp/tmpvjnsj7j9.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l |> filter((x) -> x != 0, \n        map((x) -> x -> x -> x == 0, \n\
    \            filter((x) -> x != 0, \n                filter((x) -> x != 0, \n\
    \                    filter((x) -> x != 0, \n                        filter((x)\
    \ -> x != 0, \n                            filter((x) -> x != 0, \n          \
    \                      filter((x) -> x != 0, \n                              \
    \      filter((x) -> x != 0, \n                                        filter((x)\
    \ -> x != 0, \n                                            filter((x) -> x !=\
    \ 0, \n                                                filter((x) -> x != 0, \n\
    \                                                    filter((x) -> x != 0, \n\
    \                                                        filter((x) -> x != 0,\
    \ \n                                                            filter((x) ->\
    \ x != 0, \n                                                                filter((x)\
    \ -> x != 0, \n                                                              \
    \      filter((x) -> x != 0, \n                                              \
    \                          filter((x) -> x != 0, \n                          \
    \                                                  filter((x) -> x != 0, \n  \
    \                                                                            \
    \  filter((x) -> x != 0, \n                                                  \
    \                                  filter((x) -> x != 0, \n                  \
    \                                                                      filter((x)\
    \ -> x != 0, \n                                                              \
    \                              filter((x) -> x != 0, \n                      \
    \                                                                          filter((x)\
    \ -> x != 0, \n                                                              \
    \                                      filter((x) -> x != 0, \n              \
    \                                                                            \
    \              filter((x) -> x != 0, \n                                      \
    \                                                                      filter((x)\
    \ -> x != 0, \n                                                              \
    \                                                  filter((x) -> x != 0, \n  \
    \                                                                            \
    \                                      filter((x) -> x != 0, \n              \
    \                                                                            \
    \                              filter((x) -> x != 0, \n                      \
    \                                                                            \
    \                          filter((x) -> x != 0, \n                          \
    \                                                                            \
    \                          filter((x) -> x != 0, \n                          \
    \                                                                            \
    \                              filter((x) -> x != 0, \n                      \
    \                                                                            \
    \                                      filter((x) -> x != 0, \n              \
    \                                                                            \
    \                                                  filter((x) -> x != 0, \n  \
    \                                                                            \
    \                                                                  filter((x)\
    \ -> x != 0, \n                                                              \
    \                                                                            \
    \          filter((x) -> x != 0, \n                                          \
    \                                                                            \
    \                                  filter((x) -> x != 0, \n                  \
    \                                                                            \
    \                                                              filter((x) -> x\
    \ != 0, \n                                                                   \
    \                                                                            \
    \                 filter((x) -> x != 0, \n                                   \
    \                                                                            \
    \                                                     filter((x) -> x != 0, \n\
    \                                                                            \
    \                                                                            \
    \                filter((x) -> x != 0, \n                                    \
    \                                                                            \
    \                                                            filter((x) -> x !=\
    \ 0, \n                                                                      \
    \                                                                            \
    \                              filter((x) -> x != 0, \n                      \
    \                                                                            \
    \                                                                            \
    \      filter((x) -> x != 0, \n                                              \
    \                                                                            \
    \                                                              filter((x) -> x\
    \ != 0, \n                                                                   \
    \                                                                            \
    \                                             filter((x) -> x != 0, \n       \
    \                                                                            \
    \                                                                            \
    \                                 filter((x) -> x != 0, \n                   \
    \                                                                            \
    \                                                                            \
    \                         filter((x) -> x != 0, \n                           \
    \                                                                            \
    \                                                                            \
    \                     filter((\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsd2u5z69.jl:70\nin expression starting at\
    \ /tmp/tmpsd2u5z69.jl:70\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 &&\
    \ \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n\
    \        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n \
    \       sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n  \
    \      sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n   \
    \     sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n    \
    \    sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n     \
    \   sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n      \
    \  sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n       \
    \ sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l)\
    \ == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) ==\
    \ 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0\
    \ && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 &&\
    \ \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n\
    \        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n \
    \       sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n  \
    \      sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n   \
    \     sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n    \
    \    sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n     \
    \   sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n      \
    \  sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n       \
    \ sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l)\
    \ == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) ==\
    \ 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0\
    \ && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 &&\
    \ \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n\
    \        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n \
    \       sum(l) == 0 && \n\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppyqgrqtu.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppyqgrqtu.jl:1\n\
    in expression starting at /tmp/tmppyqgrqtu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0\n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\n4.5 Vectorized Computations\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) ==\
    \ false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3,\
    \ -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp55gf4p7c.jl:28\nin expression starting at\
    \ /tmp/tmp55gf4p7c.jl:28\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.4>\n@doc triples_sum_to_zero\n</cell>\n\
    <code language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code\
    \ language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.4>\n\
    @doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.4>\n@doc\
    \ triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n\
    </cell>\n<code language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n\
    <code language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code\
    \ language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.4>\n\
    @doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.4>\n@doc\
    \ triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n\
    </cell>\n<code language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n\
    <code language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code\
    \ language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.4>\n\
    @doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.4>\n@doc\
    \ triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n\
    </cell>\n<code language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n\
    <code language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code\
    \ language=julia-1.4>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.4>\n\
    @doc triples_sum_to_zero([1,3,-2,1])\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8cbl_co2.jl:20\nin expression starting at\
    \ /tmp/tmp8cbl_co2.jl:20\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0 \n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\n4.3 The sum of the first $n$ positive integers is\
    \ $n(n+1)/2$. Verify that $n$ is prime.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6njvqyta.jl:28\nin expression starting at\
    \ /tmp/tmp6njvqyta.jl:28\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for x in l\n        sum += x\n        if sum == 0 \n            return true\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpxn0a5284.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxn0a5284.jl:1\n\
    in expression starting at /tmp/tmpxn0a5284.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum > 0\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers as an input and returns a vector\
    \ of integers representing the number of times each integer appears in the input\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwj3juizg.jl:27\nin expression starting at\
    \ /tmp/tmpwj3juizg.jl:27\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = false \n    for x in l \n        if triples_sum_to_zero == false \n      \
    \      if x == 0 \n                triples_sum_to_zero = true \n            else\
    \ \n                triples_sum_to_zero = false \n            end \n        else\
    \ \n            if x == 0 \n                triples_sum_to_zero = false \n   \
    \         end \n        end \n    end \n    return triples_sum_to_zero \nend \n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    triples_sum_to_zero takes a vector\
    \ of integers as an input.\n    it returns true if there are three distinct elements\
    \ in the vector that\n    sum to zero, and false otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) ==\
    \ false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3,\
    \ -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbuq2ibp4.jl:34\nin expression starting at\
    \ /tmp/tmpbuq2ibp4.jl:34\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples\
    \ = Vector{Int64}()\n    for x in l\n        triples.push(x)\n    end\n    triples_sum_to_zero(triples)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpo8ud5_xh.jl:29\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  type Array has no
    field push\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]
    triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpo8ud5_xh.jl:20\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo8ud5_xh.jl:29 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo8ud5_xh.jl:28\ntest set: Error
    During Test at /tmp/tmpo8ud5_xh.jl:30\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  type Array has no field push\n  Stacktrace:\n   [1] getproperty\n     @
    ./Base.jl:42 [inlined]\n   [2] triples_sum_to_zero(l::Vector{Int64})\n     @ Main
    /tmp/tmpo8ud5_xh.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo8ud5_xh.jl:30 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo8ud5_xh.jl:28\ntest set: Error
    During Test at /tmp/tmpo8ud5_xh.jl:31\n  Test threw exception\n  Expression: candidate([1,
    3, -2, 1]) == true\n  type Array has no field push\n  Stacktrace:\n   [1] getproperty\n     @
    ./Base.jl:42 [inlined]\n   [2] triples_sum_to_zero(l::Vector{Int64})\n     @ Main
    /tmp/tmpo8ud5_xh.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo8ud5_xh.jl:31 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo8ud5_xh.jl:28\ntest set: Error
    During Test at /tmp/tmpo8ud5_xh.jl:32\n  Test threw exc'
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0 \n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers as an input, and returns\
    \ true if the vector has three distinct elements that sum to zero, and false otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprvzwmoim.jl:28\nin expression starting at\
    \ /tmp/tmprvzwmoim.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = false \n    for x in l \n        if x != 0 \n            triples_sum_to_zero\
    \ = true \n            break \n    end \n    return triples_sum_to_zero \nend\
    \ \nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpralnn5e9.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpralnn5e9.jl:1\n\
    in expression starting at /tmp/tmpralnn5e9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0 \n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0]) == false\n@test triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@test triples_sum_to_zero([1, 2, 3, 7]) == false\n@test\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@test triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers as an input, and returns true if the vector contains three distinct\
    \ elements that sum to zero, and false otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\
    \t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpftax51sx.jl:28\nin expression starting at\
    \ /tmp/tmpftax51sx.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers as an input,\
    \ and returns true if the vector contains three distinct elements that sum to\
    \ zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpabtbuo6m.jl:20\nin expression starting at\
    \ /tmp/tmpabtbuo6m.jl:20\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n    it\
    \ returns true if there are three distinct elements in the vector that\n    sum\
    \ to zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1wgzupg8.jl:27\nin expression starting at\
    \ /tmp/tmp1wgzupg8.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3: Write\
    \ a function that takes an array of integers and returns an array of integers\
    \ such that each element of the array is either positive or negative.\nusing Test\n\
    \n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3,\
    \ 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7clu4p3o.jl:27\nin expression starting at\
    \ /tmp/tmp7clu4p3o.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = sum([triples_sum_to_zero(triple) for triple in l])\n    triples_sum_to_zero\
    \ == length(l)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a vector of integers as an input.\n    it returns true if there are three\
    \ distinct elements in the vector that\n    sum to zero, and false otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsqj65d5f.jl:21\nin expression starting at\
    \ /tmp/tmpsqj65d5f.jl:21\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for x in l\n        sum += x\n        if sum == 0 \n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0])\n@test triples_sum_to_zero([1, 3, -2,\
    \ 1])\n@test triples_sum_to_zero([1, 2, 3, 7])\n@test triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n@test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function called triples_sum_to_zero that takes a vector of integers\
    \ as an input.\nIt returns true if there are three distinct elements in the vector\
    \ that sum to zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpppci_v4c.jl:28\nin expression starting at\
    \ /tmp/tmpppci_v4c.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a vector of integers as an input.\n    it returns true if there are three\
    \ distinct elements in the vector that\n    sum to zero, and false otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2kg8rv7x.jl:20\nin expression starting at\
    \ /tmp/tmp2kg8rv7x.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0])\n@test triples_sum_to_zero([1, 3, -2,\
    \ 1])\n@test triples_sum_to_zero([1, 2, 3, 7])\n@test triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n@test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers as an input, and returns\
    \ true if the vector has all distinct elements, and false otherwise. For example,\
    \ if the vector is [1, 1, 2], the function should return true.\nusing Test\n\n\
    @testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5,\
    \ 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7onazdxs.jl:27\nin expression starting at\
    \ /tmp/tmp7onazdxs.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum > 0\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n    it\
    \ returns true if there are three distinct elements in the vector that\n    sum\
    \ to zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyfnvbciz.jl:28\nin expression starting at\
    \ /tmp/tmpyfnvbciz.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t\
    @test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_qlhixa.jl:20\nin expression starting at\
    \ /tmp/tmpr_qlhixa.jl:20\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0\n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that takes a vector of integers and returns the number of\
    \ integers in the vector that are less than the average of the integers in the\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpori9uwer.jl:28\nin expression starting at\
    \ /tmp/tmpori9uwer.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l == [0,0,0]\n    return sum(triples_sum_to_zero)==3\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3,\
    \ 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: ArgumentError: Invalid use of @view macro: argument must\
    \ be a reference expression A[...].\nStacktrace:\n [1] var\"@view\"(__source__::LineNumberNode,\
    \ __module__::Module, ex::Any)\n   @ Base ./views.jl:136\n [2] #macroexpand#51\n\
    \   @ ./expr.jl:115 [inlined]\n [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n\
    \ [4] docm(source::LineNumberNode, mod::Module, meta::Any, ex::Any, define::Bool)\
    \ (repeats 2 times)\n   @ Base.Docs ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any})\n   @ Core ./boot.jl:517\nin expression starting\
    \ at /tmp/tmpe98ypyen.jl:1\nin expression starting at /tmp/tmpe98ypyen.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    triples_sum_to_zero\
    \ = false\n    \n    triples_sum_to_zero = triples_sum_to_zero or l[1] == l[2]\n\
    \    triples_sum_to_zero = triples_sum_to_zero or l[2] == l[3]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero or l[3] == l[0]\n    \n    return triples_sum_to_zero\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    triples_sum_to_zero takes\
    \ a vector of integers as an input.\n    it returns true if there are three distinct\
    \ elements in the vector that\n    sum to zero, and false otherwise.\nusing Test\n\
    \n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3,\
    \ 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp1a9uu63o.jl:17 expected\
    \ \"end\", got \"or\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1a9uu63o.jl:21\n\
    in expression starting at /tmp/tmp1a9uu63o.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    triples\
    \ = Vector{Int64}()\n    \n    for i in l\n        if triples.length == 0 || triples[end]\
    \ == 0\n            triples.push(i)\n        elseif triples[end] == i\n      \
    \      triples[end] = i\n        else\n            triples[end] = i\n        \
    \    triples.push(i)\n        end\n    end\n    \n    if triples.length == 3 &&\
    \ triples[1] == triples[2]\n        return true\n    else\n        return false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a vector of integers as an input.\n    it returns true if there are three\
    \ distinct elements in the vector that\n    sum to zero, and false otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9f8lhbve.jl:38\nin expression starting at\
    \ /tmp/tmp9f8lhbve.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0])\n@test triples_sum_to_zero([1, 3, -2,\
    \ 1])\n@test triples_sum_to_zero([1, 2, 3, 7])\n@test triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n@test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers as an input, and returns\
    \ true if the vector contains any negative integers, and false otherwise.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprcgfhf1q.jl:27\nin expression starting at\
    \ /tmp/tmprcgfhf1q.jl:27\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum > 0\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t\
    @test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqmw34hh_.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpqmw34hh_.jl:34\n  Expression: candidate([1,\
    \ 3, -2, 1]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqmw34hh_.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqmw34hh_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqmw34hh_.jl:37\n  Expression: candidate([2, 4, -5, 3, 9, 7])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqmw34hh_.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqmw34hh_.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        sum -= i\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiv3k3t0t.jl:27\nin expression starting at\
    \ /tmp/tmpiv3k3t0t.jl:27\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0 \n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n    it\
    \ returns true if there are three distinct elements in the vector that\n    sum\
    \ to zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz87n50uy.jl:28\nin expression starting at\
    \ /tmp/tmpz87n50uy.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    \n    for x in l\n        triples_sum_to_zero = triples_sum_to_zero\
    \ + (x - sum(x) == 0)\n    end\n    \n    return triples_sum_to_zero == ones(Int64,\
    \ 3)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array of\
    \ integers as an input, and returns an array of the same size with each element\
    \ being the product of the corresponding elements in the input array. For example,\
    \ if the input array is [4, 2, 3], the output array should be [4, 8, 12].\nusing\
    \ Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp76ytnvwz.jl:27\nin expression starting at\
    \ /tmp/tmp76ytnvwz.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n    it\
    \ returns true if there are three distinct elements in the vector that\n    sum\
    \ to zero, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpudvrp12t.jl:27\nin expression starting at\
    \ /tmp/tmpudvrp12t.jl:27\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum > 0\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers as an input, and returns\
    \ true if there are three distinct elements in the vector that sum to zero, and\
    \ false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0a_xrl5_.jl:28\nin expression starting at\
    \ /tmp/tmp0a_xrl5_.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum > 0\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an array of integers as an input, and returns true if\
    \ all elements in the array are positive, and false otherwise.\nusing Test\n\n\
    @testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5,\
    \ 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyfgy8x0m.jl:27\nin expression starting at\
    \ /tmp/tmpyfgy8x0m.jl:27\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0 \n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0]) == false\n@test triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@test triples_sum_to_zero([1, 2, 3, 7]) == false\n@test\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@test triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers as an input and returns a vector of booleans indicating whether\
    \ each element in the vector is positive, negative or zero.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) ==\
    \ false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3,\
    \ -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4bhusnyo.jl:28\nin expression starting at\
    \ /tmp/tmp4bhusnyo.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = sum([triples_sum_to_zero(triple) for triple in l])\n    triples_sum_to_zero\
    \ == length(l)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a vector of integers as an input.\n    it returns true if there are three\
    \ distinct elements in the vector that\n    sum to zero, and false otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsqj65d5f.jl:21\nin expression starting at\
    \ /tmp/tmpsqj65d5f.jl:21\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = false \n    for x in l \n        if x == 0 \n            triples_sum_to_zero\
    \ = true \n            break \n        triples_sum_to_zero = false \n        for\
    \ y in l \n            if y == 0 \n                triples_sum_to_zero = true\
    \ \n                break \n                \n    return triples_sum_to_zero \n\
    end \n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzjzvor6v.jl:31\nin expression starting at\
    \ /tmp/tmpzjzvor6v.jl:31\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers as an input, and returns true if the vector contains three distinct\
    \ elements that sum to zero, and false otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\
    \t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe6cm9wrq.jl:20\nin expression starting at\
    \ /tmp/tmpe6cm9wrq.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0])\n@test triples_sum_to_zero([1, 3, -2,\
    \ 1])\n@test triples_sum_to_zero([1, 2, 3, 7])\n@test triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n@test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers as an input, and returns\
    \ true if the vector contains three distinct elements that sum to zero, and false\
    \ otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo5zkx3c2.jl:27\nin expression starting at\
    \ /tmp/tmpo5zkx3c2.jl:27\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples\
    \ = Vector{Int64}()\n    triples_sum_to_zero(triples, l)\n    return length(triples)\
    \ == 3\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpz236rzn3.jl:27\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates
    are:\n    triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpz236rzn3.jl:17\n  Stacktrace:\n   [1]
    triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpz236rzn3.jl:19\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz236rzn3.jl:27 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz236rzn3.jl:26\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum > 0\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0])\n@test triples_sum_to_zero([1, 3, -2,\
    \ 1])\n@test triples_sum_to_zero([1, 2, 3, 7])\n@test triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n@test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers as an input, and returns\
    \ true if the vector has three distinct elements that sum to zero, and false otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvxxv4v_m.jl:27\nin expression starting at\
    \ /tmp/tmpvxxv4v_m.jl:27\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t\
    @test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_qlhixa.jl:20\nin expression starting at\
    \ /tmp/tmpr_qlhixa.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for x in l\n        sum += x\n        if sum == 0\n            return true\n\
    \    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an array of integers and returns an array of the same size with only positive\
    \ integers.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzlgymbng.jl:25\nin expression starting at\
    \ /tmp/tmpzlgymbng.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    l\
    \ = sort(l)\n    \n    if length(l) == 3\n        return l[1] == 0 && l[2] ==\
    \ 0\n    end\n    \n    \n    for i = 1:length(l)\n        if l[i] == l[i+1] &&\
    \ l[i] == l[i+2]\n            return false\n        end\n    end\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n\
    <code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n<code\
    \ language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n@time\
    \ triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n\
    <code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n<code\
    \ language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n@time\
    \ triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n\
    <code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n<code\
    \ language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n@time\
    \ triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n\
    <code language=julia-1.5>\n@\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3gb85qye.jl:34\nin expression starting at\
    \ /tmp/tmp3gb85qye.jl:34\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for x in l\n        sum += x\n        if sum == 0\n            return\
    \ true\n    return false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n  \
    \  triples_sum_to_zero takes a vector of integers as an input.\n    it returns\
    \ true if there are three distinct elements in the vector that\n    sum to zero,\
    \ and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpetl69bjn.jl:26\nin expression starting at\
    \ /tmp/tmpetl69bjn.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a vector of integers as an input, and returns true if\
    \ there are three distinct elements in the vector that sum to zero, and false\
    \ otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp95ue5mcr.jl:27\nin expression starting at\
    \ /tmp/tmp95ue5mcr.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l |> Vector{Int64}\n    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero\
    \ .!= 0]\n    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!=\
    \ 0]\n    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n  \
    \  triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n    triples_sum_to_zero =\
    \ triples_sum_to_zero[triples_sum_to_zero .!= 0]\n    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero\
    \ .!= 0]\n    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!=\
    \ 0]\n    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n  \
    \  triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n    triples_sum_to_zero =\
    \ triples_sum_to_zero[triples_sum_to_zero .!= 0]\n    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero\
    \ .!= 0]\n    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!=\
    \ 0]\n    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n  \
    \  triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[triples_sum_to_zero .!= 0]\n    triples_sum_to_zero =\
    \ triples_sum_to_zero[triples_sum_to_zero .!= 0]\n    triples_sum_to_zero = triples_sum_to_zero[triples_sum_to_zero\
    \ .!= 0]\n    triples_sum_to_zero = triples_sum\nusing Test\n\n@testset begin\n\
    \ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\
    \t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpob_qi2kd.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpob_qi2kd.jl:1\n\
    in expression starting at /tmp/tmpob_qi2kd.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0 \n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1hake1jf.jl:28\nin expression starting at\
    \ /tmp/tmp1hake1jf.jl:28\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0\n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0])\n@test triples_sum_to_zero([1, 3, -2,\
    \ 1])\n@test triples_sum_to_zero([1, 2, 3, 7])\n@test triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n@test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers as an input, and returns\
    \ true if the vector has three distinct elements that sum to zero, and false otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqfc9_0mb.jl:28\nin expression starting at\
    \ /tmp/tmpqfc9_0mb.jl:28\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    triples_sum_to_zero takes a vector of integers as an input.\n\
    \    it returns true if there are three distinct elements in the vector that\n\
    \    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    true\n    >>> triples_sum_to_zero([1])\n    false\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxg235g.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method
    matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\ntest set: Error
    During Test at /tmp/tmpvhxg235g.jl:26\n  Test threw exception\n  Expression: candidate([1,
    3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})
    at /tmp/tmpvhxg235g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @
    Main /tmp/tmpvhxg235g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhxg235g.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhxg235g.jl:24\n'''
