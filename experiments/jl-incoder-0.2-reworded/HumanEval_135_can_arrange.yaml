name: HumanEval_135_can_arrange
language: jl
prompt: "\"\"\"Create a function which returns the largest index of an element which\n\
  \    is not greater than or equal to the element immediately preceding it. If\n\
  \    no such element exists then return -1. The given vector will not contain\n\
  \    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2, 4, 3, 5])\n\
  \    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
  \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
  \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
  @test(candidate(Vector{Int64}([])) == -1)\nend\n"
completions: ["    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i]\
    \ > largest\n            largest = arr[i]\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in\
    \ 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n \
    \       end\n    end\n    return largest\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that returns the index of the first element of a vector\n    which\
    \ is greater than or equal to the element immediately preceding it.\n    If no\
    \ such element exists then return -1. The given vector will not contain\n    duplicate\
    \ values.", "    largest = -1\n    largestIndex = -1\n    for i = 1:length(arr)\n\
    \        if arr[i] > arr[largest]\n            largest = arr[i]\n            largestIndex\
    \ = i\n        end\n    end\n    return largestIndex\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if the given vector contains all unique\
    \ elements. \nThe given vector will not contain duplicate values.", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        else\n            return -1\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,\
    \ 2, 4, 3, 5]) == 3\n@assert can_arrange([1, 2, 3]) == -1\n</cell>\n<text>\n4.5\
    \ Write a function to find the index of the element which is not greater than\
    \ or equal to the element immediately preceding it in a given vector. Return -1\
    \ in the event that the given vector does not contain any such element. For example,\
    \ given [5, 7, 2, 6], return 3.", "    largest = Int64(-1)\n    for elt in arr\n\
    \        if elt > largest\n            largest = elt\n        end\n    end\n \
    \   return largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,\
    \ 2, 4, 3, 5]) == 3\n@assert can_arrange([1, 2, 3]) == -1\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the number of elements in a vector which are\
    \ less than a given value.", "    largest = Int64(-1)\n    for x in arr\n    \
    \    if x > largest\n            largest = x\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns true\
    \ if the given vector has all unique elements. \nThe given vector will not contain\
    \ duplicate values.", "    largest = arr[1]\n    for i in 2:length(arr)\n    \
    \    if arr[i] > largest\n            largest = arr[i]\n        else\n       \
    \     return -1\n        end\n    end\n    return largest\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the index of the element in the given\
    \ vector that is\nclosest to the given value. If there are multiple elements with\
    \ the same value then\nreturn the index of the first one. Otherwise return -1.\
    \ Do not use any fancy indexing\ntechniques.", "    largest = arr[1]\n    for\
    \ i in 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>", "    largest = arr[1]\n    for i in arr[2:end]\n\
    \        if i > largest\n            largest = i\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.3>", "    largest = arr[1]\n \
    \   for i in 2:length(arr)\n        if arr[i] > largest\n            largest =\
    \ arr[i]\n        else\n            return -1\n        end\n    end\n    return\
    \ largest\nend", "    largest = arr[1]\n    for i in 2:length(arr)\n        if\
    \ arr[i] > largest\n            largest = arr[i]\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<text>\nNow let's try it out!", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the index of the element in the given vector\
    \ that is closest to the given value. If there are multiple elements with the\
    \ same distance then return the smallest index. For example, if there are two\
    \ elements with the distance of 1 from [1,2,3] then return 1 since it is the smallest\
    \ index.", "    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n\
    \        if arr[index] > arr[largest]\n            largest = arr[index]\n    \
    \        largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.3>", "    largest = arr[1]\n    for i in\
    \ 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n \
    \       end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = -1\n    largestIndex = -1\n    for index in 1:length(arr)\n     \
    \   if arr[index] <= arr[largest]\n            largest = arr[index]\n        \
    \    largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<code language=julia-1.0>", "    largest = arr[1]\n    for x in arr[2:end]\n\
    \        if x <= largest\n            largest = x\n        else\n            return\
    \ -1\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in arr[2:end]\n        if i > largest\n       \
    \     largest = i\n        end\n    end\n    return largest\nend", "    largest\
    \ = -1\n    largestIndex = -1\n    for i = 1:length(arr)\n        if arr[i] >\
    \ arr[largest]\n            largest = arr[i]\n            largestIndex = i\n \
    \       end\n    end\n    return largestIndex\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given vector is sorted in ascending\
    \ order. \nWrite a function that returns true if the given vector is sorted in\
    \ descending order. \nWrite a function that returns true if the given vector is\
    \ sorted in both ascending and descending order. \nWrite a function that returns\
    \ true if the given vector is sorted in ascending order but has duplicates. \n\
    Write a function that returns true if the given vector is sorted in descending\
    \ order but has duplicates. \nWrite a function that returns true if the given\
    \ vector is sorted in both ascending and descending order but has duplicates. ",
  "    largest = Int64(-1)\n    for x in arr\n        if x > 0\n            if largest\
    \ < x\n                largest = x\n            else\n                break\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<text>\nNow let's try\
    \ it out!", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i]\
    \ > largest\n            largest = arr[i]\n        end\n    end\n    return largest\n\
    end", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest = -1\n    largestIdx = -1\n\
    \    for idx in 1:length(arr)\n        if arr[idx] > arr[largest]\n          \
    \  largest = idx\n            largestIdx = idx\n        end\n    end\n    return\
    \ largestIdx\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the index of the element in the given vector that has the largest value greater\
    \ than or equal to the element immediately preceding it. Return -1 if no such\
    \ element exists.", "    largest = arr[1]\n    for i in 2:length(arr)\n      \
    \  if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n \
    \   return largest\nend\n</cell>\n<code language=julia-1.5>\n@time can_arrange([1,2,4,3,5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the element\
    \ in the given vector that is closest to 0.", "    largest = Int64(-1) # initialize\
    \ largest to -1\n    for el in arr \n        if el > largest \n            largest\
    \ = el \n        end\n    end\n    return largest\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the index of the element in the given vector\
    \ that is closest to the given value. The given vector will not contain duplicate\
    \ values.", "    largest = arr[1]\n    for i in arr[2:end]\n        if i > largest\n\
    \            largest = i\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.4>\n@time can_arrange(arr1)\n</cell>\n<code language=julia-1.4>\n\
    @time can_arrange(arr2)\n</cell>\n<code language=julia-1.4>\n@time can_arrange(arr3)\n\
    </cell>\n<code language=julia-1.4>\n@time can_arrange(arr4)\n</cell>\n<code language=julia-1.4>\n\
    @time can_arrange(arr5)\n</cell>\n<code language=julia-1.4>\n@time can_arrange(arr6)\n\
    </cell>\n<code language=julia-1.4>\n@time can_arrange(arr7)\n</cell>\n<code language=julia-1.4>\n\
    @time can_arrange(arr8)\n</cell>\n<code language=julia-1.4>\n@time can_arrange(arr9)\n\
    </cell>\n<code language=julia-1.4>\n@time can_arrange(arr10)\n</cell>\n<code language=julia-1.4>\n\
    @time can_arrange(arr11)\n</cell>\n<code language=julia-1.4>\n@time can_arrange(arr12)\n\
    </cell>\n<code language=julia-1.4>\n@time can_arrange(arr13)\n</cell>\n<code language=julia-1.4>\n\
    @time can_arrange(arr14)\n</cell>\n<code language=julia-1.4>\n@time can_arrange(arr15)\n\
    </cell>\n<code language=julia-1.4>\n@time can_arrange(arr16)\n</cell>\n<code language=julia-1.4>\n\
    @time can_arrange(arr17)\n</cell>\n<code language=julia-1.4>\n@time can_arrange(arr18)\n\
    </cell>\n<code language=julia-1.4>\n@time can_arrange(arr19)\n</cell>\n<code language=julia-1.4>\n\
    @time can_arrange(arr20)\n</cell>\n<code language=julia-1.4>\n@time can_arrange(arr21)\n\
    </cell>\n<code language=julia-1.4>\n@time can_arrange(arr22)\n</cell>\n<code language=julia-1.4>\n\
    @time can_arrange(arr23)\n</cell>\n<code language=julia-1.4>\n@time can_arrange(arr24)\n\
    </cell>\n<code language=julia-1.4>\n@time can_arrange(arr25)\n</cell>\n<code language=julia-1.4>\n\
    @time can_arrange(arr26)\n</cell>\n<code language=julia-1.", "    largest = -1\n\
    \    largestIdx = -1\n    for idx in 1:length(arr)\n        if arr[idx] > arr[largest]\n\
    \            largest = idx\n            largestIdx = idx\n        end\n    end\n\
    \    return largestIdx\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ returns the index of the element which occurs the most times in the given vector.\
    \ \nIf no such element exists then return -1. \nThe given vector will not contain\
    \ duplicate values.", "    largest = arr[1]\n    for i in 2:length(arr)\n    \
    \    if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ -1\n    largest = findfirst(x -> x <= largest, arr)\n    if largest == -1\n\
    \        largest = length(arr)\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n  \
    \      if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend", "    largest = arr[1]\n    for x in arr[2:end]\n  \
    \      if x > largest\n            largest = x\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.3>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the index of the first element of a vector\n    which\
    \ is not equal to the element immediately preceding it. Return -1\n    if no such\
    \ element exists.", "    largest = arr[1]\n    for i in arr[2:end]\n        if\
    \ i > largest\n            largest = i\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the index of the first element of a vector\n \
    \   which is greater than or equal to the element immediately preceding it. If\n\
    \    no such element exists then return -1. The given vector will not contain\n\
    \    duplicate values.", "    largest = arr[1]\n    for i in 2:length(arr)\n \
    \       if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n          \
    \  largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        else\n   \
    \         return -1\n        end\n    end\n    return largest\nend", "    largest\
    \ = arr[1]\n    for i in arr[2:end]\n        if i > largest\n            largest\
    \ = i\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in arr[2:end]\n        if i > largest\n       \
    \     largest = i\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    largest = -1\n    largestIndex = 0\n    for index\
    \ in 1:length(arr)\n        if arr[index] > arr[largest]\n            largest\
    \ = arr[index]\n            largestIndex = index\n        end\n    end\n    return\
    \ largestIndex\nend\n</cell>\n<code language=julia-1.3>", "    largest = -1\n\
    \    largestIndex = 0\n    for index in 1:length(arr)\n        if arr[index] >\
    \ arr[largest]\n            largest = arr[index]\n            largestIndex = index\n\
    \        end\n    end\n    return largestIndex\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the index of the element in the given vector\
    \ that is closest to the given value. If there are multiple elements in the vector\
    \ that are equally closest, then return the index of the smallest element. For\
    \ example, if the given vector is [2, 3, 4] and you want the closest value to\
    \ 3, the function should return 1.", "    largest = Int64(-1)\n    for x in arr\n\
    \        if x > largest\n            largest = x\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>", "    largest = -1\n    largestIndex\
    \ = -1\n    for index in 1:length(arr)\n        if arr[index] <= arr[largest]\n\
    \            largest = arr[index]\n            largestIndex = index\n        end\n\
    \    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ can_arrange([1, 2, 4, 3, 5]) == 3\n@assert can_arrange([1, 2, 3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the index of the element in\
    \ the given array that is closest to the given value. If no such element exists\
    \ then return -1. The given array will not contain duplicate values.", "    largest\
    \ = arr[1]\n    for i in arr[2:end]\n        if i > largest\n            largest\
    \ = i\n        end\n    end\n    return -1\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the index of the element in the given vector that\
    \ is closest to the given value. If there are multiple elements with the same\
    \ value then return the index of the first one. Otherwise return -1.", "    largest\
    \ = arr[1]\n    for i in arr[2:end]\n        if i > largest\n            largest\
    \ = i\n        end\n    end\n    return -1\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.5>\n@time can_arrange([1,2,3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the index of the element in the given vector\
    \ that is\nthe greatest amongst all the elements in the given vector. For example,",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the element\
    \ in the given vector that is closest to the given value. If there are multiple\
    \ elements in the vector that are equidistant from the given value then return\
    \ the smallest index.", "    largest = -1\n    largestIdx = -1\n    for idx =\
    \ 1:length(arr)\n        if arr[idx] > arr[largest]\n            largest = idx\n\
    \            largestIdx = idx\n        end\n    end\n    return largestIdx\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest = -1\n    for i = 1:length(arr)\n\
    \        if arr[i] > arr[largest]\n            largest = i\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ Int64(-1)\n    for x in arr\n        if x > largest\n            largest = x\n\
    \        end\n    end\n    return largest\nend", "    largest = -1\n    for el\
    \ in arr\n        if el > largest\n            largest = el\n        end\n   \
    \ end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the index of the element in the given vector that is\
    \ the\nlargest and also not greater than the element immediately preceding it.\
    \ Return -1\nif no such element exists.", "    largest = arr[1]\n    for i in\
    \ 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n \
    \       end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\n4.2 Finding the index of the first element in a vector which is not greater\
    \ than or equal to the element immediately preceding it\nWrite a function that\
    \ returns the index of the first element in a vector which is not greater than\
    \ or equal to the element immediately preceding it. Return -1 if no such element\
    \ exists.", "    largest = arr[1]\n    for i in arr[2:end]\n        if i > largest\n\
    \            largest = i\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>", "    largest = -1\n    largestIdx = -1\n    for idx\
    \ in 1:length(arr)\n        if arr[idx] > arr[largest]\n            largest =\
    \ idx\n            largestIdx = idx\n        end\n    end\n    return largestIdx\n\
    end", "    largest = arr[1]\n    for i in arr[2:end]\n        if i > largest\n\
    \            largest = i\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert can_arrange([1, 2, 4, 3, 5]) == 3\n@assert\
    \ can_arrange([1, 2, 3]) == -1\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the index of the element which is not greater than\nor equal to\
    \ the element immediately preceding it. Return -1 in the event that\nthere are\
    \ no such elements. For example, given [1, 2, 4, 3, 5], return 3.", "    largest\
    \ = -1\n    largest = findfirst(x -> x <= largest, arr)\n    if largest == -1\n\
    \        largest = -1\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the element\
    \ in the given vector that is closest to the given value. If there are multiple\
    \ elements with the same distance then return the index of the first one.", " \
    \   largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given vector\
    \ has all unique elements. \nWrite a function that returns true if the given vector\
    \ has all unique elements and false otherwise. \nWrite a function that returns\
    \ true if the given vector has all unique elements and false otherwise. \nWrite\
    \ a function that returns true if the given vector has all unique elements and\
    \ false otherwise. \nWrite a function that returns true if the given vector has\
    \ all unique elements and false otherwise. \nWrite a function that returns true\
    \ if the given vector has all unique elements and false otherwise. \nWrite a function\
    \ that returns true if the given vector has all unique elements and false otherwise.\
    \ \nWrite a function that returns true if the given vector has all unique elements\
    \ and false otherwise. \nWrite a function that returns true if the given vector\
    \ has all unique elements and false otherwise. \nWrite a function that returns\
    \ true if the given vector has all unique elements and false otherwise. \nWrite\
    \ a function that returns true if the given vector has all unique elements and\
    \ false otherwise. \nWrite a function that returns true if the given vector has\
    \ all unique elements and false otherwise. \nWrite a function that returns true\
    \ if the given vector has all unique elements and false otherwise. \nWrite a function\
    \ that returns true if the given vector has all unique elements and false otherwise.\
    \ \nWrite a function that returns true if the given vector has all unique elements\
    \ and false otherwise. \nWrite a function that returns true if the given vector\
    \ has all unique elements and false otherwise. \nWrite a function that returns\
    \ true if the given vector has all unique elements and false otherwise. \nWrite\
    \ a function that returns true if the given vector has all unique elements and\
    \ false otherwise. \nWrite a function that returns true if the given vector has\
    \ all unique elements and false otherwise. \nWrite a function that returns true\
    \ if the given vector has all unique elements and false otherwise. \nWrite a function\
    \ that returns true if the given vector has all unique elements and false otherwise.\
    \ \nWrite a function that returns true if the given vector has all unique elements\
    \ and false otherwise. \nWrite a function that returns true if the given vector\
    \ has all unique elements and false otherwise. \nWrite a function that returns\
    \ true if the given vector has all unique elements and false otherwise. \nWrite\
    \ a function that returns true if the given vector has all unique elements and\
    \ false otherwise. \nWrite a function that returns true if the given vector has\
    \ all unique elements and false otherwise. \nWrite a function that returns true\
    \ if the given vector has all unique elements and false otherwise. \nWrite a function\
    \ that returns true if the given vector has all ", "    largest = arr[1]\n   \
    \ for i in 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @time can_arrange(arr);\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the index of the element in the given array that has the largest value.", " \
    \   largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1, 2, 4, 3, 5]) == 3\n\
    @assert can_arrange([1, 2, 3]) == -1\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the index of the element in the given vector that is the\nlargest\
    \ and also not greater than the element immediately preceding it. Return -1\n\
    if no such element exists.", "    largest = arr[1]\n    for i in arr[2:end]\n\
    \        if i > largest\n            largest = i\n        end\n    end\n    return\
    \ -1\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the index\
    \ of the element in the given vector that is closest to the given value. If there\
    \ are multiple elements in the vector that match the value then return the smallest\
    \ index. For example, if the given vector is [3, 6, 9, 12, 15] and value = 12\
    \ then the function should return 3 because 12 is closest to 12 but not to 15.\
    \ If the given vector is [3, 6, 9, 12, 15] and value = 6 then the function should\
    \ return 0 because 6 is closest to 6 but not to 12.", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the element\
    \ in the given vector that is closest to the given value. If there are multiple\
    \ elements in the vector that are equidistant from the value then return the smallest\
    \ index. Otherwise return -1.", "    largest = arr[1]\n    for i in arr[2:end]\n\
    \        if i > largest\n            largest = i\n        end\n    end\n    return\
    \ largest\nend", "    largest = -1\n    for i = 1:length(arr)\n        if arr[i]\
    \ > arr[largest]\n            largest = i\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in\
    \ arr[2:end]\n        if i > largest\n            largest = i\n        end\n \
    \   end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the index of the element in\
    \ the given vector that is closest to zero. \nIf no such element exists then return\
    \ -1. \nThe given vector will not contain duplicate values.", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1, 2, 4, 3, 5]) == 3\n@assert can_arrange([1, 2, 3]) == -1\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given vector\
    \ contains all unique elements. For example:", "    largest = arr[1]\n    for\
    \ i in 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for x in arr[2:end]\n        if x <= largest\n      \
    \      largest = x\n        else\n            return -1\n    end\n    return largest\n\
    end", "    largest = arr[1]\n    for i in arr[2:end]\n        if i > largest\n\
    \            largest = i\n        end\n    end\n    return largest\nend", "  \
    \  largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nNow let's test our function by creating some vectors and seeing\
    \ what they return.", "    largest = arr[1]\n    for x in arr[2:end]\n       \
    \ if x < largest\n            largest = x\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.3>\n@assert can_arrange([1,2,4,3,5]) == 3\n\
    @assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times an element appears in an array. For example,\
    \ the number of times 3 appears in [1,2,3,4,3] is 3.", "    largest = -1\n   \
    \ largestIndex = -1\n    for index in 1:length(arr)\n        if arr[index] > arr[largest]\n\
    \            largest = arr[index]\n            largestIndex = index\n        end\n\
    \    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.0>", " \
    \   largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.4>", "    largest = -1\n    for x in arr\n   \
    \     if x > largest\n            largest = x\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<text>\nThe function above is called can_arrange and\
    \ returns a single Int64. Let's see how it works:", "    largest = arr[1]\n  \
    \  for i in arr[2:end]\n        if i > largest\n            largest = i\n    \
    \    end\n    end\n    return largest\nend", "    largest = arr[1]\n    for i\
    \ in 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the index of the first element of a vector\n   \
    \ which is greater than or equal to the element immediately preceding it. If\n\
    \    no such element exists then return -1. The given vector will not contain\n\
    \    duplicate values.", "    largest = arr[1]\n    for i in 2:length(arr)\n \
    \       if arr[i] > largest\n            largest = arr[i]\n        else\n    \
    \        break\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype can_arrange(vec)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype can_arrange(vec)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ can_arrange(vec)\n</cell>\n<code language=julia-1.4>\n@code_warntype can_arrange(vec)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype can_arrange(vec)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype can_arrange(vec)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype can_arrange(vec)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ can_arrange(vec)\n</cell>\n<code language=julia-1.4>\n@code_warntype can_arrange(vec)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype can_arrange(vec)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype can_arrange(vec)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype can_arrange(vec)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ can_arrange(vec)\n</cell>\n<code language=julia-1.4>\n@code_warntype can_arrange(vec)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype can_arrange(vec)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype can_arrange(vec)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype can_arrange(vec)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ can_arrange(vec)\n</cell>\n<code language=julia-1.4>\n@code_warntype can_arrange(vec)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype can_arrange(vec)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype can_arrange(vec)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype can_arrange(vec)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ can_arrange(vec)\n</cell>\n<code language=julia-1.4>\n@code_", "    largest\
    \ = arr[1]\n    for i in arr[2:end]\n        if i > largest\n            largest\
    \ = i\n        end\n    end\n    return largest\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns the number of elements in\
    \ the vector that are greater than or equal to each other. For example, if the\
    \ vector is [5, 3, 7, 2, 9] then the function should return 4 because there are\
    \ 4 elements in the vector that are greater than or equal to each other (5, 3,\
    \ 7, and 9).", "    largest = arr[1]\n    for i in arr[2:end]\n        if i >\
    \ largest\n            largest = i\n        end\n    end\n    return largest\n\
    end", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.0>", "    largest = arr[1]\n    for x in arr[2:end]\n\
    \        if x > largest\n            largest = x\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>\n@time can_arrange([1,2,4,3,5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the index of the element\
    \ in the given vector that is closest to zero. \nIf no such element exists then\
    \ return -1. \nThe given vector will not contain duplicate values.", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    return largest\nend", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\n@time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.5>\n\
    @time can_arrange([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of elements in a vector that are\ngreater than or equal to\
    \ the element immediately preceding it. If no\nsuch element exists then return\
    \ -1. The given vector will not contain\nduplicate values.", "    largest = Int64(-1)\
    \ #initialize largest to -1\n    for x in arr\n        if x > largest\n      \
    \      largest = x\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of elements in a vector that are not equal to some value.  For instance, if\
    \ the vector contains [1,2,3,4,5] and you pass it 3, then the function should\
    \ return 3.", "    largest = Int64(-1) # initialize largest index to -1\n    largest\
    \ = arr[1] # set largest index to first element\n    for el in arr[2:end] # iterate\
    \ over remaining elements\n        if el > largest\n            largest = el\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<text>\nThe function\
    \ above is called can_arrange and returns a single Int64 value. The value returned\
    \ is the largest index of an element which is not greater than or equal to the\
    \ element immediately preceding it. If no such element exists then return -1.\
    \ The given vector will not contain duplicate values.", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the index of the first element of a vector\n\
    \    which is greater than or equal to the element immediately preceding it. If\n\
    \    no such element exists then return -1. The given vector will not contain\n\
    \    duplicate values.", "    largest = arr[1]\n    for i in arr[2:end]\n    \
    \    if i > largest\n            largest = i\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.3>\n@assert can_arrange([1, 2,\
    \ 4, 3, 5]) == 3\n@assert can_arrange([1, 2, 3]) == -1\n</cell>\n<text>\n4.3 Finding\
    \ the first element in a vector which is not greater than or equal to another\
    \ element\nWrite a function that returns the index of the first element in a vector\
    \ which is not greater than or equal to the element immediately preceding it.\
    \ Return \u22121 if no such element exists. The given vector will not contain\
    \ duplicate values.", "    largest = -1\n    largestIndex = -1\n    for index\
    \ in 1:length(arr)\n        if arr[index] > arr[largest]\n            largest\
    \ = arr[index]\n            largestIndex = index\n        end\n    end\n    return\
    \ largestIndex\nend\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.0>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\n4.3 Finding the median\
    \ of an array\nThe median is the value separating the higher half of a sample\
    \ from the lower half. Given an array $A$ of $n$ values, the median is the value\
    \ $A[n/2]$, where $n$ is the number of elements in the array. For example, if\
    \ the array has $n$ elements, the median is the value $A[n/2]$. If the array has\
    \ fewer than $n$ elements, then the median is the value of the first element.\
    \ Write a function that returns the median of an array of numbers.", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    return largest\nend", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will return the index of the element\
    \ in the given vector that is closest to the given value. If there are multiple\
    \ elements with the same value then return the index of the first one. For example,\
    \ if the given vector is [2, 3, 2, 3] and the given value is 2 then the function\
    \ should return 1 because 2 is the second element in the vector that is closest\
    \ to 2.", "    largest = -1\n    for x in arr\n        if x > largest\n      \
    \      largest = x\n        end\n    end\n    return largest\nend", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    return largest\nend", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of elements in a\
    \ vector which are not equal to its second element. For example, the following\
    \ vector has two non-equal elements: [1, 2] and [2, 3]. Your function should return\
    \ the number 2. Your function should work for any type of vector, even those with\
    \ only one element.", "    largest = arr[1]\n    for i in 2:length(arr)\n    \
    \    if arr[i] > largest\n            largest = arr[i]\n        else\n       \
    \     return -1\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    largest = arr[1]\n    for i in 2:length(arr)\n  \
    \      if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the index of the element in the given vector that is closest to the given value.\
    \ If there is no such element then return -1.", "    largest = -1\n    largest\
    \ = findfirst(x -> x <= arr[largest], arr)\n    if largest == -1\n        largest\
    \ = -1\n    end\n    largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the index of the first element in a vector that is greater than\
    \ or equal to the element immediately preceding it. Return -1 if no such element\
    \ exists.", "    largest = -1\n    largestIndex = 0\n    for i = 1:length(arr)\n\
    \        if arr[i] > arr[largest]\n            largest = arr[i]\n            largestIndex\
    \ = i\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in arr[2:end]\n        if i > largest\n       \
    \     largest = i\n        end\n    end\n    return largest\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the index of the element in the given\
    \ array which has the largest value. If there are multiple elements which have\
    \ the same value then return the index of the first such element.", "    largest\
    \ = arr[1]\n    for x in arr[2:end]\n        if x <= largest\n            largest\
    \ = x\n        else\n            return -1\n        end\n    end\n    return largest\n\
    end", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times the element\
    \ \"x\" appears in an array. \nIf no such element exists then return -1. \nThe\
    \ given vector will not contain duplicate values.", "    largest = arr[1]\n  \
    \  for i in arr[2:end]\n        if i > largest\n            largest = i\n    \
    \    end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.4>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n          \
    \  largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the index of the element in\
    \ the given vector that is\nthe greatest among all elements in the given vector.\
    \ If there are multiple elements in\nthe vector that are the greatest, then return\
    \ the index of the first such element. If\nthere are no such elements, return\
    \ -1.", "    largest = -1\n    largest = findfirst(x -> x <= largest, arr)\n \
    \   if largest == -1\n        largest = length(arr)\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.4>\n@time can_arrange(range(1000000))\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the index of the element in\
    \ the given vector that is closest to the given value. If no such element exists\
    \ then return -1.", "    largest = arr[1]\n    for i in arr[2:end]\n        if\
    \ i > largest\n            largest = i\n        end\n    end\n    return largest\n\
    end", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest = -1\n    for x in arr\n   \
    \     if x > largest\n            largest = x\n        end\n    end\n    return\
    \ largest\nend", "    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n\
    \        if arr[index] > arr[largest]\n            largest = arr[index]\n    \
    \        largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the index of the\
    \ element in the given vector that is closest to the given value. If there are\
    \ multiple elements in the vector that are equally close to the given value then\
    \ return the index of the smallest one.", "    largest = -1\n    for i in arr\n\
    \        if i > largest\n            largest = i\n        end\n    end\n    return\
    \ largest\nend", "    largest = Int64(-1)\n    for x in arr\n        if x > largest\n\
    \            largest = x\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\nExercise 2\nWrite a function that returns the index\
    \ of the first element of a vector\n    that satisfies a predicate. For example,\
    \ given [1,2,3,4,5], return the\n    index of the first element in the vector\
    \ that is greater than or equal\n    to 2.", "    largest = arr[1]\n    for i\
    \ in 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<text>\nLet's test it\
    \ on a few examples:", "    largest = -1\n    for i in 1:length(arr)\n       \
    \ if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n  \
    \  return largest\nend", "    largest = arr[1]\n    for i in 2:length(arr)\n \
    \       if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n          \
    \  largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the index of the first element\
    \ of a vector\n    which is greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given vector will not\
    \ contain\n    duplicate values.", "    largest = -1\n    for x in arr\n     \
    \   if x > largest\n            largest = x\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if the given vector contains any duplicates.",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            return -1\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the index of the element in\
    \ the given vector that is closest to the given value. If no such element exists\
    \ then return -1.", "    largest = arr[1]\n    for i in arr[2:end]\n        if\
    \ i > largest\n            largest = i\n        end\n    end\n    return largest\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the index of the\
    \ first element in a vector that is greater than or equal to the element immediately\
    \ preceding it. If there is no such element then return -1. The given vector will\
    \ not contain duplicate values.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the index of the element in the given\
    \ vector that is closest to zero.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>\n@time can_arrange([1,2,4,3,5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the first\
    \ element of a vector\n    which is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given vector\
    \ will not contain\n    duplicate values.", "    largest = arr[1]\n    for i in\
    \ 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n \
    \       end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.4>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ -1\n    for x in arr\n        if x > largest\n            largest = x\n    \
    \    end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1, 2, 4, 3, 5]) == 3\n@assert can_arrange([1, 2, 3]) == -1\n\
    </cell>\n<text>\n4.3 Finding the median of an array\nThe median is the value separating\
    \ the higher half of a data set from the lower half. \nThe median of an even-length\
    \ data set is just the average of the two middle values. \nThe median of an odd-length\
    \ data set is the average of the two middle plus one value.", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        else\n            break\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.4>", "    largest = Int64(-1)\
    \ # initialize largest index to -1\n    largest = arr[1] # set largest index to\
    \ first element\n    for i = 2:length(arr)\n        if arr[i] > largest\n    \
    \        largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the index of the first element of a vector\n    which is greater than or equal\
    \ to the element immediately preceding it. If\n    no such element exists then\
    \ return -1. The given vector will not contain\n    duplicate values.", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>", "    largest = arr[1]\n    for i in arr[2:end]\n \
    \       if i > largest\n            largest = i\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ index of the first element of a vector\n    which is not greater than or equal\
    \ to the element immediately preceding it. If\n    no such element exists then\
    \ return -1. The given vector will not contain\n    duplicate values.", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ -1\n    largestIndex = 0\n    for index in 1:length(arr)\n        if arr[index]\
    \ > arr[largest]\n            largest = arr[index]\n            largestIndex =\
    \ index\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.3>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the index of the first element in a vector that\nsatisfies a predicate p (which\
    \ should take two arguments). For example, if\np is a function which takes an\
    \ element and returns true or false then the", "    largest = Int64(-1)\n    for\
    \ x in arr\n        if x > largest\n            largest = x\n        end\n   \
    \ end\n    return largest\nend", "    largest = Int64(-1)\n    for x in arr\n\
    \        if x > largest\n            largest = x\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<text>\nNow let's try it out!", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the index of the element in the given vector\
    \ that is closest to the given value. If there are multiple elements in the vector\
    \ that are equally close, return the index of the smallest one. For example, if\
    \ arr = [1, 3, 6, 4, 7] and val = 6, the function should return 2.", "    largest\
    \ = Int64(-1)\n    for x in arr\n        if x > largest\n            largest =\
    \ x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.3>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.0>", "    largest = Int64(-1)\n    for x in arr\n\
    \        if x > largest\n            largest = x\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n \
    \   for i in 2:length(arr)\n        if arr[i] > largest\n            largest =\
    \ arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of times the given element appears\
    \ in an array. For example, the element 3 appears twice in the array [3, 3, 3,\
    \ 3]. Write a function that returns the number of times the element 3 appears\
    \ in the array [3, 3, 3, 3]. Do not use the built-in function count. Write a function\
    \ that returns the number of times the element 3 appears in the array [3, 3, 3,\
    \ 3]. Do not use the built-in function find. Write a function that returns the\
    \ number of times the element 3 appears in the array [3, 3, 3, 3]. Do not use\
    \ the built-in function findall.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.3>", "    largest =\
    \ arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n          \
    \  largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the index of the element in\
    \ the given vector that is closest to the given value. If there are multiple elements\
    \ in the vector that are equally close, return the index of the first one. For\
    \ example, if the given vector is [1, 2, 3, 4, 5] and you are looking for 3, then\
    \ the function should return 2.", "    largest = -1\n    for x in arr\n      \
    \  if x > largest\n            largest = x\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for x in\
    \ arr[2:end]\n        if x > largest\n            largest = x\n        end\n \
    \   end\n    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the index of the element in the given vector that is closest to\
    \ the given value.", "    largest = Int64(-1)\n    largest = arr[1]\n    for i\
    \ in 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nThe function above is called can_arrange and returns a single\
    \ Int64 value. The function can take any type of array and return a Int64 value\
    \ which represents the largest index of an element which is not greater than or\
    \ equal to the element immediately preceding it. No duplicate values will be included\
    \ in the returned Int64 value.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ -1\n    largestIndex = -1\n    for i = 1:length(arr)\n        if arr[i] > arr[largest]\n\
    \            largest = arr[i]\n            largestIndex = i\n        end\n   \
    \ end\n    return largestIndex\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns true if the given vector contains all unique elements. \nWrite\
    \ a function that returns true if the given vector contains all unique elements\
    \ and false otherwise.", "    largest = -1\n    for x in arr\n        if x > largest\n\
    \            largest = x\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.0>\n@time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.0>\n\
    @time can_arrange([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times a given element appears in an array. For example,\
    \ the number of times 3 appears in [1,2,3,4,3,5,6,7,8,9] would be 3.", "    largest\
    \ = arr[1]\n    for i in arr[2:end]\n        if i > largest\n            largest\
    \ = i\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend",
  "    largest = -1\n    largestIndex = -1\n    for index in 1:length(arr)\n     \
    \   if arr[index] > arr[largest]\n            largest = arr[index]\n         \
    \   largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<code language=julia-1.4>", "    largest = Int64(-1) # initialize largest\
    \ index to -1\n    largest = arr[1] # set largest index to first element of array\n\
    \    for i in 2:length(arr) # iterate over remaining elements of array\n     \
    \   if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,\
    \ 2, 4, 3, 5]) == 3\n@assert can_arrange([1, 2, 3]) == -1\n</cell>\n<text>\n4.3\
    \ Finding the Index of an Element in a Vector\nGiven a vector arr and a value\
    \ x, find and return the index of the first element of arr such that arr[i] >\
    \ x. If such an element does not exist, return -1.", "    largest = -1\n    largestIndex\
    \ = -1\n    for i in 1:length(arr)\n        if arr[i] > arr[largest]\n       \
    \     largest = arr[i]\n            largestIndex = i\n        end\n    end\n \
    \   return largestIndex\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the index of the element in the given vector that is closest to the\
    \ given value. If there are multiple elements in the vector that are equally close\
    \ to the value then return the index of the first such element. If there are no\
    \ elements in the vector that are equally close to the value then return -1.",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the first\
    \ element of a vector\n    which is greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given vector\
    \ will not contain\n    duplicate values.", "    largest = arr[1]\n    for x in\
    \ arr[2:end]\n        if x > largest\n            largest = x\n        end\n \
    \   end\n    return largest\nend", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the index of the element in the given vector that has the largest absolute value.\
    \ If there are multiple elements in the vector that have the largest absolute\
    \ value then return the index of the first one. Otherwise return -1.", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the index of the element which\
    \ appears most frequently in an array.", "    largest = Int64(-1)\n    for el\
    \ in arr\n        if el > largest\n            largest = el\n        end\n   \
    \ end\n    return largest\nend\n</cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of elements in a vector which\
    \ are not equal to its first element. For example, [1,2,3,4,5] has 5 elements,\
    \ all of which are different from 1. Write a test for this function.", "    largest\
    \ = arr[1]\n    for i in arr[2:end]\n        if i > largest\n            largest\
    \ = i\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.4>",
  "    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = -1\n    largestIndex = -1\n    for i = 1:length(arr)\n        if\
    \ arr[i] > largest\n            largest = arr[i]\n            largestIndex = i\n\
    \        end\n    end\n    return largestIndex\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of elements in a vector which are\
    \ less than a given value.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.3>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if the given vector contains all unique elements.\
    \ \nThe given vector will not contain duplicate values.", "    largest = -1\n\
    \    largest = findfirst(x -> x <= arr[largest], arr)\n    if largest == -1\n\
    \        largest = -1\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in arr[2:end]\n        if i > largest\n       \
    \     largest = i\n        end\n    end\n    return largest\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the index of the first element of a\
    \ vector\n    which is not greater than or equal to the element immediately preceding\
    \ it.\n    If no such element exists then return -1. The given vector will not\
    \ contain\n    duplicate values.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nExercise 2\nWrite a function that will\
    \ return the index of the element in the given array that is closest to the given\
    \ value. If the given value is greater than the largest value in the array then\
    \ return the length of the array. If the given value is less than the smallest\
    \ value in the array then return -1. Otherwise return the index of the element\
    \ in the array that is closest to the given value.", "    largest = arr[1]\n \
    \   for i in 2:length(arr)\n        if arr[i] > largest\n            largest =\
    \ arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<text>\nLet's\
    \ test the function by comparing it to the built-in max() function", "    largest\
    \ = Int64(-1)\n    for x in arr\n        if x > largest\n            largest =\
    \ x\n        end\n    end\n    return largest\nend", "    largest = -1\n    for\
    \ i = 1:length(arr)\n        if arr[i] > arr[largest]\n            largest = i\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the index of the first\
    \ element in a vector that\nis greater than or equal to the element immediately\
    \ preceding it. Return -1\nif no such element exists.", "    largest = -1\n  \
    \  largestIdx = -1\n    for idx in 1:length(arr)\n        if arr[idx] > arr[largest]\n\
    \            largest = idx\n            largestIdx = idx\n        end\n    end\n\
    \    return largestIdx\nend\n</cell>\n<code language=julia-1.5>", "    largest\
    \ = -1\n    largest_idx = -1\n    for idx in 1:length(arr)\n        if arr[idx]\
    \ > arr[largest]\n            largest = arr[idx]\n            largest_idx = idx\n\
    \        end\n    end\n    return largest_idx\nend", "    largest = arr[1]\n \
    \   for i in arr[2:end]\n        if i > largest\n            largest = i\n   \
    \     end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.4>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the index of the element in\
    \ the given vector that is the\nlargest value greater than or equal to the element\
    \ immediately preceding it. If\nno such element exists then return -1. The given\
    \ vector will not contain\nduplicate values.", "    largest = arr[1]\n    for\
    \ i in 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = -1\n    largest = arr[1]\n    for i in arr[2:end]\n        if i >\
    \ largest\n            largest = i\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in\
    \ 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n \
    \       else\n            break\n    end\n    return -1\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in arr[2:end]\n        if i > largest\n       \
    \     largest = i\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    largest = -1\n    for x in arr\n        if x > largest\n\
    \            largest = x\n        end\n    end\n    return largest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the index of the element in\
    \ the given vector that is closest to the given value. If there are multiple elements\
    \ in the vector that are equally close, return the index of the first such element.\
    \ For example, if the given value is 3, and the given vector is [5, 4, 6, 3, 1],\
    \ your function should return 2, since 3 is the second smallest element in the\
    \ vector.", "    largest = Int64(-1)\n    for x in arr\n        if x > largest\n\
    \            largest = x\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n          \
    \  largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of elements in a\
    \ vector which are not equal to zero.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the index of the first element in a vector that is greater than or equal to\
    \ the element immediately preceding it. Return -1 if no such element exists.",
  "    largest = arr[1]\n    for i in arr[2:end]\n        if i > largest\n       \
    \     largest = i\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n  \
    \      if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of elements in a vector which are not equal to zero.", "    largest\
    \ = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n        if arr[index]\
    \ > arr[largest]\n            largest = arr[index]\n            largestIndex =\
    \ index\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in arr[2:end]\n        if i > largest\n       \
    \     largest = i\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n  \
    \      if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the index of the element in the given vector that is closest to the given value.\
    \ If there are multiple elements with the same value then return the smallest\
    \ index. For example, given vectors [1, 1, 2, 3, 4, 5] and value 1 the function\
    \ should return 3.", "    largest = arr[1]\n    for i in arr[2:end]\n        if\
    \ i > largest\n            largest = i\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in\
    \ 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n \
    \       end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in arr[2:end]\n        if i > largest\n       \
    \     largest = i\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    largest = -1\n    largest = findfirst(x -> x <= arr[largest],\
    \ arr)\n    if largest == -1\n        largest = -1\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in\
    \ 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n \
    \       end\n    end\n    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of times a given value appears in an array.\
    \ For example, the number of times 3 appears in [1, 1, 3, 3, 3, 3] would be 3.",
  "    largest = Int64(-1)\n    for x in arr\n        if x > largest\n           \
    \ largest = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @time can_arrange(collect(1:100))\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the index of the first element of a vector\n    which is not greater\
    \ than or equal to the element immediately preceding it. If\n    no such element\
    \ exists then return -1. The given vector will not contain\n    duplicate values."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
