name: HumanEval_49_modp
language: jl
prompt: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n \
  \   3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
  \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
  \ p::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
  \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
  @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
  \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
completions: ["    if n==0 return 1\n    if n==1 return p\n    if p==0 return 0\n\
    \    if p==1 return 1\n    if p==2 return n\n    if p==3 return modp(2*n-1, p)\n\
    \    if p==4 return modp(2*n-1, p)\n    if p==5 return modp(2*n-1, p)\n    if\
    \ p==6 return modp(2*n-1, p)\n    if p==7 return modp(2*n-1, p)\n    if p==8 return\
    \ modp(2*n-1, p)\n    if p==9 return modp(2*n-1, p)\n    if p==10 return modp(2*n-1,\
    \ p)\n    if p==11 return modp(2*n-1, p)\n    if p==12 return modp(2*n-1, p)\n\
    \    if p==13 return modp(2*n-1, p)\n    if p==14 return modp(2*n-1, p)\n    if\
    \ p==15 return modp(2*n-1, p)\n    if p==16 return modp(2*n-1, p)\n    if p==17\
    \ return modp(2*n-1, p)\n    if p==18 return modp(2*n-1, p)\n    if p==19 return\
    \ modp(2*n-1, p)\n    if p==20 return modp(2*n-1, p)\n    if p==21 return modp(2*n-1,\
    \ p)\n    if p==22 return modp(2*n-1, p)\n    if p==23 return modp(2*n-1, p)\n\
    \    if p==24 return modp(2*n-1, p)\n    if p==25 return modp(2*n-1, p)\n    if\
    \ p==26 return modp(2*n-1, p)\n    if p==27 return modp(2*n-1, p)\n    if p==28\
    \ return modp(2*n-1, p)\n    if p==29 return modp(2*n-1, p)\n    if p==30 return\
    \ modp(2*n-1, p)\n    if p==31 return modp(2*n-1, p)\n    if p==32 return modp(2*n-1,\
    \ p)\n    if p==33 return modp(2*n-1, p)\n    if p==34 return modp(2*n-1, p)\n\
    \    if p==35 return modp(2*n-1, p)\n    if p==36 return modp(2*n-1, p)\n    if\
    \ p==37 return modp(2*n-1, p)\n    if p==38 return modp(2*n-1, p)\n    if p==39\
    \ return modp(2*n-1, p)\n    if p==40 return modp(2*n-1, p)\n    if p==41 return\
    \ modp(2*n-1, p)\n    if p==42 return modp(", "    if n == 0 then return 1\n \
    \   if p == 0 then return 0\n    if p == 1 then return n\n    if p < 0 then return\
    \ modp(-n, p)\n    if p > 1 then return modp(n, p - 1)\n    if p < n then return\
    \ modp(n, p)\n    if p > n then return modp(n, p - n)\n    if p < n then return\
    \ modp(n, p)\n    if p > n then return modp(n, p - n)\n    if p < n then return\
    \ modp(n, p)\n    if p > n then return modp(n, p - n)\n    if p < n then return\
    \ modp(n, p)\n    if p > n then return modp(n, p - n)\n    if p < n then return\
    \ modp(n, p)\n    if p > n then return modp(n, p - n)\n    if p < n then return\
    \ modp(n, p)\n    if p > n then return modp(n, p - n)\n    if p < n then return\
    \ modp(n, p)\n    if p > n then return modp(n, p - n)\n    if p < n then return\
    \ modp(n, p)\n    if p > n then return modp(n, p - n)\n    if p < n then return\
    \ modp(n, p)\n    if p > n then return modp(n, p - n)\n    if p < n then return\
    \ modp(n, p)\n    if p > n then return modp(n, p - n)\n    if p < n then return\
    \ modp(n, p)\n    if p > n then return modp(n, p - n)\n    if p < n then return\
    \ modp(n, p)\n    if p > n then return modp(n, p - n)\n    if p < n then return\
    \ modp(n, p)\n    if p > n then return modp(n, p - n)\n    if p < n then return\
    \ modp(n, p)\n    if p > n then return modp(n, p - n)\n    if p < n then return\
    \ modp(n, p)\n    if p > n then return modp(n, p - n)\n    if p < n then return\
    \ modp(n, p)\n    if p > n then return modp(n, p - n)\n    if p < n then return\
    \ modp(n, p)\n    if p > n then return modp(n, p - n)\n    if p < n then return\
    \ modp(n, p)\n    if p > n then return modp(n, p - n)\n    if p < n then return\
    \ modp(n, p)\n    if p > n then return modp(n, p - n)\n    if p < n then return\
    \ modp(n, p)\n    if p > n then return modp(n, p - n)\n    if p < n then ", " \
    \   if n == 0 \n        then return 1\n    else if p == 0 \n        then return\
    \ 0\n    else if p < 0 \n        then return modp(abs(n), abs(p))\n    else if\
    \ n < 0 \n        then return modp(abs(n), abs(p))\n    else if n == p \n    \
    \    then return n\n    else if n < p \n        then return modp(n - p, p)\n \
    \   else if n > p \n        then return modp(n, p - abs(n))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        then return 1\n    else if\
    \ p == 0 \n        then return 0\n    else if p == 1 \n        then return n\n\
    \    else if p < 0 \n        then return modp(-n, p)\n    else if p > 0 \n   \
    \     then return modp(n, p mod n)\n    else return modp(n, p mod n)\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n <= 0\n        error(\"modp requires n >=\
    \ 0\")\n    elseif p <= 0\n        error(\"modp requires p >= 0\")\n    elseif\
    \ p < n\n        error(\"modp requires p >= n\")\n    else\n        modp(n - 1,\
    \ p)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n==0 then return\
    \ 1\n    if n==1 then return p\n    if p==0 then return 0\n    if p==1 then return\
    \ 1\n    if p==2 then return n\n    if p==3 then return modp(2*n, p)\n    if p==4\
    \ then return modp(3*n, p)\n    if p==5 then return modp(4*n, p)\n    if p==6\
    \ then return modp(5*n, p)\n    if p==7 then return modp(6*n, p)\n    if p==8\
    \ then return modp(7*n, p)\n    if p==9 then return modp(8*n, p)\n    if p==10\
    \ then return modp(9*n, p)\n    if p==11 then return modp(10*n, p)\n    if p==12\
    \ then return modp(11*n, p)\n    if p==13 then return modp(12*n, p)\n    if p==14\
    \ then return modp(13*n, p)\n    if p==15 then return modp(14*n, p)\n    if p==16\
    \ then return modp(15*n, p)\n    if p==17 then return modp(16*n, p)\n    if p==18\
    \ then return modp(17*n, p)\n    if p==19 then return modp(18*n, p)\n    if p==20\
    \ then return modp(19*n, p)\n    if p==21 then return modp(20*n, p)\n    if p==22\
    \ then return modp(21*n, p)\n    if p==23 then return modp(22*n, p)\n    if p==24\
    \ then return modp(23*n, p)\n    if p==25 then return modp(24*n, p)\n    if p==26\
    \ then return modp(25*n, p)\n    if p==27 then return modp(26*n, p)\n    if p==28\
    \ then return modp(27*n, p)\n    if p==29 then return modp(28*n, p)\n    if p==30\
    \ then return modp(29*n, p)\n    if p==31 then return modp(30*n, p)\n    if p==32\
    \ then return modp(31*n, p)\n    if p==33 then return modp(32*n, p)\n    if p==34\
    \ then return modp(33*n, p)\n    if p==35 then return modp(34*n, p)\n    if p==36\
    \ then return modp(35*n, p)\n    if p==37 then return modp(36*n, p)\n    if p==38\
    \ then return modp(37*n, p)\n    if p==39 then return ", "    if n == 0 then return\
    \ 1\n    if n == 1 then return p\n    if p < 0 then return 0\n    if p > p then\
    \ return 0\n    if p < n then return modp(n - 1, p)\n    if p > n then return\
    \ modp(n, p)\n    if p < n then return modp(n - 1, p)\n    if p > n then return\
    \ modp(n, p)\n    if p < n then return modp(n - 1, p)\n    if p > n then return\
    \ modp(n, p)\n    if p < n then return modp(n - 1, p)\n    if p > n then return\
    \ modp(n, p)\n    if p < n then return modp(n - 1, p)\n    if p > n then return\
    \ modp(n, p)\n    if p < n then return modp(n - 1, p)\n    if p > n then return\
    \ modp(n, p)\n    if p < n then return modp(n - 1, p)\n    if p > n then return\
    \ modp(n, p)\n    if p < n then return modp(n - 1, p)\n    if p > n then return\
    \ modp(n, p)\n    if p < n then return modp(n - 1, p)\n    if p > n then return\
    \ modp(n, p)\n    if p < n then return modp(n - 1, p)\n    if p > n then return\
    \ modp(n, p)\n    if p < n then return modp(n - 1, p)\n    if p > n then return\
    \ modp(n, p)\n    if p < n then return modp(n - 1, p)\n    if p > n then return\
    \ modp(n, p)\n    if p < n then return modp(n - 1, p)\n    if p > n then return\
    \ modp(n, p)\n    if p < n then return modp(n - 1, p)\n    if p > n then return\
    \ modp(n, p)\n    if p < n then return modp(n - 1, p)\n    if p > n then return\
    \ modp(n, p)\n    if p < n then return modp(n - 1, p)\n    if p > n then return\
    \ modp(n, p)\n    if p < n then return modp(n - 1, p)\n    if p > n then return\
    \ modp(n, p)\n    if p < n then return modp(n - 1, p)\n    if p > n then return\
    \ modp(n, p)\n    if p < n then return modp(n - 1, p)\n    if p > n then return\
    \ modp(n, p)\n    if p < n then return modp(n - 1, p)\n    if p > n then return\
    \ modp(n, p)\n    if p < n then return modp(n - 1, p)\n    if p > n then return\
    \ modp(n, p)", "    if n == 0 then return 1\n    if n == 1 then return p\n   \
    \ if p < 0 then return modp(abs(n), p)\n    if p > p then return modp(n, p - p)\n\
    \    if p < p then return modp(n, p - p)\n    return modp(n, p - p)\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n < 0 \n        error(\"modp() only works\
    \ with positive numbers\")\n    else if n < p \n        return n\n    else \n\
    \        return modp(n - p, p)\nend\n</cell>\n<code language=julia-1.3>", "  \
    \  if n < 0 \n        error(\"n must be positive\")\n    else if n < p \n    \
    \    error(\"n must be less than p\")\n    else if n == 0 \n        error(\"n\
    \ must be positive\")\n    else if p == 0 \n        error(\"p must be positive\"\
    )\n    else if p == 1 \n        error(\"p must be odd\")\n    else if p == -1\
    \ \n        error(\"p must be even\")\n    else if p == 2 \n        error(\"p\
    \ must be even\")\n    else if p < 2 \n        error(\"p must be greater than\
    \ 2\")\n    else if p < n \n        error(\"p must be greater than n\")\n    else\
    \ \n        return n\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"Return 2^n\
    \ modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101,\
    \ 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>>\
    \ modp(100, 101)\n    1\n    \"\"\"", "    if n <= 0 \n        then return 0\n\
    \    else if p == 0 \n        then return 1\n    else if p > n \n        then\
    \ return modp(n, p mod n)\n    else \n        return modp(n, p mod n) \nend\n\
    </cell>\n<code language=julia-1.5>", "    if p == 0 \n        return n\n    else\
    \ if n == 0 \n        return p\n    else if p < 0 \n        return modp(-n, p)\n\
    \    else if n < 0 \n        return modp(-n, p)\n    else if p > 0 \n        return\
    \ modp(n, p - 1)\n    else if n < p \n        return modp(n, p)\n    else \n \
    \       return modp(n, p - 1)\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ if n == 0 then return 1\n    if p == 0 then return 0\n    if n <= p then return\
    \ modp(n - 1, p) \n    else return modp(n / p, p) * p\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return nth root of p (be aware of numerics).\n    >>> nthroot(3, 5)\n  \
    \  1.73205080756888\n    >>> nthroot(1101, 101)\n    2.2697182310199\n    >>>\
    \ nthroot(0, 101)\n    1.0\n    >>> nthroot(3, 11)\n    2.82842712474619\n   \
    \ >>> nthroot(100, 101)\n    1.0\n    \"\"\"", "    if n == 0 \n        then return\
    \ 1\n    else if p == 0 \n        then return 0\n    else if p < 0 \n        then\
    \ return modp(-n, p)\n    else if n < 0 \n        then return modp(-n, p)\n  \
    \  else if n < p \n        then return modp(n, p)\n    else \n        return modp(n,\
    \ p - n)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n modulo p (be\
    \ aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n  \
    \  2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100,\
    \ 101)\n    1\n    \"\"\"", "    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if p < 0\n        error(\"p must be positive\")\n    else if n ==\
    \ 0\n        error(\"n must be positive\")\n    else if p == 0\n        error(\"\
    p must be positive\")\n    else if p == 1\n        return n\n    else if p ==\
    \ -1\n        return -n\n    else if p == 2\n        return mod2(n)\n    else\
    \ if p == 3\n        return mod3(n)\n    else if p == 4\n        return mod4(n)\n\
    \    else if p == 5\n        return mod5(n)\n    else if p == 6\n        return\
    \ mod6(n)\n    else if p == 7\n        return mod7(n)\n    else if p == 8\n  \
    \      return mod8(n)\n    else if p == 9\n        return mod9(n)\n    else if\
    \ p == 10\n        return mod10(n)\n    else if p == 11\n        return mod11(n)\n\
    \    else if p == 12\n        return mod12(n)\n    else if p == 13\n        return\
    \ mod13(n)\n    else if p == 14\n        return mod14(n)\n    else if p == 15\n\
    \        return mod15(n)\n    else if p == 16\n        return mod16(n)\n    else\
    \ if p == 17\n        return mod17(n)\n    else if p == 18\n        return mod18(n)\n\
    \    else if p == 19\n        return mod19(n)\n    else if p == 20\n        return\
    \ mod20(n)\n    else if p == 21\n        return mod21(n)\n    else if p == 22\n\
    \        return mod22(n)\n    else if p == 23\n        return mod23(n)\n    else\
    \ if p == 24\n        return mod24(n)\n    else if p == 25\n        return mod25(n)\n\
    \    else if p == 26\n        return mod26(n)\n    else if p == 27\n        return\
    \ mod27(n)\n    else if p == 28\n        return mod28(n)\n    else if p == 29\n\
    \        return mod29(n)\n    else if p == 30\n        return mod30(n)\n    else\
    \ if p == 31\n        return mod31(n)\n    else if p == 32\n        return mod32(n)\n\
    \    else if p == 33\n        return mod33(n)\n    else if p == 34\n        return\
    \ mod34(n)\n    else if p == 35\n        return mod35(n)\n    else if p == 36\n\
    \        return mod36(n)\n    else if p == 37\n        return mod37(n)\n    else\
    \ if p == 38\n        return mod38(n)\n    else if p == 39\n        return mod39(n)\n\
    \    else ", "    if p == 0 \n        then return 0\n    else if n >= p \n   \
    \     then return n - p\n        else return modp(n - p, p)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"Return n modulo p (be aware of numerics).\n \
    \   >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n\
    \    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"",
  "    if n == 0 \n        then return 1\n    else if p < 0 \n        then return\
    \ modp(abs(n), abs(p))\n    else if n < 0 \n        then return modp(abs(n), abs(p))\n\
    \    else if p < 1 \n        then return modp(abs(n), p)\n    else if n < 1 \n\
    \        then return modp(n, abs(p))\n    else if p < 2 \n        then return\
    \ modp(n, p)\n    else if n < 2 \n        then return modp(abs(n), p)\n    else\
    \ if p < 3 \n        then return modp(n, p)\n    else if n < 3 \n        then\
    \ return modp(abs(n), p)\n    else if p < 4 \n        then return modp(n, p)\n\
    \    else if n < 4 \n        then return modp(abs(n), p)\n    else if p < 5 \n\
    \        then return modp(n, p)\n    else if n < 5 \n        then return modp(abs(n),\
    \ p)\n    else if p < 6 \n        then return modp(n, p)\n    else if n < 6 \n\
    \        then return modp(abs(n), p)\n    else if p < 7 \n        then return\
    \ modp(n, p)\n    else if n < 7 \n        then return modp(abs(n), p)\n    else\
    \ if p < 8 \n        then return modp(n, p)\n    else if n < 8 \n        then\
    \ return modp(abs(n), p)\n    else if p < 9 \n        then return modp(n, p)\n\
    \    else if n < 9 \n        then return modp(abs(n), p)\n    else if p < 10 \n\
    \        then return modp(n, p)\n    else if n < 10 \n        then return modp(abs(n),\
    \ p)\n    else if p < 11 \n        then return modp(n, p)\n    else if n < 11\
    \ \n        then return modp(abs(n), p)\n    else if p < 12 \n        then return\
    \ modp(n, p)\n    else if n < 12 \n        then return modp(abs(n), p)\n    else\
    \ if p < 13 \n        then return modp(n, p)\n    else if n < 13 \n        then\
    \ return modp(abs(n), p)\n    else if p < 14 \n        then return modp(n, p)\n\
    \    else if n < 14 \n        then return modp(abs(n), p)\n    else if p < 15\
    \ \n        then return modp(n, p)\n    else if n < 15 \n        then return modp(abs(n),\
    \ p)\n    else ", "    if n <= p \n        then n \n        else modp(n - p, p)\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>", "    if n==0 return\
    \ 1\n    if n==1 return p\n    if p==0 return 0\n    if p==1 return 1\n    if\
    \ p==2 return n\n    if p==3 return modp(n-1, 2)\n    if p==4 return modp(n-1,\
    \ 3)\n    if p==5 return modp(n-1, 4)\n    if p==6 return modp(n-1, 5)\n    if\
    \ p==7 return modp(n-1, 6)\n    if p==8 return modp(n-1, 7)\n    if p==9 return\
    \ modp(n-1, 8)\n    if p==10 return modp(n-1, 9)\n    if p==11 return modp(n-1,\
    \ 10)\n    if p==12 return modp(n-1, 11)\n    if p==13 return modp(n-1, 12)\n\
    \    if p==14 return modp(n-1, 13)\n    if p==15 return modp(n-1, 14)\n    if\
    \ p==16 return modp(n-1, 15)\n    if p==17 return modp(n-1, 16)\n    if p==18\
    \ return modp(n-1, 17)\n    if p==19 return modp(n-1, 18)\n    if p==20 return\
    \ modp(n-1, 19)\n    if p==21 return modp(n-1, 20)\n    if p==22 return modp(n-1,\
    \ 21)\n    if p==23 return modp(n-1, 22)\n    if p==24 return modp(n-1, 23)\n\
    \    if p==25 return modp(n-1, 24)\n    if p==26 return modp(n-1, 25)\n    if\
    \ p==27 return modp(n-1, 26)\n    if p==28 return modp(n-1, 27)\n    if p==29\
    \ return modp(n-1, 28)\n    if p==30 return modp(n-1, 29)\n    if p==31 return\
    \ modp(n-1, 30)\n    if p==32 return modp(n-1, 31)\n    if p==33 return modp(n-1,\
    \ 32)\n    if p==34 return modp(n-1, 33)\n    if p==35 return modp(n-1, 34)\n\
    \    if p==36 return modp(n-1, 35)\n    if p==37 return modp(n-1, 36)\n    if\
    \ p==38 return modp(n-1, 37)\n    if p==39 return modp(n-1, 38)\n    if p==40\
    \ return modp(n-1, 39)\n    if p==41 return modp(n-1, 40)\n    if p==42 return\
    \ modp(n-1, 41)\n    if p==43 return modp(n-1, 42)\n    if p==44 return modp(n",
  "    if n==0 then return 1 \n    if n==1 then return p \n    if p==0 then return\
    \ 1 \n    if p==1 then return n \n    if p==2 then return n*n \n    if p==3 then\
    \ return n*n*n \n    if p==4 then return n*n*n*n \n    if p==5 then return n*n*n*n*n\
    \ \n    if p==6 then return n*n*n*n*n*n \n    if p==7 then return n*n*n*n*n*n*n\
    \ \n    if p==8 then return n*n*n*n*n*n*n*n \n    if p==9 then return n*n*n*n*n*n*n*n*n\
    \ \n    if p==10 then return n*n*n*n*n*n*n*n*n*n \n    if p==11 then return n*n*n*n*n*n*n*n*n*n\
    \ \n    if p==12 then return n*n*n*n*n*n*n*n*n*n*n \n    if p==13 then return\
    \ n*n*n*n*n*n*n*n*n*n*n*n \n    if p==14 then return n*n*n*n*n*n*n*n*n*n*n*n*n\
    \ \n    if p==15 then return n*n*n*n*n*n*n*n*n*n*n*n*n*n \n    if p==16 then return\
    \ n*n*n*n*n*n*n*n*n*n*n*n*n*n \n    if p==17 then return n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\
    \ \n    if p==18 then return n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n \n    if p==19 then\
    \ return n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n \n    if p==20 then return n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\
    \ \n    if p==21 then return n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n \n    if p==22 then\
    \ return n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n \n    if p==23 then return n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\
    \ \n    if p==24 then return n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n \n    if p==25\
    \ then return n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n \n    if p==26 then return n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\
    \ \n    if p==27 then return n*n*n*n*n*n*n*n*"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
