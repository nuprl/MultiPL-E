language: jl
name: HumanEval_142_sum_squares
results:
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0\n            sum += x\n        elseif x % 4 ==\
    \ 0\n            sum += x * x\n        else\n            sum += x * x * x\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a vector of integers and a vector of integers as input.\
    \ The function shall then return the product of the entries in the vector \n \
    \   whose indexes are a multiple of 3 and a multiple of 4. The function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 3 or\
    \ 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzn5chwlb.jl:27\nin expression starting at\
    \ /tmp/tmpzn5chwlb.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns the sum of all entries that are a multiple\
    \ of 3. The function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nExamples:\n>>> lst\n[1, 2, 3]\n>>> lst\n[]\n>>> lst\n[-1, -5, 2, -1, -5]\n\
    >>> sum_squares(lst)\n15\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl9e76mwt.jl:23\nin expression starting at\
    \ /tmp/tmpl9e76mwt.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n\
    \            sum -= x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that will take a vector of integers and return a\
    \ new vector that contains the squared entries of the original vector. \n    \n\
    \    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [1, 2, 3, -1, -5, 2, -1, -5, 0]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5eby10mj.jl:25\nin expression starting at\
    \ /tmp/tmp5eby10mj.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that will take a vector of integers and return a new vector with only\
    \ the even entries in the original vector. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [2, 4, 6]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd4g2wf58.jl:25\nin expression starting at\
    \ /tmp/tmpd4g2wf58.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ will take a vector of integers and return a new vector where all entries are\
    \ multiplied by 2 except for those entries that are a multiple of 3. The function\
    \ shall not change the entries in the original vector. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1,\
    \ 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgrywp__v.jl:27\nin expression starting at\
    \ /tmp/tmpgrywp__v.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and a number as input. The function shall then\
    \ return the sum of the integers in the vector whose indexes are a multiple of\
    \ 3 or 4 and less than or equal to the number input. The function shall not change\
    \ the entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> num\n    10\n    >>> num\n    10\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwqwcnuao.jl:27\nin expression starting at\
    \ /tmp/tmpwqwcnuao.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and a number as input. The function will then return the number of entries in\
    \ the vector that are multiples of that number. \n    \n    Examples:\n    >>>\
    \ lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n   \
    \ [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n \
    \   [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n   \
    \ [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n \
    \   [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n   \
    \ [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\
    \    >>> \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm39qlpfz.jl:27\nin expression starting at\
    \ /tmp/tmpm39qlpfz.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and will return the number of entries in the vector that are a multiple of 3\
    \ or 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpma9o23m6.jl:23\nin expression starting at\
    \ /tmp/tmpma9o23m6.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum = sum + i*i\n        elseif i%4\
    \ == 0\n            sum = sum + i*i*i\n        else\n            sum = sum + i\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc658bbzf.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpc658bbzf.jl:32\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc658bbzf.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc658bbzf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpc658bbzf.jl:33\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 146 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc658bbzf.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc658bbzf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpc658bbzf.jl:36\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: -9 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc658bbzf.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc658bbzf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpc658bbzf.jl:38\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -10 == -126\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc658bbzf.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc658bbzf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpc658bbzf.jl:39\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -165816 == 3030\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share"
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector where all entries are squared except for the entries\
    \ whose indexes are a multiple of 3 or 4. The function shall not change the entries\
    \ in the original vector. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the original vector. \nThe function shall not\
    \ change the original vector. \nThe function shall not change the original vector.\
    \ \nThe function shall not change the original vector. \nThe function shall not\
    \ change the original vector. \nThe function shall not change the original vector.\
    \ \nThe function shall not change the original vector. \nThe function shall not\
    \ change the original vector. \nThe function shall not change the original vector.\
    \ \nThe function shall not change the original vector. \nThe function shall not\
    \ change the original vector. \nThe function shall not change the original vector.\
    \ \nThe function shall not change the original vector. \nThe function shall not\
    \ change the original vector. \nThe function shall not change the original vector.\
    \ \nThe function shall not change the original vector. \nThe function shall not\
    \ change the original vector. \nThe function shall not change the original vector.\
    \ \nThe function shall not change the original vector. \nThe function shall not\
    \ change the original vector. \nThe function shall not change the original vector.\
    \ \nThe function shall not change the original vector. \nThe function shall not\
    \ change the original vector. \nThe function shall not change the original vector.\
    \ \nThe function shall not change the original vector. \nThe function shall not\
    \ change the original vector. \nThe function shall not change the original vector.\
    \ \nThe function shall not change the original vector. \nThe function shall not\
    \ change the original vector. \nThe function shall not change the original vector.\
    \ \nThe function shall not change the original vector. \nThe function shall not\
    \ change the original vector. \nThe function shall not change the original vector.\
    \ \nThe function shall not change the original vector. \nThe function shall not\
    \ change the original vector. \nThe function shall not change the original vector.\
    \ \nThe function shall not change the original vector. \nThe function shall not\
    \ change the original vector. \nThe function shall not change the original vector.\
    \ \nThe function shall not change the original vector. \nThe function shall not\
    \ change the original vector. \nThe function shall not change the original vector.\
    \ \nThe function shall not change the original vector. \nThe function shall not\
    \ change the original vector. \nThe function shall not change the original vector.\
    \ \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7tqmpsuo.jl:23\nin expression starting at\
    \ /tmp/tmp7tqmpsuo.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector where all entries are squared except for entries whose\
    \ indexes are a multiple of 3. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9d18rxbv.jl:27\nin expression starting at\
    \ /tmp/tmp9d18rxbv.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a vector of integers and return a new vector where each\
    \ entry is the sum of the squares of the entries in the original vector. \n  \
    \  \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjl5g3wg0.jl:25\nin expression starting at\
    \ /tmp/tmpjl5g3wg0.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a vector of integers and return a new vector where all\
    \ entries are multiplied by 2 except for the entries whose indexes are a multiple\
    \ of 3. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [-1,\
    \ -5, 2, -1, -5]\n    >>> lst\n    [2, 4, 6, 8, 10]\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxa3l47n9.jl:25\nin expression starting at\
    \ /tmp/tmpxa3l47n9.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmk578xat.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpmk578xat.jl:32\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmk578xat.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmk578xat.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmk578xat.jl:33\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 146 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmk578xat.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmk578xat.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmk578xat.jl:36\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: -9 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmk578xat.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmk578xat.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmk578xat.jl:38\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -10 == -126\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmk578xat.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmk578xat.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmk578xat.jl:39\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -165816 == 3030\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share"
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and return a new vector where all entries are divided by 2 except for the entries\
    \ whose indexes are a multiple of 3 and 4. The function shall not change the entries\
    \ in the original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp6g49hja.jl:27\nin expression starting at\
    \ /tmp/tmpp6g49hja.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 7\nWrite a function that\
    \ will take a vector of integers and a number as input. The function shall then\
    \ return the sum of the entries in the vector whose indexes are a multiple of\
    \ 3 or 4 and are less than the number input. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> num\n    3\n    >>> num\n    -1\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipo_4ipr.jl:27\nin expression starting at\
    \ /tmp/tmpipo_4ipr.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a vector of integers and will return the sum of the\
    \ squares of the entries in the vector. The function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of \nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0kt74f3q.jl:25\nin expression starting at\
    \ /tmp/tmp0kt74f3q.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4\
    \ == 0\n            sum = sum + i^3\n        else\n            sum = sum + i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the entries in the vector.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcx8uuc_0.jl:27\nin expression starting at\
    \ /tmp/tmpcx8uuc_0.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the entries of the vector that are multiples\
    \ of 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpikbmnfjj.jl:27\nin expression starting at\
    \ /tmp/tmpikbmnfjj.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and return a new vector that contains the squared entries of the original vector.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2vjb6xr8.jl:27\nin expression starting at\
    \ /tmp/tmp2vjb6xr8.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes an integer vector as input and returns a vector of the same size with\
    \ each entry being the sum of the squares of the entries in the original vector.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx8astxdp.jl:23\nin expression starting at\
    \ /tmp/tmpx8astxdp.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i*i\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a vector of integers\
    \ and returns the sum of the integers squared. \n    \n    Examples:\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1msw52ay.jl:27\nin expression starting at\
    \ /tmp/tmp1msw52ay.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 7\nWrite a function that will take a vector of integers\
    \ and will return the sum of the integers squared. \n    \n    Examples:\n   \
    \ >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzjvi2aol.jl:27\nin expression starting at\
    \ /tmp/tmpzjvi2aol.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the entries in the vector. \n    \n  \
    \  Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo361ffp7.jl:27\nin expression starting at\
    \ /tmp/tmpo361ffp7.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n\
    \            sum += x*x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ a vector of integers containing the squared values of all entries in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7lnwvwh4.jl:25\nin expression starting at\
    \ /tmp/tmp7lnwvwh4.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and will return the sum of the squares of all entries in the vector. \n    \n\
    \    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfj1veboo.jl:27\nin expression starting at\
    \ /tmp/tmpfj1veboo.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and will return the sum of the squares of the\
    \ entries in the vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ytp7yzb.jl:23\nin expression starting at\
    \ /tmp/tmp1ytp7yzb.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a vector of integers and return a new vector where all\
    \ entries are divided by 2 except for those entries that are a multiple of 3.\
    \ The function shall not change the entries in the original vector. The function\
    \ shall then return the new vector. \n    \n    Examples:\n    >>> lst\n    [1,\
    \ 2, 3]\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3, 4]\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsr_06_4a.jl:25\nin expression starting at\
    \ /tmp/tmpsr_06_4a.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0\n            sum += x^2\n        elseif x % 4\
    \ == 0\n            sum += x^3\n        else\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the entries in the vector. \n    \n  \
    \  Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8cs28fvu.jl:27\nin expression starting at\
    \ /tmp/tmp8cs28fvu.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that will take a vector of integers and return a new vector with only\
    \ the even entries in the original vector. The function shall not change the original\
    \ vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2m50i2jo.jl:25\nin expression starting at\
    \ /tmp/tmp2m50i2jo.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a vector of integers and returns the sum of all entries\
    \ in the vector that are a multiple of 3. The function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptp1w7v_d.jl:25\nin expression starting at\
    \ /tmp/tmptp1w7v_d.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and will return the number of entries that are\
    \ a multiple of 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqwn49n6q.jl:27\nin expression starting at\
    \ /tmp/tmpqwn49n6q.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the entries in the vector. \n    \n  \
    \  Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa7nudhfr.jl:27\nin expression starting at\
    \ /tmp/tmpa7nudhfr.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n  \
    \  for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4\
    \ == 0\n            sum += i*i*i\n        else\n            sum += i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector of integers and returns the sum of all entries in the vector\
    \ whose index is greater than or equal to 10. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdo0o4znw.jl:28\nin expression starting at\
    \ /tmp/tmpdo0o4znw.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n  \
    \  for i in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4\
    \ == 0\n            sum += i^3\n        else\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 7: Write a function that will take a vector of integers\
    \ and return a new vector where all entries are squared except for the entries\
    \ whose indexes are a multiple of 3 or 4. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsk29al2n.jl:28\nin expression starting at\
    \ /tmp/tmpsk29al2n.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and will return the sum of the squares of the\
    \ entries in the vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp54rvngiw.jl:23\nin expression starting at\
    \ /tmp/tmp54rvngiw.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and return a new vector with all the entries that are even and are less than\
    \ or equal to 100. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\
    \ 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,\
    \ 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,\
    \ 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\
    \ 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n    >>>\
    \ new_lst\n    [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34,\
    \ 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72,\
    \ 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn9n6sn62.jl:27\nin expression starting at\
    \ /tmp/tmpn9n6sn62.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n  \
    \  for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4\
    \ == 0\n            sum += i*i*i\n        else\n            sum += i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and return a new vector with only the even entries in the original vector. \n\
    \    \n    Examples:\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [2,\
    \ 4, 6]\n    >>> lst\n    [2, 4, 6, 8]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphay_grmy.jl:28\nin expression starting at\
    \ /tmp/tmphay_grmy.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n\
    \            sum += i*i\n        else\n            sum += i*i*i\n        end\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpeho3kx2g.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpeho3kx2g.jl:32\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpeho3kx2g.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeho3kx2g.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpeho3kx2g.jl:33\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 26 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeho3kx2g.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeho3kx2g.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpeho3kx2g.jl:36\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: -9 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeho3kx2g.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeho3kx2g.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpeho3kx2g.jl:38\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -244 == -126\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpeho3kx2g.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeho3kx2g.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpeho3kx2g.jl:40\n  Expression: candidate([-1, 0, 0, 0, 0, 0,\
    \ 0, 0, -1]) == 0\n   Evaluated: -2 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/j"
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a vector of integers and return a new vector where all\
    \ entries are divided by 2 except for those entries that are a multiple of 3.\
    \ The function shall not change the entries in the original vector. \n    \n \
    \   Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    >>>\
    \ lst\n    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9])\
    \ == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0w7pf21k.jl:25\nin expression starting at\
    \ /tmp/tmp0w7pf21k.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a vector of integers\
    \ and returns the sum of the squares of the entries in the vector. \n    \n  \
    \  Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv8h6554j.jl:23\nin expression starting at\
    \ /tmp/tmpv8h6554j.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and return a new vector where all entries are multiplied by 2 except for the\
    \ entries that are a multiple of 3. The function shall not change the entries\
    \ in the original vector. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall \nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpthibqdsj.jl:27\nin expression starting at\
    \ /tmp/tmpthibqdsj.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and will return the index of the first non-zero\
    \ entry in the vector. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ index of the first non-zero entry in the vector. \nThe function shall not change\
    \ the entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the index of the first non-zero entry in the vector. \nThe\
    \ function shall not change the entries in the vector whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the index of the first non-zero\
    \ entry in the vector. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ index of the first non-zero entry in the vector. \nThe function shall not change\
    \ the entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the index of the first non-zero entry in the vector. \nThe\
    \ function shall not change the entries in the vector whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the index of the first non-zero\
    \ entry in the vector. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ index of the first non-zero entry in the vector. \nThe function shall not change\
    \ the entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the index of the first non-zero entry in the vector. \nThe\
    \ function shall not change the entries in the vector whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the index of the first non-zero\
    \ entry in the vector. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ index of the first non-zero entry in the vector. \nThe function shall not change\
    \ the entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the index of the first non-zero entry in the vector. \nThe\
    \ function shall not change the entries in the vector whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the index of the first non-zero\
    \ entry in the vector. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ index of the first non-zero entry in the vector. \nThe function shall not change\
    \ the entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the index of the first non-zero entry in the vector. \nThe\
    \ function shall not change the entries in the vector whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the index of the first non-zero\
    \ entry in the vector. \nThe function \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsmy1hveq.jl:23\nin expression starting at\
    \ /tmp/tmpsmy1hveq.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiys70sgf.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpiys70sgf.jl:32\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiys70sgf.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiys70sgf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpiys70sgf.jl:33\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 146 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiys70sgf.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiys70sgf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpiys70sgf.jl:36\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: -9 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiys70sgf.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiys70sgf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpiys70sgf.jl:38\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -10 == -126\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiys70sgf.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiys70sgf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpiys70sgf.jl:39\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -165816 == 3030\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share"
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the entries in the vector. \n    \n  \
    \  Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplbmpsecp.jl:27\nin expression starting at\
    \ /tmp/tmplbmpsecp.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n  \
    \  for x in lst\n        if x % 3 == 0\n            sum += x\n        elseif x\
    \ % 4 == 0\n            sum += x*x\n        else\n            sum += x*x*x\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that will take a vector of integers and a number as input. The function\
    \ will then return the number of entries in the vector that are a multiple of\
    \ \nthe number input. The function shall not change the entries in the vector\
    \ whose indexes are not a multiple of number input. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are a multiple of number input. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are a multiple of number input. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are a multiple of number input. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are a multiple of number input. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are a multiple of number input. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are a multiple of number input. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are a multiple of number input. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are a multiple of number input. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are a multiple of number input. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are a multiple of number input. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are a multiple of number input. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are a multiple of number input. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are a multiple of number input. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are a multiple of number input. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are a multiple of number input. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are a multiple of number input. The function shall then return\
    \ the sum of all entries. \n\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpesdxsxbr.jl:28\nin expression starting at\
    \ /tmp/tmpesdxsxbr.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of all entries in the vector that are not a multiple of\
    \ 3. The function shall not change the entries in the vector whose indexes are\
    \ not a multiple of 3. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n   \
    \ >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpedpv9zz1.jl:27\nin expression starting at\
    \ /tmp/tmpedpv9zz1.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdwgtism6.jl:27\nin expression starting at\
    \ /tmp/tmpdwgtism6.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and return a new vector where each entry is the sum of the squares of the entries\
    \ in the original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpifs_uo2x.jl:27\nin expression starting at\
    \ /tmp/tmpifs_uo2x.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector with all the entries that are a multiple of 3. The function\
    \ shall not change the entries in the original vector. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the original vector. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the original vector. \nThe function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the original vector.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the original vector. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the original\
    \ vector. \nThe function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the original vector. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the original vector. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the original vector. \nThe function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the original vector.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the original vector. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the original\
    \ vector. \nThe function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the original vector. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the original vector. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the original vector. \nThe function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the original vector.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the original vector. \nThe function shall then return\
    \ the sum of all entries. \nThe \nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9])\
    \ == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqef6t_k_.jl:27\nin expression starting at\
    \ /tmp/tmpqef6t_k_.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n\
    \            sum += i*i\n        else\n            sum += i*i*i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes in a vector of integers and returns the sum of the squares of the entries\
    \ in the vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplfpk5_7o.jl:27\nin expression starting at\
    \ /tmp/tmplfpk5_7o.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n  \
    \  for i in lst\n        if i%3==0 || i%4==0\n            sum += i\n        else\n\
    \            sum *= i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that takes an array of integers and returns the sum of all even numbers\
    \ in the array. \nThe function shall not change the entries in the array whose\
    \ indexes are not a multiple of 2. \nThe function shall then return the sum of\
    \ all even numbers in the array. \nThe function shall not change the entries in\
    \ the array whose indexes are not a multiple of 2. \nThe function shall then return\
    \ the sum of all even numbers in the array. \nThe function shall not change the\
    \ entries in the array whose indexes are not a multiple of 2. \nThe function shall\
    \ then return the sum of all even numbers in the array. \nThe function shall not\
    \ change the entries in the array whose indexes are not a multiple of 2. \nThe\
    \ function shall then return the sum of all even numbers in the array. \nThe function\
    \ shall not change the entries in the array whose indexes are not a multiple of\
    \ 2. \nThe function shall then return the sum of all even numbers in the array.\
    \ \nThe function shall not change the entries in the array whose indexes are not\
    \ a multiple of 2. \nThe function shall then return the sum of all even numbers\
    \ in the array. \nThe function shall not change the entries in the array whose\
    \ indexes are not a multiple of 2. \nThe function shall then return the sum of\
    \ all even numbers in the array. \nThe function shall not change the entries in\
    \ the array whose indexes are not a multiple of 2. \nThe function shall then return\
    \ the sum of all even numbers in the array. \nThe function shall not change the\
    \ entries in the array whose indexes are not a multiple of 2. \nThe function shall\
    \ then return the sum of all even numbers in the array. \nThe function shall not\
    \ change the entries in the array whose indexes are not a multiple of 2. \nThe\
    \ function shall then return the sum of all even numbers in the array. \nThe function\
    \ shall not change the entries in the array whose indexes are not a multiple of\
    \ 2. \nThe function shall then return the sum of all even numbers in the array.\
    \ \nThe function shall not change the entries in the array whose indexes are not\
    \ a multiple of 2. \nThe function shall then return the sum of all even numbers\
    \ in the array. \nThe function shall not change the entries in the array whose\
    \ indexes are not a multiple of 2. \nThe function shall then return the sum of\
    \ all even numbers in the array. \nThe function shall not change the entries in\
    \ the array whose indexes are not a multiple of 2. \nThe function shall then return\
    \ the sum of all even numbers in the array. \nThe function shall not change the\
    \ entries in the array whose indexes are not a multiple of 2. \nThe function shall\
    \ then return the sum of all even numbers in the array. \nThe function shall not\
    \ change the entries in the \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq3_epnc4.jl:26\nin expression starting at\
    \ /tmp/tmpq3_epnc4.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and will return the sum of the integers squared. \n    \n    Examples:\n   \
    \ >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzotyebl8.jl:27\nin expression starting at\
    \ /tmp/tmpzotyebl8.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the entries\
    \ in the vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptv4q5tis.jl:23\nin expression starting at\
    \ /tmp/tmptv4q5tis.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0\n            sum += x^2\n        elseif x % 4\
    \ == 0\n            sum += x^3\n        else\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and return a new vector where all entries are\
    \ multiplied by 2 except for the entries that are multiples of 3 or 4. \n    \n\
    \    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbxjp54sz.jl:27\nin expression starting at\
    \ /tmp/tmpbxjp54sz.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes an integer vector and returns a new vector with only the even entries\
    \ in the original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3, 4,\
    \ 5, 6]\n    >>> lst\n    [2, 4, 6]\n    >>> lst\n    [2, 4, 6]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9advx7jo.jl:27\nin expression starting at\
    \ /tmp/tmp9advx7jo.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \n    \n \
    \   Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo_ghvhj0.jl:27\nin expression starting at\
    \ /tmp/tmpo_ghvhj0.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0\n            sum += x^2\n        elseif x % 4\
    \ == 0\n            sum += x^3\n        else\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ will take a vector of integers and will return the sum of all entries in the\
    \ vector that are a multiple of 3. The function shall not change the entries in\
    \ the vector whose indexes are not a multiple of 3. The function shall then return\
    \ the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6cs_cdk_.jl:27\nin expression starting at\
    \ /tmp/tmp6cs_cdk_.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and will return the number of entries in the vector that are a multiple of 3\
    \ and a multiple of 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp24n1mb5_.jl:27\nin expression starting at\
    \ /tmp/tmp24n1mb5_.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a vector of integers and will return\
    \ the sum of the squares of all entries in the vector. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5tfgt2vw.jl:25\nin expression starting at\
    \ /tmp/tmp5tfgt2vw.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and will return the number of entries in the vector that are a multiple of 3\
    \ and a multiple of 4. The function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4.\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfhsrx0jx.jl:23\nin expression starting at\
    \ /tmp/tmpfhsrx0jx.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and will return the number of entries that are\
    \ a multiple of 3 and a multiple of 4. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr2mcycug.jl:23\nin expression starting at\
    \ /tmp/tmpr2mcycug.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the entries\
    \ in the vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0n707v4.jl:27\nin expression starting at\
    \ /tmp/tmpv0n707v4.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        end\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnbwqlmrz.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpnbwqlmrz.jl:28\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 3 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnbwqlmrz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnbwqlmrz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpnbwqlmrz.jl:29\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 13 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnbwqlmrz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnbwqlmrz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpnbwqlmrz.jl:31\n  Expression: candidate([1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnbwqlmrz.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnbwqlmrz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpnbwqlmrz.jl:32\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: 0 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnbwqlmrz.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnbwqlmrz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpnbwqlmrz.jl:34\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: 0 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and a number as input. The function will return\
    \ the sum of the integers in the vector whose indexes are a multiple of 3 or 4\
    \ and less than or equal to the number input. \nThe function shall not change\
    \ the entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm69gs6rh.jl:23\nin expression starting at\
    \ /tmp/tmpm69gs6rh.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4\
    \ == 0\n            sum = sum + i^3\n        else\n            sum = sum + i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 4\nWrite a function that takes in\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r7vs5op.jl:27\nin expression starting at\
    \ /tmp/tmp7r7vs5op.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ will take a vector of integers and return a new vector that contains the squared\
    \ entries of the original vector. \n    \n    Examples:\n    >>> lst\n    [1,\
    \ 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5,\
    \ -4, -3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptrv0l9ct.jl:27\nin expression starting at\
    \ /tmp/tmptrv0l9ct.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and return a new vector with only the even numbers. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [2, 4, 6]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppyucj0io.jl:27\nin expression starting at\
    \ /tmp/tmppyucj0io.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a vector of integers\
    \ and returns the sum of the squares of the entries in the vector. \n    \n  \
    \  Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2m8uzdpj.jl:27\nin expression starting at\
    \ /tmp/tmp2m8uzdpj.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n  \
    \  for i in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4\
    \ == 0\n            sum += i^3\n        else\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and will return the number of entries in the vector that are negative.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqjks5vjh.jl:28\nin expression starting at\
    \ /tmp/tmpqjks5vjh.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum = sum + i*i\n        elseif i%4\
    \ == 0\n            sum = sum + i*i*i\n        else\n            sum = sum + i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an array of integers and returns the sum of the squares\
    \ of the integers in the array. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmsz4ytln.jl:27\nin expression starting at\
    \ /tmp/tmpmsz4ytln.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the entries in the vector. \n    \n  \
    \  Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa7nudhfr.jl:27\nin expression starting at\
    \ /tmp/tmpa7nudhfr.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n  \
    \  for i in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4\
    \ == 0\n            sum += i^3\n        else\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and will return the sum of all entries in the vector that are a multiple of\
    \ 3 or 4. The function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \n\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn2n_eyju.jl:28\nin expression starting at\
    \ /tmp/tmpn2n_eyju.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 7\nWrite a function that\
    \ will take a vector of integers and return a new vector where all entries are\
    \ divided by 2 except for the entries whose indexes are a multiple of 3. \n  \
    \  \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5]\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6g3xvv5d.jl:27\nin expression starting at\
    \ /tmp/tmp6g3xvv5d.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n\
    \            sum += x*x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that will take a vector of integers and return a new vector where\
    \ all entries are squared except for the entries that are a multiple of 3 or 4.\
    \ The function shall not change the entries in the original vector. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ original vector.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmntqmuup.jl:25\nin expression starting at\
    \ /tmp/tmpmntqmuup.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and will return the sum of the integers squared.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5h7fcdlc.jl:27\nin expression starting at\
    \ /tmp/tmp5h7fcdlc.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the entries in the vector. \n    \n  \
    \  Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprmacehcz.jl:27\nin expression starting at\
    \ /tmp/tmprmacehcz.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n  \
    \  for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4\
    \ == 0\n            sum += i*i*i\n        else\n            sum += i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 10\nWrite a function\
    \ that will take a vector of integers and return a new vector that contains the\
    \ squares of the entries in the original vector. \n    \n    Examples:\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, \nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl6filidy.jl:28\nin expression starting at\
    \ /tmp/tmpl6filidy.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n  \
    \  for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4\
    \ == 0\n            sum += i*i*i\n        else\n            sum += i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the entries in the vector whose indexes\
    \ are a multiple of 3 or 4. The function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4.\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ak9avs_.jl:28\nin expression starting at\
    \ /tmp/tmp0ak9avs_.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the entries in the vector. \n    \n  \
    \  Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa7nudhfr.jl:27\nin expression starting at\
    \ /tmp/tmpa7nudhfr.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        else\n  \
    \          sum *= i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a vector of integers and return a new vector with only\
    \ the even numbers. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]\n    >>> lst\n    [2, 4, 6, 8, 10]\n    >>> lst\n    [2, 4, 6,\
    \ 8, 10]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppt197gum.jl:25\nin expression starting at\
    \ /tmp/tmppt197gum.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and will return the sum of the integers squared. \n    \n    Examples:\n   \
    \ >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ei6x2qg.jl:23\nin expression starting at\
    \ /tmp/tmp5ei6x2qg.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n  \
    \  for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4\
    \ == 0\n            sum += i*i*i\n        else\n            sum += i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector with only the even numbers. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [2, 4, 6]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_x_tn9qe.jl:28\nin expression starting at\
    \ /tmp/tmp_x_tn9qe.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and return a new vector with only the even entries in the original vector. \n\
    \    \n    Examples:\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>>\
    \ lst\n    [2, 4, 6, 8, 10]\n    >>> lst\n    [2, 4, 6, 8, 10]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpva8i1gbk.jl:23\nin expression starting at\
    \ /tmp/tmpva8i1gbk.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n\
    \            sum -= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.4>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a vector of integers and return a new vector where each\
    \ entry is the sum of the squares of the entries in the original vector. \n  \
    \  \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ufmjbux.jl:25\nin expression starting at\
    \ /tmp/tmp3ufmjbux.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n  \
    \  for x in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n \
    \       else\n            sum *= x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.3>\nsum_squares(lst)\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsl4huljm.jl:26\nin expression starting at\
    \ /tmp/tmpsl4huljm.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n  \
    \  for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif\
    \ i%4 == 0\n            sum = sum + i^3\n        else\n            sum = sum +\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that will take a vector of integers and will return the sum of\
    \ the integers squared. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n  \
    \  >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9vbzmup.jl:28\nin expression starting at\
    \ /tmp/tmpk9vbzmup.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector that contains the squares of the entries in the original\
    \ vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n   \
    \ []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5, -1, -5]\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxrg6va_s.jl:27\nin expression starting at\
    \ /tmp/tmpxrg6va_s.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n  \
    \  for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif\
    \ i%4 == 0\n            sum = sum + i^3\n        else\n            sum = sum +\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes an array of integers and returns the sum of all even\
    \ entries in the array. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n  \
    \  >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzxix5umn.jl:28\nin expression starting at\
    \ /tmp/tmpzxix5umn.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that will take a vector of integers\
    \ and return a new vector where all entries are divided by 2 except for the entries\
    \ whose indexes are a multiple of 3. \n    \n    Examples:\n    >>> lst\n    [1,\
    \ 2, 3]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, \nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpes5_4hoi.jl:27\nin expression starting at\
    \ /tmp/tmpes5_4hoi.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 7: Write a function that\
    \ takes in a list of integers and returns the sum of the squares of the integers\
    \ in the list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv5cqaf5s.jl:27\nin expression starting at\
    \ /tmp/tmpv5cqaf5s.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and return a new vector that contains the squared\
    \ entries of the original vector. \n    \n    Examples:\n    >>> lst\n    [1,\
    \ 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzhdccfif.jl:27\nin expression starting at\
    \ /tmp/tmpzhdccfif.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector where each entry is the sum of the squares of the entries\
    \ in the original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1,\
    \ -5, 2, -1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxhitvonx.jl:27\nin expression starting at\
    \ /tmp/tmpxhitvonx.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n  \
    \  for i in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4\
    \ == 0\n            sum += i^3\n        else\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and return a new vector with only the even entries in the original vector. \n\
    \    \n    Examples:\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [2,\
    \ 4, 6]\n    >>> lst\n    [2, 4, 6, 8]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkjwdlcjd.jl:28\nin expression starting at\
    \ /tmp/tmpkjwdlcjd.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and return a new vector where each entry is the\
    \ sum of the entries in the original vector except for the entry at index i. \n\
    \    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n   \
    \ [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n   \
    \ [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n   \
    \ [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n   \
    \ [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n   \
    \ [-1, -5, 2, -1, -5, -4, -3]\n\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptkahw8on.jl:27\nin expression starting at\
    \ /tmp/tmptkahw8on.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and will return the sum of the squares of the entries in the vector. \n    \n\
    \    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp46rz7bnx.jl:27\nin expression starting at\
    \ /tmp/tmp46rz7bnx.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of all even entries in the vector. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdz9zso_f.jl:23\nin expression starting at\
    \ /tmp/tmpdz9zso_f.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ will take a vector of integers and a number as input. The function will then\
    \ return the number of entries in the vector that are less than the number input.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> num\n    -1\n    >>> num\n    3\n\
    \    >>> num\n    -1\n    >>> num\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn7vltaq9.jl:27\nin expression starting at\
    \ /tmp/tmpn7vltaq9.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and return a new vector that contains the squared\
    \ entries of the original vector. \n    \n    Examples:\n    >>> lst\n    [1,\
    \ 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6crx3u68.jl:27\nin expression starting at\
    \ /tmp/tmp6crx3u68.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        else\n  \
    \          sum += i*i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a vector of integers and return a new vector with only\
    \ the even entries in the original vector. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [2, 4, 6]\n    >>> lst\n    [2, 4, 6,\
    \ 8, 10]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg62rdhh0.jl:25\nin expression starting at\
    \ /tmp/tmpg62rdhh0.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n\
    \            sum += i*i\n        else\n            sum += i*i*i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list of integers and returns a list of all even numbers in the list.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [2, 4, 6, 8]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp8pkg8bh.jl:27\nin expression starting at\
    \ /tmp/tmpp8pkg8bh.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        else\n  \
    \          sum += i*i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 7: Write a\
    \ function that will take a vector of integers and return a new vector that contains\
    \ the squared entries of the original vector. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf7lsw3sm.jl:25\nin expression starting at\
    \ /tmp/tmpf7lsw3sm.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns the sum of all entries in the vector\
    \ that are a multiple of 3. The function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3. \nThe function shall then return the\
    \ sum of all entries. \nExamples:\n>>> lst\n[1, 2, 3]\n>>> lst\n[]\n>>> lst\n\
    [-1, -5, 2, -1, -5]\n>>> sum_squares(lst)\n25\n</text>\n<cell>\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt9vbnjfb.jl:27\nin expression starting at\
    \ /tmp/tmpt9vbnjfb.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that will take a vector of integers and return a new vector with only\
    \ the even entries in the original vector. The function shall not change the original\
    \ vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2m50i2jo.jl:25\nin expression starting at\
    \ /tmp/tmp2m50i2jo.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for index\
    \ in lst\n        if index % 3 == 0 || index % 4 == 0\n            sum += index\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that will take a vector of integers and return a new vector that\
    \ contains the squared entries of the original vector. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1,\
    \ 2, 3, -1, -5, 2, -1, -5, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp89weud1.jl:23\nin expression starting at\
    \ /tmp/tmpp89weud1.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that will take a vector of integers\
    \ and a number k and will return the sum of the integers in the vector whose index\
    \ is less than or equal to k. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> k = 2\n  \
    \  >>> sum_squares(lst,k)\n    9\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6i63v9qy.jl:27\nin expression starting at\
    \ /tmp/tmp6i63v9qy.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n  \
    \  for x in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n \
    \       else\n            sum -= x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 7: Write a function that will take a vector of integers and return a new vector\
    \ where all entries are multiplied by 2 except for the entries whose indexes are\
    \ a multiple of 3. The function shall not change the entries in the original vector.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp15sut7ez.jl:26\nin expression starting at\
    \ /tmp/tmp15sut7ez.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the entries in the vector. \n    \n  \
    \  Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa7nudhfr.jl:27\nin expression starting at\
    \ /tmp/tmpa7nudhfr.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and will return the sum of the integers squared.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5h7fcdlc.jl:27\nin expression starting at\
    \ /tmp/tmp5h7fcdlc.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n  \
    \  for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4\
    \ == 0\n            sum += i*i*i\n        else\n            sum += i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector with all the entries that are a multiple of 3. The function\
    \ shall not change the entries in the original vector. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1,\
    \ 2, 3]\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfylq3pzn.jl:28\nin expression starting at\
    \ /tmp/tmpfylq3pzn.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 7\nWrite a function that will take a vector of integers\
    \ and return a new vector where all entries are squared except for the entries\
    \ whose indexes are a multiple of 3 or 4. The function shall not change the entries\
    \ in the original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm752yahw.jl:27\nin expression starting at\
    \ /tmp/tmpm752yahw.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum = sum + i\n        elseif i%4 ==\
    \ 0\n            sum = sum + i*i\n        else\n            sum = sum + i*i*i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes in a list of integers and returns the sum of the squares\
    \ of the integers in the list. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7fjvmgz3.jl:27\nin expression starting at\
    \ /tmp/tmp7fjvmgz3.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n\
    \            sum += x * x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a vector of integers and return\
    \ a new vector where all entries are multiplied by 2 if their index is \na multiple\
    \ of 3 and all entries are multiplied by 3 if their index is a multiple of 4.\
    \ The function shall not change the entries in the \noriginal vector. The function\
    \ shall then return the sum of all entries.\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvxgq4a2n.jl:25\nin expression starting at\
    \ /tmp/tmpvxgq4a2n.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0\n            sum += x^2\n        elseif x % 4\
    \ == 0\n            sum += x^3\n        else\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns the sum of the squares of the integers in the array. \n    \n  \
    \  Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps6cbbvwr.jl:27\nin expression starting at\
    \ /tmp/tmps6cbbvwr.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of all entries except the entries whose indexes\
    \ are a multiple of 3 or 4. The function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>>\
    \ lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdovx4vxu.jl:23\nin expression starting at\
    \ /tmp/tmpdovx4vxu.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers except for those entries\
    \ whose index is \n    a multiple of 3 and whose index is also a multiple of 4.\
    \ The function shall not change the entries in the vector whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyc_c2dwz.jl:23\nin expression starting at\
    \ /tmp/tmpyc_c2dwz.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjekmuhf4.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpjekmuhf4.jl:28\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 3 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjekmuhf4.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjekmuhf4.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpjekmuhf4.jl:29\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 13 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjekmuhf4.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjekmuhf4.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpjekmuhf4.jl:31\n  Expression: candidate([1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjekmuhf4.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjekmuhf4.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpjekmuhf4.jl:32\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: 0 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjekmuhf4.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjekmuhf4.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpjekmuhf4.jl:34\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: 0 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n  \
    \  for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4\
    \ == 0\n            sum += i*i*i\n        else\n            sum += i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector where all entries are squared except for the entries\
    \ whose indexes are a multiple of 3 or 4. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph7btq9mk.jl:28\nin expression starting at\
    \ /tmp/tmph7btq9mk.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector that contains the squares of the entries in the original\
    \ vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n   \
    \ []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuv6awgiy.jl:27\nin expression starting at\
    \ /tmp/tmpuv6awgiy.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of all entries except for those entries whose indexes are\
    \ a multiple of 3 and a multiple of 4. The function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi3r_c9iw.jl:27\nin expression starting at\
    \ /tmp/tmpi3r_c9iw.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers squared. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphw82k_kv.jl:25\nin expression starting at\
    \ /tmp/tmphw82k_kv.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum = sum + i*i\n        elseif i%4\
    \ == 0\n            sum = sum + i*i*i\n        else\n            sum = sum + i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a vector of integers and return a new vector where all entries are multiplied\
    \ by 2 except for those entries that are a multiple of 3. The function shall not\
    \ change the entries in the original vector. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuqbzsexy.jl:27\nin expression starting at\
    \ /tmp/tmpuqbzsexy.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector with all the entries that are multiples of 3 removed.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi44h5idv.jl:27\nin expression starting at\
    \ /tmp/tmpi44h5idv.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a vector of integers and returns a vector of integers whose entries are\
    \ the sum of the squares of the entries in the original vector. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_nvmu0cp.jl:27\nin expression starting at\
    \ /tmp/tmp_nvmu0cp.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4\
    \ == 0\n            sum = sum + i^3\n        else\n            sum = sum + i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a vector of integers and will return the sum of the squares of the entries in\
    \ the vector. The function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \n\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptzkzxhjc.jl:27\nin expression starting at\
    \ /tmp/tmptzkzxhjc.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector where all entries are divided by 2 except for the entries\
    \ whose indexes are a multiple of 3. The function shall not change the entries\
    \ in the original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3, 4]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiw_e7lta.jl:23\nin expression starting at\
    \ /tmp/tmpiw_e7lta.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n\
    \            sum += i*i\n        else\n            sum += i*i*i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and a number as input. The function will return\
    \ the sum of the integers in the vector that are a multiple of \nthe number inputted\
    \ and will return the sum of the integers in the vector that are a multiple of\
    \ 3 and will return the sum of the integers in the vector that are a multiple\
    \ of 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpan3q04fs.jl:27\nin expression starting at\
    \ /tmp/tmpan3q04fs.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes in a vector of integers and returns the sum of all entries\
    \ in the vector that are a multiple of 3. The function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp280twug6.jl:25\nin expression starting at\
    \ /tmp/tmp280twug6.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n\
    \            sum += x * x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that will take a vector of integers and return a new vector where\
    \ all entries are squared except for those entries whose indexes are a multiple\
    \ of 3 or 4. The function shall not change the entries in the original vector.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu7p2aw3h.jl:25\nin expression starting at\
    \ /tmp/tmpu7p2aw3h.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0\n            sum += x^2\n        elseif x % 4\
    \ == 0\n            sum += x^3\n        else\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers squared. \n    \n    Examples:\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpesu405u0.jl:27\nin expression starting at\
    \ /tmp/tmpesu405u0.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphyo1adys.jl:27\nin expression starting at\
    \ /tmp/tmphyo1adys.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the entries\
    \ in the vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcrz7u8sk.jl:27\nin expression starting at\
    \ /tmp/tmpcrz7u8sk.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4vuzt8i6.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp4vuzt8i6.jl:30\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 3 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4vuzt8i6.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4vuzt8i6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4vuzt8i6.jl:31\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 13 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4vuzt8i6.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4vuzt8i6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4vuzt8i6.jl:33\n  Expression: candidate([1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4vuzt8i6.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4vuzt8i6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4vuzt8i6.jl:34\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: 0 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4vuzt8i6.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4vuzt8i6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4vuzt8i6.jl:36\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: 0 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and will return the sum of the integers squared except for those entries whose\
    \ indexes are a multiple of 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm6mx7ugd.jl:23\nin expression starting at\
    \ /tmp/tmpm6mx7ugd.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and will return the sum of all entries in the vector whose index is less than\
    \ or equal to 3. The function shall not change the entries in the vector whose\
    \ indexes are not less than or equal to 3. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu8h23ugc.jl:27\nin expression starting at\
    \ /tmp/tmpu8h23ugc.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and will return the sum of the squares of the entries in the vector. \n    \n\
    \    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgtk3ghi0.jl:27\nin expression starting at\
    \ /tmp/tmpgtk3ghi0.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n  \
    \  for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif\
    \ i%4 == 0\n            sum = sum + i^3\n        else\n            sum = sum +\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a vector of integers and return a new vector that contains the squares of all\
    \ the entries in the original vector. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, \nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp21erybt1.jl:28\nin expression starting at\
    \ /tmp/tmp21erybt1.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and return a new vector where all entries are\
    \ squared except for the entries whose indexes are a multiple of 3 or 4. The function\
    \ shall not change the entries in the original vector. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptu5i8cy4.jl:27\nin expression starting at\
    \ /tmp/tmptu5i8cy4.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and will return the sum of the integers squared.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5h7fcdlc.jl:27\nin expression starting at\
    \ /tmp/tmp5h7fcdlc.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0\n            sum += x^2\n        elseif x % 4\
    \ == 0\n            sum += x^3\n        else\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns the number of positive integers in the array. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcy99mtjw.jl:27\nin expression starting at\
    \ /tmp/tmpcy99mtjw.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and will return the sum of the integers squared.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5h7fcdlc.jl:27\nin expression starting at\
    \ /tmp/tmp5h7fcdlc.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that will take a vector of integers and return a new vector where all\
    \ entries are squared except for entries whose indexes are a multiple of 3 and\
    \ a multiple of 4. The function shall not change the entries in the original vector.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgla59ep8.jl:25\nin expression starting at\
    \ /tmp/tmpgla59ep8.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n\
    \            sum += i*i\n        else\n            sum += i*i*i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and return a new vector with only the even entries\
    \ in the original vector. The function shall not change the original vector. \n\
    The function shall then return the sum of the even entries.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcji3y9yo.jl:27\nin expression starting at\
    \ /tmp/tmpcji3y9yo.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector where all entries are squared except for the entries\
    \ whose indexes are a multiple of 3 and a multiple of 4. The function shall not\
    \ change the entries in the original vector. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkkqf7gc3.jl:23\nin expression starting at\
    \ /tmp/tmpkkqf7gc3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n  \
    \  for x in lst\n        if x % 3 == 0\n            sum += x^2\n        elseif\
    \ x % 4 == 0\n            sum += x^3\n        else\n            sum += x\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a vector of integers and return a new vector that contains\
    \ the squared entries of the original vector. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, \nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ntlw5a_.jl:28\nin expression starting at\
    \ /tmp/tmp7ntlw5a_.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmk578xat.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpmk578xat.jl:32\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmk578xat.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmk578xat.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmk578xat.jl:33\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 146 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmk578xat.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmk578xat.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmk578xat.jl:36\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: -9 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmk578xat.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmk578xat.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmk578xat.jl:38\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -10 == -126\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmk578xat.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmk578xat.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmk578xat.jl:39\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -165816 == 3030\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share"
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a vector of integers and return a\
    \ new vector where all entries are multiplied by 2 except for the entries whose\
    \ indexes are a multiple of 3. The function shall not change the entries in the\
    \ original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphj892sd_.jl:25\nin expression starting at\
    \ /tmp/tmphj892sd_.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n\
    \            sum += x*x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 7\nWrite a function that will take a vector of integers and return\
    \ a new vector that contains the squares of the entries in the original vector.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5, -1, -5]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8bzfvlrj.jl:25\nin expression starting at\
    \ /tmp/tmp8bzfvlrj.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the entries in the vector that are multiples\
    \ of 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwenul2y0.jl:27\nin expression starting at\
    \ /tmp/tmpwenul2y0.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ will take a vector of integers and return a new vector where all entries are\
    \ multiplied by 2 except for the entries whose indexes are a multiple of 3. \n\
    \    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpryhjnn3r.jl:27\nin expression starting at\
    \ /tmp/tmpryhjnn3r.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        else\n  \
    \          sum *= i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a vector of integers and return a new vector where all\
    \ entries are multiplied by a constant factor. \n    \n    Examples:\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpihuruiyf.jl:25\nin expression starting at\
    \ /tmp/tmpihuruiyf.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjekmuhf4.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpjekmuhf4.jl:28\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 3 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjekmuhf4.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjekmuhf4.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpjekmuhf4.jl:29\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 13 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjekmuhf4.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjekmuhf4.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpjekmuhf4.jl:31\n  Expression: candidate([1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjekmuhf4.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjekmuhf4.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpjekmuhf4.jl:32\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: 0 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjekmuhf4.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjekmuhf4.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpjekmuhf4.jl:34\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: 0 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n  \
    \  for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4\
    \ == 0\n            sum += i*i*i\n        else\n            sum += i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the entries in the vector. \n    \n  \
    \  Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp471ug7so.jl:28\nin expression starting at\
    \ /tmp/tmp471ug7so.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<text>\nExercise 7\nWrite a function that\
    \ will take a vector of integers and return a new vector that contains the squared\
    \ entries of the original vector. \n    \n    Examples:\n    >>> lst\n    [1,\
    \ 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa0mi7s5x.jl:27\nin expression starting at\
    \ /tmp/tmpa0mi7s5x.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdwgtism6.jl:27\nin expression starting at\
    \ /tmp/tmpdwgtism6.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a vector of integers and return a\
    \ new vector where all entries are divided by 2 except for the entries whose indexes\
    \ are a multiple of 3. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n   \
    \ >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpabt8l5za.jl:25\nin expression starting at\
    \ /tmp/tmpabt8l5za.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        else\n  \
    \          sum *= i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that will take a vector of integers and will return the number of entries\
    \ that are a multiple of 3. The function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphj5uwm5z.jl:25\nin expression starting at\
    \ /tmp/tmphj5uwm5z.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that will take a vector of integers\
    \ and return a new vector that contains the squares of all the entries in the\
    \ original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>>\
    \ lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3,\
    \ -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5, -1, -5]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpap348so0.jl:27\nin expression starting at\
    \ /tmp/tmpap348so0.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n  \
    \  for i in lst\n        if i%3 == 0\n            sum += i\n        elseif i%4\
    \ == 0\n            sum += i*i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that will take a vector of integers and a number k. The function\
    \ will then return the sum of the integers in the vector whose indexes are a multiple\
    \ of k. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> k = 3\n    >>> sum_squares(lst,k)\n\
    \    25\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsnbauzzy.jl:26\nin expression starting at\
    \ /tmp/tmpsnbauzzy.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and will return the sum of the integers squared. \nThe function shall not change\
    \ the entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbq6btmab.jl:27\nin expression starting at\
    \ /tmp/tmpbq6btmab.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector that contains the squares of the entries in the original\
    \ vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n   \
    \ []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5]\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3a41jbq7.jl:23\nin expression starting at\
    \ /tmp/tmp3a41jbq7.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n\
    \            sum += i*i\n        else\n            sum += i*i*i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector where all entries are multiplied by 3 if the entry is\
    \ a multiple of 3 and all entries are multiplied by 4 if the entry is a multiple\
    \ of 4. The function shall not change the entries in the original vector. \n \
    \   \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1,\
    \ 2, 3]\n    >>> lst\n    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppifzo591.jl:27\nin expression starting at\
    \ /tmp/tmppifzo591.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and return a new vector that contains the squared values of all entries in the\
    \ original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>>\
    \ lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> new_lst\n    [1,\
    \ 4, 9]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpemg11gcl.jl:27\nin expression starting at\
    \ /tmp/tmpemg11gcl.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmk578xat.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpmk578xat.jl:32\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmk578xat.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmk578xat.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmk578xat.jl:33\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 146 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmk578xat.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmk578xat.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmk578xat.jl:36\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: -9 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmk578xat.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmk578xat.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmk578xat.jl:38\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -10 == -126\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmk578xat.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmk578xat.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmk578xat.jl:39\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -165816 == 3030\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share"
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector where all entries are divided by 2 except for the entries\
    \ whose indexes are a multiple of 3. \n    \n    Examples:\n    >>> lst\n    [1,\
    \ 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxv7h22it.jl:27\nin expression starting at\
    \ /tmp/tmpxv7h22it.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        else\n  \
    \          sum *= i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a vector of integers and returns the sum of the squares\
    \ of the entries in the vector. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx77mwplk.jl:25\nin expression starting at\
    \ /tmp/tmpx77mwplk.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4vuzt8i6.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp4vuzt8i6.jl:30\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 3 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4vuzt8i6.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4vuzt8i6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4vuzt8i6.jl:31\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 13 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4vuzt8i6.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4vuzt8i6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4vuzt8i6.jl:33\n  Expression: candidate([1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4vuzt8i6.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4vuzt8i6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4vuzt8i6.jl:34\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: 0 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4vuzt8i6.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4vuzt8i6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4vuzt8i6.jl:36\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: 0 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of integers whose entries are the sum of the squares of\
    \ the entries in the original vector. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjy2hsun1.jl:27\nin expression starting at\
    \ /tmp/tmpjy2hsun1.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and return a new vector where all entries are divided by 2 except for those\
    \ entries that are a multiple of 4. The function shall not change the entries\
    \ in the original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3, 4,\
    \ 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5,\
    \ 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi5qtgz38.jl:27\nin expression starting at\
    \ /tmp/tmpi5qtgz38.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector where all entries are squared except for the entries\
    \ whose indexes are a multiple of 3 or 4. The function shall not change the entries\
    \ in the original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb2v_3gsj.jl:27\nin expression starting at\
    \ /tmp/tmpb2v_3gsj.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ will take a vector of integers and return a new vector where all entries are\
    \ squared except for the entries that are a multiple of 3 and a multiple of 4.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjg19lw10.jl:27\nin expression starting at\
    \ /tmp/tmpjg19lw10.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 7\nWrite a function that\
    \ will take a vector of integers and will return the sum of the integers squared.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj268g3a2.jl:27\nin expression starting at\
    \ /tmp/tmpj268g3a2.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the entries in the vector. \n    \n  \
    \  Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa7nudhfr.jl:27\nin expression starting at\
    \ /tmp/tmpa7nudhfr.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4\
    \ == 0\n            sum = sum + i^3\n        else\n            sum = sum + i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that will take a vector of integers and a number as input. The function\
    \ shall then return the sum of the entries in the vector whose indexes are a multiple\
    \ of 3 or 4 and less than or equal to the number input. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> 3\n    6\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptjgaaw3k.jl:27\nin expression starting at\
    \ /tmp/tmptjgaaw3k.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a vector of integers and return a new vector where all\
    \ entries are squared except for the entries whose indexes are a multiple of 3\
    \ or 4. The function shall not change the entries in the original vector. \nThe\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the original vector. \nThe function shall then return the sum of all\
    \ entries. \nThe function shall not change the original vector. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ original vector. \nThe function shall then return the sum of all entries. \n\
    The function shall not change the original vector. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the original vector.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ not change the original vector. \nThe function shall then return the sum of\
    \ all entries. \nThe function shall not change the original vector. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ original vector. \nThe function shall then return the sum of all entries. \n\
    The function shall not change the original vector. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the original vector.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ not change the original vector. \nThe function shall then return the sum of\
    \ all entries. \nThe function shall not change the original vector. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ original vector. \nThe function shall then return the sum of all entries. \n\
    The function shall not change the original vector. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the original vector.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ not change the original vector. \nThe function shall then return the sum of\
    \ all entries. \nThe function shall not change the original vector. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ original vector. \nThe function shall then return the sum of all entries. \n\
    The function shall not change the original vector. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the original vector.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ not change the original vector. \nThe function shall then return the sum of\
    \ all entrie\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2dgt4gxi.jl:25\nin expression starting at\
    \ /tmp/tmp2dgt4gxi.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a vector of integers and returns the sum of the squares\
    \ of the entries in the vector that are a multiple of 3. The function shall not\
    \ change the entries in the vector whose indexes are not a multiple of 3. \nThe\
    \ function shall then return the sum of all entries. \nExamples:\n>>> lst\n[1,\
    \ 2, 3]\n>>> lst\n[]\n>>> lst\n[-1, -5, 2, -1, -5]\n>>> sum_squares(lst)\n25\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiyvkbilv.jl:25\nin expression starting at\
    \ /tmp/tmpiyvkbilv.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and a vector of integers as input. The function will return the product of the\
    \ entries in the vector whose indexes are a multiple of 3 \nand whose indexes\
    \ are a multiple of 4. The function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4.\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb7zlfjg1.jl:27\nin expression starting at\
    \ /tmp/tmpb7zlfjg1.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and return a new vector with only the even numbers.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  \
    \  >>> lst\n    [2, 4, 6, 8]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx5wwyp6y.jl:27\nin expression starting at\
    \ /tmp/tmpx5wwyp6y.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector where all entries are divided by 2 except for those\
    \ entries whose indexes are a multiple of 3. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk0adyee1.jl:27\nin expression starting at\
    \ /tmp/tmpk0adyee1.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n  \
    \  for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4\
    \ == 0\n            sum += i*i*i\n        else\n            sum += i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that will take a vector of integers and a number as input. The function shall\
    \ then return the sum of the entries in the vector that are a multiple of the\
    \ number. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>>\
    \ lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3,\
    \ 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4,\
    \ 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5,\
    \ 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n  \
    \  >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>>\
    \ lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n  \
    \  [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1,\
    \ 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3,\
    \ 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4,\
    \ 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5,\
    \ 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n  \
    \  >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>>\
    \ lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n  \
    \  [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1,\
    \ 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3,\
    \ 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4,\
    \ 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5,\
    \ 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n\
    \    >>> lst\n    [\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvtwi2mlg.jl:28\nin expression starting at\
    \ /tmp/tmpvtwi2mlg.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdwgtism6.jl:27\nin expression starting at\
    \ /tmp/tmpdwgtism6.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and return a new vector where all entries are\
    \ divided by 2 except for those entries that \nare a multiple of 3. The function\
    \ shall not change the entries in the original vector. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the original vector whose indexes are not a multiple of 3. \nThe function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the original vector whose indexes are not a multiple of 4. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the original vector whose indexes are not a multiple of 3. \nThe\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the original vector whose indexes are not a multiple of\
    \ 4. \nThe function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the original vector whose indexes are not a multiple\
    \ of 3. \nThe function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the original vector whose indexes are not a\
    \ multiple of 4. \nThe function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the original vector whose indexes are\
    \ not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfsra3u5l.jl:27\nin expression starting at\
    \ /tmp/tmpfsra3u5l.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that will take a vector of integers\
    \ and return a new vector with only the even numbers. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [2, 4, 6]\n    >>> lst\n\
    \    [2, 4, 6, 8]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf1l0202i.jl:27\nin expression starting at\
    \ /tmp/tmpf1l0202i.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum = sum + i*i\n        elseif i%4\
    \ == 0\n            sum = sum + i*i*i\n        else\n            sum = sum + i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 4\nWrite a function that will take\
    \ a vector of integers and return a new vector with only the even entries in the\
    \ original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    [1, 3]\n    >>> lst\n    [1, 3, 5]\n  \
    \  >>> lst\n    [1, 3, 5, 7]\n    >>> lst\n    [1, 3, 5, 7, 9]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp69kz7wbq.jl:27\nin expression starting at\
    \ /tmp/tmp69kz7wbq.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n\
    \            sum += x*x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ a vector of integers whose entries are the sum of the squares of the entries\
    \ in the original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1,\
    \ -5, 2, -1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphi1tvd5d.jl:25\nin expression starting at\
    \ /tmp/tmphi1tvd5d.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and return a new vector with only the even entries\
    \ in the original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [2,\
    \ 4, 6]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsinapw68.jl:27\nin expression starting at\
    \ /tmp/tmpsinapw68.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n\
    \            sum += i*i\n        else\n            sum += i*i*i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 7\nWrite a function that\
    \ takes a vector of integers and returns the sum of all entries in the vector\
    \ that is a multiple of 3 and a multiple of 4. The function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpowpx9bx2.jl:27\nin expression starting at\
    \ /tmp/tmpowpx9bx2.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and will return the sum of the integers squared. \n    \n    Examples:\n   \
    \ >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx1smc2ko.jl:27\nin expression starting at\
    \ /tmp/tmpx1smc2ko.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the entries of the vector that are a multiple\
    \ of 3. The function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the vector whose indexes are\
    \ not a multiple of 4 or 5.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnbuiex26.jl:27\nin expression starting at\
    \ /tmp/tmpnbuiex26.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the entries\
    \ in the vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5bn0792r.jl:23\nin expression starting at\
    \ /tmp/tmp5bn0792r.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4\
    \ == 0\n            sum = sum + i^3\n        else\n            sum = sum + i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns the sum of all entries\
    \ except the entries that are a multiple of 3 and a multiple of 4.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_eul5un.jl:27\nin expression starting at\
    \ /tmp/tmpy_eul5un.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n\
    \            sum += i*i\n        else\n            sum += i*i*i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns the sum of all entries except the entries\
    \ whose indexes are a multiple of 3 and a multiple of 4. The function shall not\
    \ change the entries in the vector whose indexes are not a multiple of 3 or 4.\
    \ The function shall then return the sum of all entries. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5g0q27lu.jl:27\nin expression starting at\
    \ /tmp/tmp5g0q27lu.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a vector of integers and return a new vector where all\
    \ entries are squared except for the entries whose indexes are a multiple of 3\
    \ or 4. The function shall not change the entries in the original vector. \nThe\
    \ function shall then return the sum of all entries. \nExamples:\n>>> lst\n[1,\
    \ 2, 3]\n>>> lst\n[]\n>>> lst\n[-1, -5, 2, -1, -5]\n>>> lst\n[4, 9, 16, 25]\n\
    >>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>>\
    \ lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n\
    [4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4,\
    \ 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9,\
    \ 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16,\
    \ 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n\
    >>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>>\
    \ lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n\
    [4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4,\
    \ 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9,\
    \ 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16,\
    \ 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpreoxnl35.jl:25\nin expression starting at\
    \ /tmp/tmpreoxnl35.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector where all entries are divided by 2 except for the entries\
    \ whose indexes are a multiple of 3. \n    \n    Examples:\n    >>> lst\n    [1,\
    \ 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5, -3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp656yzpfv.jl:23\nin expression starting at\
    \ /tmp/tmp656yzpfv.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        else\n  \
    \          sum *= i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that will take a vector of integers and return a new vector with only\
    \ the even entries in the original vector. The function shall not change the original\
    \ vector. \nThe function shall then return the sum of all even entries in the\
    \ original vector. \nThe function shall then return the sum of all odd entries\
    \ in the original vector. \nThe function shall then return the product of all\
    \ even entries in the original vector. \nThe function shall then return the product\
    \ of all odd entries in the original vector. \nThe function shall then return\
    \ the maximum of the original vector. \nThe function shall then return the minimum\
    \ of the original vector. \nThe function shall then return the product of the\
    \ original vector and all entries in the original vector that are negative. \n\
    The function shall then return the product of the original vector and all entries\
    \ in the original vector that are positive. \nThe function shall then return the\
    \ product of the original vector and all entries in the original vector that are\
    \ neither negative nor positive. \nThe function shall then return the product\
    \ of the original vector and all entries in the original vector that are neither\
    \ negative nor positive. \nThe function shall then return the product of the original\
    \ vector and all entries in the original vector that are neither negative nor\
    \ positive. \nThe function shall then return the product of the original vector\
    \ and all entries in the original vector that are neither negative nor positive.\
    \ \nThe function shall then return the product of the original vector and all\
    \ entries in the original vector that are neither negative nor positive. \nThe\
    \ function shall then return the product of the original vector and all entries\
    \ in the original vector that are neither negative nor positive. \nThe function\
    \ shall then return the product of the original vector and all entries in the\
    \ original vector that are neither negative nor positive. \nThe function shall\
    \ then return the product of the original vector and all entries in the original\
    \ vector that are neither negative nor positive. \nThe function shall then return\
    \ the product of the original vector and all entries in the original vector that\
    \ are neither negative nor positive. \nThe function shall then return the product\
    \ of the original vector and all entries in the original vector that are neither\
    \ negative nor positive. \nThe function shall then return the product of the original\
    \ vector and all entries in the original vector that are neither negative nor\
    \ positive. \nThe function shall then return the product of the original vector\
    \ and all entries in the original vector that are neither negative nor positive.\
    \ \nThe function shall then return the product of the original vector and all\
    \ entries in the original vector that are neither negative nor positive. \nThe\
    \ function shall then return the product of the original vector and all entries\
    \ in the original vector that are neither \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg4uohcjd.jl:25\nin expression starting at\
    \ /tmp/tmpg4uohcjd.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0\n            sum += x^2\n        elseif x % 4\
    \ == 0\n            sum += x^3\n        else\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ will take a vector of integers and return a new vector where all entries are\
    \ multiplied by 2 except for those entries that are a multiple of 3. \n    \n\
    \    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [-1,\
    \ -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1,\
    \ -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1,\
    \ -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1,\
    \ -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1,\
    \ -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1,\
    \ -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1,\
    \ -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1,\
    \ -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1,\
    \ -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1,\
    \ -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1,\
    \ -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1,\
    \ -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1,\
    \ -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1,\
    \ -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, \nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpigfbewhl.jl:27\nin expression starting at\
    \ /tmp/tmpigfbewhl.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        else\n  \
    \          sum += i*i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a vector of integers and return a\
    \ new vector that contains the squared entries of the original vector. \n    \n\
    \    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1,\
    \ 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4,\
    \ 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n   \
    \ >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptn0bl4n0.jl:25\nin expression starting at\
    \ /tmp/tmptn0bl4n0.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes an array of integers and returns the sum of the squares of the integers\
    \ in the array. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    []\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxl7pa1w4.jl:27\nin expression starting at\
    \ /tmp/tmpxl7pa1w4.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the entries in the vector. \n    \n  \
    \  Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9oafvzzq.jl:23\nin expression starting at\
    \ /tmp/tmp9oafvzzq.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ will take a vector of integers and return a new vector where all entries are\
    \ squared except for the entries whose indexes are a multiple of 3 or 4. The function\
    \ shall not change the entries in the original vector. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpddz4ayrm.jl:23\nin expression starting at\
    \ /tmp/tmpddz4ayrm.jl:23\n"
  stdout: ''
