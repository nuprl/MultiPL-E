name: HumanEval_57_monotonic
language: jl
prompt: "\"\"\"Return true is vector elements are monotonically increasing or decreasing.\n\
  \    >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n\
  \    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \"\"\"\nfunction monotonic(l::Vector{Int64})::Bool\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
  \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
  \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
  \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
  \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
completions: ["    l = sort(l)\n    l = l[1..end(l)]\n    l = l[l .> l[1]]\n    l\
    \ = l[l .< l[end(l)]]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .>\
    \ 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l\
    \ .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l =\
    \ l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n   \
    \ l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l ", "    l = sort(l)\n   \
    \ l = l[1:end-1]\n    l = l[1:end-1]\n    return all(l[1:end-1] < l[2:end])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(l) < 2 \n        return\
    \ true\n    end\n    \n    l = sort(l)\n    \n    if l[1] < l[2] \n        return\
    \ true\n    end\n    \n    if l[1] > l[2] \n        return false\n    end\n  \
    \  \n    return monotonic(l[2:end])\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[1..end-1]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n\
    \    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n\
    \    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n\
    \    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n\
    \    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n\
    \    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n\
    \    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n\
    \    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n\
    \    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n\
    \    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n\
    \    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n\
    \    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n\
    \    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n\
    \    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n\
    \    l = l[l .> 1]", "    l = sort(l)\n    i = 2\n    while i < length(l)\n  \
    \      if l[i-1] < l[i]\n            return false\n        end\n        i += 1\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true is\
    \ vector elements are monotonically increasing or decreasing.\n    >>> monotonic([1,\
    \ 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>>\
    \ monotonic([4, 1, 0, -10])\n    true\n    \"\"\"", "    if length(l) == 0 \n\
    \        return true\n    end\n    \n    l = sort(l)\n    \n    if l[1] < l[2]\
    \ \n        return true\n    end\n    \n    if l[1] > l[2] \n        return false\n\
    \    end\n    \n    if l[1] < l[3] \n        return true\n    end\n    \n    if\
    \ l[1] > l[3] \n        return false\n    end\n    \n    if l[1] < l[4] \n   \
    \     return true\n    end\n    \n    if l[1] > l[4] \n        return false\n\
    \    end\n    \n    if l[1] < l[5] \n        return true\n    end\n    \n    if\
    \ l[1] > l[5] \n        return false\n    end\n    \n    if l[1] < l[6] \n   \
    \     return true\n    end\n    \n    if l[1] > l[6] \n        return false\n\
    \    end\n    \n    if l[1] < l[7] \n        return true\n    end\n    \n    if\
    \ l[1] > l[7] \n        return false\n    end\n    \n    if l[1] < l[8] \n   \
    \     return true\n    end\n    \n    if l[1] > l[8] \n        return false\n\
    \    end\n    \n    if l[1] < l[9] \n        return true\n    end\n    \n    if\
    \ l[1] > l[9] \n        return false\n    end\n    \n    if l[1] < l[10] \n  \
    \      return true\n    end\n    \n    if l[1] > l[10] \n        return false\n\
    \    end\n    \n    if l[1] < l[11] \n        return true\n    end\n    \n   \
    \ if l[1] > l[11] \n        return false\n    end\n    \n    if l[1] < l[12] \n\
    \        return true\n    end\n    \n    if l[1] > l[12] \n        return false\n\
    \    end\n    \n    if l[1] < l[13] \n        return true\n    end\n    \n   \
    \ if l[1] > l[13] \n        return false\n    end\n    \n    if l[1] < l[14] \n\
    \        return true\n    end\n    \n    if l[1] > l[14] \n        return false\n\
    \    end\n    \n    if l[1] < l[15] \n        return true\n    end\n    \n   \
    \ if l[1] > l[15] \n        return false\n    end\n    \n    if l[1] < l[16] \n\
    \        return true\n    end\n    \n    if l[1] > l[16] \n        return false\n\
    \    end\n    \n    if l[1] < l[17] \n        return true\n    end\n    \n   \
    \ if l[1] > l[17] \n        return false\n    end\n    \n    if l[1] < ", "  \
    \  l = sort(l)\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l", "    if length(l) == 0 \n        return true\n    end\n    \n   \
    \ l = sort(l)\n    \n    if l[1] < l[2] \n        return true\n    end\n    \n\
    \    if l[1] > l[2] \n        return false\n    end\n    \n    return monotonic(l[2:end])\n\
    end", "    l = sort(l)\n    l = l[1..end(l)]\n    l = l[l .> l[1]]\n    l = l[l\
    \ .< l[end(l)]]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n \
    \   l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n\
    \    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n\
    \    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n\
    \    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n\
    \    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n\
    \    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n\
    \    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n\
    \    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n\
    \    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n\
    \    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n\
    \    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n\
    \    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n\
    \    l = l[l .< end]\n    l = l[l ", "    if length(l) == 0 \n        return true\n\
    \    \n    if l[1] < l[2] \n        return true\n    \n    if l[1] > l[2] \n \
    \       return false\n    \n    if l[1] < l[3] \n        return true\n    \n \
    \   if l[1] > l[3] \n        return false\n    \n    if l[2] < l[3] \n       \
    \ return true\n    \n    if l[2] > l[3] \n        return false\n    \n    if l[2]\
    \ < l[1] \n        return true\n    \n    if l[2] > l[1] \n        return false\n\
    \    \n    if l[3] < l[1] \n        return true\n    \n    if l[3] > l[1] \n \
    \       return false\n    \n    if l[3] < l[2] \n        return true\n    \n \
    \   if l[3] > l[2] \n        return false\n    \n    if l[4] < l[2] \n       \
    \ return true\n    \n    if l[4] > l[2] \n        return false\n    \n    if l[4]\
    \ < l[3] \n        return true\n    \n    if l[4] > l[3] \n        return false\n\
    \    \n    if l[5] < l[3] \n        return true\n    \n    if l[5] > l[3] \n \
    \       return false\n    \n    if l[5] < l[4] \n        return true\n    \n \
    \   if l[5] > l[4] \n        return false\n    \n    if l[6] < l[4] \n       \
    \ return true\n    \n    if l[6] > l[4] \n        return false\n    \n    if l[6]\
    \ < l[5] \n        return true\n    \n    if l[6] > l[5] \n        return false\n\
    \    \n    if l[7] < l[5] \n        return true\n    \n    if l[7] > l[5] \n \
    \       return false\n    \n    if l[7] < l[6] \n        return true\n    \n \
    \   if l[7] > l[6] \n        return false\n    \n    if l[8] < l[6] \n       \
    \ return true\n    \n    if l[8] > l[6] \n        return false\n    \n    if l[8]\
    \ < l[7] \n        return true\n    \n    if l[8] > l[7] \n        return false\n\
    \    \n    if l[9] < l[7] \n        return true\n    \n    if l[9] > l[7] \n \
    \       return false\n    \n    if l[9] < l[8] \n        return true\n    \n \
    \   if l[9] > l[8] \n        return false\n    \n    if l[10] < l[8] \n      \
    \  return true\n    \n    if l[10] > l[8] \n        return false\n    \n    if\
    \ l[10] < l[9] \n        return true\n    \n    if l[10] > l[9] \n        return\
    \ false\n    ", "    l = sort(l)\n    l = l[1..end(l)]\n    l = l[l .> l[1]]\n\
    \    l = l[l .< l[end(l)]]\n    l = l[l .> 1]\n    l = l[l .< l[end(l)]]\n   \
    \ l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n   \
    \ l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n   \
    \ l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n   \
    \ l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n   \
    \ l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n   \
    \ l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n   \
    \ l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n   \
    \ l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n   \
    \ l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n   \
    \ l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n   \
    \ l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n   \
    \ l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n   \
    \ l = l[l .> 1]\n    l = l[l .< 1]\n", "    if length(l) == 0 \n        return\
    \ true\n    end\n    \n    if l[1] < l[2] \n        return true\n    end\n   \
    \ \n    if l[2] < l[1] \n        return false\n    end\n    \n    if l[1] > l[2]\
    \ \n        return true\n    end\n    \n    if l[1] < l[2] \n        return false\n\
    \    end\n    \n    if l[2] > l[1] \n        return true\n    end\n    \n    if\
    \ l[1] > l[2] \n        return false\n    end\n    \n    return true\nend", " \
    \   l = sort(l)\n    l = l[1..end(l)]\n    l = l[l .> l[1]]\n    l = l[l .< l[end(l)]]\n\
    \    l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .> 0]\n    l = l[l .< 0]\n\
    \    l = l[l .> 0]\n    l = l[l .< 0]\n    l = l[l .> 0]\n    l = l[l .< 0]\n\
    \    l = l[l .> 0]\n    l = l[l .< 0]\n    l = l[l .> 0]\n    l = l[l .< 0]\n\
    \    l = l[l .> 0]\n    l = l[l .< 0]\n    l = l[l .> 0]\n    l = l[l .< 0]\n\
    \    l = l[l .> 0]\n    l = l[l .< 0]\n    l = l[l .> 0]\n    l = l[l .< 0]\n\
    \    l = l[l .> 0]\n    l = l[l .< 0]\n    l = l[l .> 0]\n    l = l[l .< 0]\n\
    \    l = l[l .> 0]\n    l = l[l .< 0]\n    l = l[l .> 0]\n    l = l[l .< 0]\n\
    \    l = l[l .> 0]\n    l = l[l .< 0]\n    l = l[l .> 0]\n    l = l[l .< 0]\n\
    \    l = l[l .> 0]\n    l = l[l .< 0]\n    l = l[l .> 0]\n    l = l[l .< 0]\n\
    \    l = l[l .> 0]\n    l = l[l .< 0]\n    l = l[l .> 0]\n    l = l[l .< 0]\n\
    \    l = l[l .> 0]\n    l = l[l .< 0]\n    l = l[l .> 0]\n    l = l[l .< 0]\n\
    \    l = l[l .> 0]\n    l = l[l .< 0]\n    l = l[l .> 0]\n    l = l[l .< 0]\n\
    \    l = l[l .> 0]\n    l = l[l .< 0]\n    l = l[l .> 0]\n    l = l[l .< 0]\n\
    \    l = l[l ", "    l = sort(l)\n    return l[1] < l[2]\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Return true is vector elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    true\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  true\n    \"\"\"", "    l = sort(l)\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l", "    l = sort(l)\n    l = l[1..end-1]\n    l\
    \ = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]", "    if length(l)\
    \ == 0 \n        return true\n    end\n    \n    l = sort(l)\n    \n    if l[1]\
    \ < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n        return\
    \ false\n    end\n    \n    if l[1] < l[2] \n        return true\n    end\n  \
    \  \n    return false\nend\n</cell>\n<code language=julia-1.3>", "    l = sort(l)\n\
    \    l = l[1..end(l)]\n    l = l[l .> l[1]]\n    l = l[l .< l[end(l)]]\n    return\
    \ length(l) == 0 || all(l .== l[end(l)])\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l", "    l = sort(l)\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l =\
    \ l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n   \
    \ l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l", "    if length(l) == 0 \n\
    \        return true\n    end\n    \n    if l[1] < l[2] \n        return false\n\
    \    end\n    \n    if l[1] > l[2] \n        return true\n    end\n    \n    if\
    \ l[1] < l[3] \n        return false\n    end\n    \n    if l[1] > l[3] \n   \
    \     return true\n    end\n    \n    if l[2] < l[3] \n        return false\n\
    \    end\n    \n    if l[2] > l[3] \n        return true\n    end\n    \n    if\
    \ l[3] < l[4] \n        return false\n    end\n    \n    if l[3] > l[4] \n   \
    \     return true\n    end\n    \n    if l[4] < l[5] \n        return false\n\
    \    end\n    \n    if l[4] > l[5] \n        return true\n    end\n    \n    if\
    \ l[5] < l[6] \n        return false\n    end\n    \n    if l[5] > l[6] \n   \
    \     return true\n    end\n    \n    if l[6] < l[7] \n        return false\n\
    \    end\n    \n    if l[6] > l[7] \n        return true\n    end\n    \n    if\
    \ l[7] < l[8] \n        return false\n    end\n    \n    if l[7] > l[8] \n   \
    \     return true\n    end\n    \n    if l[8] < l[9] \n        return false\n\
    \    end\n    \n    if l[8] > l[9] \n        return true\n    end\n    \n    if\
    \ l[9] < l[10] \n        return false\n    end\n    \n    if l[9] > l[10] \n \
    \       return true\n    end\n    \n    if l[10] < l[11] \n        return false\n\
    \    end\n    \n    if l[10] > l[11] \n        return true\n    end\n    \n  \
    \  if l[11] < l[12] \n        return false\n    end\n    \n    if l[11] > l[12]\
    \ \n        return true\n    end\n    \n    if l[12] < l[13] \n        return\
    \ false\n    end\n    \n    if l[12] > l[13] \n        return true\n    end\n\
    \    \n    if l[13] < l[14] \n        return false\n    end\n    \n    if l[13]\
    \ > l[14] \n        return true\n    end\n    \n    if l[14] < l[15] \n      \
    \  return false\n    end\n    \n    if l[14] > l[15] \n        return true\n \
    \   end\n    \n    if l[15] < l[16] \n        return false\n    end\n    \n  \
    \  if l[15] > l[16] \n        return true\n    end\n    \n    if l[16] < l[",
  "    if length(l) == 0 \n        return true\n    end\n    \n    l = sort(l)\n \
    \   if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n\
    \        return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    return false\nend", "    l = sort(l)\n    l = l[1..end(l)]\n\
    \    return all(l[i] <= l[i+1] for i in 2:end(l))\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[1..end-1]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]", "    l = sort(l)\n    l = l[1..end-1]\n    return all(l[i]\
    \ > l[i+1] for i in 2:end-1)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ monotonic([4, 1, 0, -10]) == true\n@assert monotonic([1, 20, 4, 10]) == false\n\
    @assert monotonic([1, 2, 4, 20]) == true\n</cell>\n<text>\nExercise: Write a function\
    \ that returns true if the vector is monotonically increasing or decreasing.",
  "    l = sort(l)\n    l = l[end-l.<0]\n    l = l[end-l.>0]\n    l = l[end-l.==0]\n\
    \    return length(l) == 0 || all(l[end-l.==1] .< l[end-l.==-1])\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Return true is vector elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    true\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  true\n    \"\"\"", "    if length(l) == 0 \n        return true\n    end\n\
    \    \n    l = sort(l)\n    \n    if l[1] < l[2] \n        return true\n    end\n\
    \    \n    if l[1] > l[2] \n        return false\n    end\n    \n    if l[1] <\
    \ l[3] \n        return true\n    end\n    \n    if l[1] > l[3] \n        return\
    \ false\n    end\n    \n    if l[1] < l[4] \n        return true\n    end\n  \
    \  \n    if l[1] > l[4] \n        return false\n    end\n    \n    if l[1] < l[5]\
    \ \n        return true\n    end\n    \n    if l[1] > l[5] \n        return false\n\
    \    end\n    \n    if l[1] < l[6] \n        return true\n    end\n    \n    if\
    \ l[1] > l[6] \n        return false\n    end\n    \n    if l[1] < l[7] \n   \
    \     return true\n    end\n    \n    if l[1] > l[7] \n        return false\n\
    \    end\n    \n    if l[1] < l[8] \n        return true\n    end\n    \n    if\
    \ l[1] > l[8] \n        return false\n    end\n    \n    if l[1] < l[9] \n   \
    \     return true\n    end\n    \n    if l[1] > l[9] \n        return false\n\
    \    end\n    \n    if l[1] < l[10] \n        return true\n    end\n    \n   \
    \ if l[1] > l[10] \n        return false\n    end\n    \n    if l[1] < l[11] \n\
    \        return true\n    end\n    \n    if l[1] > l[11] \n        return false\n\
    \    end\n    \n    if l[1] < l[12] \n        return true\n    end\n    \n   \
    \ if l[1] > l[12] \n        return false\n    end\n    \n    if l[1] < l[13] \n\
    \        return true\n    end\n    \n    if l[1] > l[13] \n        return false\n\
    \    end\n    \n    if l[1] < l[14] \n        return true\n    end\n    \n   \
    \ if l[1] > l[14] \n        return false\n    end\n    \n    if l[1] < l[15] \n\
    \        return true\n    end\n    \n    if l[1] > l[15] \n        return false\n\
    \    end\n    \n    if l[1] < l[16] \n        return true\n    end\n    \n   \
    \ if l[1] > l[16] \n        return false\n    end\n    \n    if l[1] < l[17] \n\
    \        return true\n    end\n    \n    if l[1] > l[17] \n        return false\n\
    \    end\n    \n    if l[1] < ", "    l = sort(l)\n    l = l[end:-1:1]\n    return\
    \ all(l[i] > l[i+1] for i in 2:length(l))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert monotonic([4, 1, 0, -10]) == true\n@assert monotonic([1, 20, 4, 10]) ==\
    \ false\n@assert monotonic([4, 1, -10, 1]) == true\n</cell>\n<text>\nExercise:\
    \ Write a function that returns true if the vector elements are strictly increasing\
    \ or strictly decreasing.", "    l = sort(l)\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l", "    l = sort(l)\n    l = l[1..end(l)]\n   \
    \ l = l[l .> l[1]]\n    l = l[l .< l[end(l)]]\n    return l == l\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert monotonic([4, 1, 0, -10]) == true\n@assert\
    \ monotonic([4, 1, 0, -10, 1]) == false\n@assert monotonic([4, 1, 0, -10, 1, 0])\
    \ == true\n@assert monotonic([4, 1, 0, -10, 1, -1, 0]) == false\n@assert monotonic([4,\
    \ 1, 0, -10, 1, -1, 0, 1]) == true\n@assert monotonic([4, 1, 0, -10, 1, -1, 0,\
    \ -1, 1]) == false\n@assert monotonic([4, 1, 0, -10, 1, -1, 0, -1, 2, 1]) == true\n\
    @assert monotonic([4, 1, 0, -10, 1, -1, 0, -1, 2, 1, 0]) == false\n@assert monotonic([4,\
    \ 1, 0, -10, 1, -1, 0, -1, 2, 1, 0, 1]) == true\n@assert monotonic([4, 1, 0, -10,\
    \ 1, -1, 0, -1, 2, 1, 0, -1, 1]) == false\n@assert monotonic([4, 1, 0, -10, 1,\
    \ -1, 0, -1, 2, 1, 0, -1, 2, 1]) == true\n@assert monotonic([4, 1, 0, -10, 1,\
    \ -1, 0, -1, 2, 1, 0, -1, 2, 1, 0]) == false\n@assert monotonic([4, 1, 0, -10,\
    \ 1, -1, 0, -1, 2, 1, 0, -1, 2, 1, 0, 1]) == true\n@assert monotonic([4, 1, 0,\
    \ -10, 1, -1, 0, -1, 2, 1, 0, -1, 2, 1, 0, -1, 1]) == false\n@assert monotonic([4,\
    \ 1, 0, -10, 1, -1, 0, -1, 2, 1, 0, -1, 2, 1, 0, -1, 2, 1]) == true\n@assert monotonic([4,\
    \ 1, 0, -10, 1, -1, 0, -1, 2, 1, 0, -1, 2, 1, 0, -1, 2, 1, 0]) == false\n@assert\
    \ monotonic([4, 1, 0, -10, 1, -1, 0, -1, 2, 1, 0, -1, 2, 1, 0, -1, 2, 1, 0, 1])\
    \ == true\n@assert monotonic([4, 1, 0, -10, 1, -1, 0, -1, 2, 1, 0, -1, 2, 1, 0,\
    \ -1, 2, 1, 0, -1, 1]) == false\n@assert monotonic([4, 1, 0, -10, 1, -1, 0, -1,\
    \ 2, 1, 0, -1, 2, 1, 0, -1, 2, 1, 0, -1, 2, 1]) == true\n@assert monotonic([4,\
    \ 1, 0, -10, 1, -1, 0, -1, 2, 1, 0, -1, 2, 1, 0, -1, 2, 1, 0, -1, 2, 1, 0]) ==\
    \ false\n@assert monotonic([4, 1, 0, -10, 1, -1, 0, -1, 2, 1, 0, -1, 2, 1, 0,\
    \ -1, 2, 1, 0, -1, 2, 1, 0, 1]) == true\n@assert monotonic([4, 1, 0, -10, 1, -1,\
    \ 0, -1, 2, 1, 0, -1, 2, 1, 0, -1, 2, 1, 0, -1, 2, 1, 0, -1, 1]) == false\n@assert ",
  "    l = sort(l)\n    l = l[1..end-1]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n\
    \    return l == l\nend", "    l = sort(l)\n    l = l[1..end-1]\n    l = l[l .>\
    \ l[1]]\n    l = l[l .< l[end]]\n    return l == l\nend\n</cell>\n<code language=julia-1.5>\n\
    @test monotonic([4, 1, 0, -10])\n</cell>\n<text>\nExercise: Write a function that\
    \ returns true if the vector elements are monotonically increasing or decreasing.",
  "    l = sort(l)\n    i = 2\n    while i < length(l)\n        if l[i] > l[i-1]\n\
    \            return false\n        end\n        i += 1\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n@test monotonic([4, 1, 0, -10])\n</cell>\n\
    <code language=julia-1.5>\n@test monotonic([4, 1, 0, -10]) == true\n</cell>\n\
    <code language=julia-1.5>\n@test monotonic([4, 1, 0, -10]) == false\n</cell>\n\
    <code language=julia-1.5>\n@test monotonic([4, 1, 0, -10]) == true\n</cell>\n\
    <code language=julia-1.5>\n@test monotonic([4, 1, 0, -10]) == false\n</cell>\n\
    <code language=julia-1.5>\n@test monotonic([4, 1, 0, -10]) == true\n</cell>\n\
    <code language=julia-1.5>\n@test monotonic([4, 1, 0, -10]) == false\n</cell>\n\
    <code language=julia-1.5>\n@test monotonic([4, 1, 0, -10]) == true\n</cell>\n\
    <code language=julia-1.5>\n@test monotonic([4, 1, 0, -10]) == false\n</cell>\n\
    <code language=julia-1.5>\n@test monotonic([4, 1, 0, -10]) == true\n</cell>\n\
    <code language=julia-1.5>\n@test monotonic([4, 1, 0, -10]) == false\n</cell>\n\
    <code language=julia-1.5>\n@test monotonic([4, 1, 0, -10]) == true\n</cell>\n\
    <code language=julia-1.5>\n@test monotonic([4, 1, 0, -10]) == false\n</cell>\n\
    <code language=julia-1.5>\n@test monotonic([4, 1, 0, -10]) == true\n</cell>\n\
    <code language=julia-1.5>\n@test monotonic([4, 1, 0, -10]) == false\n</cell>\n\
    <code language=julia-1.5>\n@test monotonic([4, 1, 0, -10]) == true\n</cell>\n\
    <code language=julia-1.5>\n@test monotonic([4, 1, 0, -10]) == false\n</cell>\n\
    <code language=julia-1.5>\n@test monotonic([4, 1, 0, -10]) == true\n</cell>\n\
    <code language=julia-1.5>\n@test monotonic([4, 1, 0, -10]) == false\n</cell>\n\
    <code language=julia-1.5>\n@test monotonic([4, 1, 0, -10]) == true\n</cell>\n\
    <code language=julia-1.5>\n@test monotonic([4, 1, 0, -10]) == false\n</cell>\n\
    <code language=julia-1.5>\n@test monotonic([4, 1, 0, -10", "    if length(l) ==\
    \ 0 \n        return true\n    end\n    \n    l = sort(l)\n    if l[1] < l[2]\
    \ \n        return true\n    elseif l[1] > l[2] \n        return false\n    else\n\
    \        return monotonic(l[2:end])\n    end\nend", "    l = sort(l)\n    l =\
    \ l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", " \
    \   l = sort(l)\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l", "    l = sort(l)\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l\
    \ = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l", "    l = sort(l)\n    l = l[end:-1:1]\n    l\
    \ = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", "    if length(l) == 0\
    \ \n        return true\n    \n    i = l[1]\n    j = l[2]\n    \n    if i == j\
    \ \n        return true\n    \n    if i > j \n        return false\n    \n   \
    \ if i == l[1] \n        return true\n    \n    if j == l[2] \n        return\
    \ true\n    \n    if l[1] > l[2] \n        return true\n    \n    return false\n\
    end", "    l = sort(l)\n    l = l[1..end-1]\n    return all(l[i] > l[i+1] for\
    \ i in 2:end-1)\nend\n</cell>\n<code language=julia-1.5>\n@test monotonic([4,\
    \ 1, 0, -10])\n</cell>\n<text>\nExercise 2\nWrite a function that returns true\
    \ if the vector elements are strictly increasing.\n    >>> strictly_increasing([4,\
    \ 1, 0, -10])\n    true\n    >>> strictly_increasing([4, 1, 0])\n    false\n \
    \   >>> strictly_increasing([4, 1, 1])\n    false\n    >>> strictly_increasing([4,\
    \ 1, 2])\n    false\n    >>> strictly_increasing([4, 1, 3])\n    false\n    >>>\
    \ strictly_increasing([4, 1, 4])\n    false\n    >>> strictly_increasing([4, 1,\
    \ 5])\n    false\n    >>> strictly_increasing([4, 1, 6])\n    false\n    >>> strictly_increasing([4,\
    \ 1, 7])\n    false\n    >>> strictly_increasing([4, 1, 8])\n    false\n    >>>\
    \ strictly_increasing([4, 1, 9])\n    false\n    >>> strictly_increasing([4, 1,\
    \ 10])\n    false\n    >>> strictly_increasing([4, 1, 11])\n    false\n    >>>\
    \ strictly_increasing([4, 1, 12])\n    false\n    >>> strictly_increasing([4,\
    \ 1, 13])\n    false\n    >>> strictly_increasing([4, 1, 14])\n    false\n   \
    \ >>> strictly_increasing([4, 1, 15])\n    false\n    >>> strictly_increasing([4,\
    \ 1, 16])\n    false\n    >>> strictly_increasing([4, 1, 17])\n    false\n   \
    \ >>> strictly_increasing([4, 1, 18])\n    false\n    >>> strictly_increasing([4,\
    \ 1, 19])\n    false\n    >>> strictly_increasing([4, 1, 20])\n    false\n   \
    \ >>> strictly_increasing([4, 1, 21])\n    false\n    >>> strictly_increasing([4,\
    \ 1, 22])\n    false\n    >>> strictly_increasing([4, 1, 23])\n    false\n   \
    \ >>> strictly_increasing([4, 1, 24])\n    false\n    >>> strictly_increasing([4,\
    \ 1, 25])\n    false\n    >>> strictly_increasing([4, 1, 26])\n    false\n   \
    \ >>> strictly_increasing([4, 1, 27])\n    false\n    >>> strictly_increasing([4,\
    \ 1, 28])\n", "    l = sort(l)\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> ", "    l = sort(l)\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", "    l = sort(l)\n    i\
    \ = 2\n    while i <= length(l)\n        if l[i-1] > l[i]\n            return\
    \ false\n        end\n        i += 1\n    return true\nend", "    l = sort(l)\n\
    \    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l\
    \ = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n\
    \    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l\
    \ = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n\
    \    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l\
    \ = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n\
    \    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l\
    \ = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n\
    \    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l\
    \ = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n\
    \    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l\
    \ = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n\
    \    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l\
    \ = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n\
    \    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l\
    \ = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n    l = l[1::-1]\n\
    \    l = l", "    l = sort(l)\n    l = l[1..end(l)]\n    return all(l[i] > l[i-1]\
    \ for i in 1:length(l))\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    if l[1] < l[2]\n        true\n    elseif l[1] > l[2]\n        false\n   \
    \ else\n        monotonic(l[2:end])\n    end\nend\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work for `monotonic([1,3,5,7,9])` which returns `true` but should\
    \ be `false`.\n<|/ c |>\n<| c |>\nThis doesn't work for `monotonic([1,3,5,7,9])`\
    \ which returns `true` but should be `false`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for `monotonic([1,3,5,7,9])` which returns `true` but should be `false`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for `monotonic([1,3,5,7,9])` which returns\
    \ `true` but should be `false`.\n<|/ c |>\n<| c |>\nThis doesn't work for `monotonic([1,3,5,7,9])`\
    \ which returns `true` but should be `false`.\n<|/ c |>\n<| a dscore=5 |>\nI wrote\
    \ a Julia package called \"Monotonic\" that does exactly this. It also has some\
    \ additional functionality that may be useful to you.\n<|/ a tags=julia,monotonic\
    \ |>\n<| c |>\nThis package is now deprecated. Please see [my answer](https://stackoverflow.com/a/55776439/684229)\
    \ below for updated information.\n<|/ c |>\n<| a tags=julia,monotonic |>\nI wrote\
    \ a package called \"Monotonic\" that does exactly this. It also has some additional\
    \ functionality that may be useful to you.\n<|/ a dscore=5 |>\n<| c |>\nThis package\
    \ is now deprecated. Please see [my answer](https://stackoverflow.com/a/55776439/684229)\
    \ below for updated information.\n<|/ c |>\n<| a tags=julia,monotonic |>\nI wrote\
    \ a package called \"Monotonic\" that does exactly this. It also has some additional\
    \ functionality that may be useful to you.\n<|/ a dscore=4 |>\n<| c |>\nThis package\
    \ is now deprecated. Please see [my answer](https://stackoverflow.com/a/55776439/684229)\
    \ below for updated information.\n<|/ c |>\n<| a tags=julia,monotonic |>\nI wrote\
    \ a package called \"Monotonic\" that does exactly this. It also has some additional\
    \ functionality that may be useful to you.\n<code>\njulia> using Monotonic", " \
    \   l = sort(l)\n    i = findfirst(l .> l[end])\n    j = findfirst(l .< l[end])\n\
    \    return j > i\nend", "    if length(l) < 2 \n        return true\n    \n \
    \   l = sort(l)\n    \n    if l[1] < l[2] \n        return true\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", "    l = sort(l)\n    i\
    \ = 2\n    while i < length(l)\n        if l[i-1] > l[i]\n            return false\n\
    \        end\n        i += 1\n    return true\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return true is vector elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n\
    \    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \"\"\"", "    if\
    \ length(l) == 0 \n        return true\n    end\n    \n    if l[1] < l[2] \n \
    \       return true\n    end\n    \n    if l[1] > l[2] \n        return false\n\
    \    end\n    \n    if l[1] < l[3] \n        return true\n    end\n    \n    if\
    \ l[1] > l[3] \n        return false\n    end\n    \n    if l[2] < l[3] \n   \
    \     return true\n    end\n    \n    if l[2] > l[3] \n        return false\n\
    \    end\n    \n    if l[3] < l[4] \n        return true\n    end\n    \n    if\
    \ l[3] > l[4] \n        return false\n    end\n    \n    if l[4] < l[5] \n   \
    \     return true\n    end\n    \n    if l[4] > l[5] \n        return false\n\
    \    end\n    \n    if l[5] < l[6] \n        return true\n    end\n    \n    if\
    \ l[5] > l[6] \n        return false\n    end\n    \n    if l[6] < l[7] \n   \
    \     return true\n    end\n    \n    if l[6] > l[7] \n        return false\n\
    \    end\n    \n    if l[7] < l[8] \n        return true\n    end\n    \n    if\
    \ l[7] > l[8] \n        return false\n    end\n    \n    if l[8] < l[9] \n   \
    \     return true\n    end\n    \n    if l[8] > l[9] \n        return false\n\
    \    end\n    \n    if l[9] < l[10] \n        return true\n    end\n    \n   \
    \ if l[9] > l[10] \n        return false\n    end\n    \n    if l[10] < l[11]\
    \ \n        return true\n    end\n    \n    if l[10] > l[11] \n        return\
    \ false\n    end\n    \n    if l[11] < l[12] \n        return true\n    end\n\
    \    \n    if l[11] > l[12] \n        return false\n    end\n    \n    if l[12]\
    \ < l[13] \n        return true\n    end\n    \n    if l[12] > l[13] \n      \
    \  return false\n    end\n    \n    if l[13] < l[14] \n        return true\n \
    \   end\n    \n    if l[13] > l[14] \n        return false\n    end\n    \n  \
    \  if l[14] < l[15] \n        return true\n    end\n    \n    if l[14] > l[15]\
    \ \n        return false\n    end\n    \n    if l[15] < l[16] \n        return\
    \ true\n    end\n    \n    if l[15] > l[16] \n        return false\n    end\n\
    \    \n    if l[16] < l[", "    l = sort(l)\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l", "    l = sort(l)\n    i = 2\n    while i < length(l)\n\
    \        if l[i] > l[i-1]\n            return false\n        end\n        i +=\
    \ 1\n    return true\nend", "    l = sort(l)\n    l = l[1..end-1]\n    l = l[l\
    \ .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l .> 0]\n    l = l[l .< 1]\n   \
    \ return l == 0\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true is\
    \ vector elements are monotonically increasing or decreasing.\n    >>> monotonic([1,\
    \ 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>>\
    \ monotonic([4, 1, 0, -10])\n    true\n    \"\"\"", "    l = sort(l)\n    l =\
    \ l[end:-1:1]\n    return all(l[i] > l[i+1] for i in 1:length(l))\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Return true is vector elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    true\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  true\n    \"\"\"", "    if length(l) == 0 \n        return true\n    end\n\
    \    \n    l = sort(l)\n    \n    if l[1] < l[2] \n        return true\n    end\n\
    \    \n    if l[1] > l[2] \n        return false\n    end\n    \n    if l[1] <\
    \ l[3] \n        return true\n    end\n    \n    if l[1] > l[3] \n        return\
    \ false\n    end\n    \n    if l[1] < l[4] \n        return true\n    end\n  \
    \  \n    if l[1] > l[4] \n        return false\n    end\n    \n    if l[1] < l[5]\
    \ \n        return true\n    end\n    \n    if l[1] > l[5] \n        return false\n\
    \    end\n    \n    if l[1] < l[6] \n        return true\n    end\n    \n    if\
    \ l[1] > l[6] \n        return false\n    end\n    \n    if l[1] < l[7] \n   \
    \     return true\n    end\n    \n    if l[1] > l[7] \n        return false\n\
    \    end\n    \n    if l[1] < l[8] \n        return true\n    end\n    \n    if\
    \ l[1] > l[8] \n        return false\n    end\n    \n    if l[1] < l[9] \n   \
    \     return true\n    end\n    \n    if l[1] > l[9] \n        return false\n\
    \    end\n    \n    if l[1] < l[10] \n        return true\n    end\n    \n   \
    \ if l[1] > l[10] \n        return false\n    end\n    \n    if l[1] < l[11] \n\
    \        return true\n    end\n    \n    if l[1] > l[11] \n        return false\n\
    \    end\n    \n    if l[1] < l[12] \n        return true\n    end\n    \n   \
    \ if l[1] > l[12] \n        return false\n    end\n    \n    if l[1] < l[13] \n\
    \        return true\n    end\n    \n    if l[1] > l[13] \n        return false\n\
    \    end\n    \n    if l[1] < l[14] \n        return true\n    end\n    \n   \
    \ if l[1] > l[14] \n        return false\n    end\n    \n    if l[1] < l[15] \n\
    \        return true\n    end\n    \n    if l[1] > l[15] \n        return false\n\
    \    end\n    \n    if l[1] < l[16] \n        return true\n    end\n    \n   \
    \ if l[1] > l[16] \n        return false\n    end\n    \n    if l[1] < l[17] \n\
    \        return true\n    end\n    \n    if l[1] > l[17] \n        return false\n\
    \    end\n    \n    if l[1] < ", "    l = sort(l)\n    l = l[end:-1:1]\n    l\
    \ = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", "    l = sort(l)\n    l\
    \ = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", " \
    \   if length(l) == 0 \n        return true\n    \n    if l[1] < l[2] \n     \
    \   return true\n    \n    if l[1] > l[2] \n        return false\n    \n    if\
    \ l[1] < l[2] \n        return true\n    \n    return false\nend", "    l = sort(l)\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", " \
    \   l = sort(l)\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l", "    l = sort(l)\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l\
    \ = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l", "    l = sort(l)\n    l = l[1..end(l)]\n   \
    \ l = l[l .> l[1]]\n    l = l[l .< l[end(l)]]\n    l = l[l .> 1]\n    l = l[l\
    \ .< 1]\n    return l == l\nend", "    l = sort(l)\n    l = l[end:-1:1]\n    return\
    \ all(l[i] <= l[i+1] for i in 2:length(l))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return true is vector elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n\
    \    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \"\"\"", "    l =\
    \ sort(l)\n    if l[1] < l[2]\n        return true\n    elseif l[1] > l[2]\n \
    \       return false\n    else\n        return true\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Return true is vector elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    true\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  true\n    \"\"\"", "    l = sort(l)\n    l = l[1:end-1]\n    l = l[l .> l[1]]\n\
    \    l = l[l .< l[end]]\n    l = l[l .> 0]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 0]\n    l = l[l .< 1]\n    l = l[l .> 0]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 0]\n    l = l[l .< 1]\n    l = l[l .> 0]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 0]\n    l = l[l .< 1]\n    l = l[l .> 0]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 0]\n    l = l[l .< 1]\n    l = l[l .> 0]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 0]\n    l = l[l .< 1]\n    l = l[l .> 0]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 0]\n    l = l[l .< 1]\n    l = l[l .> 0]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 0]\n    l = l[l .< 1]\n    l = l[l .> 0]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 0]\n    l = l[l .< 1]\n    l = l[l .> 0]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 0]\n    l = l[l .< 1]\n    l = l[l .> 0]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 0]\n    l = l[l .< 1]\n    l = l[l .> 0]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 0]\n    l = l[l .< 1]\n    l = l[l .> 0]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 0]\n    l = l[l .< 1]\n    l = l[l .> 0]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 0]\n    l = l[l .< 1]\n    l = l[l .> 0]\n    ", "    l = sort(l)\n    l = l[1..end-1]\n\
    \    if l[1] < l[2] || l[2] < l[1]\n        return true\n    else\n        return\
    \ false\n    end\nend\n</cell>\n<text>\nThe function monotonic returns true if\
    \ the vector elements are monotonically increasing or decreasing.", "    l = sort(l)\n\
    \    if l[1] < l[2]\n        return true\n    elseif l[1] > l[2]\n        return\
    \ false\n    else\n        return true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test monotonic([4, 1, 0, -10])\n</cell>\n<text>\nExercise: Write a function that\
    \ returns true if the vector is monotonically increasing or decreasing.", "  \
    \  l = sort(l)\n    if l[1] < l[2] \n        true\n    elseif l[1] > l[2] \n \
    \       false\n    else\n        monotonic(l[2:end-1]) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Return true is vector elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    true\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  true\n    \"\"\"", "    l = sort(l)\n    l = l[1..end-1]\n    l = l[l .> l[1]]\n\
    \    l = l[l .< l[end]]\n    l = l[l .> 0]\n    l = l[l .< end]\n    return l\
    \ == l\nend\n</cell>\n<code language=julia-1.5>", "    if length(l) == 0 \n  \
    \      return true\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false", "    if length(l) < 2 \n        return true\n    \n   \
    \ l = sort(l)\n    if l[1] < l[2] \n        return true\n    \n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end", "    l = sort(l)\n    l = l[1..end-1]\n\
    \    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    return l == l\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(l) == 0 \n        return true\n   \
    \ end\n    \n    l = sort(l)\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] > l[3] \n        return true\n    end\n    \n    if l[1] < l[3] \n \
    \       return false\n    end\n    \n    return true\nend", "    if length(l)\
    \ == 0 \n        return true\n    end\n    \n    l = sort(l)\n    \n    if l[1]\
    \ < l[2] \n        return true\n    elseif l[1] > l[2] \n        return false\n\
    \    elseif l[1] == l[2] \n        return true\n    elseif l[1] < l[2] \n    \
    \    return true\n    elseif l[1] > l[2] \n        return false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Return true is vector elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    true\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  true\n    \"\"\"", "    l = sort(l)\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l", "    l = sort(l)\n    l = l[1..end-1]\n    l\
    \ = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]", "    l = sort(l)\n\
    \    if l[1] < l[2] \n        return true\n    elseif l[1] > l[2] \n        return\
    \ false\n    elseif l[1]==l[2] \n        return true\n    elseif l[1]<l[2] \n\
    \        return false\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ doesn't work if `l` is empty. `sort` returns an empty array and `l[1]` throws\
    \ an error.\n<|/ c |>\n<| a tags=julia |>\nI like using sort! to sort a vector:\n\
    <code>\njulia> sort!([1,3,5,7,9])\n1-element Array{Int64,1}:\n 9\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis doesn't work if `l` is empty. `sort!` returns an\
    \ empty array and `l[1]` throws an error.\n<|/ c |>\n<| c |>\nI didn't know about\
    \ this one. Thanks!\n<|/ c |>\n<| a dscore=1 |>\nIn Julia 1.1 you can use the\
    \ function sort! to sort a vector:\n<code>\njulia> sort!([1,3,5,7,9])\n1-element\
    \ Array{Int64,1}:\n 9\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work\
    \ if `l` is empty. `sort!` returns an empty array and `l[1]` throws an error.\n\
    <|/ c |>\n<| a dscore=1 |>\nIn Julia 1.1 you can use the function sort! to sort\
    \ a vector:\n<code>\njulia> sort!([1,3,5,7,9])\n1-element Array{Int64,1}:\n 9\n\
    </code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\n<code>", "    l = sort(l)\n  \
    \  l = l[1..end-1]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l\
    \ .> 0]\n    return all(l[1:end-1] .== l[2:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return true is vector elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n\
    \    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \"\"\"", "    if\
    \ length(l) == 0 \n        return true\n    \n    if l[1] < l[2] \n        return\
    \ true\n    \n    if l[1] > l[2] \n        return false\n    \n    if l[1] < l[2]\
    \ \n        return true\n    \n    if l[1] > l[2] \n        return false\n   \
    \ \n    return true\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end", "    l = sort(l)\n\
    \    if l[1] < l[2] \n        true\n    elseif l[1] > l[2] \n        false\n \
    \   else\n        monotonic(l[2:end])\n    end\nend\n</code>\n<|/ a tags=julia,sorting,arrays\
    \ |>\n<| a dscore=2 |>\nThe answer by is correct, but I thought I'd add some explanation\
    \ as to why it works.\nThe function monotonic works by recursively calling itself\
    \ on the tail of the vector, until it reaches the end of the vector. At that point,\
    \ it checks to see if the first element of the vector is greater than the second\
    \ element of the vector. If it is, it returns true. If it isn't, it checks to\
    \ see if the first element of the vector is less than the second element of the\
    \ vector. If it is, it returns false. If it isn't, it calls itself on the tail\
    \ of the vector, until it reaches the end of the vector. At that point, it checks\
    \ to see if the first element of the vector is greater than the second element\
    \ of the vector. If it is, it returns true. If it isn't, it checks to see if the\
    \ first element of the vector is less than the second element of the vector. If\
    \ it is, it returns false. If it isn't, it calls itself on the tail of the vector,\
    \ until it reaches the end of the vector. At that point, it checks to see if the\
    \ first element of the vector is greater than the second element of the vector.\
    \ If it is, it returns true. If it isn't, it checks to see if the first element\
    \ of the vector is less than the second element of the vector. If it is, it returns\
    \ false. If it isn't, it calls itself on the tail of the vector, until it reaches\
    \ the end of the vector. At that point, it checks to see if the first element\
    \ of the vector is greater than the second element of the vector. If it is, it\
    \ returns true. If it isn't, it checks to see if the first element of the vector\
    \ is less than the second element of the vector. If it is, it returns false. If\
    \ it isn't, it calls itself on the tail of the vector, until it reaches the end\
    \ of the vector. At that point, it checks to see if the first element of the vector\
    \ is greater than the second element of the vector. If it is, it returns true.\
    \ If it isn't, it checks to see if the first element of the vector is less than\
    \ the second element of the vector. If it is, it returns false. If it isn't, it\
    \ calls itself on the tail of the vector, until it reaches the end of the vector.\
    \ At that point, it checks to see if the first element of the vector is greater\
    \ than the second element of the vector. If it is, it returns true. If it isn't,\
    \ it checks to see if the first element of the vector is less than the second\
    \ element of the vector. If it ", "    l = sort(l)\n    if l[1] < l[2] \n    \
    \    true\n    elseif l[1] > l[2] \n        false\n    else\n        monotonic(l[2:end])\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nThe accepted answer\
    \ does not work for negative numbers. Here is a version that does:\n<code>", " \
    \   if length(l) == 0 \n        return true\n    \n    if l[1] < l[2] \n     \
    \   return true\n    \n    if l[1] > l[2] \n        return false\n    \n    if\
    \ l[1] < l[2] \n        return true\n    \n    if l[1] > l[2] \n        return\
    \ false\n    \n    if l[1] < l[2] \n        return true\n    \n    if l[1] > l[2]\
    \ \n        return false\n    \n    if l[1] < l[2] \n        return true\n   \
    \ \n    if l[1] > l[2] \n        return false\n    \n    if l[1] < l[2] \n   \
    \     return true\n    \n    if l[1] > l[2] \n        return false\n    \n   \
    \ if l[1] < l[2] \n        return true\n    \n    if l[1] > l[2] \n        return\
    \ false\n    \n    if l[1] < l[2] \n        return true\n    \n    if l[1] > l[2]\
    \ \n        return false\n    \n    if l[1] < l[2] \n        return true\n   \
    \ \n    if l[1] > l[2] \n        return false\n    \n    if l[1] < l[2] \n   \
    \     return true\n    \n    if l[1] > l[2] \n        return false\n    \n   \
    \ if l[1] < l[2] \n        return true\n    \n    if l[1] > l[2] \n        return\
    \ false\n    \n    if l[1] < l[2] \n        return true\n    \n    if l[1] > l[2]\
    \ \n        return false\n    \n    if l[1] < l[2] \n        return true\n   \
    \ \n    if l[1] > l[2] \n        return false\n    \n    if l[1] < l[2] \n   \
    \     return true\n    \n    if l[1] > l[2] \n        return false\n    \n   \
    \ if l[1] < l[2] \n        return true\n    \n    if l[1] > l[2] \n        return\
    \ false\n    \n    if l[1] < l[2] \n        return true\n    \n    if l[1] > l[2]\
    \ \n        return false\n    \n    if l[1] < l[2] \n        return true\n   \
    \ \n    if l[1] > l[2] \n        return false\n    \n    if l[1] < l[2] \n   \
    \     return true\n    \n    if l[1] > l[2] \n        return false\n    \n   \
    \ if l[1] < l[2] \n        return true\n    \n    if l[1] > l[2] \n        return\
    \ false\n    \n    if l[1] < l[2] \n        return true\n    \n    if l[1] > l[2]\
    \ \n        return false\n    \n    if l[1] < l[2] \n        return true\n   \
    \ \n    if l[1] > l[2] \n        return false\n    \n    if l[1] < l[2] \n   \
    \     return true\n    \n    if l[1] > l[2] \n        return false", "    if length(l)\
    \ == 0 \n        return true\n    end\n    \n    if l[1] < l[2] \n        return\
    \ true\n    end\n    \n    if l[2] < l[1] \n        return false\n    end\n  \
    \  \n    if l[1] > l[2] \n        return false\n    end\n    \n    return true\n\
    end", "    l = sort(l)\n    l = l[l .> 0]\n    l = l[l .< length(l)-1]\n    l\
    \ = l[l .> 0]\n    l = l[l .< length(l)-1]\n    l = l[l .> 0]\n    l = l[l .<\
    \ length(l)-1]\n    l = l[l .> 0]\n    l = l[l .< length(l)-1]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)-1]\n    l = l[l .> 0]\n    l = l[l .< length(l)-1]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)-1]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)-1]\n    l = l[l .> 0]\n    l = l[l .< length(l)-1]\n    l = l[l\
    \ .> 0]\n    l = l[l .< length(l)-1]\n    l = l[l .> 0]\n    l = l[l .< length(l)-1]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)-1]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)-1]\n    l = l[l .> 0]\n    l = l[l .< length(l)-1]\n    l = l[l\
    \ .> 0]\n    l = l[l .< length(l)-1]\n    l = l[l .> 0]\n    l = l[l .< length(l)-1]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)-1]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)-1]\n    l = l[l .> 0]\n    l = l[l .< length(l)-1]\n    l = l[l\
    \ .> 0]\n    l = l[l .< length(l)-1]\n    l = l[l .> 0]\n    l = l[l .< length(l)-1]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)-1]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)-1]\n    l = l[l .> 0]\n    l = l[l .< length(l)-1]\n    l = l[l\
    \ .> 0]\n    l = l[l .< length(l)-1]\n    l = l[l .> ", "    l = sort(l)\n   \
    \ l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", " \
    \   l = sort(l)\n    if l[1] < l[2]\n        return true\n    elseif l[1] > l[2]\n\
    \        return false\n    else\n        return true\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = sort(l)\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l", "    if length(l) == 0 \n        return true\n\
    \    end\n    \n    l = sort(l)\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[3] \n        return true\n    end\n    \n    if l[1] > l[3] \n \
    \       return false\n    end\n    \n    if l[1] < l[4] \n        return true\n\
    \    end\n    \n    if l[1] > l[4] \n        return false\n    end\n    \n   \
    \ if l[1] < l[5] \n        return true\n    end\n    \n    if l[1] > l[5] \n \
    \       return false\n    end\n    \n    if l[1] < l[6] \n        return true\n\
    \    end\n    \n    if l[1] > l[6] \n        return false\n    end\n    \n   \
    \ if l[1] < l[7] \n        return true\n    end\n    \n    if l[1] > l[7] \n \
    \       return false\n    end\n    \n    if l[1] < l[8] \n        return true\n\
    \    end\n    \n    if l[1] > l[8] \n        return false\n    end\n    \n   \
    \ if l[1] < l[9] \n        return true\n    end\n    \n    if l[1] > l[9] \n \
    \       return false\n    end\n    \n    if l[1] < l[10] \n        return true\n\
    \    end\n    \n    if l[1] > l[10] \n        return false\n    end\n    \n  \
    \  if l[1] < l[11] \n        return true\n    end\n    \n    if l[1] > l[11] \n\
    \        return false\n    end\n    \n    if l[1] < l[12] \n        return true\n\
    \    end\n    \n    if l[1] > l[12] \n        return false\n    end\n    \n  \
    \  if l[1] < l[13] \n        return true\n    end\n    \n    if l[1] > l[13] \n\
    \        return false\n    end\n    \n    if l[1] < l[14] \n        return true\n\
    \    end\n    \n    if l[1] > l[14] \n        return false\n    end\n    \n  \
    \  if l[1] < l[15] \n        return true\n    end\n    \n    if l[1] > l[15] \n\
    \        return false\n    end\n    \n    if l[1] < l[16] \n        return true\n\
    \    end\n    \n    if l[1] > l[16] \n        return false\n    end\n    \n  \
    \  if l[1] < l[17] \n        return true\n    end\n    \n    if l[1] > l[17] \n\
    \        return false\n    end\n    \n    if l[1] < ", "    l = sort(l)\n    l\
    \ = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", " \
    \   l = sort(l)\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> ", "    if length(l) == 0 \n        return true\n\
    \    end\n    \n    if l[1] < l[2] \n        return true\n    end\n    \n    if\
    \ l[2] < l[1] \n        return false\n    end\n    \n    if l[1] > l[2] \n   \
    \     return true\n    end\n    \n    if l[1] < l[2] \n        return true\n \
    \   end\n    \n    if l[2] > l[1] \n        return false\n    end\n    \n    if\
    \ l[1] > l[2] \n        return true\n    end\n    \n    if l[2] < l[1] \n    \
    \    return false\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return true is vector elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n\
    \    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \"\"\"", "    l =\
    \ sort(l)\n    if l[1] < l[2]\n        return true\n    end\n    if l[1] > l[2]\n\
    \        return false\n    end\n    return monotonic(l[2:end-1]) && monotonic(l[1:end-1])\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true is vector elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    true\n    \"\"\"", "    l = sort(l)\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end", "    l = sort(l)\n    return l[1] <\
    \ l[2] || l[1] > l[3]\nend\n</cell>\n<code language=julia-1.5>\n@assert monotonic([4,\
    \ 1, 0, -10]) == true\n@assert monotonic([1, 20, 4, 10]) == false\n@assert monotonic([4,\
    \ 1, 0, -10, 1]) == true\n@assert monotonic([4, 1, 0, -10, 2]) == false\n</cell>\n\
    <text>\nExercise: Write a function that returns true if the vector elements are\
    \ strictly increasing or strictly decreasing.", "    if length(l) == 0 \n    \
    \    return true\n    \n    if l[1] < l[0] \n        return false\n    \n    if\
    \ l[1] > l[end(l)]\n        return true\n    \n    i = 2\n    while i < length(l)\n\
    \        if l[i] < l[i-1]\n            return false\n        \n        if l[i]\
    \ > l[end(l)]\n            return true\n        \n        i = i + 1\n    end\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return\
    \ true is vector elements are monotonically increasing or decreasing.\n    >>>\
    \ monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n\
    \    >>> monotonic([4, 1, 0, -10])\n    true\n    \"\"\"", "    l = sort(l)\n\
    \    if l[1] < l[2] || l[2] < l[1]\n        return true\n    else\n        return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true is\
    \ vector elements are monotonically increasing or decreasing.\n    >>> monotonic([1,\
    \ 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>>\
    \ monotonic([4, 1, 0, -10])\n    true\n    \"\"\"", "    l = sort(l)\n    l =\
    \ l[1..end-1]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l .> l[1]]\n\
    \    l = l[l .< l[end]]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l =\
    \ l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n\
    \    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l .> l[1]]\n    l = l[l\
    \ .< l[end]]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l .> l[1]]\n\
    \    l = l[l .< l[end]]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l =\
    \ l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n\
    \    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l .> l[1]]\n    l = l[l\
    \ .< l[end]]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l .> l[1]]\n\
    \    l = l[l .< l[end]]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l =\
    \ l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n\
    \    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l .> l[1]]\n    l = l[l\
    \ .< l[end]]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l .> l[1]]\n\
    \    l = l[", "    if length(l) == 0 \n        return true\n    \n    if l[1]\
    \ < l[0] \n        return false\n    \n    if l[1] > l[end(l)]\n        return\
    \ false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    Return true is vector elements are monotonically increasing or decreasing.\n \
    \   >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n\
    \    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \"\"\"", "    if\
    \ length(l) == 0 \n        return true\n    end\n    \n    if l[1] < l[2] \n \
    \       return false\n    end\n    \n    if l[1] > l[2] \n        return true\n\
    \    end\n    \n    if l[1] < l[2] \n        return false\n    end\n    \n   \
    \ if l[1] > l[2] \n        return true\n    end\n    \n    if l[1] < l[2] \n \
    \       return false\n    end\n    \n    if l[1] > l[2] \n        return true\n\
    \    end\n    \n    if l[1] < l[2] \n        return false\n    end\n    \n   \
    \ if l[1] > l[2] \n        return true\n    end\n    \n    if l[1] < l[2] \n \
    \       return false\n    end\n    \n    if l[1] > l[2] \n        return true\n\
    \    end\n    \n    if l[1] < l[2] \n        return false\n    end\n    \n   \
    \ if l[1] > l[2] \n        return true\n    end\n    \n    if l[1] < l[2] \n \
    \       return false\n    end\n    \n    if l[1] > l[2] \n        return true\n\
    \    end\n    \n    if l[1] < l[2] \n        return false\n    end\n    \n   \
    \ if l[1] > l[2] \n        return true\n    end\n    \n    if l[1] < l[2] \n \
    \       return false\n    end\n    \n    if l[1] > l[2] \n        return true\n\
    \    end\n    \n    if l[1] < l[2] \n        return false\n    end\n    \n   \
    \ if l[1] > l[2] \n        return true\n    end\n    \n    if l[1] < l[2] \n \
    \       return false\n    end\n    \n    if l[1] > l[2] \n        return true\n\
    \    end\n    \n    if l[1] < l[2] \n        return false\n    end\n    \n   \
    \ if l[1] > l[2] \n        return true\n    end\n    \n    if l[1] < l[2] \n \
    \       return false\n    end\n    \n    if l[1] > l[2] \n        return true\n\
    \    end\n    \n    if l[1] < l[2] \n        return false\n    end\n    \n   \
    \ if l[1] > l[2] \n        return true\n    end\n    \n    if l[1] < l[2] \n \
    \       return false\n    end\n    \n    if l[1] > l[2] \n        return true\n\
    \    end\n    \n    if l[1] < l[2] \n        return false\n    end\n    \n   \
    \ if l[1] > l[2] \n        return true\n    end\n    \n    if l[1] < l[2] \n \
    \       return false\n    end\n    \n    if l[1] > l[2] \n        return true\n\
    \    end\n    \n    if l[1] < l[2] \n        return false\n    end\n    \n   \
    \ if l[1] > l[2] \n        return true", "    l = sort(l)\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", "    l = sort(l)\n    l\
    \ = l[1..end-1]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l .>\
    \ l[end-1]]\n    l = l[l .< l[1]]\n    l = l[l .> l[end-1]]\n    l = l[l .< l[end]]\n\
    \    l = l[l .> l[end-1]]\n    l = l[l .< l[1]]\n    l = l[l .> l[end-1]]\n  \
    \  l = l[l .< l[end]]\n    l = l[l .> l[end-1]]\n    l = l[l .< l[1]]\n    l =\
    \ l[l .> l[end-1]]\n    l = l[l .< l[end]]\n    l = l[l .> l[end-1]]\n    l =\
    \ l[l .< l[1]]\n    l = l[l .> l[end-1]]\n    l = l[l .< l[end]]\n    l = l[l\
    \ .> l[end-1]]\n    l = l[l .< l[1]]\n    l = l[l .> l[end-1]]\n    l = l[l .<\
    \ l[end]]\n    l = l[l .> l[end-1]]\n    l = l[l .< l[1]]\n    l = l[l .> l[end-1]]\n\
    \    l = l[l .< l[end]]\n    l = l[l .> l[end-1]]\n    l = l[l .< l[1]]\n    l\
    \ = l[l .> l[end-1]]\n    l = l[l .< l[end]]\n    l = l[l .> l[end-1]]\n    l\
    \ = l[l .< l[1]]\n    l = l[l .> l[end-1]]\n    l = l[l .< l[end]]\n    l = l[l\
    \ .> l[end-1]]\n    l = l[l .< l[1]]\n    l = l[l .> l[end-1]]\n    l = l[l .<\
    \ l[end]]\n    l = l[l .> l[end-1]]\n    l = l[l .< l[1]]\n    l = l[l .> l[end-1]]\n\
    \    l = l[l .< l", "    l = sort(l)\n    l = l[1..end-1]\n    l = l[l .> l[1]]\n\
    \    l = l[l .< l[end]]\n    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .>\
    \ 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l\
    \ .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n    l =\
    \ l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n   \
    \ l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n\
    \    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n\
    \    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n\
    \    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n\
    \    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n\
    \    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n\
    \    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n\
    \    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n\
    \    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]\n    l = l[l .< end]\n\
    \    l = l[l .> 1]\n    l = l[l .< end]\n    l = l[l .> 1]", "    l = sort(l)\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", " \
    \   l = sort(l)\n    l = l[1..end(l)]\n    l = l[l .> l[1]]\n    l = l[l .< l[end(l)]]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[", "    if length(l) == 0 \n        return true\n    end\n   \
    \ \n    if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2]\
    \ \n        return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ monotonic([1,2,4,20]) == true\n@assert monotonic([1,20,4,10]) == false\n@assert\
    \ monotonic([4,1,0,-10]) == true\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns true if the vector is monotonically increasing or decreasing.",
  "    if length(l) == 0 \n        return true\n    \n    if l[1] < l[2] \n      \
    \  return true\n    \n    if l[1] > l[2] \n        return false\n    \n    if\
    \ l[1] < l[2] \n        return true\n    \n    return false\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"Return true is vector elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    true\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  true\n    \"\"\"", "    if length(l) == 0 \n        return true\n    \n   \
    \ if l[1] < l[2] \n        return true\n    \n    if l[1] > l[2] \n        return\
    \ false\n    \n    if l[1] < l[2] \n        return true\n    \n    return false\n\
    end", "    l = sort(l)\n    return all(l[1:end-1] <= l[2:end])\nend", "    l =\
    \ sort(l)\n    return all(l[1:end-1] .> l[2:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    @test monotonic([4, 1, 0, -10])\n</cell>\n<text>\nThe function @which can be used\
    \ to find where a function is defined:", "    l = sort(l)\n    l = l[1..end(l)]\n\
    \    if l[1] < l[2] || l[2] < l[1]\n        return false\n    else\n        return\
    \ true\n    end\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    l = l[1..end-1]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l\
    \ .> 0]\n    l = l[l .< end]\n    return l == l\nend", "    l = sort(l)\n    l\
    \ = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", " \
    \   l = sort(l)\n    l = l[1..end(l)]\n    return all(l[i] > l[i-1] for i in 2:end(l))\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true is vector elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    true\n    \"\"\"", "    if length(l) == 0 \n        return\
    \ true\n    end\n    \n    if l[1] < l[2] \n        return true\n    end\n   \
    \ \n    if l[2] < l[1] \n        return false\n    end\n    \n    if l[1] > l[2]\
    \ \n        return monotonic(l[2:end])\n    end\n    \n    return monotonic(l[1:end-1])\n\
    end", "    if length(l) == 0 \n        return true\n    end\n    \n    if l[1]\
    \ < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n        return\
    \ false\n    end\n    \n    if l[1] < l[2] \n        return true\n    end\n  \
    \  \n    if l[1] > l[2] \n        return false\n    end\n    \n    if l[1] < l[2]\
    \ \n        return true\n    end\n    \n    if l[1] > l[2] \n        return false\n\
    \    end\n    \n    if l[1] < l[2] \n        return true\n    end\n    \n    if\
    \ l[1] > l[2] \n        return false\n    end\n    \n    if l[1] < l[2] \n   \
    \     return true\n    end\n    \n    if l[1] > l[2] \n        return false\n\
    \    end\n    \n    if l[1] < l[2] \n        return true\n    end\n    \n    if\
    \ l[1] > l[2] \n        return false\n    end\n    \n    if l[1] < l[2] \n   \
    \     return true\n    end\n    \n    if l[1] > l[2] \n        return false\n\
    \    end\n    \n    if l[1] < l[2] \n        return true\n    end\n    \n    if\
    \ l[1] > l[2] \n        return false\n    end\n    \n    if l[1] < l[2] \n   \
    \     return true\n    end\n    \n    if l[1] > l[2] \n        return false\n\
    \    end\n    \n    if l[1] < l[2] \n        return true\n    end\n    \n    if\
    \ l[1] > l[2] \n        return false\n    end\n    \n    if l[1] < l[2] \n   \
    \     return true\n    end\n    \n    if l[1] > l[2] \n        return false\n\
    \    end\n    \n    if l[1] < l[2] \n        return true\n    end\n    \n    if\
    \ l[1] > l[2] \n        return false\n    end\n    \n    if l[1] < l[2] \n   \
    \     return true\n    end\n    \n    if l[1] > l[2] \n        return false\n\
    \    end\n    \n    if l[1] < l[2] \n        return true\n    end\n    \n    if\
    \ l[1] > l[2] \n        return false\n    end\n    \n    if l[1] < l[2] \n   \
    \     return true\n    end\n    \n    if l[1] > l[2] \n        return false\n\
    \    end\n    \n    if l[1] < l[2] \n        return true\n    end\n    \n    if\
    \ l[1] > l[2] \n        return false\n    end\n    \n    if l[1] < l[2] \n   \
    \     return true\n    end\n    \n    if l[1] > l[2] \n        return false\n\
    \    end\n    \n    if l[1] < l[2] \n        return true\n    end\n    \n    if\
    \ l[1] > l[2] \n        return false", "    l = sort(l)\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end", "    l = sort(l)\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", "    l = sort(l)\n    l\
    \ = l[end:-1:1]\n    l = l[end:-1:1]\n    return all(l[1:end-1] == l[2:end])\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true is vector elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    true\n    \"\"\"", "    if length(l) == 0 \n        return\
    \ true\n    end\n    \n    if l[1] < l[2] \n        return true\n    end\n   \
    \ \n    if l[2] < l[1] \n        return false\n    end\n    \n    if l[1] > l[2]\
    \ \n        return false\n    end\n    \n    return true\nend", "    l = sort(l)\n\
    \    return all(l[1:end-1] <= l[2:end])\nend", "    l = sort(l)\n    l = l[1:end-1]\n\
    \    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l .> 0]\n    return l\
    \ == l\nend", "    l = sort(l)\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n   \
    \ l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l", "    l = sort(l)\n    l = l[1:end-1]\n    l\
    \ = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l", "    l = sort(l)\n\
    \    l = l[1..end(l)]\n    l = l[l .> l[1]]\n    l = l[l .< l[end(l)]]\n    l\
    \ = l[l .> 0]\n    l = l[l .< 1]\n    return l == 1\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return true is vector elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n\
    \    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \"\"\"", "    if\
    \ length(l) == 0 \n        return true\n    end\n    \n    if l[1] < l[0] \n \
    \       return false\n    end\n    \n    if l[1] > l[end] \n        return true\n\
    \    end\n    \n    if l[end] < l[1] \n        return false\n    end\n    \n \
    \   return true\nend", "    l = sort(l)\n    l = l[end:-1:1]\n    return all(l[i]\
    \ > l[i+1] for i in 1:length(l))\nend", "    l = sort(l)\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", "    l = sort(l)\n    i\
    \ = 2\n    while i < length(l)\n        if l[i] > l[i-1]\n            return false\n\
    \        end\n        i += 1\n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    if l[1] < l[2] \n        true\n    elseif l[1] > l[2] \n        false\n   \
    \ elseif l[1] == l[2] \n        true\n    elseif l[1] < l[2] \n        false\n\
    \    elseif l[1] > l[2] \n        true\n    elseif l[1] < l[2] \n        true\n\
    \    elseif l[1] > l[2] \n        false\n    elseif l[1] < l[2] \n        false\n\
    \    elseif l[1] > l[2] \n        true\n    elseif l[1] < l[2] \n        false\n\
    \    elseif l[1] > l[2] \n        false\n    elseif l[1] < l[2] \n        false\n\
    \    elseif l[1] > l[2] \n        true\n    elseif l[1] < l[2] \n        false\n\
    \    elseif l[1] > l[2] \n        true\n    elseif l[1] < l[2] \n        false\n\
    \    elseif l[1] > l[2] \n        true\n    elseif l[1] < l[2] \n        false\n\
    \    elseif l[1] > l[2] \n        false\n    elseif l[1] < l[2] \n        false\n\
    \    elseif l[1] > l[2] \n        true\n    elseif l[1] < l[2] \n        false\n\
    \    elseif l[1] > l[2] \n        false\n    elseif l[1] < l[2] \n        false\n\
    \    elseif l[1] > l[2] \n        true\n    elseif l[1] < l[2] \n        false\n\
    \    elseif l[1] > l[2] \n        false\n    elseif l[1] < l[2] \n        false\n\
    \    elseif l[1] > l[2] \n        true\n    elseif l[1] < l[2] \n        false\n\
    \    elseif l[1] > l[2] \n        false\n    elseif l[1] < l[2] \n        false\n\
    \    elseif l[1] > l[2] \n        true\n    elseif l[1] < l[2] \n        false\n\
    \    elseif l[1] > l[2] \n        false\n    elseif l[1] < l[2] \n        false\n\
    \    elseif l[1] > l[2] \n        true\n    elseif l[1] < l[2] \n        false\n\
    \    elseif l[1] > l[2] \n        false\n    elseif l[1] < l[2] \n        false\n\
    \    elseif l[1] > l[2] \n        true\n    elseif l[1] < l[2] \n        false\n\
    \    elseif l[1] > l[2] \n        false\n    elseif l[1] < l[2] \n        false\n\
    \    elseif l[1] > l[2] \n        true\n    elseif l[1] < l[2] \n        false\n\
    \    elseif l[1] > l[2] ", "    l = sort(l)\n    l = l[1..end(l)]\n    l = l[l\
    \ .> l[1]]\n    l = l[l .< l[end(l)]]\n    l = l[l .> 1]\n    l = l[l .< 1]\n\
    \    l = l[l .> 0]\n    l = l[l .< 0]\n    l = l[l .> -1]\n    l = l[l .< -1]\n\
    \    l = l[l .> -2]\n    l = l[l .< -2]\n    l = l[l .> -3]\n    l = l[l .< -3]\n\
    \    l = l[l .> -4]\n    l = l[l .< -4]\n    l = l[l .> -5]\n    l = l[l .< -5]\n\
    \    l = l[l .> -6]\n    l = l[l .< -6]\n    l = l[l .> -7]\n    l = l[l .< -7]\n\
    \    l = l[l .> -8]\n    l = l[l .< -8]\n    l = l[l .> -9]\n    l = l[l .< -9]\n\
    \    l = l[l .> -10]\n    l = l[l .< -10]\n    l = l[l .> -11]\n    l = l[l .<\
    \ -11]\n    l = l[l .> -12]\n    l = l[l .< -12]\n    l = l[l .> -13]\n    l =\
    \ l[l .< -13]\n    l = l[l .> -14]\n    l = l[l .< -14]\n    l = l[l .> -15]\n\
    \    l = l[l .< -15]\n    l = l[l .> -16]\n    l = l[l .< -16]\n    l = l[l .>\
    \ -17]\n    l = l[l .< -17]\n    l = l[l .> -18]\n    l = l[l .< -18]\n    l =\
    \ l[l .> -19]\n    l = l[l .< -19]\n    l = l[l .> -20]\n    l = l[l .< -20]\n\
    \    l = l[l .> -21]\n    l = l[l .< -21]\n    l = l[l .> -22]\n    l = l[l .<\
    \ -22]", "    l = sort(l)\n    l = l[1..end-1]\n    return all(l[i] > l[i+1] for\
    \ i in 2:end-1)\nend", "    l = sort(l)\n    return all(l[i] <= l[i+1] for i in\
    \ 2:length(l))\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n \
    \   l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", " \
    \   l = sort(l)\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l", "    l = sort(l)\n    l = l[1:end-1]\n    l = l[l .> l[1]]\n    l\
    \ = l[l .< l[end]]\n    l = l[1:end-1]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n\
    \    l = l[1:end-1]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[1:end-1]\n\
    \    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[1:end-1]\n    l = l[l\
    \ .> l[1]]\n    l = l[l .< l[end]]\n    l = l[1:end-1]\n    l = l[l .> l[1]]\n\
    \    l = l[l .< l[end]]\n    l = l[1:end-1]\n    l = l[l .> l[1]]\n    l = l[l\
    \ .< l[end]]\n    l = l[1:end-1]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n\
    \    l = l[1:end-1]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[1:end-1]\n\
    \    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[1:end-1]\n    l = l[l\
    \ .> l[1]]\n    l = l[l .< l[end]]\n    l = l[1:end-1]\n    l = l[l .> l[1]]\n\
    \    l = l[l .< l[end]]\n    l = l[1:end-1]\n    l = l[l .> l[1]]\n    l = l[l\
    \ .< l[end]]\n    l = l[1:end-1]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n\
    \    l = l[1:end-1]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[1:end-1]\n\
    \    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[1:end-1]\n    l = l[l\
    \ .> l[1]]\n    l = l[l .< l[end]]\n    l = l[1:end-1]\n    l = l[l .> ", "  \
    \  l = sort(l)\n    i = 2\n    while i < length(l)\n        if l[i] > l[i-1]\n\
    \            return false\n        end\n        i += 1\n    return true\nend",
  "    l = sort(l)\n    l = l[1::-1]\n    l = l[1:end-1]\n    l = l[1::-1]\n    return\
    \ all(l[1:end-1] < l[2:end])\nend", "    if l[1] < l[2] \n        return true\n\
    \    else \n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return true is vector elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n\
    \    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \"\"\"", "    l =\
    \ sort(l)\n    if l[1] < l[2] \n        return true\n    else \n        return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true is vector\
    \ elements are monotonically increasing or decreasing.\n    >>> monotonic([1,\
    \ 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>>\
    \ monotonic([4, 1, 0, -10])\n    true\n    \"\"\"", "    l = sort(l)\n    l =\
    \ l[1..end(l)]\n    l = l[l .> l[1]]\n    l = l[l .< l[end(l)]]\n    l = l[l .>\
    \ 0]\n    l = l[l .< 1]\n    return l == l\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(l) < 2 \n        return true\n    end\n    \n    l = sort(l)\n  \
    \  if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n\
    \        return false\n    end\n    \n    l = l[2:end]\n    if l[1] < l[2] \n\
    \        return true\n    end\n    \n    if l[1] > l[2] \n        return false\n\
    \    end\n    \n    l = l[2:end]\n    if l[1] < l[2] \n        return true\n \
    \   end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n    return\
    \ true\nend", "    if length(l) == 0 \n        return true\n    \n    if l[1]\
    \ < l[0] \n        return false\n    \n    i = 2\n    while i < length(l) \n \
    \       if l[i] > l[i-1] \n            return false\n        i += 1\n    end\n\
    \    return true\nend", "    l = sort(l)\n    l = l[1..end(l)]\n    return all(l[i]\
    \ > l[i-1] for i in 2:end(l))\nend\n</cell>\n<text>\nMonotonicity of vectors $x$\
    \ and $y$ are defined as:", "    l = sort(l)\n    if l[1] < l[2] || l[2] < l[1]\n\
    \        return true\n    else\n        return false\n    end\nend", "    if length(l)\
    \ == 0 \n        return true\n    end\n    \n    l = sort(l)\n    \n    if l[1]\
    \ < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n        return\
    \ false\n    end\n    \n    if l[1] < l[2] \n        return true\n    end\n  \
    \  \n    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true\
    \ is vector elements are monotonically increasing or decreasing.\n    >>> monotonic([1,\
    \ 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>>\
    \ monotonic([4, 1, 0, -10])\n    true\n    \"\"\"", "    l = sort(l)\n    l =\
    \ l[end:-1:1]\n    return all(l[i] <= l[i+1] for i in 2:length(l)-1)\nend", " \
    \   l = sort(l)\n    l = l[1..end(l)]\n    l = l[l .> l[1]]\n    l = l[l .< l[end(l)]]\n\
    \    l = l[l .> 0]\n    l = l[l .< 1]\n    return l == true\nend", "    l = sort(l)\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", " \
    \   if length(l) == 0 \n        return true\n    end\n    \n    if l[1] < l[2]\
    \ \n        return true\n    end\n    \n    if l[2] < l[1] \n        return false\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ return true\nend", "    l = sort(l)\n    l = l[1..end-1]\n    l = l[l .> l[1]]\n\
    \    l = l[l .< l[end]]\n    l = l[l .> l[end-1]]\n    l = l[l .< l[1]]\n    l\
    \ = l[l .> l[end-1]]\n    l = l[l .< l[end]]\n    l = l[l .> l[end-1]]\n    l\
    \ = l[l .< l[1]]\n    l = l[l .> l[end-1]]\n    l = l[l .< l[end]]\n    l = l[l\
    \ .> l[end-1]]\n    l = l[l .< l[1]]\n    l = l[l .> l[end-1]]\n    l = l[l .<\
    \ l[end]]\n    l = l[l .> l[end-1]]\n    l = l[l .< l[1]]\n    l = l[l .> l[end-1]]\n\
    \    l = l[l .< l[end]]\n    l = l[l .> l[end-1]]\n    l = l[l .< l[1]]\n    l\
    \ = l[l .> l[end-1]]\n    l = l[l .< l[end]]\n    l = l[l .> l[end-1]]\n    l\
    \ = l[l .< l[1]]\n    l = l[l .> l[end-1]]\n    l = l[l .< l[end]]\n    l = l[l\
    \ .> l[end-1]]\n    l = l[l .< l[1]]\n    l = l[l .> l[end-1]]\n    l = l[l .<\
    \ l[end]]\n    l = l[l .> l[end-1]]\n    l = l[l .< l[1]]\n    l = l[l .> l[end-1]]\n\
    \    l = l[l .< l[end]]\n    l = l[l .> l[end-1]]\n    l = l[l .< l[1]]\n    l\
    \ = l[l .> l[end-1]]\n    l = l[l .< l[end]]\n    l = l[l .> l[end-1]]\n    l\
    \ = l[l .< l[1]]\n    l = l[l .> l[end-1]]\n    l = l[l .< l", "    l = sort(l)\n\
    \    l = l[end-l.<0]\n    l = l[end-l.>0]\n    l = l[end-l.==0]\n    l = l[end-l.>0]\n\
    \    l = l[end-l.<0]\n    l = l[end-l.==0]\n    l = l[end-l.>0]\n    l = l[end-l.<0]\n\
    \    l = l[end-l.==0]\n    l = l[end-l.>0]\n    l = l[end-l.<0]\n    l = l[end-l.==0]\n\
    \    l = l[end-l.>0]\n    l = l[end-l.<0]\n    l = l[end-l.==0]\n    l = l[end-l.>0]\n\
    \    l = l[end-l.<0]\n    l = l[end-l.==0]\n    l = l[end-l.>0]\n    l = l[end-l.<0]\n\
    \    l = l[end-l.==0]\n    l = l[end-l.>0]\n    l = l[end-l.<0]\n    l = l[end-l.==0]\n\
    \    l = l[end-l.>0]\n    l = l[end-l.<0]\n    l = l[end-l.==0]\n    l = l[end-l.>0]\n\
    \    l = l[end-l.<0]\n    l = l[end-l.==0]\n    l = l[end-l.>0]\n    l = l[end-l.<0]\n\
    \    l = l[end-l.==0]\n    l = l[end-l.>0]\n    l = l[end-l.<0]\n    l = l[end-l.==0]\n\
    \    l = l[end-l.>0]\n    l = l[end-l.<0]\n    l = l[end-l.==0]\n    l = l[end-l.>0]\n\
    \    l = l[end-l.<0]\n    l = l[end-l.==0]\n    l = l[end-l.>0]\n    l = l[end-l.<0]\n\
    \    l = l[end-l.==0]\n    l = l[end-l.>0]\n    l = l[end-l.<0]\n    l = l[end-l.==0]\n\
    \    l = l[end-l.>0]\n    l = l[end-l.<0]\n    l = l[end-l.", "    l = sort(l)\n\
    \    l = l[1..end(l)]\n    return all(l[i] <= l[i+1] for i in 2:end(l))\nend",
  "    if length(l) == 0 \n        return true\n    end\n    \n    l = sort(l)\n \
    \   \n    if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2]\
    \ \n        return false\n    end\n    \n    if l[1] < l[3] \n        return true\n\
    \    end\n    \n    if l[1] > l[3] \n        return false\n    end\n    \n   \
    \ if l[1] < l[4] \n        return true\n    end\n    \n    if l[1] > l[4] \n \
    \       return false\n    end\n    \n    if l[1] < l[5] \n        return true\n\
    \    end\n    \n    if l[1] > l[5] \n        return false\n    end\n    \n   \
    \ if l[1] < l[6] \n        return true\n    end\n    \n    if l[1] > l[6] \n \
    \       return false\n    end\n    \n    if l[1] < l[7] \n        return true\n\
    \    end\n    \n    if l[1] > l[7] \n        return false\n    end\n    \n   \
    \ if l[1] < l[8] \n        return true\n    end\n    \n    if l[1] > l[8] \n \
    \       return false\n    end\n    \n    if l[1] < l[9] \n        return true\n\
    \    end\n    \n    if l[1] > l[9] \n        return false\n    end\n    \n   \
    \ if l[1] < l[10] \n        return true\n    end\n    \n    if l[1] > l[10] \n\
    \        return false\n    end\n    \n    if l[1] < l[11] \n        return true\n\
    \    end\n    \n    if l[1] > l[11] \n        return false\n    end\n    \n  \
    \  if l[1] < l[12] \n        return true\n    end\n    \n    if l[1] > l[12] \n\
    \        return false\n    end\n    \n    if l[1] < l[13] \n        return true\n\
    \    end\n    \n    if l[1] > l[13] \n        return false\n    end\n    \n  \
    \  if l[1] < l[14] \n        return true\n    end\n    \n    if l[1] > l[14] \n\
    \        return false\n    end\n    \n    if l[1] < l[15] \n        return true\n\
    \    end\n    \n    if l[1] > l[15] \n        return false\n    end\n    \n  \
    \  if l[1] < l[16] \n        return true\n    end\n    \n    if l[1] > l[16] \n\
    \        return false\n    end\n    \n    if l[1] < l[17] \n        return true\n\
    \    end\n    \n    if l[1] > l[17] \n        return false\n    end\n    \n  \
    \  if l[1] < ", "    l = sort(l)\n    if l[1] < l[2]\n        true\n    elseif\
    \ l[1] > l[2]\n        false\n    else\n        monotonic(l[2:end])\n    end\n\
    end", "    l = sort(l)\n    l = l[1..end(l)]\n    l = l[l .> l[1]]\n    l = l[l\
    \ .< l[end(l)]]\n    l = l[l .> 1]\n    l = l[l .< l[end(l)]]\n    l = l[l .>\
    \ 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 1]\n    l = l[l .< 1]\n    l = l[l .> 1]\n    l = l[l .< 1]\n    l = l[l .>\
    \ 1]\n    l = l[l .< 1]\n", "    l = sort(l)\n    l = l[1:end-1]\n    l = l[findall(l[1:end-1]\
    \ .> l[2:end])]\n    l = l[findall(l[1:end-1] .< l[2:end])]\n    l = l[findall(l[1:end-1]\
    \ .== l[2:end])]\n    l = l[findall(l[1:end-1] .!= l[2:end])]\n    l = l[findall(l[1:end-1]\
    \ .> l[2:end])]\n    l = l[findall(l[1:end-1] .< l[2:end])]\n    l = l[findall(l[1:end-1]\
    \ .== l[2:end])]\n    l = l[findall(l[1:end-1] .!= l[2:end])]\n    l = l[findall(l[1:end-1]\
    \ .> l[2:end])]\n    l = l[findall(l[1:end-1] .< l[2:end])]\n    l = l[findall(l[1:end-1]\
    \ .== l[2:end])]\n    l = l[findall(l[1:end-1] .!= l[2:end])]\n    l = l[findall(l[1:end-1]\
    \ .> l[2:end])]\n    l = l[findall(l[1:end-1] .< l[2:end])]\n    l = l[findall(l[1:end-1]\
    \ .== l[2:end])]\n    l = l[findall(l[1:end-1] .!= l[2:end])]\n    l = l[findall(l[1:end-1]\
    \ .> l[2:end])]\n    l = l[findall(l[1:end-1] .< l[2:end])]\n    l = l[findall(l[1:end-1]\
    \ .== l[2:end])]\n    l = l[findall(l[1:end-1] .!= l[2:end])]\n    l = l[findall(l[1:end-1]\
    \ .> l[2:end])]\n    l = l[findall(l[1:end-1] .< l[2:end])]\n    l = l[findall(l[1:end-1]\
    \ .== l[2:end])]\n    l = l[findall(l[1:end-1] .!= l[2:end])]\n    l = l[findall(l[1:end-1]\
    \ .> l[2:end])]\n    l = l[findall(l[1:end-1] .< l[2:end])]\n    l = l[findall(l[1:end-1]\
    \ .== l[2:end])]\n    l = l[findall(l[1:end-1] .!= l[2:end])]\n    l = l[findall(l[1:end-1]\
    \ .> l[2:end])]\n    l = l[findall(l[1:", "    l = sort(l)\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", "    l = sort(l)\n    l\
    \ = l[1..end-1]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l .>\
    \ 0]\n    return l == l\nend", "    if length(l) == 0 \n        return true\n\
    \    \n    l = sort(l)\n    \n    if l[1] < l[2] \n        return true\n    \n\
    \    if l[1] > l[2] \n        return false\n    \n    return monotonic(l[2:end])\n\
    end", "    l = sort(l)\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l", "    l = sort(l)\n    return all(l[1:end-1] .< l[2:end])\nend", " \
    \   l = sort(l)\n    l = l[1..end(l)]\n    l = l[l .> l[1]]\n    l = l[l .< l[end(l)]]\n\
    \    l = l[l .> 0]\n    l = l[l .< 1]\n    return l == l\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Return true is vector elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    true\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  true\n    \"\"\"", "    l = sort(l)\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l", "    l = sort(l)\n    i =\
    \ 2\n    while i < length(l)\n        if l[i] > l[i-1]\n            return false\n\
    \        elseif l[i] < l[i-1]\n            return true\n        end\n        i\
    \ += 1\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"Return true is vector elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n\
    \    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \"\"\"", "    l =\
    \ sort(l)\n    l = l[1..end-1]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n\
    \    l = l[l .> l[end-1]]\n    l = l[l .< l[1]]\n    l = l[l .> l[end-1]]\n  \
    \  l = l[l .< l[end]]\n    l = l[l .> l[end-1]]\n    l = l[l .< l[1]]\n    l =\
    \ l[l .> l[end-1]]\n    l = l[l .< l[end]]\n    l = l[l .> l[end-1]]\n    l =\
    \ l[l .< l[1]]\n    l = l[l .> l[end-1]]\n    l = l[l .< l[end]]\n    l = l[l\
    \ .> l[end-1]]\n    l = l[l .< l[1]]\n    l = l[l .> l[end-1]]\n    l = l[l .<\
    \ l[end]]\n    l = l[l .> l[end-1]]\n    l = l[l .< l[1]]\n    l = l[l .> l[end-1]]\n\
    \    l = l[l .< l[end]]\n    l = l[l .> l[end-1]]\n    l = l[l .< l[1]]\n    l\
    \ = l[l .> l[end-1]]\n    l = l[l .< l[end]]\n    l = l[l .> l[end-1]]\n    l\
    \ = l[l .< l[1]]\n    l = l[l .> l[end-1]]\n    l = l[l .< l[end]]\n    l = l[l\
    \ .> l[end-1]]\n    l = l[l .< l[1]]\n    l = l[l .> l[end-1]]\n    l = l[l .<\
    \ l[end]]\n    l = l[l .> l[end-1]]\n    l = l[l .< l[1]]\n    l = l[l .> l[end-1]]\n\
    \    l = l[l .< l[end]]\n    l = l[l .> l[end-1]]\n    l = l[l .< l[1]]\n    l\
    \ = l[l .> l[end-1]]\n    l = l[l .< l", "    if length(l) == 0 \n        return\
    \ true\n    end\n    \n    l = sort(l)\n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[3] \n        return true\n    end\n    \n    if l[1] > l[3] \n \
    \       return false\n    end\n    \n    if l[1] < l[4] \n        return true\n\
    \    end\n    \n    if l[1] > l[4] \n        return false\n    end\n    \n   \
    \ if l[1] < l[5] \n        return true\n    end\n    \n    if l[1] > l[5] \n \
    \       return false\n    end\n    \n    if l[1] < l[6] \n        return true\n\
    \    end\n    \n    if l[1] > l[6] \n        return false\n    end\n    \n   \
    \ if l[1] < l[7] \n        return true\n    end\n    \n    if l[1] > l[7] \n \
    \       return false\n    end\n    \n    if l[1] < l[8] \n        return true\n\
    \    end\n    \n    if l[1] > l[8] \n        return false\n    end\n    \n   \
    \ if l[1] < l[9] \n        return true\n    end\n    \n    if l[1] > l[9] \n \
    \       return false\n    end\n    \n    if l[1] < l[10] \n        return true\n\
    \    end\n    \n    if l[1] > l[10] \n        return false\n    end\n    \n  \
    \  if l[1] < l[11] \n        return true\n    end\n    \n    if l[1] > l[11] \n\
    \        return false\n    end\n    \n    if l[1] < l[12] \n        return true\n\
    \    end\n    \n    if l[1] > l[12] \n        return false\n    end\n    \n  \
    \  if l[1] < l[13] \n        return true\n    end\n    \n    if l[1] > l[13] \n\
    \        return false\n    end\n    \n    if l[1] < l[14] \n        return true\n\
    \    end\n    \n    if l[1] > l[14] \n        return false\n    end\n    \n  \
    \  if l[1] < l[15] \n        return true\n    end\n    \n    if l[1] > l[15] \n\
    \        return false\n    end\n    \n    if l[1] < l[16] \n        return true\n\
    \    end\n    \n    if l[1] > l[16] \n        return false\n    end\n    \n  \
    \  if l[1] < l[17] \n        return true\n    end\n    \n    if l[1] > l[17] \n\
    \        return false\n    end\n    \n    if l[1] < l[", "    l = sort(l)\n  \
    \  l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", " \
    \   l = sort(l)\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n    l = l[1:end-1]\n\
    \    l = l[1:end-1]\n    l = l", "    l = sort(l)\n    l = l[1:end-1]\n    l =\
    \ l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l .> 0]\n    return l == l\n\
    end\n</cell>\n<code language=julia-1.3>", "    l = sort(l)\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n    l = l[1..end(l)]\n\
    \    l = l[1..end(l)]\n    l = l[1..end", "    l = sort(l)\n    l = l[1..end-1]\n\
    \    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l .> 1]\n    return l\
    \ == l\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true is vector elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    true\n    \"\"\"", "    l = sort(l)\n    l = l[1..end-1]\n\
    \    if l[1] < l[2]\n        return true\n    elseif l[1] > l[2]\n        return\
    \ false\n    else\n        return l[1] < l[2]\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l", "    l = sort(l)\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l\
    \ = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l", "    l = sort(l)\n    l = l[end:-1:1]\n    return\
    \ all(l[i] <= l[i+1] for i in 2:length(l))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return true is vector elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n\
    \    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \"\"\"", "    if\
    \ l[1] < l[2] \n        true\n    elseif l[2] < l[1] \n        false\n    elseif\
    \ l[1] > l[2] \n        true\n    elseif l[2] > l[1] \n        false\n    elseif\
    \ l[1] < l[2] \n        true\n    elseif l[2] < l[1] \n        false\n    elseif\
    \ l[1] > l[2] \n        true\n    elseif l[2] > l[1] \n        false\n    elseif\
    \ l[1] < l[2] \n        true\n    elseif l[2] < l[1] \n        false\n    elseif\
    \ l[1] > l[2] \n        true\n    elseif l[2] > l[1] \n        false\n    elseif\
    \ l[1] < l[2] \n        true\n    elseif l[2] < l[1] \n        false\n    elseif\
    \ l[1] > l[2] \n        true\n    elseif l[2] > l[1] \n        false\n    elseif\
    \ l[1] < l[2] \n        true\n    elseif l[2] < l[1] \n        false\n    elseif\
    \ l[1] > l[2] \n        true\n    elseif l[2] > l[1] \n        false\n    elseif\
    \ l[1] < l[2] \n        true\n    elseif l[2] < l[1] \n        false\n    elseif\
    \ l[1] > l[2] \n        true\n    elseif l[2] > l[1] \n        false\n    elseif\
    \ l[1] < l[2] \n        true\n    elseif l[2] < l[1] \n        false\n    elseif\
    \ l[1] > l[2] \n        true\n    elseif l[2] > l[1] \n        false\n    elseif\
    \ l[1] < l[2] \n        true\n    elseif l[2] < l[1] \n        false\n    elseif\
    \ l[1] > l[2] \n        true\n    elseif l[2] > l[1] \n        false\n    elseif\
    \ l[1] < l[2] \n        true\n    elseif l[2] < l[1] \n        false\n    elseif\
    \ l[1] > l[2] \n        true\n    elseif l[2] > l[1] \n        false\n    elseif\
    \ l[1] < l[2] \n        true\n    elseif l[2] < l[1] \n        false\n    elseif\
    \ l[1] > l[2] \n        true\n    elseif l[2] > l[1] \n        false\n    elseif\
    \ l[1] < l[2] \n        true\n    elseif l[2] < l[1] \n        false\n    elseif\
    \ l[1] > l[2] \n        true\n    elseif l[2] > l[1] \n        false\n    elseif\
    \ l[1] < l[2] \n        true\n    elseif l[2] < l[1] \n        false\n    elseif\
    \ l[1] > l[2] ", "    l = sort(l)\n    i = 2\n    while i < length(l)\n      \
    \  if l[i-1] < l[i] \n            return false\n        end\n        i += 1\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", " \
    \   l = sort(l)\n    l = l[1:end-1]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    ", "    if length(l) == 0 \n        return true\n    end\n\
    \    \n    l = sort(l)\n    if l[1] < l[2] \n        return true\n    end\n  \
    \  \n    if l[1] > l[2] \n        return false\n    end\n    \n    return monotonic(tail(l))\
    \ == true\nend", "    l = sort(l)\n    l = l[1:end-1]\n    l = l[l .> l[1]]\n\
    \    l = l[l .< l[end]]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .>\
    \ 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l\
    \ .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l =\
    \ l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n   \
    \ l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    ", "    l = sort(l)\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", " \
    \   l = sort(l)\n    l = l[1:end-1]\n    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n\
    \    l = l[l .> 0]\n    l = l[l .< end]\n    return l == l\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Return true is vector elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    true\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  true\n    \"\"\"", "    if length(l) == 0 \n        return true\n    end\n\
    \    \n    if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] >\
    \ l[2] \n        return false\n    end\n    \n    if l[1] < l[2] \n        return\
    \ true\n    end\n    \n    if l[1] > l[2] \n        return false\n    end\n  \
    \  \n    if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2]\
    \ \n        return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false", "    l = sort(l)\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", " \
    \   l = sort(l)\n    l = l[1:end-1]\n    return all(l[i] > l[i+1] for i in 1:length(l)-1)\n\
    end\n</cell>\n<code language=julia-1.5>\n@test monotonic([4, 1, 0, -10])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns true if the vector elements\
    \ are strictly increasing or strictly decreasing.\n    >>> strictly_increasing([1,\
    \ 2, 4, 20])\n    true\n    >>> strictly_increasing([1, 20, 4, 10])\n    false\n\
    \    >>> strictly_increasing([4, 1, 0, -10])\n    true\n    \"\"\"", "    if length(l)\
    \ == 0 \n        return true\n    end\n    \n    if l[1] < l[2] \n        return\
    \ true\n    end\n    \n    if l[1] > l[2] \n        return false\n    end\n  \
    \  \n    if l[1] < l[2] \n        return true\n    end\n    \n    return false\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true is vector elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    true\n    \"\"\"", "    l = sort(l)\n    l = l[1..end-1]\n\
    \    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    return l == l\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Return true is vector elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    true\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  true\n    \"\"\"", "    l = sort(l)\n    if l[1] < l[2] \n        return true\n\
    \    else \n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[1..end(l)]\n    if l[1] < l[2] || l[1] > l[3]\n    \
    \    return true\n    else\n        return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Return true is vector elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    true\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  true\n    \"\"\"", "    l = sort(l)\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l", "    l = sort(l)\n    l = l[1..end(l)]\n   \
    \ l = l[l .> l[1]]\n    l = l[l .< l[end(l)]]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n\
    \    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[l\
    \ .< length(l)]\n    l = l[l .> 0]\n    l = l[l .< length(l)]\n    l = l[l .>\
    \ 0]\n    l = l[l .< length(l)]\n    l = l[l .> 0]\n    l = l[", "    l = sort(l)\n\
    \    if l[1] < l[2] || l[2] < l[1]\n        return true\n    else\n        return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return true is\
    \ vector elements are monotonically increasing or decreasing.\n    >>> monotonic([1,\
    \ 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>>\
    \ monotonic([4, 1, 0, -10])\n    true\n    \"\"\"", "    if length(l) == 0 \n\
    \        return true\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false", "    l = sort(l)\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l", "    l = sort(l)\n    l = l[1..end-1]\n    l\
    \ = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l .> 0]\n    l = l[l .< end]\n\
    \    return l == l\nend", "    l = sort(l)\n    l = l[end:-1:1]\n    if l[1] <\
    \ l[2] || l[2] < l[1]\n        return true\n    else\n        return false\n \
    \   end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return true is vector\
    \ elements are monotonically increasing or decreasing.\n    >>> monotonic([1,\
    \ 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>>\
    \ monotonic([4, 1, 0, -10])\n    true\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
