name: HumanEval_47_median
language: jl
prompt: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1, 2,\
  \ 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\
  \nfunction median(l::Vector{Int64})::Float64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
  \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
  \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
  \ 7]) == 7)\nend\n"
completions: ["    l = sort(l)\n    mid = length(l)\n    if mid == 0 \n        return\
    \ l[1]\n    \n    if mid == 1\n        return l[1]\n    \n    if l[mid] == l[mid-1]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid-1]\n        return l[mid]\n    \n    if l[mid] ==\
    \ l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid+2]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n    \n    if\
    \ l[mid] == l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid+2]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid+3]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid-1]\n        return l[mid]\n    \n    if l[mid] ==\
    \ l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid+2]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid+3]\n        return l[mid]\n    \n    if\
    \ l[mid] == l[mid-1]\n        return l[mid]\n    \n    if l[mid] == l[mid+1]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid+2]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid+3]\n        return l[mid]\n    \n    if l[mid] ==\
    \ l[mid-1]\n        return l[mid]\n    \n    if l[mid] == l[mid+1]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid+2]\n        return l[mid]\n    \n    if\
    \ l[mid] == l[mid+3]\n        return l[mid]\n    \n    if l[mid] == l[mid-1]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid+2]\n        return l[mid]\n    \n    if l[mid] ==\
    \ l[mid+3]\n        return l[mid]\n    \n    if l[mid] == l[mid-1]\n        return\
    \ l[mid]\n    \n", "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 1\n\
    \        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    mid\
    \ = length(l)\n    if mid == 1\n        return l[1]\n    elseif mid == 2\n   \
    \     return 0.5 * (l[1] + l[2])\n    else\n        return 0.5 * (l[floor(Int64,\
    \ mid/2)]\n                     + l[ceil(Int64, mid/2)])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the median of a vector of numbers. \nThe median is the value separating\
    \ the higher half of a data set from the lower half. \nThe median is defined as\
    \ the value that separates the higher half of a data set from the lower half \n\
    by no more than 1/2 of the data set\u2019s size. \nIf there are an odd number\
    \ of data points, the median is computed as the mean of the two middle values.",
  "    l = sort(l)\n    mid = length(l)\n    if mid == 1 \n        return l[1]\n \
    \   else \n        return (l[mid-1] + l[mid]) / 2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a given vector of numbers.", "    l = sort(l)\n    mid = floor(Int,\
    \ length(l) / 2)\n    if length(l) % 2 == 0\n        return l[mid]\n    else\n\
    \        return (l[mid] + l[mid+1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ mode of a vector. \nThe mode of a vector is the value that appears most often\
    \ in the vector. \nIf there are multiple modes, return any one of them.", "  \
    \  sort(l)\n    l = l[end]\n    mid = floor(Int, length(l)+1)/2\n    if length(l)\
    \ % 2 == 1\n        return l[mid]\n    else\n        return (l[mid-1] + l[mid])/2\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the mode of a given vector.\
    \ \nThe mode is the value that appears most often in the vector. \nIf there are\
    \ multiple modes, return any one of them.\nThe function should work for both vectors\
    \ of integers and vectors of floats.\nThe function should work for vectors of\
    \ any length.\nThe function should work for vectors of any type of numbers.",
  "    sort(l)\n    mid = length(l)//2\n    if length(l)%2 == 0\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the mode of a vector. \nThe mode of a vector is the value that\
    \ appears most often in the vector. \nIf there are multiple modes, return any\
    \ one of them.\nThe mode of a vector is defined as the value that appears most\
    \ often in the vector.\nIf there are multiple modes, return any one of them.\n\
    The mode of a vector is defined as the value that appears most often in the vector.\n\
    If there are multiple modes, return any one of them.\nThe mode of a vector is\
    \ defined as the value that appears most often in the vector.\nIf there are multiple\
    \ modes, return any one of them.\nThe mode of a vector is defined as the value\
    \ that appears most often in the vector.\nIf there are multiple modes, return\
    \ any one of them.\nThe mode of a vector is defined as the value that appears\
    \ most often in the vector.\nIf there are multiple modes, return any one of them.\n\
    The mode of a vector is defined as the value that appears most often in the vector.\n\
    If there are multiple modes, return any one of them.\nThe mode of a vector is\
    \ defined as the value that appears most often in the vector.\nIf there are multiple\
    \ modes, return any one of them.\nThe mode of a vector is defined as the value\
    \ that appears most often in the vector.\nIf there are multiple modes, return\
    \ any one of them.\nThe mode of a vector is defined as the value that appears\
    \ most often in the vector.\nIf there are multiple modes, return any one of them.\n\
    The mode of a vector is defined as the value that appears most often in the vector.\n\
    If there are multiple modes, return any one of them.\nThe mode of a vector is\
    \ defined as the value that appears most often in the vector.\nIf there are multiple\
    \ modes, return any one of them.\nThe mode of a vector is defined as the value\
    \ that appears most often in the vector.\nIf there are multiple modes, return\
    \ any one of them.\nThe mode of a vector is defined as the value that appears\
    \ most often in the vector.\nIf there are multiple modes, return any one of them.\n\
    The mode of a vector is defined as the value that appears most often in the vector.\n\
    If there are multiple modes, return any one of them.\nThe mode of a vector is\
    \ defined as the value ", "    sort(l)\n    l = l[end]\n    mid = floor(Int64,\
    \ length(l)/2)\n    if length(l) % 2 == 0\n        return l[mid]\n    else\n \
    \       return l[mid-1] + l[mid]/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ the \"typical\" number. \nThe median is often called the \"middle\" number because\
    \ it is often the number \nthat would have been chosen to represent a sample statistic\
    \ if it were the \npopulation median.", "    l = sort(l)\n    mid = length(l)\n\
    \    if mid == 0\n        throw(DomainError(\n            \"median requires at\
    \ least one element\"))\n    end\n    \n    mid = round(Int64(mid))\n    if mid\
    \ == 0\n        throw(DomainError(\n            \"median requires at least one\
    \ element\"))\n    end\n    \n    if mid % 2 == 0\n        return l[mid/2]\n \
    \   else\n        return (l[mid/2] + l[mid/2 - 1]) / 2\n    end\nend", "    l\
    \ = sort(l)\n    mid = floor(Int, length(l)+1)/2\n    if length(l)%2 == 1\n  \
    \      return l[mid]\n    else\n        return (l[mid-1] + l[mid])/2\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nThe\
    \ median of a finite set of numbers is called the \"typical\" number. \nThe median\
    \ is often called the \"middle element\" of the sorted set.", "    l = sort(l)\n\
    \    mid = length(l)\n    if mid == 0 \n        return l[1]\n    \n    if mid\
    \ == 1 \n        return l[1]\n    \n    if mid%2 == 0 \n        return median(l[1..mid/2])\n\
    \    \n    return median(l[mid/2..mid])\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    mid = length(l)\n    if mid == 0 \n        return l[1] \n\
    \    else \n        return l[mid]\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1]) / 2\n    end\nend", "    l\
    \ = sort(l)\n    mid = length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the mean of a vector. Test it on some vectors.", "    l = sort(l)\n\
    \    mid = length(l)\n    if mid == 0 \n        throw(ZeroDivisionError, \"median\
    \ of an empty vector\")\n    end\n    \n    if mid == 1\n        return l[1]\n\
    \    end\n    \n    if l[mid] == l[mid - 1]\n        return l[mid]\n    end\n\
    \    \n    if l[mid] == l[mid - 2]\n        return l[mid - 1] + l[mid]/2\n   \
    \ end\n    \n    return l[mid - 1] + l[mid]/2\nend", "    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(ZeroDivisionError())\n    end\n    return l[mid]\n\
    end", "    sort(l)\n    return l[floor(Int, length(l)/2)]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a given vector of numbers. \nThe median is the value\
    \ separating the higher half of a sample from the lower half. \nThe median is\
    \ defined as the value that separates the higher half of a sample from the lower\
    \ half of a sample of size N. \nThe median is defined as the value that occurs\
    \ in an even number of elements. \nThe median is defined as the value that occurs\
    \ in the middle of a sample of size N. \nThe median is defined as the value that\
    \ occurs in the lower half of a sample of size N. \nThe median is defined as the\
    \ value that occurs in the upper half of a sample of size N. \nThe median is defined\
    \ as the value that occurs in the lower half of a sample of size N and in the\
    \ upper half of a sample of size N. \nThe median is defined as the value that\
    \ occurs in the middle of a sample of size N and in the lower half of a sample\
    \ of size N. \nThe median is defined as the value that occurs in the middle of\
    \ a sample of size N and in the upper half of a sample of size N. \nThe median\
    \ is defined as the value that occurs in the lower half of a sample of size N\
    \ and in the middle of a sample of size N. \nThe median is defined as the value\
    \ that occurs in the middle of a sample of size N and in the upper half of a sample\
    \ of size N. \nThe median is defined as the value that occurs in the upper half\
    \ of a sample of size N and in the middle of a sample of size N. \nThe median\
    \ is defined as the value that occurs in the lower half of a sample of size N\
    \ and in the middle of a sample of size N and in the upper half of a sample of\
    \ size N. \nThe median is defined as the value that occurs in the middle of a\
    \ sample of size N and in the lower half of a sample of size N and in the upper\
    \ half of a sample of size N. \nThe median is defined as the value that occurs\
    \ in the lower half of a sample of size N and in the middle of a sample of size\
    \ N and in the upper half of a sample of size N and in the middle of a sample\
    \ of size N. \nThe median is defined as the value that occurs in the middle of\
    \ a sample of size N and in the lower half of a sample of size N and in the upper\
    \ half of a sample of size N and in the middle of a sample of size N and in the\
    \ lower half of a sample of size N. \nThe median is defined as the value that\
    \ occur", "    sort(l)\n    mid = length(l)\n    if mid == 0 \n        return\
    \ NaN\n    else \n        return l[mid-1]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mode of a vector. \nThe mode is the element that appears most often in the vector.\
    \ \nIf there are multiple modes, return any one of them.", "    sort(l)\n    mid\
    \ = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n      \
    \  return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</code>\n<|/ a tags=julia,median\
    \ |>\n<| c |>\nThis doesn't work if there are an even number of elements in the\
    \ vector. For example, median([1,2,3]) returns 1 instead of 2.\n<|/ c |>\n<| c\
    \ |>\nI added a version that works with an even number of elements in the vector.\n\
    <|/ c |>\n<| c |>\nI added a version that works with an even number of elements\
    \ in the vector.\n<|/ c |>\n<| a dscore=3 |>\n<code>", "    sort(l)\n    return\
    \ l[end]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the median of a vector of numbers. \n\
    The median is the number in the middle of the sorted vector. \nThe median is defined\
    \ as the value separating the higher half of a sorted \nvector from the lower\
    \ half. \nIf the vector has even number of elements, then the median is the mean\
    \ of the two \nmiddle values. \nIf the vector has an odd number of elements, then\
    \ the median is the average of the \ntwo middle values. \nIf the vector is empty,\
    \ return NaN.", "    \n    l = sort(l)\n    n = length(l)\n    \n    if n < 2\n\
    \        return l[1]\n    end\n    \n    mid = floor(n/2)\n    \n    if l[mid]\
    \ == l[mid-1]\n        return median(l[mid+1:n])\n    else\n        return median(l[mid-1:mid+1])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise: Write a function that returns the median of a given vector of numbers.\
    \ If the vector is empty, return NaN.", "    l = sort(l)\n    mid = length(l)\n\
    \    if mid == 0\n        throw(DomainError(string(\"median of empty list\")))\n\
    \    end\n    \n    if mid == 1\n        return l[1]\n    end\n    \n    mid =\
    \ floor(mid)\n    \n    if mid==1\n        return l[mid - 1]\n    end\n    \n\
    \    left = mid - 1\n    right = mid + 1\n    \n    if l[left] > l[right]\n  \
    \      return median(l[left:right])\n    else\n        return median(l[left:right])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    \n    median = sort(l)[end-1]\n\
    \    \n    if median == 0\n        return median\n    else\n        return median\n\
    \    end\nend", "    sort(l)\n    length = length(l)\n    if length < 2\n    \
    \    return l[1]\n    end\n    mid = floor(length/2)\n    if length%2 == 1\n \
    \       return median(l[mid:end])\n    else\n        return median(l[mid:end-1])\
    \ + median(l[mid+1:end])\n    end\nend", "    \n    l = sort(l)\n    \n    if\
    \ length(l)%2 == 1\n        return l[(length(l)+1)/2]\n    else\n        return\
    \ (l[(length(l)+1)/2] + l[(length(l)+1)/2]) / 2\n    end\nend", "    l = sort(l)\n\
    \    mid = floor(Int, length(l) / 2)\n    if length(l) % 2 == 0\n        return\
    \ l[mid]\n    else\n        return (l[mid] + l[mid-1]) / 2\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a vector of numbers, rounded to two decimal places.",
  "    l = sort(l)\n    mid = length(l)\n    if mid == 1\n        return l[1]\n  \
    \  end\n    if mid == 2\n        return 0.5 * (l[1] + l[2])\n    end\n    if mid\
    \ == length(l)\n        return l[mid]\n    end\n    return 0.5 * (l[mid-1] + l[mid])\n\
    end\n</cell>\n<code language=julia-1.5>", "    sort(l)\n    return l[floor(Int,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the mode of\
    \ a given vector. \nThe mode is the value that appears most often in the vector.\
    \ \nThe function should return Float64. \nThe function should work for vectors\
    \ of any length. \nThe function should work for vectors of any type. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimension", "    l = sort(l)\n    mid = floor(Int,\
    \ length(l)+1)/2\n    if length(l)%2==1\n        return l[mid]\n    else\n   \
    \     return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ median of a list of numbers. \nThe function should take a list of numbers as\
    \ an argument, and return a Float64. \nThe function should also handle missing\
    \ values (NaN).", "    sort(l)\n    l = l[end]\n    l = l/2\n    l = l-1\n   \
    \ return l\nend", "    l = sort(l)\n    mid = length(l)\n    if mid == 0\n   \
    \     return l[1]\n    \n    mid = floor(mid)\n    if mid % 2 == 0\n        return\
    \ l[mid]\n    \n    return median(l[mid-1:mid+1])\nend", "    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nMedian Absolute Deviation\nThe median absolute\
    \ deviation (MAD) is a measure of statistical dispersion, which is defined as\
    \ the median of the absolute deviations from the median.", "    sort(l)\n    l\
    \ = l[end]\n    i = findfirst(x -> x < l, l) + 1\n    j = findfirst(x -> x > l,\
    \ l) - 1\n    mid = (i + j) / 2\n    if j - i <= 1\n        return l[mid]\n  \
    \  else\n        return l[mid] + median(l[i:j])\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the median of a vector of numbers, rounded to two decimal places.",
  "    sort(l)\n    mid = length(l)\n    if mid == 0\n        throw(DomainError(\n\
    \            \"median requires at least one element to work with\"))\n    end\n\
    \    mid\n    return l[mid-1]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nMedian Absolute Deviation\nThe median absolute\
    \ deviation (MAD) is a robust measure of statistical dispersion. It is defined\
    \ as the median of the absolute deviations from the median.", "    sort(l)\n \
    \   length(l) == 0 ? 0.0 : (l[floor(length(l)-1)] + l[floor(length(l)-2)]) / 2.0\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the median of a vector of numbers. If the vector\
    \ is empty, return 0.0.", "    sort(l)\n    mid = length(l)\n    if mid % 2 ==\
    \ 0\n        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise: Write a function that returns the median of a vector of numbers, rounded\
    \ to two decimal places.", "    l = sort(l)\n    mid = length(l)\n    if mid ==\
    \ 0\n        throw(DomainError(\n            \"median requires at least one element\
    \ to work with\"))\n    end\n    mid = round(Int, mid)\n    if mid % 2 == 0\n\
    \        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1]) /\
    \ 2\n    end\nend\n</cell>\n<text>\nmedian(l)", "    sort(l)\n    length(l) ==\
    \ 0 ? 0.0 : (l[floor(length(l)/2)] + l[ceil(length(l)/2)])/2\nend\n</cell>\n<code\
    \ language=julia-1.4>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the median of a vector of numbers, rounded to two decimal places.",
  "    sort(l)\n    return l[floor(Int64, length(l)/2)]\nend\n</cell>\n<code language=julia-1.3>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nThe median of a set of numbers is defined\
    \ as the value that appears more than half the times in the set. For example,\
    \ in the set {1, 2, 3, 1, 2, 3}, the median is 2.", "    l = sort(l)\n    mid\
    \ = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n      \
    \  return (l[mid/2] + l[mid/2 - 1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function that calculates\
    \ the standard deviation of a vector l.", "    sort(l)\n    return l[floor(Int64,\
    \ length(l)//2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the median of a vector\
    \ of numbers. \nThe function should take one argument, an array of numbers, and\
    \ return one number.", "    l = sort(l)\n    mid = length(l)\n    if mid % 2 ==\
    \ 0\n        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    sort(l)\n    l = l[end]\n\
    \    mid = l/2\n    if l % 2 == 0\n        return l[mid]\n    else\n        return\
    \ l[mid-1] + l[mid]/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise: Write a function that returns the median of\
    \ a vector of numbers. If the vector has even number of elements, return the middle\
    \ element. Otherwise, return the average of the two middle elements.", "    median\
    \ = sort(l)[end]\n    return median\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 4\nWrite a function that returns the\
    \ median of a vector of numbers. \nThe median is the number in the middle of the\
    \ sorted vector. \nIf the vector has even number of elements, then the median\
    \ is the mean of the two middle elements. \nIf the vector has an odd number of\
    \ elements, then the median is the average of the two middle elements.", "   \
    \ sort(l)\n    l = l[end]\n    l = l/2\n    l = l-1\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the median of a vector of numbers. \nThe median\
    \ is the number in the middle of the sorted vector. \nIf the vector has even number\
    \ of elements, then the median is the mean of the two middle elements. \nIf the\
    \ vector has odd number of elements, then the median is the average of the two\
    \ middle elements.", "    l = sort(l)\n    mid = length(l)\n    if mid == 0\n\
    \        return NaN\n    \n    mid = floor(mid)\n    if mid == 1\n        return\
    \ l[mid]\n    \n    left = mid - 1\n    right = mid\n    \n    while left < right\n\
    \        if l[left] > l[right]\n            right = left - 1\n        else\n \
    \           left = right + 1\n        end\n    end\n    \n    return l[left]\n\
    end", "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return\
    \ l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the mode of a vector.\
    \ \nThe mode is the element that appears most often.", "    l = sort(l)\n    mid\
    \ = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n      \
    \  return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the mode of a given vector. \nThe mode is the\
    \ value that appears most frequently in the vector. \nThe function should return\
    \ the mode of the vector l as a Float64. \nThe mode is defined as the value that\
    \ appears most frequently in the vector. \nIf there are multiple modes, return\
    \ any one of them.", "    sort(l)\n    mid = length(l)//2\n    if length(l)%2\
    \ == 0\n        return l[mid]\n    else\n        return l[mid-1] + median(l[mid+1:end])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the median of a vector of numbers. Your\
    \ function should take an argument that is a vector of numbers and return a single\
    \ number.", "    sort(l)\n    length(l) == 0 ? 0.0 : (l[floor(length(l)/2)] +\
    \ l[ceil(length(l)/2)])/2\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise\nWrite a function that returns the median of\
    \ a vector of numbers. Use median from StatsBase.", "    sort(l)\n    return l[floor(Int,\
    \ length(l) / 2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise: Write a function that returns the median of a vector\
    \ of numbers. \nThe function should take one argument, an array of numbers. \n\
    The function should return a single number.", "    \n    l = sort(l)\n    \n \
    \   if length(l)==0 \n        return NaN\n    end\n    \n    mid = floor(length(l)/2)\n\
    \    \n    if mid==0 \n        return l[mid]\n    end\n    \n    if l[mid] ==\
    \ l[mid-1] \n        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1] \n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid-1] \n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid+1] \n        return l[mid]\n \
    \   end\n    \n    if l[mid] == l[mid-1] \n        return l[mid]\n    end\n  \
    \  \n    if l[mid] == l[mid+1] \n        return l[mid]\n    end\n    \n    if\
    \ l[mid] == l[mid-1] \n        return l[mid]\n    end\n    \n    if l[mid] ==\
    \ l[mid+1] \n        return l[mid]\n    end\n    \n    if l[mid] == l[mid-1] \n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1] \n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid-1] \n        return l[mid]\n \
    \   end\n    \n    if l[mid] == l[mid+1] \n        return l[mid]\n    end\n  \
    \  \n    if l[mid] == l[mid-1] \n        return l[mid]\n    end\n    \n    if\
    \ l[mid] == l[mid+1] \n        return l[mid]\n    end\n    \n    if l[mid] ==\
    \ l[mid-1] \n        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1] \n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid-1] \n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid+1] \n        return l[mid]\n \
    \   end\n    \n    if l[mid] == l[mid-1] \n        return l[mid]\n    end\n  \
    \  \n    if l[mid] == l[mid+1] \n        return l[mid]\n    end\n    \n    if\
    \ l[mid] == l[mid-1] \n        return l[mid]\n    end\n    \n    if l[mid] ==\
    \ l[mid+1] \n        return l[mid]\n    end\n    \n    if l[", "    l = sort(l)\n\
    \    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n\
    \        return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a vector of numbers. \nThe function should take an argument l of type\
    \ Vector{Int64}.\nThe function should return the median of the elements of l.\n\
    The median of a vector of numbers is defined as the middle number of the sorted\
    \ vector.", "    sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return\
    \ l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2-1])/2\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the median of a vector of numbers. Use median from above. Test\
    \ it on some vectors.", "    \n    median = sort(l)[end]\n    \n    if median==0\n\
    \        median = median(sort(l)[1:end-1])\n    end\n    \n    return median\n\
    end", "    sort(l)\n    l = l[end]\n    i = findfirst(x -> x < l, l)\n    if i\
    \ == length(l) \n        return l\n    else \n        return l[i]\nend\n</cell>\n\
    <code language=julia-1.3>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a vector of numbers, rounded to the nearest integer.",
  "    \n    l = sort(l)\n    \n    if length(l)%2 == 1\n        return l[end-1]\n\
    \    else\n        return (l[end-1] + l[end])/2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a vector of numbers. If the vector has even number\
    \ of elements, then the median is the mean of the two middle elements. If the\
    \ vector has an odd number of elements, then the median is the average of the\
    \ two middle elements.", "    l = sort(l)\n    mid = length(l)\n    if mid ==\
    \ 0\n        error(\"median requires at least one element\")\n    end\n    \n\
    \    if mid == 1\n        return l[1]\n    end\n    \n    if l[mid] == l[mid-1]\n\
    \        return median(l[mid-1:mid])\n    end\n    \n    return median(l[mid-1:mid])\
    \ + median(l[mid-1:mid-1]) / 2\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the mean of\
    \ a vector. \nThe mean of a vector is the sum of the elements in the vector, divided\
    \ by the number of elements in the vector.\nFor example, if the vector has 3 elements,\
    \ the mean is 3. If the vector has 5 elements, the mean is 3.5.", "    l = sort(l)\n\
    \    mid = floor(Int, length(l)/2)\n    if length(l) % 2 == 0\n        return\
    \ l[mid]\n    else\n        return l[mid-1] + l[mid]/2\n    end\nend", "    sort(l)\n\
    \    mid = length(l)\n    if mid == 0 \n        throw(DomainError(string(\"median\
    \ of empty vector\")))\n    end\n    return l[mid-1]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mode of a vector. \nThe mode is the number that appears most often in the vector.\
    \ \nIf there are multiple modes, return any one of them.", "    l = sort(l)\n\
    \    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n\
    \        return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a list of numbers. \nThe function should take a list of numbers as\
    \ an argument and return the median of the numbers. \nThe median is the number\
    \ in the middle of the list that has the highest number of elements. \nFor example,\
    \ if the list is [3, 1, 2, 4, 5], the median is 3. If the list is [-10, 4, 6,\
    \ 1000, 10, 20], the median is 10.", "    median = sort(l)[end]\n    return median\n\
    end", "    l = sort(l)\n    mid = length(l)\n    if mid == 0 \n        return\
    \ l[1]\n    \n    if mid % 2 == 0\n        return l[mid / 2]\n    else\n     \
    \   return (l[mid / 2] + l[(mid - 1) / 2]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function that returns the\
    \ median of a vector of numbers. \nWrite a function that returns the median of\
    \ a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of numbers. \nWrite a function that returns the median\
    \ of a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of numbers. \nWrite a function that returns the median\
    \ of a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of numbers. \nWrite a function that returns the median\
    \ of a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of numbers. \nWrite a function that returns the median\
    \ of a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of numbers. \nWrite a function\
    \ that returns the median of a vector of numbers. \nWrite a function that returns\
    \ the median of a vector of numbers. \nWrite a function that returns the median\
    \ of a vector of numbers. \nWrite a function that returns the median of a vector\
    \ of numbers. \nWrite a function that returns the median of a vector of numbers.\
    \ \nWrite a function that returns the median of a vector of numbers. \nWrite a\
    \ function that returns the median of a vector of ", "    l = sort(l)\n    mid\
    \ = length(l)//2\n    if length(l)%2 == 0\n        return l[mid]\n    else\n \
    \       return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a list of numbers. \nThe function should take a list of numbers as\
    \ an argument, \nand return a Float64 number.", "    \n    l = sort(l)\n    \n\
    \    if length(l) == 0 \n        return NaN\n    end\n    \n    mid = floor(Int,\
    \ length(l) / 2)\n    \n    if length(l) % 2 == 0 \n        return l[mid]\n  \
    \  else\n        return (l[mid] + l[mid-1]) / 2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the mean of a vector. \nThe mean of a vector is the sum of the\
    \ elements in the vector, divided by the number of elements in the vector.\nFor\
    \ example, if the vector has 3 elements, the mean is 3. If the vector has 4 elements,\
    \ the mean is 3.5.\nWrite a function that returns the median of a vector. \nThe\
    \ median of a vector is the element in the middle of the vector. If the vector\
    \ has 3 elements, the median is 3. If the vector has 4 elements, the median is\
    \ 3.5.\nWrite a function that returns the mode of a vector. \nThe mode of a vector\
    \ is the element that appears most frequently in the vector. \nFor example, if\
    \ the vector has 3 elements, the mode is 3. If the vector has 4 elements, the\
    \ mode is 3.5.\nWrite a function that returns the variance of a vector. \nThe\
    \ variance of a vector is the square of the sum of the squares of the elements\
    \ in the vector. \nFor example, if the vector has 3 elements, the variance is\
    \ 9. If the vector has 4 elements, the variance is 49.\nWrite a function that\
    \ returns the standard deviation of a vector. \nThe standard deviation of a vector\
    \ is the square root of the variance of the vector. \nFor example, if the vector\
    \ has 3 elements, the standard deviation is 2.82843. If the vector has 4 elements,\
    \ the standard deviation is 5.38516. \nWrite a function that returns the correlation\
    \ coefficient of a vector. \nThe correlation coefficient of a vector is the covariance\
    \ of the vector with itself. \nFor example, if the vector has 3 elements, the\
    \ correlation coefficient is 0.66666666666666663. If the vector has 4 elements,\
    \ the correlation coefficient is 0.9999999999999999.\nWrite a function that returns\
    \ the skewness of a vector. \nThe skewness of a vector is the ratio of the standard\
    \ deviation of the vector to the variance of the vector. \nFor example, if the\
    \ vector has 3 elements, the skewness is 0.3333333333333333. If the vector has\
    \ 4 elements, the skewness is 0.9999999999999999.\nWrite a function that returns\
    \ the kurtosis of a vector. \nThe kurtosis of a vector is the ratio of the skewness\
    \ of the vector to the skewness of the vector. \nFor example, if the vector has\
    \ 3 elements, the kurtosis is 3.3333333333333335. If the vector has 4 elements,\
    \ the kurto", "    sort(l)\n    return l[floor(Int64, length(l)/2)]\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the median of a list of numbers. Your function should take a list\
    \ of numbers and return the median of the numbers. If the length of the list is\
    \ even, the median is the mean of the two middle numbers. If the length of the\
    \ list is odd, the median is the number in the middle of the list that is closest\
    \ to the middle of the list.", "    sort(l)\n    return l[floor(Int64, length(l)/2)]\n\
    end", "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return\
    \ l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\n\
    end", "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return\
    \ l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a vector of numbers. \nThe function should take an\
    \ argument l of type Vector{Int64}.", "    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median of\
    \ a vector of numbers. \nThe function should take an argument l of type Vector{Int64}.\n\
    The function should return an element of the vector l that is the median of the\
    \ vector.\nThe median of a vector is the value that occurs in the middle of the\
    \ vector.\nFor example, if the vector l is [3, 1, 2, 4, 5], the median is 3.\n\
    If the vector l is [-10, 4, 6, 1000, 10, 20], the median is 10.", "    sort(l)\n\
    \    return l[end]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the median of a vector\
    \ of numbers. \nThe median is the number in the middle of the sorted vector. \n\
    If the vector has even number of elements, then the median is the mean of the\
    \ two middle elements. \nIf the vector has odd number of elements, then the median\
    \ is the average of the two middle elements.", "    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2==1\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called the \"\
    typical\" number. For example, the median of the set {1, 2, 3} is (1 + 2 + 3)/3\
    \ = 2. The median is often called the \"middle value\" of a sorted set of numbers.",
  "    l = sort(l)\n    mid = length(l)\n    if mid == 0 \n        return l[1]\n \
    \   else \n        return l[mid]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise: Write a function that returns the median of\
    \ a vector of numbers. \nThe median is the value separating the higher half of\
    \ a sample from the lower half. \nIf the vector has even number of elements, then\
    \ the median is the mean of the two middle elements. \nIf the vector has an odd\
    \ number of elements, then the median is the average of the two middle elements.\
    \ \nIf there are an even number of elements and an odd number of elements, then\
    \ the median is the average of the two middle elements. \nIf there are an even\
    \ number of elements and an odd number of elements, then the median is the average\
    \ of the two middle elements. \nIf there are an even number of elements and an\
    \ odd number of elements, then the median is the average of the two middle elements.\
    \ \nIf there are an even number of elements and an odd number of elements, then\
    \ the median is the average of the two middle elements. \nIf there are an even\
    \ number of elements and an odd number of elements, then the median is the average\
    \ of the two middle elements. \nIf there are an even number of elements and an\
    \ odd number of elements, then the median is the average of the two middle elements.\
    \ \nIf there are an even number of elements and an odd number of elements, then\
    \ the median is the average of the two middle elements. \nIf there are an even\
    \ number of elements and an odd number of elements, then the median is the average\
    \ of the two middle elements. \nIf there are an even number of elements and an\
    \ odd number of elements, then the median is the average of the two middle elements.\
    \ \nIf there are an even number of elements and an odd number of elements, then\
    \ the median is the average of the two middle elements. \nIf there are an even\
    \ number of elements and an odd number of elements, then the median is the average\
    \ of the two middle elements. \nIf there are an even number of elements and an\
    \ odd number of elements, then the median is the average of the two middle elements.\
    \ \nIf there are an even number of elements and an odd number of elements, then\
    \ the median is the average of the two middle elements. \nIf there are an even\
    \ number of elements and an odd number of elements, then the median is the average\
    \ of the two middle elements. \nIf there are an even number of elements and an\
    \ odd number of elements, then the median is the average of the two middle elements.\
    \ \nIf there are an even number of elements and an odd number of elements, then\
    \ the median is the average of the two middle elements. \nIf there are an even\
    \ number of elements and an odd number of elements, then the median is the average\
    \ of the two middle elements. \nIf there are an even number of elements and an\
    \ odd number of elements, then the median is the average of the two middle elements. ",
  "    l = sort(l)\n    mid = floor(Int, length(l)/2)\n    if length(l)%2 == 1\n \
    \       return l[mid]\n    else\n        return (l[mid] + l[mid-1])/2\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    sort(l)\n    \n    l = l[end]\n\
    \    \n    if length(l) == 0 \n        return 0 \n    \n    mid = floor(length(l)/2)\n\
    \    \n    if length(l) == 1 \n        return l[1] \n    \n    if l[mid] == l[mid-1]\
    \ \n        return l[mid] \n    \n    if l[mid] == l[mid+1] \n        return l[mid+1]\
    \ \n    \n    if l[mid] < l[mid-1] \n        return median(l[mid-1:mid+1]) \n\
    \    \n    return median(l[mid+1:end]) \nend\n</cell>\n<code language=julia-1.5>",
  "    \n    l = sort(l)\n    \n    if length(l)%2==0\n        return l[floor(length(l)/2)]\n\
    \    else\n        return (l[floor(length(l)/2)]+l[floor(length(l)/2)-1])/2\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the mode of a given vector.\
    \ \nThe mode of a vector is the value that appears most often in the vector. \n\
    The mode is defined as the value that appears most often in the vector and \n\
    appears least often in the vector. \nFor example, if the vector is [1, 1, 2, 3]\
    \ then the mode is 2.", "    \n    median = sort(l)[end-1]\n    \n    if median\
    \ == 0\n        median = l[end]\n    end\n    \n    return median\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], dims=1)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], dims=2)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], dims=3)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], dims=4)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], dims=5)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], dims=6)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], dims=7)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], dims=8)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], dims=9)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], dims=10)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], dims=11)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], dims=12)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], dims=13)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], dims=14)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], dims=15)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], dims=16)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], dims=17)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], dims=18)\n</cell>\n<code language=julia-1.5>", "    l =\
    \ sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set\
    \ of numbers is called the \"typical\" number. \nThe median is often called the\
    \ \"middle value\" of the sorted set.", "    l = sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 1\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the mode of a given vector. \nThe mode is the value that appears\
    \ most often in the vector. \nThe function should return a Float64. \nThe function\
    \ should work for any type of vector. \nThe function should work for vectors of\
    \ any size. \nThe function should work for vectors of any type. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimensions. \nThe function\
    \ should work for vectors of any number of dimensions. \nThe function should work\
    \ for vectors of any number of dimensions. \nThe function should work for vectors\
    \ of any number of dimensions. \nThe function should work for vectors of any number\
    \ of dimensions. \nThe function should work for vectors of any number of dimensions.\
    \ \nThe function should work for vectors of any number of dimension", "    sort(l)\n\
    \    mid = length(l)\n    if mid == 0 \n        throw(ZeroDivisionError(\"median\
    \ of empty list\"))\n    end\n    mid\n    \n    if mid % 2 == 0 \n        return\
    \ l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the median of a list of numbers. Write a test to see if the function\
    \ works.", "    \n    l = sort(l)\n    \n    if length(l)%2 == 1\n        return\
    \ l[end-1]\n    else\n        return (l[end-1] + l[end])/2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\nThe median\
    \ of a set of numbers is called a robust measure of central tendency. Robust measures\
    \ tend to give better results when the data are normally distributed. A robust\
    \ median is one that does not assume a normal distribution of the data, but instead\
    \ assumes a normal distribution of its central tendency.", "    l = sort(l)\n\
    \    mid = length(l)\n    if mid == 0\n        throw(DomainError(\n          \
    \  \"median requires at least one element\"))\n    end\n    \n    if mid % 2 ==\
    \ 0\n        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n\
    \    end\nend", "    l = sort(l)\n    mid = floor(Int, length(l)/2)\n    if length(l)\
    \ % 2 == 0\n        return l[mid]\n    else\n        return (l[mid] + l[mid-1])\
    \ / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that computes the mean of a vector l.", " \
    \   sort(l)\n    l = l[end]\n    mid = l/2\n    if l % 2 == 0\n        return\
    \ mid\n    else\n        return mid + 1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 4\nWrite a function that returns the\
    \ mean of a vector. \nThe mean is the sum of the elements in the vector divided\
    \ by the number of elements in the vector.\nFor example, if the vector has 10\
    \ elements, the mean is (10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1)/10\nWrite a function\
    \ that returns the mean of a vector. \nThe mean is the sum of the elements in\
    \ the vector divided by the number of elements in the vector.\nFor example, if\
    \ the vector has 10 elements, the mean is (10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2\
    \ + 1)/10\nWrite a function that returns the mean of a vector. \nThe mean is the\
    \ sum of the elements in the vector divided by the number of elements in the vector.\n\
    For example, if the vector has 10 elements, the mean is (10 + 9 + 8 + 7 + 6 +\
    \ 5 + 4 + 3 + 2 + 1)/10\nWrite a function that returns the mean of a vector. \n\
    The mean is the sum of the elements in the vector divided by the number of elements\
    \ in the vector.\nFor example, if the vector has 10 elements, the mean is (10\
    \ + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1)/10\nWrite a function that returns the mean\
    \ of a vector. \nThe mean is the sum of the elements in the vector divided by\
    \ the number of elements in the vector.\nFor example, if the vector has 10 elements,\
    \ the mean is (10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1)/10\nWrite a function that\
    \ returns the mean of a vector. \nThe mean is the sum of the elements in the vector\
    \ divided by the number of elements in the vector.\nFor example, if the vector\
    \ has 10 elements, the mean is (10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1)/10\nWrite\
    \ a function that returns the mean of a vector. \nThe mean is the sum of the elements\
    \ in the vector divided by the number of elements in the vector.\nFor example,\
    \ if the vector has 10 elements, the mean is (10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 +\
    \ 2 + 1)/10\nWrite a function that returns the mean of a vector. \nThe mean is\
    \ the sum of the elements in the vector divided by the number of elements in the\
    \ vector.\nFor example, if the vector has 10 elements, the mean is (10 + 9 + 8\
    \ + 7 + 6 + 5 + 4 + 3 + 2 + 1)/10\nWrite a function that returns the ", "    l\
    \ = sort(l)\n    mid = length(l)//2\n    if length(l)%2 == 1\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the median of a list of numbers. Write\
    \ a test that checks that your function works.", "    l = sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called the \"\
    typical\" number. \nThe median is often called the \"middle element\" of the sorted\
    \ set.\nThe median is often called the \"middle value\" of the sorted set.\nThe\
    \ median is often called the \"middle rank\" of the sorted set.\nThe median is\
    \ often called the \"middle rank\" of the sorted set.", "    l = sort(l)\n   \
    \ mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n  \
    \      return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ the \"middle\" of the set. For example, in the set {1, 2, 3, 4}, the median\
    \ is (2 + 3) / 2 = 2.5."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
