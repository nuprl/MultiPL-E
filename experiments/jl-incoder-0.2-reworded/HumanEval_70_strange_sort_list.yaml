name: HumanEval_70_strange_sort_list
language: jl
prompt: "\"\"\"\n    Given vector of integers, return vector in strange order.\n \
  \   Strange sorting, is when you start with the minimum value,\n    then maximum\
  \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
  \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
  \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
  \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8,\
  \ 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
  \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
  \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2,\
  \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
  \ == [111111])\nend\n"
completions: ["    if length(lst) == 0 \n        return [] \n    else \n        minimum\
    \ = minimum(lst) \n        maximum = maximum(lst) \n        minimum = min(minimum,\
    \ maximum) \n        maximum = max(minimum, maximum) \n        lst = sort(lst)\
    \ \n        lst = lst[minimum:maximum] \n        return lst \nend \n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector.", "    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    return lst\nend", "    if length(lst) == 0 \n        return\
    \ [] \n    else \n        minimum = minimum(lst)\n        maximum = maximum(lst)\n\
    \        middle = floor(length(lst)/2)\n        lst[middle] = minimum\n      \
    \  lst[middle+1:end] = maximum\n        return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the vector in reverse order.", " \
    \   lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a |>\n<| a dscore=0 |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| a |>\n<code>", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    return lst\nend", "    if length(lst) == 0 \n        return\
    \ [] \n    else \n        minimum = minimum(lst) \n        maximum = maximum(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis should be the accepted answer.\
    \ Sorting is expensive and should be avoided if possible.\n<|/ c |>\n<| a dscore=4\
    \ |>\nI wrote a small package for this:\n<code>\nusing Random\nusing DataFrames\n\
    using DataFramesMeta", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([1, 2, 3, 4])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ a vector of integers sorted from smallest to largest.", "    \n    if length(lst)\
    \ == 0 \n        return [] \n    \n    minimum = minimum(lst) \n    maximum =\
    \ maximum(lst) \n    \n    minimum_index = findfirst(isequal(minimum), lst) \n\
    \    maximum_index = findfirst(isequal(maximum), lst) \n    \n    minimum_value\
    \ = lst[minimum_index] \n    maximum_value = lst[maximum_index] \n    \n    lst[minimum_index]\
    \ = maximum_value\n    lst[maximum_index] = minimum_value\n    \n    return lst\n\
    end\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1, 2, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the same vector, but sorted in descending order.",
  "    if length(lst) == 0 \n        return [] \n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    lst = lst[minimum:maximum]\n\
    \    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,\
    \ 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of integers and returns the same vector\
    \ in reverse order.", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers in the vector.", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=sorting,julia |>\nI wrote a package called Sorting.jl that does exactly\
    \ that:\n<code>\njulia> using Sorting", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a tags=sorting,julia,list |>\n<| c |>\nThis\
    \ doesn't work for me. `julia> strange_sort_list([5, 5, 5, 5])\n5-element Array{Int64,1}:\n\
    \ 5\n 5\n 5\n 5\n 5\n `\n<|/ c |>\n<| c |>\nI tested it on Julia 1.5.1 and it\
    \ works. Maybe you have a different version of Julia?\n<|/ c |>\n<| c |>\nI tested\
    \ it on Julia 1.5.1 and it works. Maybe you have a different version of Julia?\n\
    <|/ c |>\n<| c |>\nI tested it on Julia 1.5.1 and it works. Maybe you have a different\
    \ version of Julia?\n<|/ c |>\n<| c |>\nI tested it on Julia 1.5.1 and it works.\
    \ Maybe you have a different version of Julia?\n<|/ c |>\n<| a |>\nThe function\
    \ below will sort a vector in ascending order and return the sorted vector:\n\
    <code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the same\
    \ vector in reverse order.", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise: Write a function that takes a vector of\
    \ integers and returns a vector of strings in alphabetical order.", "    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work for me. `strange_sort_list([5, 5, 5, 5])` returns `[5,\
    \ 5, 5, 5]` instead of `[5, 5, 5, 5]`.\n<|/ c |>\n<| c |>\nI tested it and it\
    \ works fine. Are you sure you copied it correctly? I tested it on Julia 0.6.2\n\
    <|/ c |>\n<| c |>\nI copied it exactly as you wrote it. I also tested it on 0.6.2\
    \ and it works. What version of Julia are you using?\n<|/ c |>\n<| c |>\nI'm using\
    \ 0.6.2\n<|/ c |>\n<| c |>\nI tested it on 0.6.2 and it works. What version of\
    \ Julia are you using?\n<|/ c |>\n<| a tags=julia,sorting |>\nThe function you\
    \ are looking for is sort!\n<code>\njulia> sort!([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't work for\
    \ me. `sort!([5, 5, 5, 5])` returns `[5, 5, 5, 5]` instead of `[5, 5, 5, 5]`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `sort!([5, 5, 5, 5])` returns `[5,\
    \ 5, 5, 5]` instead of `[5, 5, 5, 5]`.\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ me. `sort!([5, 5, 5, 5])` returns `[5, 5, 5, 5]` instead of `[5, 5, 5, 5]`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `sort!([5, 5, 5, 5])` returns `[5,\
    \ 5, 5, 5]` instead of `[5, 5, 5, 5]`.\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ me. `sort!([5, 5, 5, 5])` returns `[5, 5, 5, 5]` instead of `[5, 5, 5, 5]`.\n\
    <|/ c |>\n<| a tags=julia,sorting |>\nThe function you are looking for is sort!\n\
    <code>\njulia> sort!([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n\
    \ 5\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't work for me. `sort!([5,\
    \ 5, 5, 5])` ", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ another vector where each element is the sum of the previous two elements in\
    \ the original vector. For example, if the input vector is [1, 2, 3, 4], the output\
    \ vector should be [2, 3, 4, 7].", "    \n    lst = sort(lst)\n    \n    i = 0\n\
    \    while i < length(lst)\n        if lst[i] > lst[i+1]\n            lst[i],\
    \ lst[i+1] = lst[i+1], lst[i]\n        end\n        i += 1\n    end\n    \n  \
    \  return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers in the vector.",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis doesn't seem to work. `strange_sort_list([5,5,5,5])`\
    \ returns `[5, 5, 5, 5]`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting. What do you mean by \"doesn't work\"?\n<|/ c |>\n<| c |>\nI mean it\
    \ doesn't work as intended. `strange_sort_list([5,5,5,5])` returns `[5, 5, 5,\
    \ 5]`.\n<|/ c |>\n<| c |>\nOh, I see. You want to sort by decreasing order. I'll\
    \ edit my answer.\n<|/ c |>\n<| c |>\nYes, I want the list to be sorted in descending\
    \ order. Thanks for your help!\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=1 |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    \n    if length(lst) == 0 \n        return [] \n \
    \   \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst =\
    \ sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n  \
    \  \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of integers sorted from\
    \ smallest to largest.", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a tags=sorting,julia |>\n<| a dscore=2 |>\nThe answer by is great, but I wanted\
    \ to add that you can also use sort! to sort in place:\n<code>\njulia> sort!([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a tags=sorting,julia |>\n<code>\njulia> sort([5,4,3,2,1])\n5-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n\
    julia> sort([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n\
    <|/ a tags=sorting,julia dscore=2 |>\n<| a tags=sorting,julia |>\n<code>\njulia>\
    \ sort!([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=sorting,julia |>\n<code>\njulia> sort!([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a |>\n<code>\njulia> sort!([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n\
    \ 3\n 4\n 5\n</code>\n<|/ a dscore=1 tags=sorting,julia |>\n<| a dscore=1 |>\n\
    <code>\njulia> sort!([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n\
    \ 5\n</code>\n<|/ a tags=sorting,julia |>\n<| a tags=sorting,julia |>\n<code>\n\
    julia> sort!([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=sorting,julia |>\n<code>\njulia> sort!([5,4,", " \
    \   lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work if you have negative numbers. `strange_sort_list([-4,\
    \ -5, -6, -7])` returns `[-7, -6, -5, -4]`.\n<|/ c |>\n<| a tags=sorting,julia\
    \ |>\n<code>", "    sorted_list = copy(lst)\n    sorted_list[1] = maximum(sorted_list[2:end])\n\
    \    sorted_list[2] = minimum(sorted_list[1:end-1])\n    sorted_list[3] = maximum(sorted_list[1:end-1])\n\
    \    sorted_list[4] = minimum(sorted_list[2:end])\n    sorted_list\nend\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| c |>\nI like your solution, but I wonder why you\
    \ used `copy` instead of `sort`?\n<|/ c |>\n<| c |>\n`sort` will sort in-place,\
    \ which is not the case here. I think `copy` is more explicit and more idiomatic.\n\
    <|/ c |>\n<| c |>\n`sort` will sort in-place and `copy` will copy the array before\
    \ sorting. `sort` will also copy the array before returning the sorted array.\
    \ `copy` will copy the array before returning the sorted array. `sort` will also\
    \ copy the array before returning the sorted array. `copy` will copy the array\
    \ before returning the sorted array. `sort` will also copy the array before returning\
    \ the sorted array. `copy` will copy the array before returning the sorted array.\
    \ `sort` will also copy the array before returning the sorted array. `copy` will\
    \ copy the array before returning the sorted array. `sort` will also copy the\
    \ array before returning the sorted array. `copy` will copy the array before returning\
    \ the sorted array. `sort` will also copy the array before returning the sorted\
    \ array. `copy` will copy the array before returning the sorted array. `sort`\
    \ will also copy the array before returning the sorted array. `copy` will copy\
    \ the array before returning the sorted array. `sort` will also copy the array\
    \ before returning the sorted array. `copy` will copy the array before returning\
    \ the sorted array. `sort` will also copy the array before returning the sorted\
    \ array. `copy` will copy the array before returning the sorted array. `sort`\
    \ will also copy the array before returning the sorted array. `copy` will copy\
    \ the array before returning the sorted array. `sort` will also copy the array\
    \ before returning the sorted array. `copy` will copy the array before returning\
    \ the sorted array. `sort` will also copy the array before returning the sorted\
    \ array. `copy` will copy the array before returning the sorted array. `sort`\
    \ will also copy the array before returning the sorted array. `copy` will copy\
    \ the array before returning the sorted ", "    if length(lst) == 0 \n       \
    \ return [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n \
    \   \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)", "    if length(lst)\
    \ == 0 \n        return [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum_index = findfirst(i->i==minimum, lst)\n    maximum_index =\
    \ findfirst(i->i==maximum, lst)\n    \n    lst[minimum_index], lst[maximum_index]\
    \ = lst[maximum_index], lst[minimum_index]\n    \n    return lst\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers in the vector.", "    if length(lst)\
    \ == 0 \n        return [] \n    end\n    \n    minimum = minimum(lst)\n    maximum\
    \ = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(",
  "    if length(lst) == 0 \n        return [] \n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    lst = lst.(minimum..maximum)\n\
    \    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a vector of integers sorted from smallest to largest.",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns a vector of\
    \ integers where the integers are in descending order.", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| c |>\nThis does not seem to work as intended for me. `strange_sort_list([5,\
    \ 5, 5, 5])` returns `[5, 5, 5, 5]` instead of `[5, 5, 5, 5]`.\n<|/ c |>\n<| c\
    \ |>\nThis does not seem to work as intended for me. `strange_sort_list([5, 5,\
    \ 5, 5])` returns `[5, 5, 5, 5]` instead of `[5, 5, 5, 5]`.\n<|/ c |>\n<| c |>\n\
    This does not seem to work as intended for me. `strange_sort_list([5, 5, 5, 5])`\
    \ returns `[5, 5, 5, 5]` instead of `[5, 5, 5, 5]`.\n<|/ c |>\n<| c |>\nThis does\
    \ not seem to work as intended for me. `strange_sort_list([5, 5, 5, 5])` returns\
    \ `[5, 5, 5, 5]` instead of `[5, 5, 5, 5]`.\n<|/ c |>\n<| c |>\nThis does not\
    \ seem to work as intended for me. `strange_sort_list([5, 5, 5, 5])` returns `[5,\
    \ 5, 5, 5]` instead of `[5, 5, 5, 5]`.\n<|/ c |>\n<| a tags=julia,sorting |>\n\
    The answer by is correct, but I wanted to add an explanation as to why it works.\n\
    The reason why it works is because sort and reverse are both in-place functions.\
    \ So when you call sort(lst), you are actually calling sort(lst, lst). So the\
    \ function will sort the list in-place. \nThe reason why reverse(sort(lst)) works\
    \ is because reverse is a in-place function. So when you call reverse(lst, lst),\
    \ you are actually calling reverse(lst, lst). So the function will reverse the\
    \ list in-place.\n<|/ a dscore=5 |>\n<| c |>\nThis does not seem to work as intended\
    \ for me. `strange_sort_list([5, 5, 5, 5])` returns `[5, 5, 5, 5]` instead of\
    \ `[5, 5, 5, 5]`.\n<|/ c |>\n<| c |>\nThis does not seem to work as intended for\
    \ me. `strange_sort_list([5, 5, 5, 5])` returns `[5, 5, 5, 5]` instead of `[5,\
    \ 5, 5, 5]`.\n<|/ c |>\n<| c |>\nThis does not seem to work as intended for me.\
    \ `strange_sort_list([5, 5, 5, 5])` returns `[5, 5, 5, 5]` instead of `[5, 5,\
    \ 5, 5]`.\n<|/", "    \n    if length(lst) == 0 \n        return [] \n    \n \
    \   minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = lst.[minimum:maximum]\n    \n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the same vector,\
    \ except with each integer replaced by its square. For example, [1, 2, 3] -> [1,\
    \ 4, 9].", "    if length(lst) == 0 \n        return [] \n    else \n        minimum\
    \ = minimum(lst) \n        maximum = maximum(lst) \n        minimum_index = findfirst(minimum,\
    \ lst) \n        maximum_index = findfirst(maximum, lst) \n        lst[minimum_index],\
    \ lst[maximum_index] = lst[maximum_index], lst[minimum_index] \n        return\
    \ strange_sort_list(lst) \nend\n</code>\n<|/ a tags=sorting,julia,algorithm |>\n\
    <| c |>\nThis doesn't work if there are duplicates in the input vector. For example,\
    \ `strange_sort_list([5, 5, 5, 5])` returns `[5, 5, 5, 5]`.\n<|/ c |>\n<| c |>\n\
    I added a version that works with duplicates.\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with duplicates.\n<|/ c |>\n<| a dscore=4 |>\nHere's a Julia version\
    \ that works with duplicates:\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,\
    \ 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings in alphabetical order.", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=sorting,julia |>\nI like using sortperm:\n\
    <code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n\
    \ 4\n 5\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI like using sortperm:\n\
    <code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n\
    \ 4\n 5\n</code>\n<|/ a tags=sorting,julia |>\n<| a dscore=1 |>\nI like using\
    \ sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=sorting,julia |>\n<| a dscore=1 |>\n\
    I like using sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=sorting,julia |>\n<| a dscore=1 |>\n\
    I like using sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=sorting,julia |>\n<| a tags=sorting,julia\
    \ |>\nI like using sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,julia\
    \ |>\nI like using sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\nI like using sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n", "    \n    lst = sort(lst)\n    \n \
    \   i = 0\n    while i < length(lst)\n        if lst[i] > lst[i+1]\n         \
    \   lst[i], lst[i+1] = lst[i+1], lst[i]\n        end\n        i += 1\n    end\n\
    \    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns a vector of integers sorted from smallest to largest.",
  "    sorted_list = copy(lst)\n    sorted_list[1] = max(sorted_list[1:end-1]) \n\
    \    sorted_list[2] = min(sorted_list[2:end])\n    sorted_list[3] = max(sorted_list[3:end-1])\n\
    \    sorted_list[4] = min(sorted_list[4:end])\n    sorted_list[5] = max(sorted_list[5:end-1])\n\
    \    sorted_list[6] = min(sorted_list[6:end])\n    sorted_list[7] = max(sorted_list[7:end-1])\n\
    \    sorted_list[8] = min(sorted_list[8:end])\n    sorted_list[9] = max(sorted_list[9:end-1])\n\
    \    sorted_list[10] = min(sorted_list[10:end])\n    sorted_list[11] = max(sorted_list[11:end-1])\n\
    \    sorted_list[12] = min(sorted_list[12:end])\n    sorted_list[13] = max(sorted_list[13:end-1])\n\
    \    sorted_list[14] = min(sorted_list[14:end])\n    sorted_list[15] = max(sorted_list[15:end-1])\n\
    \    sorted_list[16] = min(sorted_list[16:end])\n    sorted_list[17] = max(sorted_list[17:end-1])\n\
    \    sorted_list[18] = min(sorted_list[18:end])\n    sorted_list[19] = max(sorted_list[19:end-1])\n\
    \    sorted_list[20] = min(sorted_list[20:end])\n    sorted_list[21] = max(sorted_list[21:end-1])\n\
    \    sorted_list[22] = min(sorted_list[22:end])\n    sorted_list[23] = max(sorted_list[23:end-1])\n\
    \    sorted_list[24] = min(sorted_list[24:end])\n    sorted_list[25] = max(sorted_list[25:end-1])\n\
    \    sorted_list[26] = min(sorted_list[26:end])\n    sorted_list[27] = max(sorted_list[27:end-1])\n\
    \    sorted_list[28] = min(sorted_list[28:end])\n    sorted_list[29] = max(sorted_list[29:end-1])\n\
    \    sorted_list[30] = min(sorted_list[30:end])\n    sorted_list[31] = max(sorted_list[31:end-1])\n\
    \    sorted_list[32] = min(sorted_list[32:end])\n    sorted_list[33] = max(sorted_list[33:end-1])\n\
    \    sorted_list[34] = min(sorted_list[34:end])\n    sorted_list[35] = max(sorted_list[35:end-1])\n\
    \    sorted_list[36] = min(sorted_list[36:end])\n    sorted_list[37] = max(sorted_list[37:end-1])\n\
    \    sorted_list[38] = min(sorted_list[38:end])\n    sorted_list[39] = max(sorted_list[39:end-1])\n\
    \    sorted_list[40] = min(sorted_list[40:end])\n    sorted_list[41] = max(sorted_list[4",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    \n    sorted_list = copy(lst)\n\
    \    \n    minimum = minimum(sorted_list)\n    maximum = maximum(sorted_list)\n\
    \    \n    sorted_list[minimum] = maximum\n    sorted_list[maximum] = minimum\n\
    \    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the same vector, but with each element multiplied by\
    \ 2.", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=julia,sorting |>\n<code>", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    if length(lst) == 0 \n   \
    \     return [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = lst[minimum:maximum]\n    \n    return\
    \ lst\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns a vector of integers in strange order.", "    \n   \
    \ sorted_list = copy(lst)\n    \n    minimum = min(lst)\n    maximum = max(lst)\n\
    \    \n    minimum_index = 0\n    maximum_index = length(sorted_list)\n    \n\
    \    while minimum_index < maximum_index\n        if sorted_list[minimum_index]\
    \ < minimum\n            minimum_index += 1\n        elseif sorted_list[maximum_index]\
    \ > maximum\n            maximum_index -= 1\n        else\n            swap!(sorted_list,\
    \ minimum_index, maximum_index)\n            minimum_index += 1\n            maximum_index\
    \ -= 1\n        end\n    end\n    \n    return sorted_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([])\n\
    </cell>\n<text>\nExercise: Strange sorting in Julia\nWrite a function that takes\
    \ a vector of integers and returns it in strange order.\nThe function should take\
    \ a list of integers and return a list of integers in strange order.", "    sorted_list\
    \ = sort(lst)\n    sorted_list = reverse(sorted_list)\n    return sorted_list\n\
    end\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers in the vector.", "    if length(lst)\
    \ == 0 \n        return [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = lst[minimum:maximum]\n    \n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns a vector of integers where the integers are in descending order.",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    if length(lst)\
    \ == 0 \n        return [] \n    else \n        minimum = minimum(lst) \n    \
    \    maximum = maximum(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst", "    if length(lst) == 0 \n      \
    \  return [] \n    else \n        minimum = minimum(lst) \n        maximum = maximum(lst)\
    \ \n        lst = sort(lst) \n        lst = lst[minimum:maximum+1] \n        lst\
    \ = reverse(lst) \n        return lst \nend ", "    if length(lst) == 0 \n   \
    \     return [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=sorting,julia |>\nHere's a solution using sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\n`sortperm` doesn't work for me. `sortperm([5,4,3,2,1])` returns `5-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5`\n<|/ c |>\n<| c |>\nIt works for me in\
    \ Julia 0.6.2. I think it might have been fixed in 0.6.3\n<|/ c |>\n<| c |>\n\
    I believe this was fixed in 0.6.3\n<|/ c |>\n<| a tags=sorting,julia |>\n<code>\n\
    julia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a tags=sorting,julia |>\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,julia\
    \ |>\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n\
    \ 3\n 4\n 5\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a tags=sorting,julia |>\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5", "    if length(lst) == 0 \n        return\
    \ [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n  \
    \  lst = sort(lst)\n    \n    lst = lst[minimum:maximum]\n    \n    return lst\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns a vector of integers where the integers are in descending order.",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a tags=julia,sorting |>\n<| c |>\nThis doesn't work for `[1, 1, 2, 3]` because\
    \ `sort` sorts lexicographically and `reverse` reverses the order of the elements.\
    \ So `[1, 1, 2, 3]` becomes `[3, 2, 1]`.\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ My bad. Thanks for pointing it out. I've updated the answer.\n<|/ c |>\n<| a\
    \ tags=julia,sorting |>\n<code>\njulia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n\
    \           return sort(lst)\n       end\nstrange_sort_list (generic function\
    \ with 1 method)", "    sorted_list = sort(lst)\n    sorted_list = reverse(sorted_list)\n\
    \    return sorted_list\nend\n</code>\n<|/ a tags=sorting,julia,list |>\n<| c\
    \ |>\nThis doesn't work for me. `sort` returns a `Vector{Int64}`, not a `Vector{Int}`.\
    \ `reverse` doesn't work. `reverse` returns a `Vector{Int64}`, not a `Vector{Int}`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me either. `sort` returns a `Vector{Int64}`,\
    \ not a `Vector{Int}`. `reverse` doesn't work. `reverse` returns a `Vector{Int64}`,\
    \ not a `Vector{Int}`.\n<|/ c |>\n<| c |>\nI tested this on Julia 1.5.1 and it\
    \ works. What version are you using?\n<|/ c |>\n<| c |>\nI'm using Julia 1.5.1.\
    \ I tested it on Julia 1.5.1 and it works. What version are you using?\n<|/ c\
    \ |>\n<| c |>\nI'm using Julia 1.5.1. I tested it on Julia 1.5.1 and it works.\
    \ What version are you using?\n<|/ c |>\n<| a dscore=3 |>\nI believe that this\
    \ is what you are looking for:\n<code>\njulia> sort!(collect(1:10))\n10-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n</code>\n<|/ a tags=sorting,julia,list\
    \ |>\n<| c |>\nThis doesn't work for me. `sort!` returns a `Vector{Int64}`, not\
    \ a `Vector{Int}`. `reverse` doesn't work. `reverse` returns a `Vector{Int64}`,\
    \ not a `Vector{Int}`.\n<|/ c |>\n<| c |>\nThis doesn't work for me either. `sort!`\
    \ returns a `Vector{Int64}`, not a `Vector{Int}`. `reverse` doesn't work. `reverse`\
    \ returns a `Vector{Int64}`, not a `Vector{Int}`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me either. `sort!` returns a `Vector{Int64}`, not a `Vector{Int}`.\
    \ `reverse` doesn't work. `reverse` returns a `Vector{Int64}`, not a `Vector{Int}`.\n\
    <|/ c |>\n<| c |>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=sorting,julia |>\nI like using sortperm:\n<code>\n\
    julia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=sorting,julia |>\nI like using sortperm:\n\
    <code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n\
    \ 4\n 5\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nI like using sortperm:\n\
    <code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n\
    \ 4\n 5\n</code>\n<|/ a tags=sorting,julia |>\n<| a tags=sorting,julia |>\nI like\
    \ using sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,julia |>\n\
    I like using sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,julia |>\n\
    I like using sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nI like using\
    \ sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=sorting,julia |>\n<| a dscore=0 |>\n\
    I like using sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n", "    if length(lst) == 0 \n        return [] \n    \n\
    \    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst =\
    \ sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n  \
    \  \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)", "    if length(lst)\
    \ == 0 \n        return [] \n    else \n        minimum = minimum(lst) \n    \
    \    maximum = maximum(lst) \n        lst = sort(lst) \n        lst = lst[minimum:maximum+1]\
    \ \n        lst = sort(lst) \n        lst = lst[minimum:maximum+1] \n        return\
    \ lst \nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI wrote a Julia package\
    \ called \"sort\" that does this sort of thing. \n<code>\njulia> using sort",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings in alphabetical order.", "    if length(lst) == 0 \n        return []\
    \ \n    \n    minimum = minimum(lst) \n    maximum = maximum(lst) \n    \n   \
    \ lst = sort(lst) \n    \n    lst = lst.[minimum:maximum+1] \n    \n    return\
    \ lst \nend\n</cell>\n<text>\nExercise 2: Strange Sorting of a Vector\nWrite a\
    \ function that takes a vector of integers and returns a vector of integers in\
    \ strange order.", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a dscore=1 |>\nI came up with a solution\
    \ which uses only built-in functions. \n<code>", "    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=sorting,julia |>\n\
    <| a tags=sorting,julia |>\nI like using sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5", "    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,\
    \ 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the same vector,\
    \ sorted from smallest to largest.", "    if length(lst) == 0 \n        return\
    \ [] \n    else \n        minimum = minimum(lst) \n        maximum = maximum(lst)\
    \ \n        minimum_index = findfirst(isequal(minimum), lst) \n        maximum_index\
    \ = findfirst(isequal(maximum), lst) \n        minimum_value = lst[minimum_index]\
    \ \n        maximum_value = lst[maximum_index] \n        lst[minimum_index] =\
    \ minimum \n        lst[maximum_index] = maximum \n        lst = strange_sort_list(lst[minimum_index+1:maximum_index])\
    \ \n        lst[minimum_index] = minimum_value \n        lst[maximum_index] =\
    \ maximum_value \n        return lst \nend \n</cell>\n<code language=julia-1.4>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a vector of integers and returns the same vector in reverse order.", " \
    \   lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the vector in\
    \ reverse order.", "    if length(lst) == 0 \n        return [] \n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n\
    \    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst =\
    \ sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n  \
    \  \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)", "    if length(lst)\
    \ == 0 \n        return [] \n    \n    minimum = minimum(lst) \n    maximum =\
    \ maximum(lst) \n    \n    sorted_list = copy(lst) \n    \n    i = 1 \n    while\
    \ i <= length(lst) \n        if sorted_list[i] > minimum \n            sorted_list[i]\
    \ = minimum \n            minimum = minimum + i \n        else \n            sorted_list[i]\
    \ = maximum \n            maximum = maximum - i \n        end \n        i = i\
    \ + 1 \n    end \n    return sorted_list \nend \n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector.", "    if length(lst) == 0 \n        return [] \n    \n    minimum\
    \ = min(lst) \n    maximum = max(lst) \n    \n    lst = sort(lst) \n    \n   \
    \ minimum = min(minimum, lst[1]) \n    maximum = max(maximum, lst[end]) \n   \
    \ \n    lst = sort(lst) \n    \n    minimum = min(minimum, lst[1]) \n    maximum\
    \ = max(maximum, lst[end]) \n    \n    lst = sort(lst) \n    \n    minimum = min(minimum,\
    \ lst[1]) \n    maximum = max(maximum, lst[end]) \n    \n    lst = sort(lst) \n\
    \    \n    minimum = min(minimum, lst[1]) \n    maximum = max(maximum, lst[end])\
    \ \n    \n    lst = sort(lst) \n    \n    minimum = min(minimum, lst[1]) \n  \
    \  maximum = max(maximum, lst[end]) \n    \n    lst = sort(lst) \n    \n    minimum\
    \ = min(minimum, lst[1]) \n    maximum = max(maximum, lst[end]) \n    \n    lst\
    \ = sort(lst) \n    \n    minimum = min(minimum, lst[1]) \n    maximum = max(maximum,\
    \ lst[end]) \n    \n    lst = sort(lst) \n    \n    minimum = min(minimum, lst[1])\
    \ \n    maximum = max(maximum, lst[end]) \n    \n    lst = sort(lst) \n    \n\
    \    minimum = min(minimum, lst[1]) \n    maximum = max(maximum, lst[end]) \n\
    \    \n    lst = sort(lst) \n    \n    minimum = min(minimum, lst[1]) \n    maximum\
    \ = max(maximum, lst[end]) \n    \n    lst = sort(lst) \n    \n    minimum = min(minimum,\
    \ lst[1]) \n    maximum = max(maximum, lst[end]) \n    \n    lst = sort(lst) \n\
    \    \n    minimum = min(minimum, lst[1]) \n    maximum = max(maximum, lst[end])\
    \ \n    \n    lst = sort(lst) \n    \n    minimum = min(minimum, lst[1]) \n  \
    \  maximum = max(maximum, lst[end]) \n    \n    lst = sort(lst) \n    \n    minimum\
    \ = min(minimum, lst[1]) \n    maximum = max(maximum, lst[end]) \n    \n    lst\
    \ = sort(lst) \n    \n    minimum = min(minimum, lst[1]) \n    maximum = max(maximum,\
    \ lst[end]) \n    \n    lst = sort(lst) \n    \n    minimum = min(minimum, lst[1])\
    \ \n    maximum = max(maximum, lst[end]) \n    \n    lst = sort(lst) \n", "  \
    \  if length(lst) == 0 \n        return [] \n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum_index = findfirst(minimum, lst)\n\
    \    maximum_index = findfirst(maximum, lst)\n    \n    minimum_index == maximum_index\
    \ ? \n        lst[minimum_index] : \n        lst[minimum_index + 1] \nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers in the vector.", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    if length(lst) == 0 \n   \
    \     return [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    sorted_list = sort(lst)\n    \n    sorted_list[minimum] = minimum\n\
    \    sorted_list[maximum] = maximum\n    \n    return sorted_list\nend\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers sorted from smallest to largest.", "    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't\
    \ work if you have a vector of strings. `sort` sorts lexicographically, not numerically.\n\
    <|/ c |>\n<| c |>\nI added a version that works for strings as well.\n<|/ c |>\n\
    <| a |>\n<code>\njulia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n\
    \           return sort(lst)\n       end\nstrange_sort_list (generic function\
    \ with 1 method)", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the same vector, but with each element multiplied by 2.", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns another vector with integers sorted\
    \ from smallest to largest.", "    \n    lst = sort(lst)\n    \n    i = 0\n  \
    \  \n    while i < length(lst)\n        \n        if lst[i] > lst[i + 1]\n   \
    \         \n            lst[i], lst[i + 1] = lst[i + 1], lst[i]\n            \n\
    \            i += 2\n            \n        else\n            \n            i +=\
    \ 1\n        end\n    end\n    \n    return lst\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ integers where the integers are in descending order.", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns its sum.", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    sorted_list = copy(lst)\n\
    \    sorted_list[1] = max(sorted_list[1:end-1]) \n    sorted_list[end] = min(sorted_list[2:end])\n\
    \    return sorted_list\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the integers.\
    \ \nThe function should raise an error if the vector is empty.", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    sorted_list = sort(lst)\n\
    \    sorted_list = reverse(sorted_list)\n    return sorted_list\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers. \nThe function should raise an error\
    \ if the vector is empty.", "    lst = sort(lst)\n    lst = reverse(lst)\n   \
    \ return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5,\
    \ 5, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns the vector in reverse order.", "    if length(lst) == 0\
    \ \n        return [] \n    else \n        minimum = minimum(lst) \n        maximum\
    \ = maximum(lst) \n        lst = sort(lst) \n        lst = reverse(lst) \n   \
    \     lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst) \n\
    \        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        return\
    \ [] \n    else \n        minimum = minimum(lst) \n        maximum = maximum(lst)\
    \ \n        minimum_index = findfirst(isequal(minimum), lst) \n        maximum_index\
    \ = findfirst(isequal(maximum), lst) \n        \n        lst[minimum_index], lst[maximum_index]\
    \ = lst[maximum_index], lst[minimum_index] \n        strange_sort_list(lst[minimum_index:maximum_index])\
    \ \n        lst[minimum_index], lst[maximum_index] = minimum, maximum \n     \
    \   return lst \nend\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nI like this\
    \ solution, because it doesn't require any additional packages. However, it does\
    \ require a lot of memory and time for large lists. I wonder if there is a way\
    \ to do this without using so much memory?\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't require any additional packages.\n<|/ c |>\n<| c |>\nI added a\
    \ solution that doesn't require any additional packages.\n<|/ c |>\n<| a dscore=3\
    \ |>\nHere's a solution using sortperm:\n<code>\njulia> sortperm(collect(1:10))\n\
    10-element Array{Int64,1}:\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n 10\n</code>\n<|/\
    \ a tags=sorting,julia |>\n<| c |>\nThis doesn't work for me. `sortperm(collect(1:10))`\
    \ returns `10-element Array{Int64,1}:\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n 10`\n\
    <|/ c |>\n<| c |>\n`sortperm` doesn't work if you have a vector of Int64. `sortperm(collect(1:10))`\
    \ returns `10-element Array{Int64,1}:\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n 10`\n\
    <|/ c |>\n<| c |>\n`sortperm(collect(1:10))` returns `10-element Array{Int64,1}:\n\
    \ 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n 10`\n<|/ c |>\n<| c |>\n`sortperm(collect(1:10))`\
    \ returns `10-element Array{Int64,1}:\n 2\n 3\n 4\n", "    lst = sort(lst)\n \
    \   lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the same vector, except with each integer replaced by\
    \ the sum of the integers preceding it.", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", " \
    \   if length(lst) == 0 \n        return [] \n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    lst = lst .-\
    \ minimum\n    lst = lst .+ maximum\n    \n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ integers sorted from smallest to largest.", "    if length(lst) == 0 \n    \
    \    return [] \n    else \n        minimum = minimum(lst) \n        maximum =\
    \ maximum(lst) \n        minimum_index = findfirst(minimum, lst) \n        maximum_index\
    \ = findfirst(maximum, lst) \n        lst[minimum_index], lst[maximum_index] =\
    \ lst[maximum_index], lst[minimum_index] \n        strange_sort_list(lst[minimum_index:maximum_index])\
    \ \n        return lst \nend \n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise: Write a function that takes a vector of\
    \ integers and returns the same vector, except that the integers are sorted in\
    \ reverse order (largest to smallest).", "    if length(lst) == 0 \n        return\
    \ [] \n    else \n        minimum = minimum(lst) \n        maximum = maximum(lst)\
    \ \n        minimum, maximum = minimum, maximum\n        minimum, maximum = minimum\
    \ + 1, maximum - 1\n        minimum, maximum = minimum - 1, maximum + 1\n    \
    \    minimum, maximum = minimum - 1, maximum - 1\n        minimum, maximum = minimum\
    \ + 1, maximum + 1\n        minimum, maximum = minimum - 1, maximum - 1\n    \
    \    minimum, maximum = minimum - 1, maximum + 1\n        minimum, maximum = minimum\
    \ + 1, maximum - 1\n        minimum, maximum = minimum + 1, maximum + 1\n    \
    \    minimum, maximum = minimum + 1, maximum - 1\n        minimum, maximum = minimum\
    \ + 1, maximum + 1\n        minimum, maximum = minimum - 1, maximum - 1\n    \
    \    minimum, maximum = minimum - 1, maximum + 1\n        minimum, maximum = minimum\
    \ - 1, maximum - 1\n        minimum, maximum = minimum - 1, maximum + 1\n    \
    \    minimum, maximum = minimum + 1, maximum - 1\n        minimum, maximum = minimum\
    \ + 1, maximum + 1\n        minimum, maximum = minimum + 1, maximum - 1\n    \
    \    minimum, maximum = minimum + 1, maximum + 1\n        minimum, maximum = minimum\
    \ + 1, maximum - 1\n        minimum, maximum = minimum + 1, maximum + 1\n    \
    \    minimum, maximum = minimum - 1, maximum - 1\n        minimum, maximum = minimum\
    \ - 1, maximum + 1\n        minimum, maximum = minimum - 1, maximum - 1\n    \
    \    minimum, maximum = minimum - 1, maximum + 1\n        minimum, maximum = minimum\
    \ - 1, maximum + 1\n        minimum, maximum = minimum - 1, maximum - 1\n    \
    \    minimum, maximum = minimum - 1, maximum + 1\n        minimum, maximum = minimum\
    \ - 1, maximum - 1\n        minimum, maximum = minimum - 1, maximum + 1\n    \
    \    minimum, maximum = minimum - 1, maximum - 1\n        minimum, maximum = minimum\
    \ - 1, maximum + 1\n        minimum, maximum = minimum - 1, maximum + 1\n    \
    \    minimum, maximum = minimum - 1, maximum - 1\n        minimum, maximum = minimum\
    \ - 1, maximum + 1\n        minimum, maximum = minimum - 1, maximum - 1\n    \
    \    minimum, maximum = minimum - 1, maximum + 1\n        minimum, maximum = minimum\
    \ - 1, maximum + 1\n        minimum, maximum = minimum - 1, maximum - 1\n    \
    \    minimum, maximum = minimum - 1, maximum + 1\n        minimum, maximum = minimum\
    \ - 1, maximum - 1\n        minimum, maximum = minimum - 1, maximum + 1\n    \
    \    minimum, maximum = minimum - 1, maximum + 1\n        minimum, maximum = minimum\
    \ - 1, maximum - 1\n        minimum, maximum = minimum - 1, maximum + 1\n    \
    \    minimum, maximum", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have\
    \ negative numbers in the list.\n<|/ c |>\n<| c |>\nI added a version that doesn't\
    \ require negative numbers. I tested it and it works.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if you have negative numbers in the list. Try `strange_sort_list([-1,\
    \ -2, -3, 4])`.\n<|/ c |>\n<| c |>\nI added a version that doesn't require negative\
    \ numbers. I tested it and it works.\n<|/ c |>\n<| a tags=sorting,julia |>\nI\
    \ came up with this solution:\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,julia |>\n\
    <code>\njulia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n\
    \           lst = sort(lst)\n           lst = reverse(lst)\n           return\
    \ lst\n       end\nstrange_sort_list (generic function with 1 method)", "    if\
    \ length(lst) == 0 \n        return [] \n    else \n        minimum = minimum(lst)\
    \ \n        maximum = maximum(lst) \n        minimum = minimum - maximum + 1 \n\
    \        maximum = maximum - minimum + 1 \n        minimum = minimum - maximum\
    \ + 1 \n        maximum = maximum - minimum + 1 \n        minimum = minimum -\
    \ maximum + 1 \n        maximum = maximum - minimum + 1 \n        minimum = minimum\
    \ - maximum + 1 \n        maximum = maximum - minimum + 1 \n        minimum =\
    \ minimum - maximum + 1 \n        maximum = maximum - minimum + 1 \n        minimum\
    \ = minimum - maximum + 1 \n        maximum = maximum - minimum + 1 \n       \
    \ minimum = minimum - maximum + 1 \n        maximum = maximum - minimum + 1 \n\
    \        minimum = minimum - maximum + 1 \n        maximum = maximum - minimum\
    \ + 1 \n        minimum = minimum - maximum + 1 \n        maximum = maximum -\
    \ minimum + 1 \n        minimum = minimum - maximum + 1 \n        maximum = maximum\
    \ - minimum + 1 \n        minimum = minimum - maximum + 1 \n        maximum =\
    \ maximum - minimum + 1 \n        minimum = minimum - maximum + 1 \n        maximum\
    \ = maximum - minimum + 1 \n        minimum = minimum - maximum + 1 \n       \
    \ maximum = maximum - minimum + 1 \n        minimum = minimum - maximum + 1 \n\
    \        maximum = maximum - minimum + 1 \n        minimum = minimum - maximum\
    \ + 1 \n        maximum = maximum - minimum + 1 \n        minimum = minimum -\
    \ maximum + 1 \n        maximum = maximum - minimum + 1 \n        minimum = minimum\
    \ - maximum + 1 \n        maximum = maximum - minimum + 1 \n        minimum =\
    \ minimum - maximum + 1 \n        maximum = maximum - minimum + 1 \n        minimum\
    \ = minimum - maximum + 1 \n        maximum = maximum - minimum + 1 \n       \
    \ minimum = minimum - maximum + 1 \n        maximum = maximum - minimum + 1 \n\
    \        minimum = minimum - maximum + 1 \n        maximum = maximum - minimum\
    \ + 1 \n        minimum = minimum - maximum + 1 \n        maximum = maximum -\
    \ minimum + 1 \n        minimum = minimum - maximum + 1 \n        maximum = maximum\
    \ - minimum + 1 \n        minimum = minimum - maximum + 1 \n        maximum =\
    \ maximum - minimum + 1 \n        minimum = minimum - maximum + 1 \n        maximum\
    \ = maximum - minimum + 1 \n        minimum = minimum - maximum + 1 \n       \
    \ maximum = maximum - minimum + 1 \n        minimum = minimum - maximum + 1 \n\
    \        maximum = maximum - minimum + 1 ", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    sorted_list = sort(lst)\n    \n    i = 0\n    \n \
    \   while i < length(sorted_list)\n        if sorted_list[i] > sorted_list[i +\
    \ 1]\n            swap!(sorted_list, i, i + 1)\n        end\n        i += 1\n\
    \    end\n    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the same vector, but with each element\
    \ multiplied by 2.", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</code>\n<|/ a tags=julia,sorting |>\n<| c |>\nI like your solution,\
    \ but I wonder if there is a way to do this without creating a new vector. Maybe\
    \ something like `sort(lst)` but with the `reverse` function applied to the return\
    \ value?\n<|/ c |>\n<| c |>\nI guess you could do `sort(lst)` followed by `reverse(lst)`,\
    \ but that would create a new vector and copy the contents of the old vector into\
    \ it, which is not very efficient.\n<|/ c |>\n<| c |>\nI guess you could do `sort(lst)`\
    \ followed by `reverse(lst)`, but that would create a new vector and copy the\
    \ contents of the old vector into it, which is not very efficient.\n<|/ c |>\n\
    <| c |>\nI guess you could do `sort(lst)` followed by `reverse(lst)`, but that\
    \ would create a new vector and copy the contents of the old vector into it, which\
    \ is not very efficient.\n<|/ c |>\n<| c |>\nI guess you could do `sort(lst)`\
    \ followed by `reverse(lst)`, but that would create a new vector and copy the\
    \ contents of the old vector into it, which is not very efficient.\n<|/ c |>\n\
    <| a dscore=3 |>\n<code>\njulia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n\
    \           return sort(lst)\n       end\nstrange_sort_list (generic function\
    \ with 1 method)", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| a |>\nI came up with this solution:\n<code>",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings in alphabetical order.", "    \n    if length(lst) == 0 \n        return\
    \ [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n  \
    \  lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(", "    if length(lst)\
    \ == 0 \n        return [] \n    \n    minimum = min(lst)\n    maximum = max(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = lst[minimum:maximum]\n    \n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([1, 2, 3, 4])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the same vector, but with each element multiplied by 2.", "    \n    lst = sort(lst)\n\
    \    \n    i = 0\n    \n    while i < length(lst)\n        \n        if lst[i]\
    \ > lst[i+1]\n            \n            lst[i], lst[i+1] = lst[i+1], lst[i]\n\
    \            \n            i = i + 1\n            \n        else\n           \
    \ i = i + 1\n        end\n    end\n    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nSort a vector in descending\
    \ order", "    if length(lst) == 0 \n        return [] \n    end\n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n\
    \    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst =\
    \ sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n  \
    \  \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)", "    if length(lst)\
    \ == 0 \n        return [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum_index = findfirst(minimum, lst)\n    maximum_index = findfirst(maximum,\
    \ lst)\n    \n    lst[minimum_index], lst[maximum_index] = lst[maximum_index],\
    \ lst[minimum_index]\n    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a vector of integers and returns a vector in strange order.", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the vector in reverse order. \n\
    The function should work for both vectors of integers and vectors of floating\
    \ point numbers.", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</code>\n<|/ a tags=julia,sorting |>\n<| c |>\nThis doesn't work for me.\
    \ `sort([5,5,5,5])` gives me `[5, 5, 5, 5]` instead of `[5, 5, 5, 5]`.\n<|/ c\
    \ |>\n<| c |>\nIt works for me in Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for\
    \ me in Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for me in Julia 0.6.2\n<|/ c\
    \ |>\n<| a tags=julia,sorting |>\nI believe that this is what you are looking\
    \ for:\n<code>\njulia> sort([5,5,5,5])\n5-element Array{Int64,1}:\n 5\n 5\n 5\n\
    \ 5", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the same\
    \ vector, sorted from smallest to largest.", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([1, 2, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the same vector,\
    \ except with each element multiplied by 2.", "    if length(lst) == 0 \n    \
    \    return [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = lst.[minimum:maximum]\n    \n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the same vector but with integers sorted from smallest to largest.",
  "    sorted_list = sort(lst)\n    sorted_list = reverse(sorted_list)\n    return\
    \ sorted_list\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a vector of integers sorted from smallest to largest.",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of integers sorted from smallest to largest.", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=sorting,julia,list\
    \ |>\n<| c |>\nThis doesn't work if you have a vector of strings. `sort` sorts\
    \ lexicographically, not numerically.\n<|/ c |>\n<| c |>\nI didn't know that about\
    \ `sort`, thanks for pointing that out. I've updated the answer to include a solution\
    \ that works for both `Int` and `Float64`.\n<|/ c |>\n<| a tags=sorting,julia,list\
    \ |>\n<code>\njulia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n\
    \           lst = sort(lst)\n           lst = reverse(lst)\n           return\
    \ lst\n       end\nstrange_sort_list (generic function with 1 method)", "    if\
    \ length(lst) == 0\n        return lst\n    end\n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    minimum_index = findfirst(minimum, lst)\n   \
    \ maximum_index = findfirst(maximum, lst)\n    \n    lst[minimum_index], lst[maximum_index]\
    \ = lst[maximum_index], lst[minimum_index]\n    \n    return strange_sort_list(lst)\n\
    end\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ a vector of integers sorted from smallest to largest.", "    if length(lst)\
    \ == 0 \n        return [] \n    end\n    minimum = minimum(lst)\n    maximum\
    \ = maximum(lst)\n    minimum_index = findfirst(minimum, lst)\n    maximum_index\
    \ = findfirst(maximum, lst)\n    \n    lst[minimum_index], lst[maximum_index]\
    \ = lst[maximum_index], lst[minimum_index]\n    \n    return strange_sort_list(lst)\n\
    end\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThis does not work if there\
    \ are repeated elements in the list. For example, `strange_sort_list([1,1,2,3,3])`\
    \ returns `[1,1,2,3,3]`.\n<|/ c |>\n<| c |>\nI added a version that works with\
    \ repeated elements.\n<|/ c |>\n<| a tags=sorting,julia |>\nI wrote a package\
    \ for this: \nhttps://github.com/kamila/julia-sort\n<code>\njulia> using JuliaSort",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a tags=sorting,julia |>\n<| c |>\nThe `sort` function will sort in-place, so\
    \ you don't need to return `lst`.\n<|/ c |>\n<| c |>\nThanks, I didn't know that.\
    \ I've edited the answer to reflect that.\n<|/ c |>\n<| a dscore=4 |>\n<code>\n\
    julia> using Statistics", "    if length(lst) == 0 \n        return [] \n    \n\
    \    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum_index\
    \ = findfirst(minimum, lst)\n    maximum_index = findfirst(maximum, lst)\n   \
    \ \n    lst[minimum_index], lst[maximum_index] = lst[maximum_index], lst[minimum_index]\n\
    \    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers. \nThe function\
    \ should work for vectors of any length.", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nThe accepted answer\
    \ works fine for small lists, but for large lists, it becomes very slow. Here\
    \ is a more efficient solution:\n<code>", "    \n    sorted_list = copy(lst)\n\
    \    \n    for i = length(sorted_list) downto 1 \n        \n        if sorted_list[i]\
    \ > sorted_list[i-1] \n            \n            temp = sorted_list[i-1]\n   \
    \         sorted_list[i-1] = sorted_list[i]\n            sorted_list[i] = temp\n\
    \        end\n    end\n    \n    return sorted_list\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=0 |>\n<code>", "    if length(lst) == 0 \n        return []\
    \ \n    else \n        minimum = minimum(lst)\n        maximum = maximum(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</code>\n<|/ a tags=julia,sorting |>\n<| a dscore=3 |>\n<code>\njulia> using\
    \ Statistics", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</code>\n<|/ a tags=julia,sorting |>\n<| a tags=julia,sorting |>\n<code>",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a tags=sorting,julia |>\n<| c |>\nI believe this should be the accepted answer.\
    \ Although it does require a package to be installed, it is very simple and straightforward.\n\
    <|/ c |>\n<| a dscore=3 |>\nThe easiest way is to use sortperm:\n<code>\njulia>\
    \ sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| a tags=sorting,julia |>\nThe answer by is correct,\
    \ but I thought I'd add some additional information for those who are new to Julia.\n\
    The sortperm function returns a permutation of a vector. For example, sortperm([5,4,3,2,1])\
    \ returns [1,2,3,4,5]. \nThe function sortperm(arr) sorts the array arr in ascending\
    \ order. \nThe function sortperm(arr) returns a permutation of a vector. For example,\
    \ sortperm([5,4,3,2,1]) returns [1,2,3,4,5]. \nThe function sortperm(arr) sorts\
    \ the array arr in ascending order. \nThe function sortperm(arr) returns a permutation\
    \ of a vector. For example, sortperm([5,4,3,2,1]) returns [1,2,3,4,5]. \nThe function\
    \ sortperm(arr) sorts the array arr in ascending order. \nThe function sortperm(arr)\
    \ returns a permutation of a vector. For example, sortperm([5,4,3,2,1]) returns\
    \ [1,2,3,4,5]. \nThe function sortperm(arr) sorts the array arr in ascending order.\
    \ \nThe function sortperm(arr) returns a permutation of a vector. For example,\
    \ sortperm([5,4,3,2,1]) returns [1,2,3,4,5]. \nThe function sortperm(arr) sorts\
    \ the array arr in ascending order. \nThe function sortperm(arr) returns a permutation\
    \ of a vector. For example, sortperm([5,4,3,2,1]) returns [1,2,3,4,5]. \nThe function\
    \ sortperm(arr) sorts the array arr in ascending order. \nThe function sortperm(arr)\
    \ returns a permutation of a vector. For example, sortperm([5,4,3,2,1]) returns\
    \ [1,2,3,4,5]. \nThe function sortperm(arr) sorts the array arr in ascending order.\
    \ \nThe function sortperm(arr) returns a permutation of a vector. For example,\
    \ sortperm([5,4,3,2,1]) returns [", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for\
    \ empty lists. `sort([])` returns `[]`, not `[nothing]`.\n<|/ c |>\n<| c |>\n\
    `sort([])` returns `[]` because `sort([])` returns `[]` not because `sort([])`\
    \ returns `nothing`\n<|/ c |>\n<| c |>\n`sort([])` returns `[]` because `sort([])`\
    \ returns `[]` not because `sort([])` returns `nothing`\n<|/ c |>\n<| c |>\n`sort([])`\
    \ returns `[]` because `sort([])` returns `[]` not because `sort([])` returns\
    \ `nothing`\n<|/ c |>\n<| c |>\n`sort([])` returns `[]` because `sort([])` returns\
    \ `[]` not because `sort([])` returns `nothing`\n<|/ c |>\n<| a tags=sorting,julia\
    \ |>\nI wanted to add another answer because I wanted to add another way to sort\
    \ a vector in Julia that doesn't require the use of any packages. \n<code>", " \
    \   if length(lst) == 0 \n        return [] \n    else \n        minimum = minimum(lst)\
    \ \n        maximum = maximum(lst) \n        middle = minimum + maximum/2 \n \
    \       lst = sort(lst) \n        lst = lst[minimum:maximum] \n        lst = lst[middle:maximum]\
    \ \n        lst = lst[minimum:maximum] \n        return lst \nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| a |>\nThe answer by is good, but I thought I'd add my own\
    \ answer because I wanted to see how it compared to other solutions.\nI used the\
    \ Julia BenchmarkTools package to compare the performance of the various solutions.\n\
    The benchmark code is:\n<code>\nusing BenchmarkTools", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nThe answer by is correct, but I thought I'd add an explanation as to why\
    \ it works.\nThe sort function sorts arrays in place. As such, when you call sort(lst),\
    \ lst is modified in place. \nThe reverse function reverses the order of the elements\
    \ of an array. As such, when you call reverse(lst), lst is modified in place.\
    \ \nThe reason why this works is because sort and reverse return nothing. Instead,\
    \ they modify the array in place. \nTherefore, when you call sort(lst) and reverse(lst),\
    \ you are modifying the same array in place. \nTherefore, your function can be\
    \ written as:\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in that vector.", "    if\
    \ length(lst) == 0 \n        return [] \n    else \n        minimum = minimum(lst)\
    \ \n        maximum = maximum(lst) \n        minimum_index = findfirst(minimum\
    \ == lst) \n        maximum_index = findfirst(maximum == lst) \n        lst[minimum_index],\
    \ lst[maximum_index] = lst[maximum_index], lst[minimum_index] \n        return\
    \ strange_sort_list(lst) \nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work for empty lists. `minimum([])` returns `nothing`, so `minimum_index` will\
    \ be `nothing` and the `minimum` will be overwritten.\n<|/ c |>\n<| c |>\nYes,\
    \ you are right. I fixed it. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=2\
    \ |>\nThis solution uses no recursion and is O(n) time complexity:\n<code>", " \
    \   \n    lst = sort(lst)\n    \n    i = 0\n    \n    while i < length(lst)\n\
    \        \n        if lst[i] > lst[i+1]\n            \n            lst[i], lst[i+1]\
    \ = lst[i+1], lst[i]\n            \n            i = i + 1\n            \n    \
    \    else\n            i = i + 1\n        end\n    end\n    \n    return lst\n\
    end\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ a vector of integers sorted from smallest to largest.", "    \n    lst = sort(lst)\n\
    \    \n    i = 0\n    \n    while i < length(lst)\n        if lst[i] > lst[i +\
    \ 1]\n            lst[i], lst[i + 1] = lst[i + 1], lst[i]\n            i += 1\n\
    \        end\n    end\n    \n    return lst\nend\n</cell>\n<text>\nExercise 9\n\
    Write a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector.", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI wrote a Julia package called\
    \ \"sort\" that does this for you. \n<code>\njulia> using Sort", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia |>\n<|\
    \ a tags=julia |>\n<code>", "    if length(lst) == 0 \n        return [] \n  \
    \  \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = lst .- minimum\n    lst = lst .+ maximum\n    \n    return lst\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nFor example,\
    \ if the input vector is [4, 6, 3, 9], the output should be 50.", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a vector of integers and returns the same vector but in reverse order.",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=sorting,julia |>\nThe answer by is correct but can\
    \ be simplified a bit. \n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    if length(lst) == 0 \n        return [] \n    \n \
    \   minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = lst .- minimum\n    \n    lst = lst .+ maximum\n    \n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the same vector, except with integers sorted from smallest to largest.",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    if length(lst)\
    \ == 0 \n        return [] \n    end\n    \n    minimum = minimum(lst)\n    maximum\
    \ = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum + maximum\n    maximum\
    \ = maximum - minimum\n    \n    minimum = minimum + maximum\n    maximum = maximum\
    \ - minimum\n    \n    minimum = minimum + maximum\n    maximum = maximum - minimum\n\
    \    \n    minimum = minimum + maximum\n    maximum = maximum - minimum\n    \n\
    \    minimum = minimum + maximum\n    maximum = maximum - minimum\n    \n    minimum\
    \ = minimum + maximum\n    maximum = maximum - minimum\n    \n    minimum = minimum\
    \ + maximum\n    maximum = maximum - minimum\n    \n    minimum = minimum + maximum\n\
    \    maximum = maximum - minimum\n    \n    minimum = minimum + maximum\n    maximum\
    \ = maximum - minimum\n    \n    minimum = minimum + maximum\n    maximum = maximum\
    \ - minimum\n    \n    minimum = minimum + maximum\n    maximum = maximum - minimum\n\
    \    \n    minimum = minimum + maximum\n    maximum = maximum - minimum\n    \n\
    \    minimum = minimum + maximum\n    maximum = maximum - minimum\n    \n    minimum\
    \ = minimum + maximum\n    maximum = maximum - minimum\n    \n    minimum = minimum\
    \ + maximum\n    maximum = maximum - minimum\n    \n    minimum = minimum + maximum\n\
    \    maximum = maximum - minimum\n    \n    minimum = minimum + maximum\n    maximum\
    \ = maximum - minimum\n    \n    minimum = minimum + maximum\n    maximum = maximum\
    \ - minimum\n    \n    minimum = minimum + maximum\n    maximum = maximum - minimum\n\
    \    \n    minimum = minimum + maximum\n    maximum = maximum - minimum\n    \n\
    \    minimum = minimum + maximum\n    maximum = maximum - minimum\n    \n    minimum\
    \ = minimum + maximum\n    maximum = maximum - minimum\n    \n    minimum = minimum\
    \ + maximum\n    maximum = maximum - minimum\n    \n    minimum = minimum + maximum\n\
    \    maximum = maximum - minimum\n    \n    minimum = minimum + maximum\n    maximum\
    \ = maximum - minimum\n    \n    minimum = minimum + maximum\n    maximum = maximum\
    \ - minimum\n    \n    minimum = minimum + maximum\n    maximum = maximum - minimum\n\
    \    \n    minimum = minimum + maximum\n    maximum = maximum - minimum\n    \n\
    \    minimum = minimum + maximum\n    ", "    \n    lst = sort(lst)\n    \n  \
    \  i = 0\n    \n    while i < length(lst)\n        if lst[i] > lst[i+1]\n    \
    \        swap!(lst, i, i+1)\n        end\n        i += 1\n    end\n    \n    lst\n\
    end\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the same vector in reverse order. Do not use reverse!.", "    \n    sorted_list\
    \ = copy(lst)\n    \n    minimum = minimum(sorted_list)\n    maximum = maximum(sorted_list)\n\
    \    \n    minimum_idx = findfirst(x -> x == minimum, sorted_list)\n    maximum_idx\
    \ = findfirst(x -> x == maximum, sorted_list)\n    \n    minimum_idx = minimum_idx\
    \ + 1\n    maximum_idx = maximum_idx - 1\n    \n    minimum_idx = minimum_idx\
    \ % length(sorted_list)\n    maximum_idx = maximum_idx % length(sorted_list)\n\
    \    \n    minimum_idx = minimum_idx - 1\n    maximum_idx = maximum_idx + 1\n\
    \    \n    minimum_idx = minimum_idx % length(sorted_list)\n    maximum_idx =\
    \ maximum_idx % length(sorted_list)\n    \n    minimum_idx = minimum_idx - 1\n\
    \    maximum_idx = maximum_idx + 1\n    \n    minimum_idx = minimum_idx % length(sorted_list)\n\
    \    maximum_idx = maximum_idx % length(sorted_list)\n    \n    minimum_idx =\
    \ minimum_idx - 1\n    maximum_idx = maximum_idx + 1\n    \n    minimum_idx =\
    \ minimum_idx % length(sorted_list)\n    maximum_idx = maximum_idx % length(sorted_list)\n\
    \    \n    minimum_idx = minimum_idx - 1\n    maximum_idx = maximum_idx + 1\n\
    \    \n    minimum_idx = minimum_idx % length(sorted_list)\n    maximum_idx =\
    \ maximum_idx % length(sorted_list)\n    \n    minimum_idx = minimum_idx - 1\n\
    \    maximum_idx = maximum_idx + 1\n    \n    minimum_idx = minimum_idx % length(sorted_list)\n\
    \    maximum_idx = maximum_idx % length(sorted_list)\n    \n    minimum_idx =\
    \ minimum_idx - 1\n    maximum_idx = maximum_idx + 1\n    \n    minimum_idx =\
    \ minimum_idx % length(sorted_list)\n    maximum_idx = maximum_idx % length(sorted_list)\n\
    \    \n    minimum_idx = minimum_idx - 1\n    maximum_idx = maximum_idx + 1\n\
    \    \n    minimum_idx = minimum_idx % length(sorted_list)\n    maximum_idx =\
    \ maximum_idx % length(sorted_list)\n    \n    minimum_idx = minimum_idx - 1\n\
    \    maximum_idx = maximum_idx + 1\n    \n    minimum_idx = minimum_idx % length(sorted_list)\n\
    \    maximum_idx = maximum_idx % length(sorted_list)\n    \n    minimum_idx =\
    \ minimum_idx - 1\n    maximum_idx = maximum_idx + 1\n    \n    minimum_idx =\
    \ minimum_idx % length(sorted_list)\n    maximum_idx = maximum_idx % length(sorted_list)\n\
    \    \n    minimum_idx = minimum_idx - 1\n    maximum_idx = maximum_idx + 1\n\
    \    \n    minimum_idx = minimum_idx % length(sorted_list)\n    maximum_idx =\
    \ maximum_idx % length(sorted_list)\n    \n    minimum_idx = minimum_idx - 1\n\
    \    maximum_idx = maximum_idx + ", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    \n    lst = sort(lst)\n    \n    i = 0\n    \n   \
    \ while i < length(lst)\n        \n        if lst[i] < lst[i+1]\n            \n\
    \            tmp = lst[i]\n            lst[i] = lst[i+1]\n            lst[i+1]\
    \ = tmp\n            \n            i += 1\n            \n        else\n      \
    \      \n            i += 1\n        end\n    end\n    \n    return lst\nend\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([1, 2, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the same vector in reverse order.", "    \n\
    \    lst = sort(lst)\n    \n    i = 0\n    \n    while i < length(lst)\n     \
    \   \n        if lst[i] > lst[i+1]\n            \n            lst[i], lst[i+1]\
    \ = lst[i+1], lst[i]\n            \n            i += 1\n            \n       \
    \ else\n            \n            i += 1\n        end\n    end\n    \n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1, 2, 3, 4])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns another vector where each element is the sum of the elements in\
    \ the original vector. For example, if the input vector is [10, 20, 30, 40], the\
    \ output vector should be [120, 240, 360, 480]", "    if length(lst) == 0 \n \
    \       return [] \n    \n    minimum = minimum(lst) \n    maximum = maximum(lst)\
    \ \n    \n    lst = sort(lst) \n    \n    minimum = minimum(lst) \n    maximum\
    \ = maximum(lst) \n    \n    lst = sort(lst) \n    \n    minimum = minimum(lst)\
    \ \n    maximum = maximum(lst) \n    \n    lst = sort(lst) \n    \n    minimum\
    \ = minimum(lst) \n    maximum = maximum(lst) \n    \n    lst = sort(lst) \n \
    \   \n    minimum = minimum(lst) \n    maximum = maximum(lst) \n    \n    lst\
    \ = sort(lst) \n    \n    minimum = minimum(lst) \n    maximum = maximum(lst)\
    \ \n    \n    lst = sort(lst) \n    \n    minimum = minimum(lst) \n    maximum\
    \ = maximum(lst) \n    \n    lst = sort(lst) \n    \n    minimum = minimum(lst)\
    \ \n    maximum = maximum(lst) \n    \n    lst = sort(lst) \n    \n    minimum\
    \ = minimum(lst) \n    maximum = maximum(lst) \n    \n    lst = sort(lst) \n \
    \   \n    minimum = minimum(lst) \n    maximum = maximum(lst) \n    \n    lst\
    \ = sort(lst) \n    \n    minimum = minimum(lst) \n    maximum = maximum(lst)\
    \ \n    \n    lst = sort(lst) \n    \n    minimum = minimum(lst) \n    maximum\
    \ = maximum(lst) \n    \n    lst = sort(lst) \n    \n    minimum = minimum(lst)\
    \ \n    maximum = maximum(lst) \n    \n    lst = sort(lst) \n    \n    minimum\
    \ = minimum(lst) \n    maximum = maximum(lst) \n    \n    lst = sort(lst) \n \
    \   \n    minimum = minimum(lst) \n    maximum = maximum(lst) \n    \n    lst\
    \ = sort(lst) \n    \n    minimum = minimum(lst) \n    maximum = maximum(lst)\
    \ \n    \n    lst = sort(lst) \n    \n    minimum = minimum(lst) \n    maximum\
    \ = maximum(lst) \n    \n    lst = sort(lst) \n    \n    minimum = minimum(lst)\
    \ \n    maximum = maximum(lst) \n    \n    lst = sort(lst) \n    \n    minimum\
    \ = minimum(lst) \n    maximum = maximum(lst) \n    \n    lst = sort(lst) \n \
    \   \n    minimum = minimum(lst) ", "    if length(lst) == 0 \n        return\
    \ [] \n    \n    minimum = min(lst)\n    maximum = max(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = lst[minimum:maximum]\n    \n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the same vector\
    \ in reverse order. \nThe function should work for both vectors of integers and\
    \ vectors of floating point numbers.", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", " \
    \   if length(lst) == 0 \n        return [] \n    \n    minimum = minimum(lst)\
    \ \n    maximum = maximum(lst) \n    \n    sorted_list = sort(lst) \n    \n  \
    \  sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_list)\
    \ \n    \n    sorted_list = reverse(sorted_list) \n    \n    sorted_list = sort(sorted_",
  "    if length(lst) == 0 \n        return [] \n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    lst = lst.[minimum:maximum]\n\
    \    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,\
    \ 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector. \nThe function should work for both vectors\
    \ of integers and vectors of floating point numbers.", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a vector of integers and returns the vector in reverse order. \nWrite\
    \ a function that takes a vector of integers and returns the vector in strange\
    \ order. \nWrite a function that takes a vector of integers and returns the vector\
    \ in reverse order and strange order.", "    if length(lst) == 0 \n        return\
    \ [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n  \
    \  lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ |>\nThe answer by is correct, but I thought I'd add my own solution. \n<code>",
  "    if length(lst) == 0 \n        return [] \n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    lst = lst[minimum:maximum]\n\
    \    \n    return lst\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a vector of integers and returns the sum of the integers in the vector.",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    if length(lst)\
    \ == 0 \n        return [] \n    else \n        minimum = minimum(lst) \n    \
    \    maximum = maximum(lst) \n        minimum = minimum + 1 \n        maximum\
    \ = maximum - 1 \n        lst = sort(lst) \n        lst = lst[minimum:maximum]\
    \ \n        return lst \nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the integers.\
    \ \nThe function should only take one argument, a list of integers.", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers. \nThe function\
    \ should return an Int64.", "    if length(lst) == 0 \n        return [] \n  \
    \  \n    minimum = minimum(lst) \n    maximum = maximum(lst) \n    \n    sorted_list\
    \ = sort(lst) \n    \n    sorted_list[1] = minimum \n    sorted_list[end] = maximum\
    \ \n    \n    return sorted_list \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\
    \ \nThe function should raise an error if the vector is empty.", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    sorted_list = copy(lst)\n\
    \    sorted_list[1] = max(sorted_list[1:end-1]) \n    sorted_list[end] = min(sorted_list[end+1:end+2])\n\
    \    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the same vector but with integers sorted from smallest\
    \ to largest.", "    if length(lst) == 0 \n        return [] \n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n\
    \    lst = lst .- minimum\n    lst = lst .+ maximum\n    \n    return lst\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have negative numbers\
    \ in the list.\n<|/ c |>\n<| c |>\nThis doesn't work if you have negative numbers\
    \ in the list.\n<|/ c |>\n<| a |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns another vector where each element is the sum of the\
    \ integers in the original vector, but in sorted order.", "    if length(lst)\
    \ == 0\n        return lst\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = lst[minimum:maximum]\n    \n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| c |>\nThis doesn't seem to work. `sort([5,4,3,2,1])` returns `[1,2,3,4,5]`,\
    \ not `[1,2,3,4,5]`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `sort([5,4,3,2,1])`\
    \ returns `[1,2,3,4,5]`, not `[1,2,3,4,5]`.\n<|/ c |>\n<| c |>\nThis doesn't seem\
    \ to work. `sort([5,4,3,2,1])` returns `[1,2,3,4,5]`, not `[1,2,3,4,5]`.\n<|/\
    \ c |>\n<| c |>\nThis doesn't seem to work. `sort([5,4,3,2,1])` returns `[1,2,3,4,5]`,\
    \ not `[1,2,3,4,5]`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `sort([5,4,3,2,1])`\
    \ returns `[1,2,3,4,5]`, not `[1,2,3,4,5]`.\n<|/ c |>\n<| a dscore=4 |>\n<code>\n\
    julia> sort([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't seem to work. `sort([5,4,3,2,1])`\
    \ returns `[1,2,3,4,5]`, not `[1,2,3,4,5]`.\n<|/ c |>\n<| c |>\nThis doesn't seem\
    \ to work. `sort([5,4,3,2,1])` returns `[1,2,3,4,5]`, not `[1,2,3,4,5]`.\n<|/\
    \ c |>\n<| c |>\nThis doesn't seem to work. `sort([5,4,3,2,1])` returns `[1,2,3,4,5]`,\
    \ not `[1,2,3,4,5]`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `sort([5,4,3,2,1])`\
    \ returns `[1,2,3,4,5]`, not `[1,2,3,4,5]`.\n<|/ c |>\n<| c |>\nThis doesn't seem\
    \ to work. `sort([5,4,3,2,1])` returns `[1,2,3,4,5]`, not `[1,2,3,4,5]`.\n<|/\
    \ c |>\n<| a tags=sorting,julia |>\n<code>\njulia> sort([5,4,3,2,1])\n5-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n", "    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,\
    \ 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given value appears in\
    \ a given vector.", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</cell>\n<code language=julia-1.4>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ a vector of integers sorted from smallest to largest.", "    if length(lst)\
    \ == 0 \n        return [] \n    \n    minimum = min(lst)\n    maximum = max(lst)\n\
    \    \n    minimum_index = findfirst(i->i==minimum, lst, 0)\n    maximum_index\
    \ = findfirst(i->i==maximum, lst, 0)\n    \n    lst[minimum_index], lst[maximum_index]\
    \ = lst[maximum_index], lst[minimum_index]\n    \n    return lst\nend\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers squared. \nThe function should raise an error if the vector\
    \ is empty.", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to\
    \ work. `strange_sort_list([5, 5, 5, 5])` returns `[5, 5, 5, 5]`.\n<|/ c |>\n\
    <| c |>\nYes, it does. I tested it before posting it. I will post the code I tested\
    \ it with.\n<|/ c |>\n<| c |>\nI tested it again and it works. I must have had\
    \ a typo when I tested it the first time. Sorry about that.\n<|/ c |>\n<| c |>\n\
    I tested it again and it works. I must have had a typo when I tested it the first\
    \ time. Sorry about that.\n<|/ c |>\n<| a |>\n<code>", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the same vector, but with each element\
    \ multiplied by 2.", "    \n    sorted_list = copy(lst)\n    \n    minimum = min(lst)\n\
    \    maximum = max(lst)\n    \n    minimum_index = findfirst(x -> x == minimum,\
    \ lst)\n    maximum_index = findfirst(x -> x == maximum, lst)\n    \n    if minimum_index\
    \ == maximum_index\n        sorted_list[minimum_index] = minimum\n        sorted_list[maximum_index]\
    \ = maximum\n    else\n        \n        minimum_index = minimum_index + 1\n \
    \       maximum_index = maximum_index - 1\n        \n        sorted_list[minimum_index]\
    \ = minimum\n        sorted_list[maximum_index] = maximum\n    end\n    \n   \
    \ return sorted_list\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,\
    \ 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns a vector of\
    \ integers in strange order.", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,\
    \ 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([])\n</cell>\n<text>\nExercise\n\
    Write a function that takes a vector of integers and returns the same vector,\
    \ except with each integer replaced by its square root.", "    if length(lst)\
    \ == 0 \n        return [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ its sum.", "    if length(lst) == 0 \n        return [] \n    \n    minimum\
    \ = minimum(lst) \n    maximum = maximum(lst) \n    \n    lst = sort(lst) \n \
    \   \n    minimum = minimum(lst) \n    maximum = maximum(lst) \n    \n    lst\
    \ = sort(lst) \n    \n    minimum = minimum(lst) \n    maximum = maximum(lst)\
    \ \n    \n    lst = sort(lst) \n    \n    minimum = minimum(lst) \n    maximum\
    \ = maximum(lst) \n    \n    lst = sort(lst) \n    \n    minimum = minimum(lst)\
    \ \n    maximum = maximum(lst) \n    \n    lst = sort(lst) \n    \n    minimum\
    \ = minimum(lst) \n    maximum = maximum(lst) \n    \n    lst = sort(lst) \n \
    \   \n    minimum = minimum(lst) \n    maximum = maximum(lst) \n    \n    lst\
    \ = sort(lst) \n    \n    minimum = minimum(lst) \n    maximum = maximum(lst)\
    \ \n    \n    lst = sort(lst) \n    \n    minimum = minimum(lst) \n    maximum\
    \ = maximum(lst) \n    \n    lst = sort(lst) \n    \n    minimum = minimum(lst)\
    \ \n    maximum = maximum(lst) \n    \n    lst = sort(lst) \n    \n    minimum\
    \ = minimum(lst) \n    maximum = maximum(lst) \n    \n    lst = sort(lst) \n \
    \   \n    minimum = minimum(lst) \n    maximum = maximum(lst) \n    \n    lst\
    \ = sort(lst) \n    \n    minimum = minimum(lst) \n    maximum = maximum(lst)\
    \ \n    \n    lst = sort(lst) \n    \n    minimum = minimum(lst) \n    maximum\
    \ = maximum(lst) \n    \n    lst = sort(lst) \n    \n    minimum = minimum(lst)\
    \ \n    maximum = maximum(lst) \n    \n    lst = sort(lst) \n    \n    minimum\
    \ = minimum(lst) \n    maximum = maximum(lst) \n    \n    lst = sort(lst) \n \
    \   \n    minimum = minimum(lst) \n    maximum = maximum(lst) \n    \n    lst\
    \ = sort(lst) \n    \n    minimum = minimum(lst) \n    maximum = maximum(lst)\
    \ \n    \n    lst = sort(lst) \n    \n    minimum = minimum(lst) \n    maximum\
    \ = maximum(lst) \n    \n    lst = sort(lst) \n    \n    minimum = minimum(lst) ",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a tags=julia,sorting |>\n<| c |>\nThis is not the most efficient solution, since\
    \ it sorts the list twice. Better would be to reverse the list once and sort it\
    \ once.\n<|/ c |>\n<| c |>\nYes, you are right. Thanks for pointing it out. I\
    \ will update my answer.\n<|/ c |>\n<| a tags=julia,sorting |>\nThe answer by\
    \ is correct, but I thought I'd add an alternative that doesn't require any additional\
    \ packages. \n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nHere is a solution\
    \ that uses only built-in functions:\n<code>", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns a vector of integers sorted from smallest to largest.",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns another vector in reverse order.",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of integers and returns a vector of integers\
    \ in strange order.", "    if length(lst) == 0 \n        return [] \n    else\
    \ \n        minimum = minimum(lst) \n        maximum = maximum(lst) \n       \
    \ minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum) \n\
    \        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, ", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a tags=sorting,julia |>\n<| a dscore=2 |>\n\
    The most efficient way is to use sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a dscore=2 |>\nThe most efficient way is to use sortperm:\n<code>\njulia>\
    \ sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| a dscore=1 |>\nThe most efficient way is to use\
    \ sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=sorting,julia |>\n<| a tags=sorting,julia\
    \ |>\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n\
    \ 3\n 4\n 5\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a dscore=1 |>\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=sorting,julia |>\n<| a |>\n<code>\njulia>\
    \ sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n\
    <|/ a dscore=1 tags=sorting,julia |>\n<| a tags=sorting,julia |>\n<code>\njulia>\
    \ sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n", "    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns another vector with integers sorted from smallest to\
    \ largest."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
