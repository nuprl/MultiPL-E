name: HumanEval_111_histogram
language: jl
prompt: "\"\"\"Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n    of the letter with the most repetition and containing the corresponding\
  \ count.\n    If several letters have the same occurrence, return all of them.\n\
  \    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"a\" => 1, \"b\" =>\
  \ 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"a\" => 2, \"b\" =>\
  \ 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>>\
  \ histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>> histogram(\"\")\n    Dict()\n\
  \n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}> \n"
tests: "using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
  a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") ==\
  \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\"\
  \ => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r\
  \ t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b\
  \ b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1,\
  \ \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
  a\") == Dict(\"a\" => 1))\nend\n"
completions: ["    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\"\
    )\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns a\
    \ dictionary with the most frequent letter in it.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times each letter appears in the string.\nThe function should ignore non-letter\
    \ characters and return 0 for empty strings.\nThe function should ignore case\
    \ when counting.\nThe function should ignore non-letter characters and return\
    \ 0 for empty strings.\nThe function should ignore case when counting.\nThe function\
    \ should ignore non-letter characters and return 0 for empty strings.\nThe function\
    \ should ignore case when counting.\nThe function should ignore non-letter characters\
    \ and return 0 for empty strings.\nThe function should ignore case when counting.\n\
    The function should ignore non-letter characters and return 0 for empty strings.\n\
    The function should ignore case when counting.\nThe function should ignore non-letter\
    \ characters and return 0 for empty strings.\nThe function should ignore case\
    \ when counting.\nThe function should ignore non-letter characters and return\
    \ 0 for empty strings.\nThe function should ignore case when counting.\nThe function\
    \ should ignore non-letter characters and return 0 for empty strings.\nThe function\
    \ should ignore case when counting.\nThe function should ignore non-letter characters\
    \ and return 0 for empty strings.\nThe function should ignore case when counting.\n\
    The function should ignore non-letter characters and return 0 for empty strings.\n\
    The function should ignore case when counting.\nThe function should ignore non-letter\
    \ characters and return 0 for empty strings.\nThe function should ignore case\
    \ when counting.\nThe function should ignore non-letter characters and return\
    \ 0 for empty strings.\nThe function should ignore case when counting.\nThe function\
    \ should ignore non-letter characters and return 0 for empty strings.\nThe function\
    \ should ignore case when counting.\nThe function should ignore non-letter characters\
    \ and return 0 for empty strings.\nThe function should ignore case when counting.\n\
    The function should ignore non-letter characters and return 0 for empty strings.\n\
    The function should ignore case when counting.\nThe function should ignore non-letter\
    \ characters and return 0 for empty strings.\nThe function should ignore case\
    \ when counting.\nThe function should ignore non-letter characters and return\
    \ 0 for empty strings.\nThe function should ignore case when counting.\nThe function\
    \ should ignore non-letter characters and return 0 for empty strings.\nThe function\
    \ should ignore case when counting.\nThe function should ignore non-letter characters\
    \ and return 0 for empty strings.\nThe function should ignore case when counting.\n\
    The function should ignore non-letter characters and return 0 for empty strings.\n\
    The function should ignore case when counting.\nThe function should ignore ",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.", "    histogram = Dict()\n \
    \   for letter in split(test)\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a dictionary with the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nIf\
    \ no letter appears in the string, return an empty dictionary.", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    letters.sort!()\n  \
    \  for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are\nnot spaces.", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not letters.", " \
    \   histogram = Dict()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend", "    histogram = Dict()\n    letters = split(test)\n    letters.sort!\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns a dictionary with the frequency of\
    \ each character\nin the string. \nExample: \n>>> histogram(\"a b c\")\nDict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"a b b a\")\nDict(\"a\" => 2,\
    \ \"b\" => 2)\n>>> histogram(\"a b c a b\")\nDict(\"a\" => 2, \"b\" => 2)\n>>>\
    \ histogram(\"b b b b a\")\nDict(\"b\" => 4)\n>>> histogram(\"\")\nDict()", " \
    \   histogram = Dict{String, Int64}()\n    letters = split(test)\n    letters\
    \ = sort(letters)\n    letters = unique(letters)\n    for letter in letters\n\
    \        histogram[letter] = length(filter(x -> x == letter, letters))\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of words in the string.\nThe function\
    \ should ignore all non-word characters (punctuation, spaces, etc).\nThe function\
    \ should ignore all empty strings.\nThe function should ignore all strings consisting\
    \ of only one word.\nThe function should ignore all strings consisting of only\
    \ one word.\nThe function should ignore all strings consisting of only one word.\n\
    The function should ignore all strings consisting of only one word.\nThe function\
    \ should ignore all strings consisting of only one word.\nThe function should\
    \ ignore all strings consisting of only one word.\nThe function should ignore\
    \ all strings consisting of only one word.\nThe function should ignore all strings\
    \ consisting of only one word.\nThe function should ignore all strings consisting\
    \ of only one word.\nThe function should ignore all strings consisting of only\
    \ one word.\nThe function should ignore all strings consisting of only one word.\n\
    The function should ignore all strings consisting of only one word.\nThe function\
    \ should ignore all strings consisting of only one word.\nThe function should\
    \ ignore all strings consisting of only one word.\nThe function should ignore\
    \ all strings consisting of only one word.\nThe function should ignore all strings\
    \ consisting of only one word.\nThe function should ignore all strings consisting\
    \ of only one word.\nThe function should ignore all strings consisting of only\
    \ one word.\nThe function should ignore all strings consisting of only one word.\n\
    The function should ignore all strings consisting of only one word.\nThe function\
    \ should ignore all strings consisting of only one word.\nThe function should\
    \ ignore all strings consisting of only one word.\nThe function should ignore\
    \ all strings consisting of only one word.\nThe function should ignore all strings\
    \ consisting of only one word.\nThe function should ignore all strings consisting\
    \ of only one word.\nThe function should ignore all strings consisting of only\
    \ one word.\nThe function should ignore all strings consisting of only one word.\n\
    The function should ignore all strings consisting of only one word.\nThe function\
    \ should ignore all strings consisting of only one word.\nThe function should\
    \ ignore all strings consisting of only one word.\nThe function should ignore\
    \ all strings consisting of only one word.\nThe function should ignore all strings\
    \ consisting of only one word.\nThe function should ignore all strings consisting\
    \ of only one word.\nThe function should ignore all strings consisting of only\
    \ one word.\nThe function should ignore all strings consisting of only one word.\n\
    The function should ignore all strings consisting of only one word.\nThe function\
    \ should ignore all strings consisting of only one word.\nThe function should\
    \ ignore all strings consisting of only one word.\nThe function should ignore\
    \ all strings consisting of only one word.\nThe function should ignore all strings\
    \ consisting of only one word.\nThe function should ignore all strings consisting\
    \ of only one ", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters = sort(letters)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns a string with the\
    \ first letter of each word capitalized.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    histogram\n\
    end\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string and returns the number of words\
    \ in the string.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    histogram\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nThe function should ignore all punctuation and only count the\
    \ letters a-z.\nThe function should ignore all numbers and only count the letters\
    \ a-z.\nThe function should ignore all special characters and only count the letters\
    \ a-z.\nThe function should ignore all whitespace and only count the letters a-z.\n\
    The function should ignore all words that are only one character long.\nThe function\
    \ should ignore all words that are longer than 20 characters.\nThe function should\
    \ ignore all words that are longer than 50 characters.\nThe function should ignore\
    \ all words that are longer than 100 characters.\nThe function should ignore all\
    \ words that are longer than 200 characters.\nThe function should ignore all words\
    \ that are longer than 500 characters.\nThe function should ignore all words that\
    \ are longer than 1000 characters.\nThe function should ignore all words that\
    \ are longer than 2000 characters.\nThe function should ignore all words that\
    \ are longer than 5000 characters.\nThe function should ignore all words that\
    \ are longer than 10000 characters.\nThe function should ignore all words that\
    \ are longer than 20000 characters.\nThe function should ignore all words that\
    \ are longer than 50000 characters.\nThe function should ignore all words that\
    \ are longer than 100000 characters.\nThe function should ignore all words that\
    \ are longer than 200000 characters.\nThe function should ignore all words that\
    \ are longer than 500000 characters.\nThe function should ignore all words that\
    \ are longer than 1000000 characters.\nThe function should ignore all words that\
    \ are longer than 2000000 characters.\nThe function should ignore all words that\
    \ are longer than 5000000 characters.\nThe function should ignore all words that\
    \ are longer than 10000000 characters.\nThe function should ignore all words that\
    \ are longer than 20000000 characters.\nThe function should ignore all words that\
    \ are longer than 50000000 characters.\nThe function should ignore all words that\
    \ are longer than 100000000 characters.\nThe function should ignore all words\
    \ that are longer than 200000000 characters.\nThe function should ignore all words\
    \ that are longer than 500000000 characters.\nThe function should ignore all words\
    \ that are longer than 1000000000 characters.\nThe function should ignore all\
    \ words that are longer than 2000000000 characters.\nThe function should ignore\
    \ all words that are longer than 5000000000 characters.\nThe function should ignore\
    \ all words that are longer than 10000000000 characters.\nThe function should\
    \ ignore all words that are longer than 20000000000 characters.\n", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each letter appears in the string.", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string as input and returns the number\
    \ of occurrences of each letter in the string.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of unique characters in the string.\n    \n    Example:\n\
    \    >>> unique_characters(\"a b c\")\n    3\n    >>> unique_characters(\"a b\
    \ b a\")\n    4\n    >>> unique_characters(\"b b b b a\")\n    4\n    >>> unique_characters(\"\
    \")\n    0", "    histogram = Dict()\n    letters = split(test)\n    letters =\
    \ sort(letters)\n    for letter in letters\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    return histogram\nend", "    histogram = Dict{String,\
    \ Int64}()\n    for letter in split(test)\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    end\n    histogram\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of words in it.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend", "    histogram = Dict{String,\
    \ Int64}()\n    for letter in split(test)\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of times each letter appears in the string.", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string and returns a dictionary with the\
    \ letter with the most repetition and containing the corresponding count.", " \
    \   histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend", "    histogram = Dict{String, Int64}()\n    for letter\
    \ in split(test)\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a string with all the letters capitalized.\nExample:\n>>> capitalize(\"a b c\"\
    )\n\"A B C\"", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    letters = sort(letters)\n    for letter in letters\n    \
    \    histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of times\
    \ each letter appears in the string.\nThe function should ignore case and only\
    \ count the letters a-z.", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        if histogram[letter] == 0\n\
    \            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are\nuppercase letters.",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend", "    histogram = Dict{String, Int64}()\n    for c\
    \ in test\n        histogram[c] = histogram.get(c, 0) + 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each letter appears.", "    histogram = Dict{String, Int64}()\n    letters =\
    \ split(test)\n    for letter in letters\n        if histogram[letter] == 0\n\
    \            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nWrite a function that takes a string and returns the number\
    \ of uppercase letters in the string.\nWrite a function that takes a string and\
    \ returns the number of lowercase letters in the string.\nWrite a function that\
    \ takes a string and returns the number of digits (0-9) in the string.\nWrite\
    \ a function that takes a string and returns the number of punctuation marks in\
    \ the string.\nWrite a function that takes a string and returns the number of\
    \ words in the string that start with a capital letter.\nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ a lowercase letter.\nWrite a function that takes a string and returns the number\
    \ of words in the string that start with a digit.\nWrite a function that takes\
    \ a string and returns the number of words in the string that start with a punctuation\
    \ mark.\nWrite a function that takes a string and returns the number of characters\
    \ in the string that start with a capital letter.\nWrite a function that takes\
    \ a string and returns the number of characters in the string that start with\
    \ a lowercase letter.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that start with a digit.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that start\
    \ with a punctuation mark.\nWrite a function that takes a string and returns the\
    \ number of uppercase letters in the string that start with a capital letter.\n\
    Write a function that takes a string and returns the number of uppercase letters\
    \ in the string that start with a lowercase letter.\nWrite a function that takes\
    \ a string and returns the number of uppercase letters in the string that start\
    \ with a digit.\nWrite a function that takes a string and returns the number of\
    \ uppercase letters in the string that start with a punctuation mark.\nWrite a\
    \ function that takes a string and returns the number of lowercase letters in\
    \ the string that start with a capital letter.\nWrite a function that takes a\
    \ string and returns the number of lowercase letters in the string that start\
    \ with a lowercase letter.\nWrite a function that takes a string and returns the\
    \ number of lowercase letters in the string that start with a digit.\nWrite a\
    \ function that takes a string and returns the number of lowercase letters in\
    \ the string that start with a punctuation mark.\nWrite a function that takes\
    \ a string and returns the number of digits (0-9) in the string that start with\
    \ a capital letter.\nWrite a function that takes a string and returns the number\
    \ of digits (0-9) in the string that start with a lowercase letter.\nWrite a function\
    \ that takes a string and returns the number of digits (0-9) in the string that\
    \ start with a ", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend", "    histogram = Dict{String, Int64}()\n    for c\
    \ in split(test)\n        if !haskey(histogram, c)\n            histogram[c] =\
    \ 1\n        else\n            histogram[c] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nThe function should ignore all punctuation and only count the\
    \ letters a-z.\nThe function should ignore all numbers and only count the letters\
    \ a-z.\nThe function should ignore all special characters and only count the letters\
    \ a-z.\nThe function should ignore all spaces and only count the letters a-z.\n\
    The function should ignore all uppercase and only count the letters a-z.\nThe\
    \ function should ignore all lowercase and only count the letters a-z.\nThe function\
    \ should ignore all special characters and only count the letters a-z.\nThe function\
    \ should ignore all spaces and only count the letters a-z.\nThe function should\
    \ ignore all uppercase and only count the letters a-z.\nThe function should ignore\
    \ all lowercase and only count the letters a-z.\nThe function should ignore all\
    \ special characters and only count the letters a-z.\nThe function should ignore\
    \ all spaces and only count the letters a-z.\nThe function should ignore all uppercase\
    \ and only count the letters a-z.\nThe function should ignore all lowercase and\
    \ only count the letters a-z.\nThe function should ignore all special characters\
    \ and only count the letters a-z.\nThe function should ignore all spaces and only\
    \ count the letters a-z.\nThe function should ignore all uppercase and only count\
    \ the letters a-z.\nThe function should ignore all lowercase and only count the\
    \ letters a-z.\nThe function should ignore all special characters and only count\
    \ the letters a-z.\nThe function should ignore all spaces and only count the letters\
    \ a-z.\nThe function should ignore all uppercase and only count the letters a-z.\n\
    The function should ignore all lowercase and only count the letters a-z.\nThe\
    \ function should ignore all special characters and only count the letters a-z.\n",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string. \nWrite a function that\
    \ takes a string and returns the number of words in the string. \nWrite a function\
    \ that takes a string and returns the number of lines in the string. \nWrite a\
    \ function that takes a string and returns the number of uppercase letters in\
    \ the string. \nWrite a function that takes a string and returns the number of\
    \ lowercase letters in the string. \nWrite a function that takes a string and\
    \ returns the number of digits (0-9) in the string. \nWrite a function that takes\
    \ a string and returns the number of punctuation characters in the string. \n\
    Write a function that takes a string and returns the number of words that start\
    \ with a capital letter. \nWrite a function that takes a string and returns the\
    \ number of words that start with a lowercase letter. \nWrite a function that\
    \ takes a string and returns the number of words that start with a digit. \nWrite\
    \ a function that takes a string and returns the number of words that start with\
    \ a punctuation character. \nWrite a function that takes a string and returns\
    \ the number of words that start with a word that starts with a capital letter.\
    \ \nWrite a function that takes a string and returns the number of words that\
    \ start with a word that starts with a lowercase letter. \nWrite a function that\
    \ takes a string and returns the number of words that start with a word that starts\
    \ with a digit. \nWrite a function that takes a string and returns the number\
    \ of words that start with a word that starts with a punctuation character. \n\
    Write a function that takes a string and returns the number of words that start\
    \ with a word that starts with a word that starts with a capital letter. \nWrite\
    \ a function that takes a string and returns the number of words that start with\
    \ a word that starts with a word that starts with a lowercase letter. \nWrite\
    \ a function that takes a string and returns the number of words that start with\
    \ a word that starts with a word that starts with a digit. \nWrite a function\
    \ that takes a string and returns the number of words that start with a word that\
    \ starts with a word that starts with a punctuation character. \nWrite a function\
    \ that takes a string and returns the number of words that start with a word that\
    \ starts with a word that starts with a word that starts with a capital letter",
  "    histogram = Dict()\n    for c in split(test)\n        histogram[c] = get(histogram,\
    \ c, 0) + 1\n    return histogram\nend", "    histogram = Dict()\n    for letter\
    \ in split(test)\n        histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each letter appears in the string.\nThe function\
    \ should return a dictionary with the letters as keys and the number of times\
    \ they appear in the string as values.\nExample:\n>>> count_letters(\"a b c\"\
    )\nDict(\"a\" => 1, \"b\" => 1, \"c\" => 1)", "    histogram = Dict{String, Int64}()\n\
    \    for letter in split(test)\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise\nWrite a function called histogram that takes a string\
    \ and returns a dictionary of the letter with the most repetition and containing\
    \ the corresponding count.", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] >= 1 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not letters.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string. \nThe function should ignore\
    \ all non-alphanumeric characters and split on whitespace.", "    histogram =\
    \ Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a dictionary with\
    \ the most repeated character and the number of times it appears.", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are\nnot in the alphabet (a to z).", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns a string with the first letter of\
    \ each word capitalized.", "    histogram = Dict{String, Int64}()\n    for letter\
    \ in split(test)\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nThe function should ignore all\
    \ punctuation and only count the letters a-z.\nThe function should ignore all\
    \ spaces.\nThe function should ignore all numbers.\nThe function should ignore\
    \ all special characters.\nThe function should ignore all uppercase letters.\n\
    The function should ignore all lowercase letters.\nThe function should ignore\
    \ all symbols.\nThe function should ignore all non-alphabetic characters.\nThe\
    \ function should ignore all empty strings.\nThe function should ignore all empty\
    \ lists.\nThe function should ignore all empty tuples.\nThe function should ignore\
    \ all empty dictionaries.\nThe function should ignore all empty arrays.\nThe function\
    \ should ignore all empty sets and sets.\nThe function should ignore all empty\
    \ dictionaries and arrays.\nThe function should ignore all empty sets and dictionaries.\n\
    The function should ignore all empty dictionaries and arrays.\nThe function should\
    \ ignore all empty dictionaries and arrays.\nThe function should ignore all empty\
    \ dictionaries and arrays.\nThe function should ignore all empty dictionaries\
    \ and arrays.\nThe function should ignore all empty dictionaries and arrays.\n\
    The function should ignore all empty dictionaries and arrays.\nThe function should\
    \ ignore all empty dictionaries and arrays.\nThe function should ignore all empty\
    \ dictionaries and arrays.\nThe function should ignore all empty dictionaries\
    \ and arrays.\nThe function should ignore all empty dictionaries and arrays.\n\
    The function should ignore all empty dictionaries and arrays.\nThe function should\
    \ ignore all empty dictionaries and arrays.\nThe function should ignore all empty\
    \ dictionaries and arrays.\nThe function should ignore all empty dictionaries\
    \ and arrays.\nThe function should ignore all empty dictionaries and arrays.\n\
    The function should ignore all empty dictionaries and arrays.\nThe function should\
    \ ignore all empty dictionaries and arrays.\nThe function should ignore all empty\
    \ dictionaries and arrays.\nThe function should ignore all empty dictionaries\
    \ and arrays.\nThe function should ignore all empty dictionaries and arrays.\n\
    The function should ignore all empty dictionaries and arrays.\nThe function should\
    \ ignore all empty dictionarie", "    histogram = Dict{String, Int64}()\n    for\
    \ c in split(test)\n        if !haskey(histogram, c)\n            histogram[c]\
    \ = 0\n        end\n        histogram[c] += 1\n    end\n    return histogram\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a string with the first letter capitalized.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns a list of all the words\
    \ in the string. \nThe function should ignore all punctuation and split on whitespace.",
  "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend", "    histogram\
    \ = Dict()\n    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns a dictionary with the letters as keys and the number of times each\
    \ letter appears in the string as values.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not letters.", " \
    \   histogram = Dict()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a string with all\
    \ the letters replaced by their respective counts.\nExample:\n>>> replace_letters(\"\
    a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c ", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        if histogram[letter] == 0\n\
    \            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns a dictionary with the number\
    \ of times each letter appears in the string.\nThe function should ignore non-letters.",
  "    histogram = Dict()\n    letters = split(test)\n    letters = sort(letters)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns a string where all the characters are replaced by\
    \ their ASCII code. \nExample:\n>>> encode(\"Hello World\")\n\"68 101 108 108\
    \ 111 32 87 111 114 108 100 33 99 108 108 111 32 87 111 114 108 100 33 99 108\
    \ 108 111 32 87 111 114 108 100 33 99 108 108 111 32 87 111 114 108 100 33 99\
    \ 108 108 111 32 87 111 114 108 100 33 99 108 108 111 32 87 111 114 108 100 33\
    \ 99 108 108 111 32 87 111 114 108 100 33 99 108 108 111 32 87 111 114 108 100\
    \ 33 99 108 108 111 32 87 111 114 108 100 33 99 108 108 111 32 87 111 114 108\
    \ 100 33 99 108 108 111 32 87 111 114 108 100 33 99 108 108 111 32 87 111 114\
    \ 108 100 33 99 108 108 111 32 87 111 114 108 100 33 99 108 108 111 32 87 111\
    \ 114 108 100 33 99 108 108 111 32 87 111 114 108 100 33 99 108 108 111 32 87\
    \ 111 114 108 100 33 99 108 108 111 32 87 111 114 108 100 33 99 108 108 111 32\
    \ 87 111 114 108 100 33 99 108 108 111 32 87 111 114 108 100 33 99 108 108 111\
    \ 32 87 111 114 108 100 33 99 108 108 111 32 87 111 114 108 100 ", "    histogram\
    \ = Dict{String, Int64}()\n    \n    for letter in split(test)\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    \n    return histogram\nend\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of times each letter appears\
    \ in the string.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of times each letter appears in the string.", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not letters.", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of words in the string.\nThe function should\
    \ ignore all non-word characters (spaces, punctuation, etc.).\nThe function should\
    \ ignore all empty words.\nThe function should ignore all words shorter than 3\
    \ characters.\nThe function should ignore all words longer than 20 characters.\n\
    The function should ignore all words containing only numbers.\nThe function should\
    \ ignore all words containing only letters a-z or A-Z.\nThe function should ignore\
    \ all words containing only letters a-z or A-Z and digits.\nThe function should\
    \ ignore all words containing only letters a-z or A-Z and digits.\nThe function\
    \ should ignore all words containing only letters a-z or A-Z and digits.\nThe\
    \ function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only ", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of occurrences of each letter. \nThe function should ignore case and only count\
    \ the letters a-z.", "    histogram = Dict{String, Int64}()\n    for letter in\
    \ split(test)\n        histogram[letter] = get(histogram, letter, 0) + 1\n   \
    \ return histogram\nend", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nThe function should ignore all non-word characters (punctuation, spaces,\
    \ etc.).\nThe function should ignore all empty strings.\nThe function should ignore\
    \ all strings consisting of only whitespace.\nThe function should ignore all strings\
    \ consisting of only a single word.\nThe function should ignore all strings consisting\
    \ of only two words.\nThe function should ignore all strings consisting of only\
    \ three words.\nThe function should ignore all strings consisting of only four\
    \ words.\nThe function should ignore all strings consisting of only five words.\n\
    The function should ignore all strings consisting of only six words.\nThe function\
    \ should ignore all strings consisting of only seven words.\nThe function should\
    \ ignore all strings consisting of only eight words.\nThe function should ignore\
    \ all strings consisting of only nine words.\nThe function should ignore all strings\
    \ consisting of only ten words.\nThe function should ignore all strings consisting\
    \ of only eleven words.\nThe function should ignore all strings consisting of\
    \ only twelve words.\nThe function should ignore all strings consisting of only\
    \ thirteen words.\nThe function should ignore all strings consisting of only fourteen\
    \ words.\nThe function should ignore all strings consisting of only fifteen words.\n\
    The function should ignore all strings consisting of only sixteen words.\nThe\
    \ function should ignore all strings consisting of only seventeen words.\nThe\
    \ function should ignore all strings consisting of only eighteen words.\nThe function\
    \ should ignore all strings consisting of only nineteen words.\nThe function should\
    \ ignore all strings consisting of only twenty words.\nThe function should ignore\
    \ all strings consisting of only twenty-one words.\nThe function should ignore\
    \ all strings consisting of only twenty-two words.\nThe function should ignore\
    \ all strings consisting of only twenty-three words.\nThe function should ignore\
    \ all strings consisting of only twenty-four words.\nThe function should ignore\
    \ all strings consisting of only twenty-five words.\nThe function should ignore\
    \ all strings consisting of only twenty-six words.\nThe function should ignore\
    \ all strings consisting of only twenty-seven words.\nThe function should ignore\
    \ all strings consisting of only twenty-eight words.\nThe function should ignore\
    \ all strings consisting of only twenty-nine words.\nThe function should ignore\
    \ all strings consisting of only thirty-one words.\nThe function should ignore\
    \ all strings consisting of only thirty-two words.\nThe function should ignore\
    \ all ", "    histogram = Dict()\n    letters = split(test)\n    for letter in\
    \ letters\n        histogram[letter] = histogram[letter] ? histogram[letter] +\
    \ 1 : 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns a dictionary with the most frequent letters.", "    histogram =\
    \ Dict{String, Int64}()\n    for c in test\n        if histogram[c] == 0\n   \
    \         histogram[c] = 1\n        else\n            histogram[c] += 1\n    \
    \    end\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of times each letter appears\
    \ in the string.\nIf the letter does not appear in the string, return 0.\nIf the\
    \ string contains multiple spaces, ignore them and count the letters individually.\n\
    If the string contains multiple consecutive spaces, ignore them and count the\
    \ letters individually.\nIf the string contains multiple consecutive spaces and\
    \ letters, ignore them and count the letters individually.\nIf the string contains\
    \ multiple consecutive spaces and letters, ignore them and count the letters individually.\n\
    If the string contains multiple consecutive spaces and letters, ignore them and\
    \ count the letters individually.\nIf the string contains multiple consecutive\
    \ spaces and letters, ignore them and count the letters individually.\nIf the\
    \ string contains multiple consecutive spaces and letters, ignore them and count\
    \ the letters individually.\nIf the string contains multiple consecutive spaces\
    \ and letters, ignore them and count the letters individually.\nIf the string\
    \ contains multiple consecutive spaces and letters, ignore them and count the\
    \ letters individually.\nIf the string contains multiple consecutive spaces and\
    \ letters, ignore them and count the letters individually.\nIf the string contains\
    \ multiple consecutive spaces and letters, ignore them and count the letters individually.\n\
    If the string contains multiple consecutive spaces and letters, ignore them and\
    \ count the letters individually.\nIf the string contains multiple consecutive\
    \ spaces and letters, ignore them and count the letters individually.\nIf the\
    \ string contains multiple consecutive spaces and letters, ignore them and count\
    \ the letters individually.\nIf the string contains multiple consecutive spaces\
    \ and letters, ignore them and count the letters individually.\nIf the string\
    \ contains multiple consecutive spaces and letters, ignore them and count the\
    \ letters individually.\nIf the string contains multiple consecutive spaces and\
    \ letters, ignore them and count the letters individually.\nIf the string contains\
    \ multiple consecutive spaces and letters, ignore them and count the letters individually.\n\
    If the string contains multiple consecutive spaces and letters, ignore them and\
    \ count the letters individually.\nIf the string contains multiple consecutive\
    \ spaces and letters, ignore them and count the letters individually.\nIf the\
    \ string contains multiple consecutive spaces and letters, ignore them and count\
    \ the letters individually.\nIf the ", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string\
    \ and returns the number of words in the string.", "    histogram = Dict{String,\
    \ Int64}()\n    for c in test\n        histogram[c] = histogram.get(c, 0) + 1\n\
    \    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ a dictionary with the characters as keys and the number of times they appear\
    \ in the string as values.", "    histogram = Dict{String, Int64}()\n    for letter\
    \ in split(test)\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function named count_letters that takes a\
    \ string as input and returns the number of occurrences of each letter in the\
    \ string. \nThe function should return a dictionary with the letters as keys and\
    \ the corresponding counts as values.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns a dictionary with the letter with the most repetition and containing\
    \ the corresponding count.\nIf several letters have the same occurrence, return\
    \ all of them.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 10\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    If there are multiple words, return a list of them.\nIf there are no words, return\
    \ 0.\nIf there are only spaces, return 0.\nIf there are only numbers, return 0.\n\
    If there are only special characters, return 0.\nIf there are only uppercase letters,\
    \ return 0.\nIf there are only lowercase letters, return 0.\nIf there are only\
    \ digits, return 0.\nIf there are only spaces, return 0.\nIf there are only numbers,\
    \ return 0.\nIf there are only special characters, return 0.\nIf there are only\
    \ uppercase letters, return 0.\nIf there are only lowercase letters, return 0.\n\
    If there are only digits, return 0.\nIf there are only spaces, return 0.\nIf there\
    \ are only numbers, return 0.\nIf there are only special characters, return 0.\n\
    If there are only uppercase letters, return 0.\nIf there are only lowercase letters,\
    \ return 0.\nIf there are only digits, return 0.\nIf there are only spaces, return\
    \ 0.\nIf there are only numbers, return 0.\nIf there are only special characters,\
    \ return 0.\nIf there are only uppercase letters, return 0.\nIf there are only\
    \ lowercase letters, return 0.\nIf there are only digits, return 0.\nIf there\
    \ are only spaces, return 0.\nIf there are only numbers, return 0.\nIf there are\
    \ only special characters, return 0.\nIf there are only uppercase letters, return\
    \ 0.\nIf there are only lowercase letters, return 0.\nIf there are only digits,\
    \ return 0.\nIf there are only spaces, return 0.\nIf there are only numbers, return\
    \ 0.\nIf there are only special characters, return 0.\nIf there are only uppercase\
    \ letters, return 0.\nIf there are only lowercase letters, return 0.\nIf there\
    \ are only digits, return 0.\nIf there are only spaces, return 0.\nIf there are\
    \ only numbers, return 0.\nIf there are only special characters, return 0.\nIf\
    \ there are only uppercase letters, return 0.\nIf there are only lowercase letters,\
    \ return 0.\nIf there are only digits, return 0.\nIf there are only spaces, return\
    \ 0.\nIf there are only numbers, return 0.\nIf there are only special characters,\
    \ return 0.\nIf there are only uppercase letters, return 0.\nIf there are only\
    \ lowercase letters, return 0.\nIf there are only digits, return 0.\nIf there\
    \ are only spaces, return 0.\nIf ", "    histogram = Dict{String, Int64}()\n \
    \   letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each letter appears in the string.\nThe function\
    \ should ignore non-letter characters and only count letters.\nThe function should\
    \ ignore case when counting.", "    histogram = Dict{String, Int64}()\n    for\
    \ letter in split(test)\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a string with the first letter capitalized.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes a string and returns the number of times each letter appears\
    \ in the string.", "    histogram = Dict()\n    for letter in split(test)\n  \
    \      if histogram[letter] == 0\n            histogram[letter] = 1\n        else\n\
    \            histogram[letter] += 1\n        end\n    end\n    return histogram\n\
    end", "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns a dictionary with the\
    \ most repeated letter and its count.\n    \n    Example:\n    >>> most_repeated_letter(\"\
    a b c\")\n    Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> most_repeated_letter(\"\
    a b b a\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> most_repeated_letter(\"\
    a b c a b\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> most_repeated_letter(\"\
    b b b b a\")\n    Dict(\"b\" => 4)\n    >>> most_repeated_letter(\"\")\n    Dict()",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nWrite a function that takes\
    \ a string and returns the number of letters in the string.\nWrite a function\
    \ that takes a string and returns the number of uppercase letters in the string.\n\
    Write a function that takes a string and returns the number of lowercase letters\
    \ in the string.\nWrite a function that takes a string and returns the number\
    \ of digits (0-9) in the string.\nWrite a function that takes a string and returns\
    \ the number of punctuation marks (!,.,?) in the string.\nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ a letter.\nWrite a function that takes a string and returns the number of words\
    \ in the string that start with a letter.\nWrite a function that takes a string\
    \ and returns the number of words in the string that start with a letter.\nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that start with a letter.\nWrite a function that takes a string and returns\
    \ the number of words in the string that start with a letter.\nWrite a function\
    \ that takes a string and returns the number of words in the string that start\
    \ with a letter.\nWrite a function that takes a string and returns the number\
    \ of words in the string that start with a letter.\nWrite a function that takes\
    \ a string and returns the number of words in the string that start with a letter.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that start with a letter.\nWrite a function that takes a string and returns\
    \ the number of words in the string that start with a letter.\nWrite a function\
    \ that takes a string and returns the number of words in the string that start\
    \ with a letter.\nWrite a function that takes a string and returns the number\
    \ of words in the string that start with a letter.\nWrite a function that takes\
    \ a string and returns the number of words in the string that start with a letter.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that start with a letter.\nWrite a function that takes a string and returns\
    \ the number of words in the string that start with a letter.\nWrite a function\
    \ that takes a string and returns the number of words in the string that start\
    \ with a letter.\nWrite a function that takes a string and returns the number\
    \ of words in the string that start with a ", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    letters = letters[2:end]\n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each letter appears in the string.\nIf two letters have the same number of occurrences,\
    \ return both.\nIf no letter appears in the string, return an empty dictionary.\n\
    Example: histogram(\"a b c a b c\")\nshould return Dict(\"a\" => 2, \"b\" => 2,\
    \ \"c\" => 2)", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are\nnot in the alphabet (including spaces and punctuation).", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are\nnot letters. \nExample: \n>>> count_non_letters(\"a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z\")\n26\n>>> count_non_letters(\"\
    a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n0\n>>> count_non_letters(\"\
    a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n1\n>>> count_non_letters(\"\
    a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n0\n>>> count_non_letters(\"\
    \")\n0", "    histogram = Dict()\n    letters = split(test)\n    for letter in\
    \ letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string and returns a\
    \ dictionary of the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.", " \
    \   histogram = Dict()\n    for letter in split(test)\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of letters contained in the string that appear more than\
    \ once.", "    histogram = Dict{String, Int64}()\n    for c in test\n        histogram[c]\
    \ = histogram[c] + 1 if histogram[c] > 0 else 1\n    end\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each letter appears in the string.\nThe function should ignore non-letter characters\
    \ and return a dictionary with the letters as keys and the number of times they\
    \ appear in the string as values.\nThe function should ignore case when counting\
    \ letters.\nThe function should ignore non-letter characters and return a dictionary\
    \ with the letters as keys and the number of times they appear in the string as\
    \ values.\nThe function should ignore case when counting letters.\nThe function\
    \ should ignore non-letter characters and return a dictionary with the letters\
    \ as keys and the number of times they appear in the string as values.\nThe function\
    \ should ignore case when counting letters.\nThe function should ignore non-letter\
    \ characters and return a dictionary with the letters as keys and the number of\
    \ times they appear in the string as values.\nThe function should ignore case\
    \ when counting letters.\nThe function should ignore non-letter characters and\
    \ return a dictionary with the letters as keys and the number of times they appear\
    \ in the string as values.\nThe function should ignore case when counting letters.\n\
    The function should ignore non-letter characters and return a dictionary with\
    \ the letters as keys and the number of times they appear in the string as values.\n\
    The function should ignore case when counting letters.\nThe function should ignore\
    \ non-letter characters and return a dictionary with the letters as keys and the\
    \ number of times they appear in the string as values.\nThe function should ignore\
    \ case when counting letters.\nThe function should ignore non-letter characters\
    \ and return a dictionary with the letters as keys and the number of times they\
    \ appear in the string as values.\nThe function should ignore case when counting\
    \ letters.\nThe function should ignore non-letter characters and return a dictionary\
    \ with the letters as keys and the number of times they appear in the string as\
    \ values.\nThe function should ignore case when counting letters.\nThe function\
    \ should ignore non-letter characters and return a dictionary with the letters\
    \ as keys and the number of times they appear in the string as values.\nThe function\
    \ should ignore case when counting letters.\nThe function should ignore non-letter\
    \ characters and return a dictionary with the letters as keys and the number of\
    \ times they ", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of characters in the string\nthat are\
    \ not in the alphabet (uppercase or lowercase).\nExample: histogram(\"a b c a\
    \ b\") returns 3.", "    histogram = Dict{String, Int64}()\n    for letter in\
    \ split(test)\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    return histogram\nend\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nThe function should ignore all\
    \ punctuation and only count the letters a-z.\nThe function should ignore all\
    \ numbers and only count the letters a-z.\nThe function should ignore all special\
    \ characters and only count the letters a-z.\nThe function should ignore all whitespace\
    \ and only count the letters a-z.\nThe function should ignore all words that are\
    \ shorter than 3 letters.\nThe function should ignore all words that are longer\
    \ than 20 letters.\nThe function should ignore all words that are longer than\
    \ 3 letters and shorter than 20 letters.\nThe function should ignore all words\
    \ that are longer than 3 letters and shorter than 20 letters and that contain\
    \ numbers or special characters.\nThe function should ignore all words that are\
    \ longer than 3 letters and shorter than 20 letters and that contain numbers or\
    \ special characters and that contain whitespace.\nThe function should ignore\
    \ all words that are longer than 3 letters and shorter than 20 letters and that\
    \ contain numbers or special characters and that contain whitespace and that contain\
    \ punctuation.\nThe function should ignore all words that are longer than 3 letters\
    \ and shorter than 20 letters and that contain numbers or special characters and\
    \ that contain whitespace and that contain punctuation and that contain numbers.\n\
    The function should ignore all words that are longer than 3 letters and shorter\
    \ than 20 letters and that contain numbers or special characters and that contain\
    \ whitespace and that contain punctuation and that contain numbers and that contain\
    \ special characters.\nThe function should ignore all words that are longer than\
    \ 3 letters and shorter than 20 letters and that contain numbers or special characters\
    \ and that contain whitespace and that contain punctuation and that contain numbers\
    \ and that contain special characters and that contain whitespace.\nThe function\
    \ should ignore all words that are longer than 3 letters and shorter than 20 letters\
    \ and that contain numbers or special characters and that contain whitespace and\
    \ that contain punctuation and that contain numbers and that contain special characters\
    \ and that contain whitespace and that contain punctuation.\nThe function should\
    \ ignore ", "    histogram = Dict{String, Int64}()\n    \n    for letter in split(test)\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not letters.", " \
    \   histogram = Dict{String, Int64}()\n    for letter in split(test)\n       \
    \ histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of unique\
    \ characters in the string.", "    histogram = Dict()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend", "    histogram = Dict{String, Int64}()\n    for letter\
    \ in split(test)\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n\
    \    for letter in split(test)\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    return histogram\nend\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes a string as input and returns a dictionary of the letter\
    \ with the most repetition and containing the corresponding count.\nIf several\
    \ letters have the same occurrence, return all of them.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are uppercase letters.",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string and returns a\
    \ dictionary with the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.", " \
    \   histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns a dictionary with the most repeated letter and its count. \n   \
    \ \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"a\" => 2, \"b\" =>\
    \ 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2, \"b\" => 2)\n   \
    \ >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>> histogram(\"\")\n\
    \    Dict()", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns a dictionary with the most frequent\
    \ letters.\nThe function should ignore the case of the letters.", "    histogram\
    \ = Dict()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of words in it.",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not spaces.", " \
    \   histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ >= 1 else 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of words in the string.\
    \ \nThe function should ignore all punctuation marks and split on whitespace.",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        if histogram.has_key(letter)\n            histogram[letter]\
    \ += 1\n        else\n            histogram[letter] = 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a dictionary of the letters occurring in the string with the number of times\
    \ each letter occurs.", "    histogram = Dict{String, Int64}()\n    letters =\
    \ split(test)\n    for letter in letters\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns a string with all the letters replaced by their first letter.\n\
    \    \n    Example:\n    >>> first_letter(\"a b c\")\n    \"a\"\n    >>> first_letter(\"\
    a b b a\")\n    \"a\"\n    >>> first_letter(\"a b c a b\")\n    \"a\"\n    >>>\
    \ first_letter(\"b b b b a\")\n    \"b\"\n    >>> first_letter(\"\")\n    \"\"",
  "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    end\n    histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function called most_frequent() that takes\
    \ a string and returns the most frequent letter in the string. \nIf there are\
    \ several letters with the same frequency, return all of them. \nIf there are\
    \ no letters in the string, return an empty string.", "    histogram = Dict{String,\
    \ Int64}()\n    for c in test\n        if histogram[c] == 0\n            histogram[c]\
    \ = 1\n        else\n            histogram[c] += 1\n        end\n    end\n   \
    \ return histogram\nend", "    histogram = Dict{String, Int64}()\n    for letter\
    \ in split(test)\n        histogram[letter] = get(histogram, letter, 0) + 1\n\
    \    return histogram\nend", "    histogram = Dict{String, Int64}()\n    for c\
    \ in test\n        if histogram[c] == 0\n            histogram[c] = 1\n      \
    \  else\n            histogram[c] += 1\n        end\n    end\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a dictionary of the\
    \ letter with the most repetition and containing the corresponding count.\nIf\
    \ several letters have the same occurrence, return all of them.\nExample: histogram(\"\
    a b c\")\nDict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\nhistogram(\"a b b a\")\nDict(\"\
    a\" => 2, \"b\" => 2)\nhistogram(\"a b c a b\")\nDict(\"a\" => 2, \"b\" => 2)\n\
    histogram(\"b b b b a\")\nDict(\"b\" => 4)\nhistogram(\"\")\nDict()", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns a dictionary of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.", "    histogram\
    \ = Dict()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of letters\
    \ in the string that occur more than once.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string.\nWrite a function that takes a string and returns the number of uppercase\
    \ letters in the string.\nWrite a function that takes a string and returns the\
    \ number of lowercase letters in the string.\nWrite a function that takes a string\
    \ and returns the number of digits (0-9) in the string.\nWrite a function that\
    \ takes a string and returns the number of punctuation marks (!,.,;,:) in the\
    \ string.\nWrite a function that takes a string and returns the number of words\
    \ in the string that contain at least one uppercase letter.\nWrite a function\
    \ that takes a string and returns the number of words in the string that contain\
    \ at least one lowercase letter.\nWrite a function that takes a string and returns\
    \ the number of words in the string that contain at least one digit.\nWrite a\
    \ function that takes a string and returns the number of words in the string that\
    \ contain at least one punctuation mark.\nWrite a function that takes a string\
    \ and returns the number of words in the string that contain at least one word\
    \ that contains a lowercase letter.\nWrite a function that takes a string and\
    \ returns the number of words in the string that contain at least one word that\
    \ contains a digit.\nWrite a function that takes a string and returns the number\
    \ of words in the string that contain at least one word that contains a punctuation\
    \ mark.\nWrite a function that takes a string and returns the number of words\
    \ in the string that contain at least one word that contains a word that contains\
    \ a lowercase letter.\nWrite a function that takes a string and returns the number\
    \ of words in the string that contain at least one word that contains a word that\
    \ contains a digit.\nWrite a function that takes a string and returns the number\
    \ of words in the string that contain at least one word that contains a word that\
    \ contains a punctuation mark.\nWrite a function that takes a string and returns\
    \ the number of words in the string that contain at least one word that contains\
    \ a word that contains a word that contains a lowercase letter.\nWrite a function\
    \ that takes a string and returns the number of words in the string that contain\
    \ at least one word that contains a word that contains a word that contains a\
    \ digit.\nWrite a function that takes a string and returns the number of words\
    \ in the string that contain at least one word that contains a word that contains\
    \ a word that contains a punctu", "    histogram = Dict{String, Int64}()\n   \
    \ letters = split(test)\n    letters.reduce((acc, letter) =>\n        letter.count(letter)\
    \ > (acc[letter] ? acc[letter] : acc[letter] = 1), histogram)\n    return histogram\n\
    end", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for\
    \ letter in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n\
    \    end\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function count_letters(test::String)\
    \ which returns a dictionary with the letter as key and the number of times it\
    \ appears as value.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        if histogram.has_key(letter)\n\
    \            histogram[letter] += 1 \n        else\n            histogram[letter]\
    \ = 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of words in the string.\nThe function should\
    \ ignore all non-word characters (spaces, punctuation, etc.).\nThe function should\
    \ ignore all empty words.\nThe function should ignore all words that are shorter\
    \ than 3 characters.\nThe function should ignore all words that are longer than\
    \ 50 characters.\nThe function should ignore all words that are longer than 50\
    \ characters and have more than 2 repetitions.\nThe function should ignore all\
    \ words that are longer than 50 characters and have more than 2 repetitions.\n\
    The function should ignore all words that are longer than 50 characters and have\
    \ more than 2 repetitions.\nThe function should ignore all words that are longer\
    \ than 50 characters and have more than 2 repetitions.\nThe function should ignore\
    \ all words that are longer than 50 characters and have more than 2 repetitions.\n\
    The function should ignore all words that are longer than 50 characters and have\
    \ more than 2 repetitions.\nThe function should ignore all words that are longer\
    \ than 50 characters and have more than 2 repetitions.\nThe function should ignore\
    \ all words that are longer than 50 characters and have more than 2 repetitions.\n\
    The function should ignore all words that are longer than 50 characters and have\
    \ more than 2 repetitions.\nThe function should ignore all words that are longer\
    \ than 50 characters and have more than 2 repetitions.\nThe function should ignore\
    \ all words that are longer than 50 characters and have more than 2 repetitions.\n\
    The function should ignore all words that are longer than 50 characters and have\
    \ more than 2 repetitions.\nThe function should ignore all words that are longer\
    \ than 50 characters and have more than 2 repetitions.\nThe function should ignore\
    \ all words that are longer than 50 characters and have more than 2 repetitions.\n\
    The function should ignore all words that are longer than 50 characters and have\
    \ more than 2 repetitions.\nThe function should ignore all words that are longer\
    \ than 50 characters and have more than 2 repetitions.\nThe function should ignore\
    \ all words that are longer than 50 characters and have more than 2 repetitions.\n\
    The function should ignore all words that are longer than 50 characters and have\
    \ more than 2 repetitions.\nThe function should ignore all words that are longer\
    \ than 50 characters and have more than 2 repetitions.\nThe function should ignore\
    \ all words that are longer than 50 character", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string.\
    \ \nThe function should ignore all punctuation and only count the letters a-z.",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a string with the first letter of each word capitalized.", "    histogram =\
    \ Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns a string with the first letter of each word capitalized.", "   \
    \ histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"a\
    \ b c\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of times each letter appears in the string.\nThe function\
    \ should ignore case and special characters (like !@#$%^&*()_+-={}[]|;:'\",<>?/)\
    \ and return an empty dictionary if there are no letters.", "    histogram = Dict()\n\
    \    for letter in split(test)\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the number of words in the string.\nThe function should ignore all punctuation\
    \ and only count the letters a-z.\nThe function should ignore all numbers and\
    \ only count the letters a-z.\nThe function should ignore all special characters\
    \ and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a dictionary with the most frequent letters.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise\nWrite a\
    \ function called count_letters that takes a string and returns a dictionary with\
    \ the letter as the key and the number of times the letter appears as the value.",
  "    histogram = Dict{String, Int64}()\n    for c in split(test)\n        histogram[c]\
    \ = histogram.get(c, 0) + 1\n    histogram\nend\n</cell>\n<text>\nExercise 10\n\
    Write a function that takes a string and returns the number of words in it.",
  "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns the\
    \ number of words in the string.\n    \n    Example:\n    >>> count_words(\"a\
    \ b c a b c\")\n    3\n    >>> count_words(\"a b b a b c\")\n    4\n    >>> count_words(\"\
    a b c a b c a b c\")\n    7\n    >>> count_words(\"a b c a b c a b c a b c\")\n\
    \    8\n    >>> count_words(\"a b c a b c a b c a b c a b c\")\n    10\n    >>>\
    \ count_words(\"a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a ", "    histogram = Dict{String, Int64}()\n    for c in test\n\
    \        histogram[c] = histogram.get(c, 0) + 1\n    end\n    histogram\nend\n\
    </cell>\n<code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are\nnot spaces.", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    letters.sort!()\n    letters.reverse!()\n    \n    for letter\
    \ in letters\n        if histogram.has_key?(letter)\n            histogram[letter]\
    \ += 1\n        else\n            histogram[letter] = 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each letter appears in the string.\nThe function should\
    \ ignore non-letter characters (such as punctuation).\nThe function should ignore\
    \ case (uppercase and lowercase).\nThe function should ignore non-letter characters\
    \ (such as punctuation).\nThe function should ignore case (uppercase and lowercase).\n\
    The function should ignore non-letter characters (such as punctuation).\nThe function\
    \ should ignore case (uppercase and lowercase).\nThe function should ignore non-letter\
    \ characters (such as punctuation).\nThe function should ignore case (uppercase\
    \ and lowercase).\nThe function should ignore non-letter characters (such as punctuation).\n\
    The function should ignore case (uppercase and lowercase).\nThe function should\
    \ ignore non-letter characters (such as punctuation).\nThe function should ignore\
    \ case (uppercase and lowercase).\nThe function should ignore non-letter characters\
    \ (such as punctuation).\nThe function should ignore case (uppercase and lowercase).\n\
    The function should ignore non-letter characters (such as punctuation).\nThe function\
    \ should ignore case (uppercase and lowercase).\nThe function should ignore non-letter\
    \ characters (such as punctuation).\nThe function should ignore case (uppercase\
    \ and lowercase).\nThe function should ignore non-letter characters (such as punctuation).\n\
    The function should ignore case (uppercase and lowercase).\nThe function should\
    \ ignore non-letter characters (such as punctuation).\nThe function should ignore\
    \ case (uppercase and lowercase).\nThe function should ignore non-letter characters\
    \ (such as punctuation).\nThe function should ignore case (uppercase and lowercase).\n\
    The function should ignore non-letter characters (such as punctuation).\nThe function\
    \ should ignore case (uppercase and lowercase).\nThe function should ignore non-letter\
    \ characters (such as ", "    histogram = Dict{String, Int64}()\n    letters =\
    \ split(test)\n    for letter in letters\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of occurrences of each\
    \ letter in the string.\nWrite a function that takes a string and returns the\
    \ letter with the most occurrences.\nWrite a function that takes a string and\
    \ returns the letter with the least occurrences.\nWrite a function that takes\
    \ a string and returns the letter with the most and least occurrences.\nWrite\
    \ a function that takes a string and returns the letter with the most and least\
    \ occurrences.\nWrite a function that takes a string and returns the letter with\
    \ the most and least occurrences.\nWrite a function that takes a string and returns\
    \ the letter with the most and least occurrences.\nWrite a function that takes\
    \ a string and returns the letter with the most and least occurrences.\nWrite\
    \ a function that takes a string and returns the letter with the most and least\
    \ occurrences.\nWrite a function that takes a string and returns the letter with\
    \ the most and least occurrences.\nWrite a function that takes a string and returns\
    \ the letter with the most and least occurrences.\nWrite a function that takes\
    \ a string and returns the letter with the most and least occurrences.\nWrite\
    \ a function that takes a string and returns the letter with the most and least\
    \ occurrences.\nWrite a function that takes a string and returns the letter with\
    \ the most and least occurrences.\nWrite a function that takes a string and returns\
    \ the letter with the most and least occurrences.\nWrite a function that takes\
    \ a string and returns the letter with the most and least occurrences.\nWrite\
    \ a function that takes a string and returns the letter with the most and least\
    \ occurrences.\nWrite a function that takes a string and returns the letter with\
    \ the most and least occurrences.\nWrite a function that takes a string and returns\
    \ the letter with the most and least occurrences.\nWrite a function that takes\
    \ a string and returns the letter with the most and least occurrences.\nWrite\
    \ a function that takes a string and returns the letter with the most and least\
    \ occurrences.\nWrite a function that takes a string and returns the letter with\
    \ the most and least occurrences.\nWrite a function that takes a string and returns\
    \ the letter with the most and least occurrences.\nWrite a function that takes\
    \ a string and returns the letter with the most and least occurrences.\nWrite\
    \ a function that takes a string and returns the letter with the most and least\
    \ occurrences.\nWrite a function that ", "    histogram = Dict{String, Int64}()\n\
    \    for letter in split(test)\n        if histogram[letter] == 0\n          \
    \  histogram[letter] = 1\n        else\n            histogram[letter] += 1\n \
    \       end\n    end\n    return histogram\nend", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string. \nWrite a function that\
    \ takes a string and returns the number of words in the string. \nWrite a function\
    \ that takes a string and returns the number of sentences in the string. \nWrite\
    \ a function that takes a string and returns the number of uppercase letters in\
    \ the string. \nWrite a function that takes a string and returns the number of\
    \ lowercase letters in the string. \nWrite a function that takes a string and\
    \ returns the number of digits (0-9) in the string. \nWrite a function that takes\
    \ a string and returns the number of punctuation marks (!,.,?) in it. \nWrite\
    \ a function that takes a string and returns the number of words that are not\
    \ in the dictionary. \nWrite a function that takes a string and returns the number\
    \ of sentences that are not in the dictionary. \nWrite a function that takes a\
    \ string and returns the number of uppercase letters that are not in the dictionary.\
    \ \nWrite a function that takes a string and returns the number of lowercase letters\
    \ that are not in the dictionary. \nWrite a function that takes a string and returns\
    \ the number of digits that are not in the dictionary. \nWrite a function that\
    \ takes a string and returns the number of punctuation marks that are not in the\
    \ dictionary. \nWrite a function that takes a string and returns the number of\
    \ words that are not in the dictionary and that contain at least one digit. \n\
    Write a function that takes a string and returns the number of sentences that\
    \ are not in the dictionary and that contain at least one digit. \nWrite a function\
    \ that takes a string and returns the number of uppercase letters that are not\
    \ in the dictionary and that contain at least one digit. \nWrite a function that\
    \ takes a string and returns the number of lowercase letters that are not in the\
    \ dictionary and that contain at least one digit. \nWrite a function that takes\
    \ a string and returns the number of digits that are not in the dictionary and\
    \ that contain at least one digit. \nWrite a function that takes a string and\
    \ returns the number of punctuation marks that are not in the dictionary and that\
    \ contain at least one digit. \nWrite a function that takes a string and returns\
    \ the number of words that are not in the dictionary and that contain at least\
    \ one digit. and that contain at least one uppercase letter. \nWrite a function\
    \ that takes a string and returns the number of sentences that are not in the\
    \ dictionary and that contain at least one digit. and that contain at least one\
    \ uppercase letter. \nWrite a function that takes a string and returns the number\
    \ of uppercase letters that are not in the dictionary and that contain at least\
    \ one digit. and that contain at least one uppercase letter. \nWrite a function\
    \ that takes a string and returns the number of lowercase letters that are not\
    \ in the dictionary and that contain at least one digit. and that contain at least\
    \ one uppercase letter. \nWrite a function that takes a string and returns the\
    \ number of digits that are not in the dictionary ", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of times each letter appears in the string.\nWrite a\
    \ function that takes a string and returns the most frequent letter in the string.\n\
    Write a function that takes a string and returns the letter with the highest occurrence\
    \ in the string.\nWrite a function that takes a string and returns the letter\
    \ with the lowest occurrence in the string.\nWrite a function that takes a string\
    \ and returns the letter with the second lowest occurrence in the string.\nWrite\
    \ a function that takes a string and returns the letter with the third lowest\
    \ occurrence in the string.\nWrite a function that takes a string and returns\
    \ the letter with the fourth lowest occurrence in the string.\nWrite a function\
    \ that takes a string and returns the letter with the fifth lowest occurrence\
    \ in the string.\nWrite a function that takes a string and returns the letter\
    \ with the sixth lowest occurrence in the string.\nWrite a function that takes\
    \ a string and returns the letter with the seventh lowest occurrence in the string.\n\
    Write a function that takes a string and returns the letter with the eighth lowest\
    \ occurrence in the string.\nWrite a function that takes a string and returns\
    \ the letter with the ninth lowest occurrence in the string.\nWrite a function\
    \ that takes a string and returns the letter with the tenth lowest occurrence\
    \ in the string.\nWrite a function that takes a string and returns the letter\
    \ with the eleventh lowest occurrence in the string.\nWrite a function that takes\
    \ a string and returns the letter with the twelfth lowest occurrence in the string.\n\
    Write a function that takes a string and returns the letter with the thirteenth\
    \ lowest occurrence in the string.\nWrite a function that takes a string and returns\
    \ the letter with the fourteenth lowest occurrence in the string.\nWrite a function\
    \ that takes a string and returns the letter with the fifteenth lowest occurrence\
    \ in the string.\nWrite a function that takes a string and returns the letter\
    \ with the sixteenth lowest occurrence in the string.\nWrite a function that takes\
    \ a string and returns the letter with the seventeenth lowest occurrence in the\
    \ string.\nWrite a function that takes a string and returns the letter with the\
    \ eighteenth lowest occurrence in the string.\nWrite a function that takes a string\
    \ and returns the letter with the nineteenth lowest occurrence in the string.\n\
    Write a function that takes a string and returns the letter with the ", "    histogram\
    \ = Dict()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nThe function should ignore all punctuation and only count the\
    \ letters a-z.\nThe function should ignore all empty strings.\nThe function should\
    \ ignore all spaces.\nThe function should ignore all non-alphabetic characters.\n\
    The function should ignore all words that are shorter than 3 characters.\nThe\
    \ function should ignore all words that are longer than 20 characters.\nThe function\
    \ should ignore all words that are longer than 3 characters and shorter than 20\
    \ characters.\nThe function should ignore all words that are longer than 3 characters\
    \ and shorter than 20 characters and that contain all letters of the alphabet.\n\
    The function should ignore all words that are longer than 3 characters and shorter\
    \ than 20 characters and that contain at least one letter of the alphabet.\nThe\
    \ function should ignore all words that are longer than 3 characters and shorter\
    \ than 20 characters and that contain at least one letter of the alphabet and\
    \ that contain at least one digit.\nThe function should ignore all words that\
    \ are longer than 3 characters and shorter than 20 characters and that contain\
    \ at least one letter of the alphabet and that contain at least one digit and\
    \ that contain at least one letter.\nThe function should ignore all words that\
    \ are longer than 3 characters and shorter than 20 characters and that contain\
    \ at least one letter of the alphabet and that contain at least one digit and\
    \ that contain at least one letter and that contain at least one letter.\nThe\
    \ function should ignore all words that are longer than 3 characters and shorter\
    \ than 20 characters and that contain at least one letter of the alphabet and\
    \ that contain at least one digit and that contain at least one letter and that\
    \ contain at least one letter and that contain at least one letter.\nThe function\
    \ should ignore all words that are longer than 3 characters and shorter than 20\
    \ characters and that contain at least one letter of the alphabet and that contain\
    \ at least one digit and that contain at least one letter and that contain at\
    \ least one letter and that contain at least one letter and that contain at least\
    \ one letter.\nThe function should ignore all words that are longer than 3 characters\
    \ and shorter than 20 characters and that contain at least one letter of the alphabet\
    \ and that contain at least one digit and ", "    histogram = Dict()\n    letters\
    \ = split(test)\n    letters.sort!()\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of words\
    \ in it.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\n\
    \    end\n    return histogram\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are not spaces.", "    histogram = Dict{String, Int64}()\n    for c in split(test)\n\
    \        histogram[c] = get(histogram, c, 0) + 1\n    return histogram\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nThe function should ignore all punctuation\
    \ and only count the letters a-z.\nThe function should ignore all empty words.\n\
    The function should ignore all words that are shorter than 3 characters.\nThe\
    \ function should ignore all words that are longer than 20 characters.\nThe function\
    \ should ignore all words that are longer than 3 characters and shorter than 20\
    \ characters.\nThe function should ignore all words that are longer than 3 characters\
    \ and shorter than 20 characters and that contain digits. \nThe function should\
    \ ignore all words that are longer than 3 characters and shorter than 20 characters\
    \ and that contain digits.\nThe function should ignore all words that are longer\
    \ than 3 characters and shorter than 20 characters and that contain digits and\
    \ that contain uppercase letters.\nThe function should ignore all words that are\
    \ longer than 3 characters and shorter than 20 characters and that contain digits\
    \ and that contain uppercase letters.\nThe function should ignore all words that\
    \ are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than ", "    histogram = Dict()\n\
    \    for c in split(test)\n        histogram[c] = get(histogram, c, 0) + 1\n \
    \   return histogram\nend", "    histogram = Dict{String, Int64}()\n    for letter\
    \ in split(test)\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    return histogram\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string and returns the number of words in the string.\n\
    The function should ignore all punctuation and only count the letters a-z.\nThe\
    \ function should ignore all numbers and only count the letters a-z.\nThe function\
    \ should ignore all special characters and only count the letters a-z.\nThe function\
    \ should ignore all whitespace and only count the letters a-z.\nThe function should\
    \ ignore all words that are only one character long.\nThe function should ignore\
    \ all words that are only one character long.\nThe function should ignore all\
    \ words that are only one character long.\nThe function should ignore all words\
    \ that are only one character long.\nThe function should ignore all words that\
    \ are only one character long.\nThe function should ignore all words that are\
    \ only one character long.\nThe function should ignore all words that are only\
    \ one character long.\nThe function should ignore all words that are only one\
    \ character long.\nThe function should ignore all words that are only one character\
    \ long.\nThe function should ignore all words that are only one character long.\n\
    The function should ignore all words that are only one character long.\nThe function\
    \ should ignore all words that are only one character long.\nThe function should\
    \ ignore all words that are only one character long.\nThe function should ignore\
    \ all words that are only one character long.\nThe function should ignore all\
    \ words that are only one character long.\nThe function should ignore all words\
    \ that are only one character long.\nThe function should ignore all words that\
    \ are only one character long.\nThe function should ignore all words that are\
    \ only one character long.\nThe function should ignore all words that are only\
    \ one character long.\nThe function should ignore all words that are only one\
    \ character long.\nThe function should ignore all words that are only one character\
    \ long.\nThe function should ignore all words that are only one character long.\n\
    The function should ignore all words that are only one character long.\nThe function\
    \ should ignore all words that are only one character long.\nThe function should\
    \ ignore all words that are only one character long.\nThe function should ignore\
    \ all words that are only one character long.\nThe function should ignore all\
    \ words that are only one character long.\nThe function should ignore all words\
    \ that are only one character long.\nThe function should ignore all words that\
    \ are only one character long.\nThe function should ignore all words that are\
    \ only one character long.\nThe function should ignore all words that are only\
    \ one character long.\nThe function should ignore all words that are only one\
    \ character long.\nThe function should ignore all word", "    histogram = Dict{String,\
    \ Int64}()\n    for letter in split(test)\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns a string with the first letter of each word capitalized.",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a\
    \ b c\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of characters in that string that are not spaces.", "   \
    \ histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    end\n    return histogram\nend", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend", "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    letters = sort(letters)\n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns a dictionary with the\
    \ most frequent letters.", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<text>\nExercise 1\nWrite a function that takes a string\
    \ and returns the number of words in the string.", "    histogram = Dict()\n \
    \   letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 10\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not letters.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string. \nThe function should ignore all non-word characters (spaces,\
    \ punctuation, etc.).\nThe function should ignore all empty strings.\nThe function\
    \ should ignore all strings with only one word.\nThe function should ignore all\
    \ strings with only one word.\nThe function should ignore all strings with only\
    \ one word.\nThe function should ignore all strings with only one word.\nThe function\
    \ should ignore all strings with only one word.\nThe function should ignore all\
    \ strings with only one word.\nThe function should ignore all strings with only\
    \ one word.\nThe function should ignore all strings with only one word.\nThe function\
    \ should ignore all strings with only one word.\nThe function should ignore all\
    \ strings with only one word.\nThe function should ignore all strings with only\
    \ one word.\nThe function should ignore all strings with only one word.\nThe function\
    \ should ignore all strings with only one word.\nThe function should ignore all\
    \ strings with only one word.\nThe function should ignore all strings with only\
    \ one word.\nThe function should ignore all strings with only one word.\nThe function\
    \ should ignore all strings with only one word.\nThe function should ignore all\
    \ strings with only one word.\nThe function should ignore all strings with only\
    \ one word.\nThe function should ignore all strings with only one word.\nThe function\
    \ should ignore all strings with only one word.\nThe function should ignore all\
    \ strings with only one word.\nThe function should ignore all strings with only\
    \ one word.\nThe function should ignore all strings with only one word.\nThe function\
    \ should ignore all strings with only one word.\nThe function should ignore all\
    \ strings with only one word.\nThe function should ignore all strings with only\
    \ one word.\nThe function should ignore all strings with only one word.\nThe function\
    \ should ignore all strings with only one word.\nThe function should ignore all\
    \ strings with only one word.\nThe function should ignore all strings with only\
    \ one word.\nThe function should ignore all strings with only one word.\nThe function\
    \ should ignore all strings with only one word.\n", "    histogram = Dict()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend", "    histogram\
    \ = Dict{String, Int64}()\n    for letter in split(test)\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nIf the string does not contain any words, return 0.\nIf the string\
    \ contains only spaces, return 0.\nIf the string contains only punctuation, return\
    \ 0.\nIf the string contains only letters, return 0.\nIf the string contains only\
    \ digits, return 0.\nIf the string contains only uppercase letters, return 0.\n\
    If the string contains only lowercase letters, return 0.\nIf the string contains\
    \ only numbers, return 0.\nIf the string contains only uppercase and lowercase\
    \ letters, return 0.\nIf the string contains only uppercase and numbers, return\
    \ 0.\nIf the string contains only lowercase and numbers, return 0.\nIf the string\
    \ contains only uppercase and lowercase and numbers, return 0.\nIf the string\
    \ contains only uppercase and numbers and lowercase letters, return 0.\nIf the\
    \ string contains only lowercase and numbers and uppercase letters, return 0.\n\
    If the string contains only numbers and uppercase letters, return 0.\nIf the string\
    \ contains only numbers and lowercase letters, return 0.\nIf the string contains\
    \ only numbers and punctuation, return 0.\nIf the string contains only numbers\
    \ and letters, return 0.\nIf the string contains only numbers and digits, return\
    \ 0.\nIf the string contains only numbers and uppercase and lowercase letters,\
    \ return 0.\nIf the string contains only numbers and uppercase and numbers, return\
    \ 0.\nIf the string contains only numbers and lowercase and numbers, return 0.\n\
    If the string contains only numbers and punctuation, return 0.\nIf the string\
    \ contains only numbers and letters, return 0.\nIf the string contains only numbers\
    \ and digits, return 0.\nIf the string contains only numbers and uppercase and\
    \ lowercase letters, return 0.\nIf the string contains only numbers and uppercase\
    \ and numbers, return 0.\nIf the string contains only numbers and lowercase and\
    \ numbers, return 0.\nIf the string contains only numbers and punctuation, return\
    \ 0.\nIf the string contains only numbers and letters, return 0.\nIf the string\
    \ contains only numbers and digits, return 0.\nIf the string contains only numbers\
    \ and uppercase and lowercase letters, return 0.\nIf the string contains only\
    \ numbers and uppercase and numbers, return 0.\nIf the string contains only numbers\
    \ and lowercase and numbers, return 0.\nIf the string contains only numbers and\
    \ punctuation, return 0.\nIf the string contains only numbers and letters, return\
    \ 0.\nIf the string contains ", "    histogram = Dict()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns a dictionary of the letter with the most repetition and containing\
    \ the corresponding count.\nIf several letters have the same occurrence, return\
    \ all of them.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are\nnot letters.", "    histogram\
    \ = Dict{String, Int64}()\n    for letter in split(test)\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of times each letter appears in the string.", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not alphabetic characters. \nFor example \"a\" has 1\
    \ character, \"b\" has 2 characters, \"c\" has 1 character, \"d\" has 0 characters\
    \ and \"e\" has 0 characters.", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        if histogram[letter] == 0\n\
    \            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string with the first\
    \ letter of each word capitalized.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nThe function should ignore all punctuation and only count the\
    \ letters a-z.\nThe function should ignore all empty strings.\nThe function should\
    \ ignore all whitespace.\nThe function should ignore all non-letter characters.\n\
    The function should ignore all non-letter characters and whitespace.\nThe function\
    \ should ignore all non-letter characters and whitespace.\nThe function should\
    \ ignore all non-letter characters and whitespace.\nThe function should ignore\
    \ all non-letter characters and whitespace.\nThe function should ignore all non-letter\
    \ characters and whitespace.\nThe function should ignore all non-letter characters\
    \ and whitespace.\nThe function should ignore all non-letter characters and whitespace.\n\
    The function should ignore all non-letter characters and whitespace.\nThe function\
    \ should ignore all non-letter characters and whitespace.\nThe function should\
    \ ignore all non-letter characters and whitespace.\nThe function should ignore\
    \ all non-letter characters and whitespace.\nThe function should ignore all non-letter\
    \ characters and whitespace.\nThe function should ignore all non-letter characters\
    \ and whitespace.\nThe function should ignore all non-letter characters and whitespace.\n\
    The function should ignore all non-letter characters and whitespace.\nThe function\
    \ should ignore all non-letter characters and whitespace.\nThe function should\
    \ ignore all non-letter characters and whitespace.\nThe function should ignore\
    \ all non-letter characters and whitespace.\nThe function should ignore all non-letter\
    \ characters and whitespace.\nThe function should ignore all non-letter characters\
    \ and whitespace.\nThe function should ignore all non-letter characters and whitespace.\n\
    The function should ignore all non-letter characters and whitespace.\nThe function\
    \ should ignore all non-letter characters and whitespace.\nThe function should\
    \ ignore all non-letter characters and whitespace.\nThe function should ignore\
    \ all non-letter characters and whitespace.\nThe function should ignore all non-letter\
    \ characters and whitespace.\nThe function should ignore all non-letter characters\
    \ and ", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n \
    \   for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in that string that are\nupper case. For example, histogram(\"\
    A B C\") should return 3.", "    histogram = Dict()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for\
    \ letter in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n\
    \    end\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function named \"histogram\" that takes a string and\
    \ returns a dictionary with the letter with the most repetition and containing\
    \ the corresponding count.\nIf several letters have the same occurrence, return\
    \ all of them.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not letters.", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        if histogram[letter] == 0\n\
    \            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not alphabetic characters.\
    \ \nExample: \n>>> count_non_alpha(\"a b c\")\n3\n>>> count_non_alpha(\"a b b\
    \ a\")\n4\n>>> count_non_alpha(\"b b b b a\")\n4\n>>> count_non_alpha(\"\")\n0",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1\n    end\n   \
    \ histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function count_letters(test::String) which takes a string\
    \ and returns the number of times each letter appears in the string.", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend", "    histogram = Dict()\n    letters = split(test)\n    for\
    \ letter in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n\
    \    end\n    histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are not\
    \ letters.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    return histogram\nend", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] + 1\n    end\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nThe function should ignore all punctuation and only count the\
    \ letters a-z.\nThe function should ignore all empty strings.\nThe function should\
    \ ignore all words that are shorter than 3 characters.\nThe function should ignore\
    \ all words that are longer than 20 characters.\nThe function should ignore all\
    \ words that are longer than 3 characters and shorter than 20 characters.\nThe\
    \ function should ignore all words that are longer than 3 characters and shorter\
    \ than 20 characters and that contain only letters a-z.\nThe function should ignore\
    \ all words that are longer than 3 characters and shorter than 20 characters and\
    \ that contain only letters a-z and ignore all words that are longer than 20 characters.\n\
    The function should ignore all words that are longer than 3 characters and shorter\
    \ than 20 characters and that contain only letters a-z and ignore all words that\
    \ are longer than 20 characters and that contain only letters a-z.\nThe function\
    \ should ignore all words that are longer than 3 characters and shorter than 20\
    \ characters and that contain only letters a-z and ignore all words that are longer\
    \ than 20 characters and that contain only letters a-z and ignore all words that\
    \ are longer than 3 characters.\nThe function should ignore all words that are\
    \ longer than 3 characters and shorter than 20 characters and that contain only\
    \ letters a-z and ignore all words that are longer than 20 characters and that\
    \ contain only letters a-z and ignore all words that are longer than 3 characters\
    \ and shorter than 20 characters.\nThe function should ignore all words that are\
    \ longer than 3 characters and shorter than 20 characters and that contain only\
    \ letters a-z and ignore all words that are longer than 20 characters and that\
    \ contain only letters a-z and ignore all words that are longer than 3 characters\
    \ and shorter than 20 characters and that contain only letters a-z.\nThe function\
    \ should ignore all words that are longer than 3 characters and shorter than 20\
    \ characters and that contain only letters a-z and ignore all words that are longer\
    \ than 20 characters and that contain only letters a-z and ignore all words that\
    \ are longer than 3 characters and shorter than 20 characters and that contain\
    \ only letters a-z and ignore all words that are longer than 3 characters and\
    \ shorter than 20 characters and that contain only letters a-z.\nThe function\
    \ should ignore all words that are longer than 3 characters and shorter than 20\
    \ characters and that contain only letters a-z", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string and returns the most frequent letter\
    \ in it.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    end\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not alphabetic.\
    \ \nFor example \"a\" has one alphabetic character and no other characters. \n\
    \"b\" has two alphabetic characters and no other characters. \n\"c\" has three\
    \ alphabetic characters and no other characters. \n\"d\" has four alphabetic characters\
    \ and no other characters. \n\"e\" has five alphabetic characters and no other\
    \ characters. \n\"f\" has six alphabetic characters and no other characters. \n\
    \"g\" has seven alphabetic characters and no other characters. \n\"h\" has eight\
    \ alphabetic characters and no other characters. \n\"i\" has nine alphabetic characters\
    \ and no other characters. \n\"j\" has ten alphabetic characters and no other\
    \ characters. \n\"k\" has eleven alphabetic characters and no other characters.\
    \ \n\"l\" has twelve alphabetic characters and no other characters. \n\"m\" has\
    \ thirteen alphabetic characters and no other characters. \n\"n\" has fourteen\
    \ alphabetic characters and no other characters. \n\"o\" has fifteen alphabetic\
    \ characters and no other characters. \n\"p\" has sixteen alphabetic characters\
    \ and no other characters. \n\"q\" has seventeen alphabetic characters and no\
    \ other characters. \n\"r\" has eighteen alphabetic characters and no other characters.\
    \ \n\"s\" has nineteen alphabetic characters and no other characters. \n\"t\"\
    \ has twenty alphabetic characters and no other characters. \n\"u\" has twenty-one\
    \ alphabetic characters and no other characters. \n\"v", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns a string with the first letter of each word capitalized.", "   \
    \ histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend", "    histogram = Dict{String, Int64}()\n    for c\
    \ in split(test)\n        if !haskey(histogram, c)\n            histogram[c] =\
    \ 0\n        end\n        histogram[c] += 1\n    end\n    return histogram\nend\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not letters.", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    histogram\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of occurrences of each\
    \ letter in the string. \nThe function should return a dictionary of the letter\
    \ with the most occurrences and containing the corresponding count.\nIf several\
    \ letters have the same occurrence, return all of them.\nExample: histogram(\"\
    a b c\")\nDict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\nhistogram(\"a b b a\")\nDict(\"\
    a\" => 2, \"b\" => 2)\nhistogram(\"a b c a b\")\nDict(\"a\" => 2, \"b\" => 2)\n\
    histogram(\"b b b b a\")\nDict(\"b\" => 4)\nhistogram(\"\")\nDict()", "    histogram\
    \ = Dict{String, Int64}()\n    for c in test\n        if histogram[c] == 0\n \
    \           histogram[c] = 1\n        else\n            histogram[c] += 1\n  \
    \      end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not spaces.\nExample:\
    \ \n>>> count_non_space(\"a b c\")\n3\n>>> count_non_space(\"a b b a\")\n4\n>>>\
    \ count_non_space(\"b b b b a\")\n5", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nThe function should ignore all non-word characters (spaces,\
    \ punctuation, etc.).\nThe function should ignore all empty strings.\nThe function\
    \ should ignore all strings consisting of only whitespace.\nThe function should\
    \ ignore all strings consisting of only a single word.\nThe function should ignore\
    \ all strings consisting of only two words.\nThe function should ignore all strings\
    \ consisting of only three words.\nThe function should ignore all strings consisting\
    \ of only four words.\nThe function should ignore all strings consisting of only\
    \ five words.\nThe function should ignore all strings consisting of only six words.\n\
    The function should ignore all strings consisting of only seven words.\nThe function\
    \ should ignore all strings consisting of only eight words.\nThe function should\
    \ ignore all strings consisting of only nine words.\nThe function should ignore\
    \ all strings consisting of only ten words.\nThe function should ignore all strings\
    \ consisting of only eleven words.\nThe function should ignore all strings consisting\
    \ of only twelve words.\nThe function should ignore all strings consisting of\
    \ only thirteen words.\nThe function should ignore all strings consisting of only\
    \ fourteen words.\nThe function should ignore all strings consisting of only fifteen\
    \ words.\nThe function should ignore all strings consisting of only sixteen words.\n\
    The function should ignore all strings consisting of only seventeen words.\nThe\
    \ function should ignore all strings consisting of only eighteen words.\nThe function\
    \ should ignore all strings consisting of only nineteen words.\nThe function should\
    \ ignore all strings consisting of only twenty words.\nThe function should ignore\
    \ all strings consisting of only twenty-one words.\nThe function should ignore\
    \ all strings consisting of only twenty-two words.\nThe function should ignore\
    \ all strings consisting of only twenty-three words.\nThe function should ignore\
    \ all strings consisting of only twenty-four words.\nThe function should ignore\
    \ all strings consisting of only twenty-five words.\nThe function should ignore\
    \ all strings consisting of ", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of times each\
    \ letter appears in the string.", "    histogram = Dict{String, Int64}()\n   \
    \ for letter in split(test)\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each letter appears in the string.\nThe function should\
    \ ignore non-letter characters and return a dictionary with the letters as keys\
    \ and the number of times they appear in the string as values.\nThe function should\
    \ ignore case when counting.", "    histogram = Dict()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.1>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.1>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.1>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.1>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.1>\nhistogram(\"\")\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes a string and returns the number of unique characters in\
    \ the string.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string. \nThe function should ignore all non-word characters\
    \ (spaces, punctuation, etc.).\nThe function should ignore all empty strings.",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are\nnot in the alphabet\
    \ (a to z).", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] >= 1 else\
    \ 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that takes a string and returns the number of words in the string.",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a dictionary of the letters with the most occurrences.\nThe function should\
    \ ignore spaces.\nThe function should ignore uppercase letters.\nThe function\
    \ should ignore lowercase letters.\nThe function should ignore non-alphabetic\
    \ characters.\nThe function should ignore repeated letters.\nThe function should\
    \ ignore repeated letters.\nThe function should ignore repeated letters.\nThe\
    \ function should ignore repeated letters.\nThe function should ignore repeated\
    \ letters.\nThe function should ignore repeated letters.\nThe function should\
    \ ignore repeated letters.\nThe function should ignore repeated letters.\nThe\
    \ function should ignore repeated letters.\nThe function should ignore repeated\
    \ letters.\nThe function should ignore repeated letters.\nThe function should\
    \ ignore repeated letters.\nThe function should ignore repeated letters.\nThe\
    \ function should ignore repeated letters.\nThe function should ignore repeated\
    \ letters.\nThe function should ignore repeated letters.\nThe function should\
    \ ignore repeated letters.\nThe function should ignore repeated letters.\nThe\
    \ function should ignore repeated letters.\nThe function should ignore repeated\
    \ letters.\nThe function should ignore repeated letters.\nThe function should\
    \ ignore repeated letters.\nThe function should ignore repeated letters.\nThe\
    \ function should ignore repeated letters.\nThe function should ignore repeated\
    \ letters.\nThe function should ignore repeated letters.\nThe function should\
    \ ignore repeated letters.\nThe function should ignore repeated letters.\nThe\
    \ function should ignore repeated letters.\nThe function should ignore repeated\
    \ letters.\nThe function should ignore repeated letters.\nThe function should\
    \ ignore repeated letters.\nThe function should ignore repeated letters.\nThe\
    \ function should ignore repeated letters.\nThe function should ignore repeated\
    \ letters.\nThe function should ignore repeated letters.\nThe function should\
    \ ignore repeated letters.\nThe function should ignore repeated letters.\nThe\
    \ function should ignore repeated letters.\nThe function should ignore repeated ",
  "    histogram = Dict{String, Int64}()\n    for c in test\n        if histogram[c]\
    \ == 0\n            histogram[c] = 1\n        else\n            histogram[c] +=\
    \ 1\n        end\n    end\n    return histogram\nend", "    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in split(test)\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    end\n    \n    return histogram\nend\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes a string and returns a dictionary of the letter with the\
    \ most repetition and containing the corresponding count.\nIf several letters\
    \ have the same occurrence, return all of them.\nExample: histogram(\"a b c\"\
    )\nDict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\nhistogram(\"a b b a\")\nDict(\"a\"\
    \ => 2, \"b\" => 2)\nhistogram(\"a b c a b\")\nDict(\"a\" => 2, \"b\" => 2)\n\
    histogram(\"b b b b a\")\nDict(\"b\" => 4)\nhistogram(\"\")\nDict()", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    end\n    histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a string with all the letters capitalized.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1\n    end\n    return histogram\nend\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of times each letter appears\
    \ in the string.", "    histogram = Dict()\n    for letter in split(test)\n  \
    \      histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function which takes a string and returns\
    \ the number of words in the string.\nThe function should ignore all punctuation\
    \ marks.\nThe function should ignore all empty strings.\nThe function should ignore\
    \ all strings with only one word.\nThe function should ignore all strings with\
    \ only one letter.\nThe function should ignore all strings with only one letter.\n\
    The function should ignore all strings with only one letter.\nThe function should\
    \ ignore all strings with only one letter.\nThe function should ignore all strings\
    \ with only one letter.\nThe function should ignore all strings with only one\
    \ letter.\nThe function should ignore all strings with only one letter.\nThe function\
    \ should ignore all strings with only one letter.\nThe function should ignore\
    \ all strings with only one letter.\nThe function should ignore all strings with\
    \ only one letter.\nThe function should ignore all strings with only one letter.\n\
    The function should ignore all strings with only one letter.\nThe function should\
    \ ignore all strings with only one letter.\nThe function should ignore all strings\
    \ with only one letter.\nThe function should ignore all strings with only one\
    \ letter.\nThe function should ignore all strings with only one letter.\nThe function\
    \ should ignore all strings with only one letter.\nThe function should ignore\
    \ all strings with only one letter.\nThe function should ignore all strings with\
    \ only one letter.\nThe function should ignore all strings with only one letter.\n\
    The function should ignore all strings with only one letter.\nThe function should\
    \ ignore all strings with only one letter.\nThe function should ignore all strings\
    \ with only one letter.\nThe function should ignore all strings with only one\
    \ letter.\nThe function should ignore all strings with only one letter.\nThe function\
    \ should ignore all strings with only one letter.\nThe function should ignore\
    \ all strings with only one letter.\nThe function should ignore all strings with\
    \ only one letter.\nThe function should ignore all strings with only one letter.\n\
    The function should ignore all strings with only one letter.\nThe function should\
    \ ignore all strings with only one letter.\nThe function should ignore ", "  \
    \  histogram = Dict{String, Int64}()\n    for c in test\n        if histogram[c]\
    \ == 0\n            histogram[c] = 1\n        else\n            histogram[c] +=\
    \ 1\n        end\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters = letters[2:end]\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1\n    end\n    return histogram\nend\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    The function should ignore all punctuation and only count the letters a-z.\nThe\
    \ function should ignore all empty strings.\nThe function should ignore all spaces.\n\
    The function should ignore all numbers.\nThe function should ignore all uppercase\
    \ letters.\nThe function should ignore all lowercase letters.", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns a list of all words in the string. \nThe function should ignore\
    \ all punctuation and split on whitespace.\nThe function should ignore all empty\
    \ strings.\nThe function should ignore all words that are shorter than 3 characters.\n\
    The function should ignore all words that are longer than 20 characters.\nThe\
    \ function should ignore all words that are longer than 3 characters and shorter\
    \ than 20 characters.\nThe function should ignore all words that are longer than\
    \ 3 characters and shorter than 20 characters and that contain digits. \nThe function\
    \ should ignore all words that are longer than 3 characters and shorter than 20\
    \ characters and that contain digits.\nThe function should ignore all words that\
    \ are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain non-alphanumeric characters.\nThe function should ignore\
    \ all words that are longer than 3 characters and shorter than 20 characters and\
    \ that contain digits and that contain non-alphanumeric characters and that contain\
    \ whitespace.\nThe function should ignore all words that are longer than 3 characters\
    \ and shorter than 20 characters and that contain digits and that contain non-alphanumeric\
    \ characters and that contain whitespace and that contain punctuation.\nThe function\
    \ should ignore all words that are longer than 3 characters and shorter than 20\
    \ characters and that contain digits and that contain non-alphanumeric characters\
    \ and that contain whitespace and that contain punctuation and that contain whitespace.\n\
    The function should ignore all words that are longer than 3 characters and shorter\
    \ than 20 characters and that contain digits and that contain non-alphanumeric\
    \ characters and that contain whitespace and that contain punctuation and that\
    \ contain whitespace and that contain punctuation.\nThe function should ignore\
    \ all words that are longer than 3 characters and shorter than 20 characters and\
    \ that contain digits and that contain non-alphanumeric characters and that contain\
    \ whitespace and that contain punctuation and that contain whitespace and that\
    \ contain punctuation and that contain whitespace.\nThe function should ignore\
    \ all words that are longer than 3 characters and shorter than 20 characters and\
    \ that contain digits and that contain non-alphanumeric characters and that contain\
    \ whitespace and that contain punctuation and that contain whitespace and that\
    \ contain punctuation and that contain whitespace and that contain punctuation.\n\
    The function should ignore all words that are longer than 3 characters and shorter\
    \ than 20 characters and that contain digits and that contain non-alphanumeric\
    \ characters and that contain whitespace and that contain punctuation and that\
    \ contain whitespace and that contain punctuation and that contain whitespace ",
  "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ histogram[letter] == 0\n            histogram[letter] = 1\n        else\n  \
    \          histogram[letter] += 1\n        end\n    end\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are\nnot letters.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters that are not alphabetic or digits. \nExample:\
    \ \n>>> count_non_alpha(\"a b c\")\n3\n>>> count_non_alpha(\"a b b a\")\n4\n>>>\
    \ count_non_alpha(\"b b b b a\")\n4\n>>> count_non_alpha(\"\")\n0", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    letters.sort!\n    for\
    \ letter in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    end\n    return histogram\nend", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    letters.sort!\n    letters.reverse!\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of unique words in the string.", "    histogram = Dict()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend", "    histogram\
    \ = Dict()\n    letters = split(test)\n    letters = sort(letters)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string and returns the\
    \ number of words in the string.\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nWrite a function that takes a string\
    \ and returns the number of uppercase letters in the string.\nWrite a function\
    \ that takes a string and returns the number of lowercase letters in the string.\n\
    Write a function that takes a string and returns the number of digits (0-9) in\
    \ the string.\nWrite a function that takes a string and returns the number of\
    \ punctuation marks (!, ?, ., ;, :) in the string.\nWrite a function that takes\
    \ a string and returns the number of words in the string that are all uppercase.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that are all lowercase.\nWrite a function that takes a string and returns the\
    \ number of words in the string that are all digits.\nWrite a function that takes\
    \ a string and returns the number of words in the string that are all punctuation\
    \ marks.\nWrite a function that takes a string and returns the number of words\
    \ in the string that are all uppercase and all lowercase.\nWrite a function that\
    \ takes a string and returns the number of words in the string that are all digits\
    \ all punctuation marks.\nWrite a function that takes a string and returns the\
    \ number of words in the string that are all uppercase, all lowercase, all digits\
    \ and all punctuation marks.\nWrite a function that takes a string and returns\
    \ the number of words in the string that are all uppercase, all lowercase, all\
    \ digits and all punctuation marks.\nWrite a function that takes a string and\
    \ returns the number of words in the string that are all uppercase, all lowercase,\
    \ all digits and all punctuation marks.\nWrite a function that takes a string\
    \ and returns the number of words in the string that are all uppercase, all lowercase,\
    \ all digits and all punctuation marks.\nWrite a function that takes a string\
    \ and returns the number of words in the string that are all uppercase, all lowercase,\
    \ all digits and all punctuation marks.\nWrite a function that takes a string\
    \ and returns the number of words in the string that are all uppercase, all lowercase,\
    \ all digits and all punctuation marks.\nWrite a function that takes a string\
    \ and returns the number of words in the string that are all uppercase, all lower",
  "    histogram = Dict()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string and returns the number of characters\
    \ in that string that are\nnot spaces, tabs, or newlines. Use this function to\
    \ count the number of words in a string.", "    histogram = Dict()\n    for letter\
    \ in split(test)\n        histogram[letter] = get(histogram, letter, 0) + 1\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nThe function should ignore all punctuation\
    \ and only count the letters a-z.\nThe function should ignore all numbers and\
    \ only count the letters a-z.\nThe function should ignore all special characters\
    \ and only count the letters a-z.\nThe function should ignore all whitespace and\
    \ only count the letters a-z.\nThe function should ignore all uppercase and only\
    \ count the letters a-z.\nThe function should ignore all lowercase and only count\
    \ the letters a-z.\nThe function should ignore all characters that are not a-z\
    \ and ignore all whitespace.\nThe function should ignore all characters that are\
    \ not a-z and ignore all punctuation.\nThe function should ignore all characters\
    \ that are not a-z and ignore all numbers.\nThe function should ignore all characters\
    \ that are not a-z and ignore all special characters.\nThe function should ignore\
    \ all characters that are not a-z and ignore all uppercase and lowercase.\nThe\
    \ function should ignore all characters that are not a-z and ignore all numbers.\n\
    The function should ignore all characters that are not a-z and ignore all special\
    \ characters.\nThe function should ignore all characters that are not a-z and\
    \ ignore all uppercase and lowercase.\nThe function should ignore all characters\
    \ that are not a-z and ignore all numbers.\nThe function should ignore all characters\
    \ that are not a-z and ignore all special characters.\nThe function should ignore\
    \ all characters that are not a-z and ignore all uppercase and lowercase.\nThe\
    \ function should ignore all characters that are not a-z and ignore all numbers.\n\
    The function should ignore all characters that are not a-z and ignore all special\
    \ characters.\nThe function should ignore all characters that are not a-z and\
    \ ignore all uppercase and lowercase.\nThe function should ignore all characters\
    \ that are not a-z and ignore all numbers.\nThe function should ignore all characters\
    \ that are not a-z and ignore all special characters.\nThe function should ignore\
    \ all characters that are not a-z and ignore all uppercase and lowercase.\nThe\
    \ function should ignore all characters that are not a-z and ignore all numbers.\n\
    The function should ignore ", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        if histogram[letter] == 0\n\
    \            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each letter appears in the string.\nIf the letter\
    \ does not appear in the string, return 0.\nIf the letter appears more than once,\
    \ return the number of times it appears.\nIf the letter appears less than once,\
    \ return 1."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
