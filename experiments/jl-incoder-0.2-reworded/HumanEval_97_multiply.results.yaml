language: jl
name: HumanEval_97_multiply
results:
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10 \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of occurrences of \n \
    \   each character in the string. \n    Examples:\n    >>> count_chars(\"hello\"\
    )\n    Dict(\"h\"=>1, \"e\"=>1, \"l\"=>2, \"o\"=>1)\n    >>> count_chars(\"helloworld\"\
    )\n    Dict(\"h\"=>2, \"e\"=>1, \"l\"=>2, \"o\"=>1, \"w\"=>2, \"r\"=>1, \"d\"\
    =>1)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpq8f6oop4.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq8f6oop4.jl:18\n\
    in expression starting at /tmp/tmpq8f6oop4.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a*b).digits\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of its unit digits. \nAssume the input is\
    \ always valid.\nExamples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020,\
    \ 1851)\n0\n>>> sum(14, -15)\n20\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsrr9jcua.jl:21\nin expression starting at\
    \ /tmp/tmpsrr9jcua.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * 10 + b) mod 10\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the digits of its input. \nAssume that\
    \ the input is always valid.\nExamples:\n>>> sum(1234)\n4\n>>> sum(123)\n3\n>>>\
    \ sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpctm7rnoe.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpctm7rnoe.jl:18\n\
    in expression starting at /tmp/tmpctm7rnoe.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b < 10 \n        a * 10\n    elseif b < 100 \n        a * 10 + b\n    elseif\
    \ b < 1000 \n        a * 10 + b / 10\n    elseif b < 10000 \n        a * 10 +\
    \ b / 100\n    elseif b < 100000 \n        a * 10 + b / 1000\n    elseif b < 1000000\
    \ \n        a * 10 + b / 10000\n    elseif b < 10000000 \n        a * 10 + b /\
    \ 100000\n    elseif b < 100000000 \n        a * 10 + b / 1000000\n    elseif\
    \ b < 1000000000 \n        a * 10 + b / 10000000\n    elseif b < 10000000000 \n\
    \        a * 10 + b / 100000000\n    elseif b < 100000000000 \n        a * 10\
    \ + b / 1000000000\n    elseif b < 1000000000000 \n        a * 10 + b / 10000000000\n\
    \    elseif b < 10000000000000 \n        a * 10 + b / 100000000000\n    elseif\
    \ b < 100000000000000 \n        a * 10 + b / 1000000000000\n    elseif b < 1000000000000000\
    \ \n        a * 10 + b / 10000000000000\n    elseif b < 10000000000000000 \n \
    \       a * 10 + b / 100000000000000\n    elseif b < 100000000000000000 \n   \
    \     a * 10 + b / 1000000000000000\n    elseif b < 1000000000000000000 \n   \
    \     a * 10 + b / 10000000000000000\n    elseif b < 10000000000000000000 \n \
    \       a * 10 + b / 100000000000000000\n    elseif b < 100000000000000000000\
    \ \n        a * 10 + b / 1000000000000000000\n    elseif b < 1000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000\n    elseif b < 10000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000\n    elseif b < 100000000000000000000000\
    \ \n        a * 10 + b / 1000000000000000000000\n    elseif b < 1000000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000000\n    elseif b < 10000000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000000\n    elseif b < 100000000000000000000000000\
    \ \n        a * 10 + b / 1000000000000000000000000\n    elseif b < 1000000000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000000000\n    elseif b < 10000000000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000000000\n    elseif b < 100000000000000000000000000000\
    \ \n        a\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpshbqps7s.jl:1\nin expression starting at /tmp/tmpshbqps7s.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        0\n    elseif\
    \ b == 1 \n        a\n    elseif b == -1 \n        0\n    elseif b == -2\n   \
    \     0\n    elseif b == -3\n        0\n    elseif b == -4\n        0\n    elseif\
    \ b == -5\n        0\n    elseif b == -6\n        0\n    elseif b == -7\n    \
    \    0\n    elseif b == -8\n        0\n    elseif b == 9\n        0\n    elseif\
    \ b == 10\n        0\n    elseif b == 11\n        0\n    elseif b == 12\n    \
    \    0\n    elseif b == 13\n        0\n    elseif b == 14\n        0\n    elseif\
    \ b == 15\n        0\n    elseif b == 16\n        0\n    elseif b == 17\n    \
    \    0\n    elseif b == 18\n        0\n    elseif b == 19\n        0\n    elseif\
    \ b == 20\n        0\n    elseif b == 21\n        0\n    elseif b == 22\n    \
    \    0\n    elseif b == 23\n        0\n    elseif b == 24\n        0\n    elseif\
    \ b == 25\n        0\n    elseif b == 26\n        0\n    elseif b == 27\n    \
    \    0\n    elseif b == 28\n        0\n    elseif b == 29\n        0\n    elseif\
    \ b == 30\n        0\n    elseif b == 31\n        0\n    elseif b == 32\n    \
    \    0\n    elseif b == 33\n        0\n    elseif b == 34\n        0\n    elseif\
    \ b == 35\n        0\n    elseif b == 36\n        0\n    elseif b == 37\n    \
    \    0\n    elseif b == 38\n        0\n    elseif b == 39\n        0\n    elseif\
    \ b == 40\n        0\n    elseif b == 41\n        0\n    elseif b == 42\n    \
    \    0\n    elseif b == 43\n        0\n    elseif b == 44\n        0\n    elseif\
    \ b == 45\n        0\n    elseif b == 46\n        0\n    elseif b == 47\n    \
    \    0\n    elseif b == 48\n        0\n    elseif b == 49\n        0\n    elseif\
    \ b == 50\n        0\n    elseif b == 51\n        0\n    elseif b == 52\n    \
    \    0\n    elseif b == 53\n        0\n    elseif b == 54\n        0\n    else\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmphmzkfgbe.jl:129\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphmzkfgbe.jl:1\n\
    in expression starting at /tmp/tmphmzkfgbe.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > a \n        0\n    elseif\
    \ b == a \n        a\n    elseif b > a \n        0\n    elseif b == a \n     \
    \   a\n    elseif b > a \n        0\n    elseif b == a \n        a\n    elseif\
    \ b > a \n        0\n    elseif b == a \n        a\n    elseif b > a \n      \
    \  0\n    elseif b == a \n        a\n    elseif b > a \n        0\n    elseif\
    \ b == a \n        a\n    elseif b > a \n        0\n    elseif b == a \n     \
    \   a\n    elseif b > a \n        0\n    elseif b == a \n        a\n    elseif\
    \ b > a \n        0\n    elseif b == a \n        a\n    elseif b > a \n      \
    \  0\n    elseif b == a \n        a\n    elseif b > a \n        0\n    elseif\
    \ b == a \n        a\n    elseif b > a \n        0\n    elseif b == a \n     \
    \   a\n    elseif b > a \n        0\n    elseif b == a \n        a\n    elseif\
    \ b > a \n        0\n    elseif b == a \n        a\n    elseif b > a \n      \
    \  0\n    elseif b == a \n        a\n    elseif b > a \n        0\n    elseif\
    \ b == a \n        a\n    elseif b > a \n        0\n    elseif b == a \n     \
    \   a\n    elseif b > a \n        0\n    elseif b == a \n        a\n    elseif\
    \ b > a \n        0\n    elseif b == a \n        a\n    elseif b > a \n      \
    \  0\n    elseif b == a \n        a\n    elseif b > a \n        0\n    elseif\
    \ b == a \n        a\n    elseif b > a \n        0\n    elseif b == a \n     \
    \   a\n    elseif b > a \n        0\n    elseif b == a \n        a\n    elseif\
    \ b > a \n        0\n    elseif b == a \n        a\n    elseif b > a \n      \
    \  0\n    elseif b == a \n        a\n    elseif b > a \n        0\n    elseif\
    \ b == a \n        a\n    elseif b > a \n        0\n    elseif b == a \n     \
    \   a\n    elseif b > a \n        0\n    elseif b == a \n        a\n    elseif\
    \ b > a \n        0\n    elseif b == a \n        a\n    elseif \nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing condition in \"elseif\" at /tmp/tmpzrvujl4c.jl:135\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpzrvujl4c.jl:136\nin expression\
    \ starting at /tmp/tmpzrvujl4c.jl:136\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * b) % 10\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product \n    (i.e., if the product is $10^1$, then the sum is $10^1$).\n\
    \    Assume the input is always valid.\n    Examples:\n    >>> sum(148, 412)\n\
    \    16\n    >>> sum(19, 28)\n    72\n    >>> sum(2020, 1851)\n    0\n    >>>\
    \ sum(14, -15)\n    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbfm6u7s7.jl:20\nin expression starting at\
    \ /tmp/tmpbfm6u7s7.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b < a \n        0\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of characters\
    \ in that string.\nExamples:\n>>> count_characters(\"Hello World\")\n10\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!!\")\n12\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeshre4qw.jl:27\nin expression starting at\
    \ /tmp/tmpeshre4qw.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * 10^(b-1)) * (10^(b-1))\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbqv53gmm.jl:20\nin expression starting at\
    \ /tmp/tmpbqv53gmm.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a*b).digits()\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an array of integers and returns the product\
    \ of their unit digits.\nAssume the input is always valid.\nExamples:\n>>> multiply([148,\
    \ 412])\n16\n>>> multiply([19, 28])\n72\n>>> multiply([2020, 1851])\n0\n>>> multiply([14,\
    \ -15])\n20\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp34m16b1b.jl:21\nin expression starting at\
    \ /tmp/tmp34m16b1b.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nProblem 3\nWrite a function that takes two integers and\
    \ returns their sum.\nExamples:\n>>> add(3, 4)\n7\n>>> add(10, -2)\n8\n>>> add(10,\
    \ 0)\n10\n>>> add(10, -10)\n0\n>>> add(10, -100)\n-10\n>>> add(10, -1000)\n-10\n\
    >>> add(10, -10000)\n-10\n>>> add(10, -100000)\n-10\n>>> add(10, -1000000000)\n\
    -10\n>>> add(10, -1000000000000)\n-10\n>>> add(10, -100000000000000)\n-10\n>>>\
    \ add(10, -100000000000000000)\n-10\n>>> add(10, -1000000000000000000)\n-10\n\
    >>> add(10, -100000000000000000000)\n-10\n>>> add(10, -10000000000000000000000)\n\
    -10\n>>> add(10, -1000000000000000000000000)\n-10\n>>> add(10, -100000000000000000000000000)\n\
    -10\n>>> add(10, -10000000000000000000000000000)\n-10\n>>> add(10, -1000000000000000000000000000000)\n\
    -10\n>>> add(10, -100000000000000000000000000000000)\n-10\n>>> add(10, -10000000000000000000000000000000000)\n\
    -10\n>>> add(10, -1000000000000000000000000000000000000)\n-10\n>>> add(10, -100000000000000000000000000000000000000)\n\
    -10\n>>> add(10, -10000000000000000000000000000000000000000)\n-10\n>>> add(10,\
    \ -1000000000000000000000000000000000000000000)\n-10\n>>> add(10, -100000000000000000000000000000000000000000000)\n\
    -10\n>>> add(10, -10000000000000000000000000000000000000000000000)\n-10\n>>> add(10,\
    \ -10000000000000000000000000000000000000000000000000)\n-10\n>>> add(10, -10000000000000000000000000000000000000000000000000000)\n\
    -10\n>>> add(10, -1000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -100000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -10000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -1000000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -100000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -10000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -1000000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -100000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -10000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -1000000000000000000000000000000000000000000000000000000000)\n-10\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp84pyx9ij.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp84pyx9ij.jl:18\n\
    in expression starting at /tmp/tmp84pyx9ij.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        (a * 10 +\
    \ b) * 10\n    else\n        0\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of two integers. \nThe function should accept\
    \ two integers and return their sum.\nExamples:\n>>> add(4, 5)\n9\n>>> add(6,\
    \ 8)\n12\n>>> add(10, -2)\n8\n>>> add(10, 0)\n10\n>>> add(10, -10)\n0\n>>> add(10,\
    \ -100)\n0\n>>> add(10, -200)\n0\n>>> add(10, -300)\n0\n>>> add(10, -400)\n0\n\
    >>> add(10, -500)\n0\n>>> add(10, -600)\n0\n>>> add(10, -700)\n0\n>>> add(10,\
    \ -800)\n0\n>>> add(10, -900)\n0\n>>> add(10, -1000)\n0\n>>> add(10, -1100)\n\
    0\n>>> add(10, -1200)\n0\n>>> add(10, -1300)\n0\n>>> add(10, -1400)\n0\n>>> add(10,\
    \ -1500)\n0\n>>> add(10, -16)\n0\n>>> add(10, -18)\n0\n>>> add(10, -20)\n0\n>>>\
    \ add(10, -22)\n0\n>>> add(10, -24)\n0\n>>> add(10, -26)\n0\n>>> add(10, -28)\n\
    0\n>>> add(10, -30)\n0\n>>> add(10, -32)\n0\n>>> add(10, -34)\n0\n>>> add(10,\
    \ -36)\n0\n>>> add(10, -38)\n0\n>>> add(10, -40)\n0\n>>> add(10, -42)\n0\n>>>\
    \ add(10, -44)\n0\n>>> add(10, -46)\n0\n>>> add(10, -48)\n0\n>>> add(10, -50)\n\
    0\n>>> add(10, -52)\n0\n>>> add(10, -54)\n0\n>>> add(10, -56)\n0\n>>> add(10,\
    \ -58)\n0\n>>> add(10, -60)\n0\n>>> add(10, -62)\n0\n>>> add(10, -64)\n0\n>>>\
    \ add(10, -66)\n0\n>>> add(10, -68)\n0\n>>> add(10, -70)\n0\n>>> add(10, -72)\n\
    0\n>>> add(10, -74)\n0\n>>> add(10, -76)\n0\n>>> add(10, -78)\n0\n>>> add(10,\
    \ -\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphpy9yac2.jl:25\nin expression starting at\
    \ /tmp/tmphpy9yac2.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        a * 10^(b-1)\n\
    \    else\n        a * 10^(b-1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product (as described above).\nExamples:\n>>> sum(148, 412)\n16\n>>> sum(19,\
    \ 28)\n72\n>>> sum(2020, 1851)\n0\n>>> sum(14, -15)\n20\n\"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq9tlp4s5.jl:25\nin expression starting at\
    \ /tmp/tmpq9tlp4s5.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        return 0 \n    elseif b == 0\n        return a\n    else\n    \
    \    return a*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete\
    \ the function that takes two integers and returns \n    the product of their\
    \ unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>>\
    \ multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020,\
    \ 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptj9rtzzc.jl:23\nin expression starting at\
    \ /tmp/tmptj9rtzzc.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        0\n    elseif\
    \ b == 1\n        a\n    else\n        (a * b) / gcd(a, b)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the squares of the\
    \ unit digits of an integer.\nExamples:\n>>> sum_square_digits(148)\n14\n>>> sum_square_digits(19)\n\
    23\n>>> sum_square_digits(2020)\n0\n>>> sum_square_digits(14)\n20\n>>> sum_square_digits(-15)\n\
    -20\n>>> sum_square_digits(0)\n0\n>>> sum_square_digits(1)\n1\n>>> sum_square_digits(2)\n\
    4\n>>> sum_square_digits(3)\n9\n>>> sum_square_digits(4)\n16\n>>> sum_square_digits(5)\n\
    25\n>>> sum_square_digits(6)\n36\n>>> sum_square_digits(7)\n49\n>>> sum_square_digits(8)\n\
    64\n>>> sum_square_digits(9)\n81\n>>> sum_square_digits(10)\n100\n>>> sum_square_digits(11)\n\
    121\n>>> sum_square_digits(12)\n144\n>>> sum_square_digits(13)\n169\n>>> sum_square_digits(14)\n\
    196\n>>> sum_square_digits(15)\n225\n>>> sum_square_digits(16)\n256\n>>> sum_square_digits(17)\n\
    289\n>>> sum_square_digits(18)\n324\n>>> sum_square_digits(19)\n353\n>>> sum_square_digits(20)\n\
    384\n>>> sum_square_digits(21)\n421\n>>> sum_square_digits(22)\n460\n>>> sum_square_digits(23)\n\
    495\n>>> sum_square_digits(24)\n532\n>>> sum_square_digits(25)\n571\n>>> sum_square_digits(26)\n\
    618\n>>> sum_square_digits(27)\n660\n>>> sum_square_digits(28)\n698\n>>> sum_square_digits(29)\n\
    737\n>>> sum_square_digits(30)\n780\n>>> sum_square_digits(31)\n817\n>>> sum_square_digits(32)\n\
    850\n>>> sum_square_digits(33)\n896\n>>> sum_square_digits(34)\n935\n>>> sum_square_digits(35)\n\
    972\n>>> sum_square_\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6dvb3fen.jl:25\nin expression starting at\
    \ /tmp/tmp6dvb3fen.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) \nend \n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the digits of its input.\
    \ \nAssume that the input is always valid. \nExamples:\n>>> sum(12345)\n15\n>>>\
    \ sum(10)\n10\n>>> sum(0)\n0\n>>> sum(123456789)\n21\n>>> sum(1234567890)\n21\n\
    >>> sum(12345678901)\n21\n>>> sum(123456789012)\n21\n>>> sum(1234567890123)\n\
    21\n>>> sum(12345678901234)\n21\n>>> sum(123456789012345)\n21\n>>> sum(12345678901234567)\n\
    21\n>>> sum(123456789012345678)\n21\n>>> sum(1234567890123456788)\n21\n>>> sum(12345678901234567889)\n\
    21\n>>> sum(123456789012345678899)\n21\n>>> sum(1234567890123456788999)\n21\n\
    >>> sum(12345678901234567889999)\n21\n>>> sum(123456789012345678899999)\n21\n\
    >>> sum(1234567890123456788999999)\n21\n>>> sum(12345678901234567889999999)\n\
    21\n>>> sum(1234567890123456788999999999)\n21\n>>> sum(12345678901234567889999999999)\n\
    21\n>>> sum(123456789012345678899999999999)\n21\n>>> sum(123456789012345678899999999989)\n\
    21\n>>> sum(1234567890123456788999999999890)\n21\n>>> sum(12345678901234567889999999998900)\n\
    21\n>>> sum(1234567890123456788999999999890001)\n21\n>>> sum(12345678901234567889999999998900012)\n\
    21\n>>> sum(123456789012345678899999999989000123)\n21\n>>> sum(1234567890123456788999999999890001234)\n\
    21\n>>> sum(12345678901234567889999999998900012345)\n21\n>>> sum(1234567890123456788999999999890001234567)\n\
    21\n>>> sum(12345678901234567889999999998900012345678)\n21\n>>> sum(123456789012345678899999999989000123456788)\n\
    21\n>>> sum(1234567890123456788999999999890001234567889)\n21\n>>> sum(12345678901234567889999999998900012345678899)\n\
    21\n>>> sum(123456789012345678899999999989000123456788999)\n21\n>>> sum(1234567890\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8_wn4rwg.jl:20\nin expression starting at\
    \ /tmp/tmp8_wn4rwg.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0\n  \
    \      return 0\n    \n    if a < 0\n        return multiply(-a, -b)\n    \n \
    \   if b < 0\n        return multiply(a, b * -1)\n    \n    if b == 0\n      \
    \  return a\n    \n    if a < b\n        return multiply(a, b)\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxb64jwj1.jl:1\nin expression starting at /tmp/tmpxb64jwj1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        return a\n\
    \    else\n        return a * b\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an array of integers and returns the sum of the unit digits.\
    \ \nThe function should raise an error if the array is empty.\nExamples:\n>>>\
    \ sum([148, 412])\n16\n>>> sum([19, 28])\n72\n>>> sum([2020, 1851])\n0\n>>> sum([14,\
    \ -15])\n20\n>>> sum([14])\n14\n>>> sum([-14])\n-14\n>>> sum([148, 412])\n16\n\
    >>> sum([19, 28])\n72\n>>> sum([2020, 1851])\n0\n>>> sum([14, -15])\n20\n>>> sum([14])\n\
    14\n>>> sum([-14])\n-14\n>>> sum([148, 412])\n16\n>>> sum([19, 28])\n72\n>>> sum([2020,\
    \ 1851])\n0\n>>> sum([14, -15])\n20\n>>> sum([14])\n14\n>>> sum([-14])\n-14\n\
    >>> sum([148, 412])\n16\n>>> sum([19, 28])\n72\n>>> sum([2020, 1851])\n0\n>>>\
    \ sum([14, -15])\n20\n>>> sum([14])\n14\n>>> sum([-14])\n-14\n>>> sum([148, 412])\n\
    16\n>>> sum([19, 28])\n72\n>>> sum([2020, 1851])\n0\n>>> sum([14, -15])\n20\n\
    >>> sum([14])\n14\n>>> sum([-14])\n-14\n>>> sum([148, 412])\n16\n>>> sum([19,\
    \ 28])\n72\n>>> sum([2020, 1851])\n0\n>>> sum([14, -15])\n20\n>>> sum([14])\n\
    14\n>>> sum([-14])\n-14\n>>> sum([148, 412])\n16\n>>> sum([19, 28])\n72\n>>> sum([2020,\
    \ 1851])\n0\n>>> sum([14, -15])\n20\n>>> sum([14])\n14\n>>> sum([-14])\n-14\n\
    >>> sum([148, 412])\n16\n>>> sum([19, 28])\n72\n>>> sum([2020, 1851])\n0\n>>>\
    \ sum([14, -15])\n20\n>>> sum([14])\n14\n>>> sum([-14])\n-14\n>>> sum([148, 412])\n\
    16\n>>> sum([19, 28])\n72\n>>> sum([2020, 1851])\n0\n>>> sum([14, -15])\n20\n\
    >>> sum([14])\n14\n>>> sum([-14])\n-14\n>>> sum([148, 412])\n16\n>>> sum([19,\
    \ 28])\n72\n>>> sum([2020, \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvb20yw6k.jl:23\nin expression starting at\
    \ /tmp/tmpvb20yw6k.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        0\n    else\n\
    \        (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in it.\n\
    Examples:\n>>> count_characters(\"Hello World\")\n12\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!!\")\n12\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvfol34ry.jl:23\nin expression starting at\
    \ /tmp/tmpvfol34ry.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        (a * 10^(b\
    \ % 10)) % 10\n    else\n        0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptxcxw5r6.jl:25\nin expression starting at\
    \ /tmp/tmptxcxw5r6.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0\n  \
    \      return 0\n    else\n        return (a*b)/b\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpctilv42o.jl:21\nin expression starting at\
    \ /tmp/tmpctilv42o.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * 10 + b) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of its\
    \ unit digits.\nAssume the input is always valid.\nExamples:\n>>> sum(148, 412)\n\
    16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n>>> sum(14, -15)\n20\n\"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjclyop5l.jl:21\nin expression starting at\
    \ /tmp/tmpjclyop5l.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 or b\
    \ < 0 \n        error(\"The input must be positive\")\n    else if a == 0 || b\
    \ == 0\n        error(\"The input must be positive\")\n    else \n        return\
    \ (a * b) / gcd(a, b)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete\
    \ the function that takes two integers and returns \n    the sum of their unit\
    \ digits.\n    Assume the input is always valid.\n    Examples:\n    >>> add(148,\
    \ 412)\n    168\n    >>> add(19, 28)\n    72\n    >>> add(2020, 1851)\n    2020\n\
    \    >>> add(14, -15)\n    14\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"b\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm2z0g77g.jl:15\nin expression starting at /tmp/tmpm2z0g77g.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10 \nend \n\"\"\"Complete\
    \ the function that takes two integers and returns \n    the sum of their unit\
    \ digits.\n    Assume the input is always valid.\n    Examples:\n    >>> add(148,\
    \ 412)\n    168\n    >>> add(19, 28)\n    72\n    >>> add(2020, 1851)\n    2020\n\
    \    >>> add(14, -15)\n    14\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp_hcsyvvh.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_hcsyvvh.jl:18\n\
    in expression starting at /tmp/tmp_hcsyvvh.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0 \n        error(\"Invalid input\")\n    else if a == 0 || b == 0\n     \
    \   return 0\n    else\n        return (a * b) % 10\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuv8nu4cb.jl:17\nin expression starting at\
    \ /tmp/tmpuv8nu4cb.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        error(\"Invalid\
    \ input\")\n    else\n        return a * b\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq1me2r9u.jl:23\nin expression starting at\
    \ /tmp/tmpq1me2r9u.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * 10 + b) \nend \n\"\"\"\n   \
    \ \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n \
    \   \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1wm2pqd1.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1wm2pqd1.jl:1\n\
    in expression starting at /tmp/tmp1wm2pqd1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0\n  \
    \      return 0\n    else if a == 0\n        return b\n    else if a < 0\n   \
    \     return multiply(abs(a), -b)\n    else if a > 9\n        return multiply(a/10,\
    \ b%10)\n    else\n        return a*b\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nExamples:\n>>> count_characters(\"\
    Hello World\")\n12\n>>> count_characters(\"Hello World!\")\n9\n>>> count_characters(\"\
    Hello World!!\")\n10\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa2p4ipiv.jl:17\nin expression starting at\
    \ /tmp/tmpa2p4ipiv.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0\n  \
    \      0\n    elseif b < 0\n        0\n    else\n        (a * 10 + b) mod 10\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412)\
    \ == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert\
    \ multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes two integers and returns their sum.\nExamples:\n>>> add(148, 412)\n168\n\
    >>> add(19, 28)\n72\n>>> add(2020, 1851)\n2020\n>>> add(14, -15)\n20\n</text>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpp3g4kmjb.jl:17 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3g4kmjb.jl:20\n\
    in expression starting at /tmp/tmpp3g4kmjb.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        return a\n\
    \    else\n        return a * b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\n@test multiply(148, 412) == 16\n@test multiply(19, 28) ==\
    \ 72\n@test multiply(2020, 1851) == 0\n@test multiply(14, -15) == 20\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ unit digits of an integer.\nExamples:\n>>> sum_squares_digits(148)\n16\n>>>\
    \ sum_squares_digits(19)\n71\n>>> sum_squares_digits(2020)\n0\n>>> sum_squares_digits(14)\n\
    20\n>>> sum_squares_digits(-14)\n20\n>>> sum_squares_digits(-15)\n20\n>>> sum_squares_digits(-16)\n\
    20\n>>> sum_squares_digits(-18)\n20\n>>> sum_squares_digits(-20)\n20\n>>> sum_squares_digits(-21)\n\
    20\n>>> sum_squares_digits(-24)\n20\n>>> sum_squares_digits(-25)\n20\n>>> sum_squares_digits(-26)\n\
    20\n>>> sum_squares_digits(-27)\n20\n>>> sum_squares_digits(-28)\n20\n>>> sum_squares_digits(-29)\n\
    20\n>>> sum_squares_digits(-30)\n20\n>>> sum_squares_digits(-31)\n20\n>>> sum_squares_digits(-32)\n\
    20\n>>> sum_squares_digits(-33)\n20\n>>> sum_squares_digits(-34)\n20\n>>> sum_squares_digits(-35)\n\
    20\n>>> sum_squares_digits(-36)\n20\n>>> sum_squares_digits(-37)\n20\n>>> sum_squares_digits(-38)\n\
    20\n>>> sum_squares_digits(-39)\n20\n>>> sum_squares_digits(-40)\n20\n>>> sum_squares_digits(-41)\n\
    20\n>>> sum_squares_digits(-42)\n20\n>>> sum_squares_digits(-43)\n20\n>>> sum_squares_digits(-44)\n\
    20\n>>> sum_squares_digits(-45)\n20\n>>> sum_squares_digits(-46)\n20\n>>> sum_squares_digits(-47)\n\
    20\n>>> sum_squares_digits(-48)\n20\n>>> sum_squares_digits(\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpikonrz32.jl:23\nin expression starting at\
    \ /tmp/tmpikonrz32.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nExercise 2\nWrite a function that takes two integers and\
    \ returns the sum of the unit digits of their product \n(that is, the product\
    \ of the unit digits of their sum).\nExamples:\n>>> multiply(148, 412)\n16\n>>>\
    \ multiply(19, 28)\n72\n>>> multiply(2020, 1851)\n0\n>>> multiply(14, -15)\n20\n\
    Hint: You can use the function multiply to complete this exercise.\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpba4aez21.jl:21\nin expression starting at\
    \ /tmp/tmpba4aez21.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        0\n    else\n\
    \        (a * b).digits\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpebhz3e2q.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpebhz3e2q.jl:28\n  Test threw exception\n\
    \  Expression: candidate(148, 412) == 16\n  type Int64 has no field digits\n \
    \ Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] multiply(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmpebhz3e2q.jl:20\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpebhz3e2q.jl:28 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpebhz3e2q.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpebhz3e2q.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(19, 28) == 72\n  type Int64 has no field digits\n  Stacktrace:\n \
    \  [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] multiply(a::Int64, b::Int64)\n\
    \     @ Main /tmp/tmpebhz3e2q.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpebhz3e2q.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpebhz3e2q.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpebhz3e2q.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(2020, 1851) == 0\n  type Int64 has no field digits\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] multiply(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmpebhz3e2q.jl:20\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpebhz3e2q.jl:30 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpebhz3e2q.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpebhz3e2q.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(14, -15) == 20\n  Invalid input\n  Stacktrace:\n   [1] error(s::String"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) % (10^9 + 7)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,\
    \ -15) == 20\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ and returns the sum of its unit digits.\nExamples:\n>>> sum(148)\n16\n>>> sum(19)\n\
    28\n>>> sum(2020)\n1851\n>>> sum(14)\n20\n</text>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphyauzu6v.jl:21\nin expression starting at\
    \ /tmp/tmphyauzu6v.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) % (10^9 + 7)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns the sum of the \n    unit digits\
    \ of their product (modulo 10^9 + 7).\n    Assume the input is always valid.\n\
    \    Examples:\n    >>> sum(148, 412)\n    16\n    >>> sum(19, 28)\n    72\n \
    \   >>> sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n    20\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpycywtkzb.jl:21\nin expression starting at\
    \ /tmp/tmpycywtkzb.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0\n  \
    \      0\n    elseif b < 0\n        0\n    else\n        (a * 10 + b) mod 10\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412)\
    \ == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert\
    \ multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes two integers and returns their sum.\nAs a reminder, sum is the sum of\
    \ the numbers from 1 to n.\nExamples:\n>>> sum(range(1, 10))\n55\n>>> sum(range(10,\
    \ 0, -1))\n0\n>>> sum(range(10, 0, -2))\n0\n>>> sum(range(10, 0, -3))\n10\n>>>\
    \ sum(range(10, 0, -4))\n10\n>>> sum(range(10, 0, -5))\n10\n>>> sum(range(10,\
    \ 0, -6))\n10\n>>> sum(range(10, 0, -7))\n10\n>>> sum(range(10, 0, -8))\n10\n\
    >>> sum(range(10, 0, -9))\n10\n>>> sum(range(10, 0, -10))\n10\n>>> sum(range(10,\
    \ 0, -11))\n10\n>>> sum(range(10, 0, -12))\n10\n>>> sum(range(10, 0, -13))\n10\n\
    >>> sum(range(10, 0, -14))\n10\n>>> sum(range(10, 0, -15))\n10\n>>> sum(range(10,\
    \ 0, -16))\n10\n>>> sum(range(10, 0, -17))\n10\n>>> sum(range(10, 0, -18))\n10\n\
    >>> sum(range(10, 0, -19))\n10\n>>> sum(range(10, 0, -20))\n10\n>>> sum(range(10,\
    \ 0, -21))\n10\n>>> sum(range(10, 0, -22))\n10\n>>> sum(range(10, 0, -23))\n10\n\
    >>> sum(range(10, 0, -24))\n10\n>>> sum(range(10, 0, -25))\n10\n>>> sum(range(10,\
    \ 0, -26))\n10\n>>> sum(range(10, 0, -27))\n10\n>>> sum(range(10, 0, -28))\n10\n\
    >>> sum(range(10, 0, -29))\n10\n>>> sum(range(10, 0, -30))\n10\n>>> sum(range(10,\
    \ 0, -31))\n10\n>>> sum(range(10, 0, -32))\n10\n>>> sum(range(10, 0, -33))\n10\n\
    >>> sum(range(10, 0, -34))\n10\n>>> sum(range(10, 0, -35))\n10\n>>> sum(range(10,\
    \ 0, -36))\n10\n>>> sum(range(10, 0, -37))\n10\n>>> sum(range(10, 0, -38\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpptat6vwv.jl:17 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpptat6vwv.jl:20\n\
    in expression starting at /tmp/tmpptat6vwv.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nExercise 3\nWrite a function that takes two integers and\
    \ returns the sum of the \n    unit digits of their product (that is, the product\
    \ of their unit \n    digits). Assume the input is always valid.\n    Examples:\n\
    \    >>> sum(148, 412)\n    16\n    >>> sum(19, 28)\n    72\n    >>> sum(2020,\
    \ 1851)\n    0\n    >>> sum(14, -15)\n    20\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpj6fde4ki.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj6fde4ki.jl:18\n\
    in expression starting at /tmp/tmpj6fde4ki.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0\n  \
    \      0\n    else\n        (a * 10 * b) mod 10\nend\n</code>\n<|/ a |>\n<| c\
    \ |>\nThis doesn't work. Try `multiply(148, 412)`\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I even tested it on Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested\
    \ it on Julia 0.6.2 and it works. I even tested it on Julia 0.6.2\n<|/ c |>\n\
    <| c |>\nI tested it on Julia 0.6.2 and it works. I even tested it on Julia 0.6.2\n\
    <|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it works. I even tested it on\
    \ Julia 0.6.2\n<|/ c |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmph3cc8h30.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph3cc8h30.jl:18\n\
    in expression starting at /tmp/tmph3cc8h30.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > a \n        0\n    elseif\
    \ b == a \n        a\n    elseif b > a \n        0\n    elseif b < a \n      \
    \  0\n    elseif b == a \n        a\n    elseif b == 0 \n        a\n    elseif\
    \ b > 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > a \n       \
    \ 0\n    elseif b == a \n        a\n    elseif b > a \n        0\n    elseif b\
    \ < a \n        0\n    elseif b == a \n        a\n    elseif b == 0 \n       \
    \ a\n    elseif b > 0 \n        0\n    elseif b < 0 \n        0\n    elseif b\
    \ > a \n        0\n    elseif b == a \n        a\n    elseif b > a \n        0\n\
    \    elseif b < a \n        0\n    elseif b == a \n        a\n    elseif b ==\
    \ 0 \n        a\n    elseif b > 0 \n        0\n    elseif b < 0 \n        0\n\
    \    elseif b > a \n        0\n    elseif b == a \n        a\n    elseif b > a\
    \ \n        0\n    elseif b < a \n        0\n    elseif b == a \n        a\n \
    \   elseif b == 0 \n        a\n    elseif b > 0 \n        0\n    elseif b < 0\
    \ \n        0\n    elseif b > a \n        0\n    elseif b == a \n        a\n \
    \   elseif b > a \n        0\n    elseif b < a \n        0\n    elseif b == a\
    \ \n        a\n    elseif b == 0 \n        a\n    elseif b > 0 \n        0\n \
    \   elseif b < 0 \n        0\n    elseif b > a \n        0\n    elseif b == a\
    \ \n        a\n    elseif b > a \n        0\n    elseif b < a \n        0\n  \
    \  elseif b == a \n        a\n    elseif b == 0 \n        a\n    elseif b > 0\
    \ \n        0\n    elseif b < 0 \n        0\n    elseif b > a \n        0\n  \
    \  elseif b == a \n        a\n    elseif b > a \n        0\n    elseif b < a \n\
    \        0\n    elseif b == a \n        a\n    elseif b == 0 \n        a\n   \
    \ elseif b > 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > a \n\
    \        0\n    elseif b\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt7l9jkdo.jl:1\nin expression starting at /tmp/tmpt7l9jkdo.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * 10 + b) mod 10\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp0p2uaeky.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0p2uaeky.jl:18\n\
    in expression starting at /tmp/tmp0p2uaeky.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        0\n    elseif\
    \ a == 0\n        0\n    else\n        (a * b).digits[1..-1].product\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes\
    \ two integers and returns \n    the product of their unit digits.\n    Assume\
    \ the input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n\
    \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 26\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplcojy_09.jl:22\nin expression starting at\
    \ /tmp/tmplcojy_09.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b < a \n        0\n    elseif b == a \n        1\n    elseif b > a \n      \
    \  0\n    elseif b == 0 \n        0\n    elseif b == 1 \n        a\n    elseif\
    \ b == 2 \n        a * 10\n    elseif b == 3 \n        a * 100\n    elseif b ==\
    \ 4 \n        a * 1000\n    elseif b == 5 \n        a * 10000\n    elseif b ==\
    \ 6 \n        a * 100000\n    elseif b == 7 \n        a * 1000000\n    elseif\
    \ b == 8 \n        a * 10000000\n    elseif b == 9 \n        a * 100000000\n \
    \   elseif b == 10 \n        a * 1000000000\n    elseif b == 11 \n        a *\
    \ 10000000000\n    elseif b == 12 \n        a * 100000000000\n    elseif b ==\
    \ 13 \n        a * 1000000000000\n    elseif b == 14 \n        a * 10000000000000\n\
    \    elseif b == 15 \n        a * 100000000000000\n    elseif b == 16 \n     \
    \   a * 1000000000000000\n    elseif b == 17 \n        a * 10000000000000000\n\
    \    elseif b == 18 \n        a * 100000000000000000\n    elseif b == 19 \n  \
    \      a * 1000000000000000000\n    elseif b == 20 \n        a * 10000000000000000000\n\
    \    elseif b == 21 \n        a * 100000000000000000000\n    elseif b == 22 \n\
    \        a * 1000000000000000000000\n    elseif b == 23 \n        a * 10000000000000000000000\n\
    \    elseif b == 24 \n        a * 100000000000000000000000\n    elseif b == 25\
    \ \n        a * 1000000000000000000000000\n    elseif b == 26 \n        a * 10000000000000000000000000\n\
    \    elseif b == 27 \n        a * 100000000000000000000000000\n    elseif b ==\
    \ 28 \n        a * 1000000000000000000000000000\n    elseif b == 29 \n       \
    \ a * 10000000000000000000000000000\n    elseif b == 30 \n        a * 100000000000000000000000000000\n\
    \    elseif b == 31 \n        a * 1000000000000000000000000000000\n    elseif\
    \ b == 32 \n        a * 10000000000000000000000000000000\n    elseif b == 33 \n\
    \        a * 100000000000000000000000000000000\n    elseif b == 34 \n        a\
    \ * 1000000000000000000000000000000000\n    elseif b == 35\n        a * 1000000000000000000000000000000000\n\
    \    elseif b == 36\n        a * 1000000000000000000000000000000000\n    elseif\
    \ b == 37\n        a * 1000000000000000000000000000000000\n    elseif b == 38\n\
    \        a * 1000000000000000000000000000000000\n    elseif b == 39\n        a\
    \ * 1000000000000000000000000000000000\n    else\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpcflhj1hm.jl:105\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcflhj1hm.jl:1\n\
    in expression starting at /tmp/tmpcflhj1hm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        a * 10^(b-1)\n\
    \    else\n        0\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes two integers and returns the sum of the unit digits.\
    \ \nAssume that the input is always valid.\nExamples:\n>>> sum(148, 412)\n16\n\
    >>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n>>> sum(14, -15)\n20\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp77sp2az2.jl:25\nin expression starting at\
    \ /tmp/tmp77sp2az2.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0\n  \
    \      return 0\n    \n    if a < 0\n        return multiply(-a, b) * -1\n   \
    \ \n    if b < 0\n        return multiply(a, b) * -1\n    \n    if a < b\n   \
    \     return multiply(a, b) * -1\n    \n    if a > b\n        return multiply(-a,\
    \ b) * -1\n    \n    if a < 0\n        return multiply(-a, b) * -1\n    \n   \
    \ if b < 0\n        return multiply(a, b) * -1\n    \n    if a < b\n        return\
    \ multiply(a, b) * -1\n    \n    if a > b\n        return multiply(-a, b) * -1\n\
    \    \n    if a < 0\n        return multiply(-a, b) * -1\n    \n    if b < 0\n\
    \        return multiply(a, b) * -1\n    \n    if a < b\n        return multiply(a,\
    \ b) * -1\n    \n    if a > b\n        return multiply(-a, b) * -1\n    \n   \
    \ if a < 0\n        return multiply(-a, b) * -1\n    \n    if b < 0\n        return\
    \ multiply(a, b) * -1\n    \n    if a < b\n        return multiply(a, b) * -1\n\
    \    \n    if a > b\n        return multiply(-a, b) * -1\n    \n    if a < 0\n\
    \        return multiply(-a, b) * -1\n    \n    if b < 0\n        return multiply(a,\
    \ b) * -1\n    \n    if a < b\n        return multiply(a, b) * -1\n    \n    if\
    \ a > b\n        return multiply(-a, b) * -1\n    \n    if a < 0\n        return\
    \ multiply(-a, b) * -1\n    \n    if b < 0\n        return multiply(a, b) * -1\n\
    \    \n    if a < b\n        return multiply(a, b) * -1\n    \n    if a > b\n\
    \        return multiply(-a, b) * -1\n    \n    if a < 0\n        return multiply(-a,\
    \ b) * -1\n    \n    if b < 0\n        return multiply(a, b) * -1\n    \n    if\
    \ a < b\n        return multiply(a, b) * -1\n    \n    if a > b\n        return\
    \ multiply(-a, b) * -1\n    \n    if a < 0\n        return multiply(-a, b) * -1\n\
    \    \n    if b < 0\n        return multiply(a, b) * -1\n    \n    if a < b\n\
    \        return multiply(a, b) * -1\n    \n    if a > b\n        return multiply(-a,\
    \ b) * -1\n    \n    if a < 0\n        return multiply(-a, b) * -1\n    \n   \
    \ if b < 0\n        return multiply(a, b) * -1\n    \n    if a < b\n        return\
    \ multiply(a, b) * -1\n    \n    if a > b\n        return multiply(-a, b) * -1\n\
    \    \n    if a < 0\n        return multiply(-a, b) * -1\n    \n    if b < 0\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbj2b92i_.jl:1\nin expression starting at /tmp/tmpbj2b92i_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        (a * 10^(b%10))\
    \ * (10^(b/10))\n    else\n        0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp25k7ribq.jl:25\nin expression starting at\
    \ /tmp/tmp25k7ribq.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * 10 + b) \nend \n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product.\nExamples:\n>>> multiply(148, 412)\n16\n>>> multiply(19, 28)\n\
    72\n>>> multiply(2020, 1851)\n0\n>>> multiply(14, -15)\n20\nHint: Use a loop to\
    \ iterate over the digits of your product and add them together.\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp98kqav_7.jl:20\nin expression starting at\
    \ /tmp/tmp98kqav_7.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        a * 10^(b-1)\n\
    \    else\n        a * 10^(-b)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ integers and returns the sum of the unit digits of their product \n    (i.e.\
    \ the product of their unit digits).\n    Assume the input is always valid.\n\
    \    Examples:\n    >>> sum(148, 412)\n    16\n    >>> sum(19, 28)\n    72\n \
    \   >>> sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n    20\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcov0azss.jl:25\nin expression starting at\
    \ /tmp/tmpcov0azss.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0 \n        error(\"Invalid input\")\n    else if a == 0 || b == 0\n     \
    \   return 0\n    else\n        return (a * b) % 10\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nExamples:\n>>> count_characters(\"Hello World\")\n12\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!!\")\n12\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_character\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpan_edxg_.jl:17\nin expression starting at\
    \ /tmp/tmpan_edxg_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0\n  \
    \      0\n    else\n        (a*b).digits()\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp8rbo7rms.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp8rbo7rms.jl:26\n  Test threw exception\n\
    \  Expression: candidate(148, 412) == 16\n  type Int64 has no field digits\n \
    \ Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] multiply(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmp8rbo7rms.jl:18\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp8rbo7rms.jl:26 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8rbo7rms.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp8rbo7rms.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(19, 28) == 72\n  type Int64 has no field digits\n  Stacktrace:\n \
    \  [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] multiply(a::Int64, b::Int64)\n\
    \     @ Main /tmp/tmp8rbo7rms.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8rbo7rms.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8rbo7rms.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp8rbo7rms.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(2020, 1851) == 0\n  type Int64 has no field digits\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] multiply(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmp8rbo7rms.jl:18\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp8rbo7rms.jl:28 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8rbo7rms.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp8rbo7rms.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(14, -15) == 20\n  type Int64 has no field digits\n  Stacktrace:\n\
    \   [1"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp7_568f6s.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7_568f6s.jl:18\n\
    in expression starting at /tmp/tmp7_568f6s.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b < a \n        0\n    elseif b == a \n        1\n    elseif b > a \n      \
    \  0\n    elseif b == 0 \n        0\n    elseif b == 1 \n        1\n    elseif\
    \ b == 2 \n        2\n    elseif b == 3 \n        6\n    elseif b == 4 \n    \
    \    24\n    elseif b == 5 \n        120\n    elseif b == 6 \n        720\n  \
    \  elseif b == 7 \n        5040\n    elseif b == 8 \n        40320\n    elseif\
    \ b == 9 \n        362880\n    elseif b == 10 \n        3628800\n    elseif b\
    \ == 11 \n        39916800\n    elseif b == 12 \n        479001600\n    elseif\
    \ b == 13 \n        6227020800\n    elseif b == 14 \n        87178291200\n   \
    \ elseif b == 15 \n        1307674368000\n    elseif b == 16 \n        20922789888000\n\
    \    elseif b == 17 \n        355687428096000\n    elseif b == 18 \n        6402373705728000\n\
    \    elseif b == 19 \n        121645100408832000\n    elseif b == 20 \n      \
    \  2432902008176640000\n    elseif b == 21 \n        51090942171709440000\n  \
    \  elseif b == 22 \n        1124000727777607680000\n    elseif b == 23 \n    \
    \    25852016738884976640000\n    elseif b == 24 \n        620448401733239439360000\n\
    \    elseif b == 25 \n        15511210043330985984000000\n    elseif b == 26 \n\
    \        403291461126605635584000000\n    elseif b == 27 \n        10888869450418352160768000000\n\
    \    elseif b == 28 \n        304888344611713860501504000000\n    elseif b ==\
    \ 29 \n        8841761993739701954543616000000\n    elseif b == 30 \n        265252859812191058636308480000000\n\
    \    elseif b == 31 \n        8222838654177922817725562880000000\n    elseif b\
    \ == 32 \n        17592186044416862704291213372960000000\n    elseif b == 33\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ib437mb.jl:1\nin expression starting at /tmp/tmp2ib437mb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10 \nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpkqf0f108.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkqf0f108.jl:18\n\
    in expression starting at /tmp/tmpkqf0f108.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10 \nend\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes in two integers and returns the sum of the \n    unit\
    \ digits of their product (modulo 10).\n    Assume the input is always valid.\n\
    \    Examples:\n    >>> sum(148, 412)\n    16\n    >>> sum(19, 28)\n    72\n \
    \   >>> sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n    20\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmptkegho42.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptkegho42.jl:18\n\
    in expression starting at /tmp/tmptkegho42.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0 \n        error(\"Invalid input\")\n    elseif b == 0 \n        error(\"\
    Invalid input\")\n    elseif b == 1 \n        return a\n    elseif b > a \n  \
    \      error(\"Invalid input\")\n    else\n        return a * b\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbbpk6j3a.jl:27\nin expression starting at\
    \ /tmp/tmpbbpk6j3a.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b == 0 \n        a\n    elseif b < 0 \n        0\n    elseif b > 9 \n      \
    \  0\n    elseif b == 0 \n        a\n    elseif b < 0 \n        0\n    elseif\
    \ b > 9 \n        0\n    elseif b == 0 \n        a\n    elseif b < 0 \n      \
    \  0\n    elseif b > 9 \n        0\n    elseif b == 0 \n        a\n    elseif\
    \ b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b == 0 \n      \
    \  a\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b\
    \ == 0 \n        a\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n\
    \    elseif b == 0 \n        a\n    elseif b < 0 \n        0\n    elseif b > 9\
    \ \n        0\n    elseif b == 0 \n        a\n    elseif b < 0 \n        0\n \
    \   elseif b > 9 \n        0\n    elseif b == 0 \n        a\n    elseif b < 0\
    \ \n        0\n    elseif b > 9 \n        0\n    elseif b == 0 \n        a\n \
    \   elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b == 0\
    \ \n        a\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n  \
    \  elseif b == 0 \n        a\n    elseif b < 0 \n        0\n    elseif b > 9 \n\
    \        0\n    elseif b == 0 \n        a\n    elseif b < 0 \n        0\n    elseif\
    \ b > 9 \n        0\n    elseif b == 0 \n        a\n    elseif b < 0 \n      \
    \  0\n    elseif b > 9 \n        0\n    elseif b == 0 \n        a\n    elseif\
    \ b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b == 0 \n      \
    \  a\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b\
    \ == 0 \n        a\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n\
    \    elseif b == 0 \n        a\n    elseif b < 0 \n        0\n    elseif b > 9\
    \ \n        0\n    elseif b == 0 \n        a\n    elseif b < 0 \n        0\n \
    \   else\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp92c3tvq1.jl:131\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp92c3tvq1.jl:1\n\
    in expression starting at /tmp/tmp92c3tvq1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10 \nend \n\"\"\"\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp80xw1c18.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp80xw1c18.jl:18\n\
    in expression starting at /tmp/tmp80xw1c18.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nExercise 2\nWrite a function that takes two integers and\
    \ returns their sum.\nExamples:\n>>> add(148, 412)\n168\n>>> add(19, 28)\n42\n\
    >>> add(2020, 1851)\n2020\n>>> add(14, -15)\n14\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpf38uqb14.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf38uqb14.jl:18\n\
    in expression starting at /tmp/tmpf38uqb14.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0 \n        error(\"The input must be positive\")\n    elseif b == 0 \n  \
    \      error(\"The input must be positive\")\n    elseif b == 1 \n        return\
    \ a\n    else\n        return a * multiply(a//10, b%10)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj7_7joll.jl:25\nin expression starting at\
    \ /tmp/tmpj7_7joll.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0\n  \
    \      0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert multiply(14, -15) == 20\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two integers and returns\
    \ the sum of the \n    unit digits of their product (that is, the sum of the digits\
    \ of \n    the product of the unit digits). Assume that the input is always valid.\n\
    \    Examples:\n    >>> sum(multiply(148, 412))\n    16\n    >>> sum(multiply(19,\
    \ 28))\n    72\n    >>> sum(multiply(2020, 1851))\n    0\n    >>> sum(multiply(14,\
    \ -15))\n    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpy2wo7pbw.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy2wo7pbw.jl:18\n\
    in expression starting at /tmp/tmpy2wo7pbw.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        (a * 10 +\
    \ b) * 10\n    else\n        0\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of two integers. \nAssume the input is always\
    \ valid.\nExamples:\n>>> add(14, 12)\n24\n>>> add(19, 28)\n42\n>>> add(2020, 1851)\n\
    0\n>>> add(14, -15)\n20\n</text>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd8pgcm7n.jl:25\nin expression starting at\
    \ /tmp/tmpd8pgcm7n.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10 \nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfm469m7h.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm469m7h.jl:18\n\
    in expression starting at /tmp/tmpfm469m7h.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b < 10 \n        a * 10\n    elseif b < 100 \n        a * 10 + b\n    elseif\
    \ b < 1000 \n        a * 10 + b * 10\n    elseif b < 10000 \n        a * 10 +\
    \ b * 100\n    elseif b < 100000 \n        a * 10 + b * 1000\n    elseif b < 1000000\
    \ \n        a * 10 + b * 10000\n    elseif b < 10000000 \n        a * 10 + b *\
    \ 100000\n    elseif b < 100000000 \n        a * 10 + b * 1000000\n    elseif\
    \ b < 1000000000 \n        a * 10 + b * 10000000\n    elseif b < 10000000000 \n\
    \        a * 10 + b * 100000000\n    elseif b < 100000000000 \n        a * 10\
    \ + b * 1000000000\n    elseif b < 1000000000000 \n        a * 10 + b * 10000000000\n\
    \    elseif b < 10000000000000 \n        a * 10 + b * 100000000000\n    elseif\
    \ b < 100000000000000 \n        a * 10 + b * 1000000000000\n    elseif b < 1000000000000000\
    \ \n        a * 10 + b * 10000000000000\n    elseif b < 10000000000000000 \n \
    \       a * 10 + b * 100000000000000\n    elseif b < 100000000000000000 \n   \
    \     a * 10 + b * 1000000000000000\n    elseif b < 1000000000000000000 \n   \
    \     a * 10 + b * 10000000000000000\n    elseif b < 10000000000000000000 \n \
    \       a * 10 + b * 100000000000000000\n    elseif b < 100000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000\n    elseif b < 1000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000\n    elseif b < 10000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000\n    elseif b < 100000000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000000\n    elseif b < 1000000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000000\n    elseif b < 10000000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000000\n    elseif b < 100000000000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000000000\n    elseif b < 1000000000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000000000\n    elseif b < 10000000000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000000000\n    elseif b < 100000000000000000000000000000\
    \ \n        a\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplbfhc21g.jl:1\nin expression starting at /tmp/tmplbfhc21g.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        a * 10 * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpndx5usc6.jl:1\nin expression starting at /tmp/tmpndx5usc6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a*b).digits\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the digits of its input. \nAssume that\
    \ the input is always valid.\nExamples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n\
    72\n>>> sum(2020, 1851)\n0\n>>> sum(14, -15)\n20\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaxxpl4d6.jl:21\nin expression starting at\
    \ /tmp/tmpaxxpl4d6.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10 \nend \n</cell>\n\
    <code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product \n    (i.e., if the product is 148, the function should return\
    \ 16).\n    Assume the input is always valid.\n    Examples:\n    >>> sum(148,\
    \ 412)\n    16\n    >>> sum(19, 28)\n    72\n    >>> sum(2020, 1851)\n    0\n\
    \    >>> sum(14, -15)\n    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpmrzjz_tp.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmrzjz_tp.jl:18\n\
    in expression starting at /tmp/tmpmrzjz_tp.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        return a\n\
    \    else\n        return a * b\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp6g6n7gxd.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp6g6n7gxd.jl:28\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 60976 == 16\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6g6n7gxd.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6g6n7gxd.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp6g6n7gxd.jl:29\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 532 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6g6n7gxd.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6g6n7gxd.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp6g6n7gxd.jl:30\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 3739020 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6g6n7gxd.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6g6n7gxd.jl:27\ntest set: Error\
    \ During Test at /tmp/tmp6g6n7gxd.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(14, -15) == 20\n  Invalid input\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmp6g6n7gxd.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6g6n7gxd.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6g6n7gxd.jl:27\ntest set:\
    \ Test Failed at /tmp/tmp6g6n7gxd.jl:32\n  Expression: candidate(76, 67) ="
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0 \n        error(\"Invalid input\")\n    else if a == 0 || b == 0\n     \
    \   error(\"Invalid input\")\n    else\n        return a * b\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an integer and returns the sum of its unit digits.\nExamples:\n\
    >>> sum(148)\n16\n>>> sum(19)\n28\n>>> sum(2020)\n1851\n>>> sum(14)\n20\n</text>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj95mp5ez.jl:17\nin expression starting at\
    \ /tmp/tmpj95mp5ez.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) % (10^9 + 7)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,\
    \ -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function that takes two integers\
    \ and returns the sum of the \n    unit digits of their product (modulo 10^9 +\
    \ 7).\n    Assume the input is always valid.\n    Examples:\n    >>> sum(148,\
    \ 412)\n    16\n    >>> sum(19, 28)\n    72\n    >>> sum(2020, 1851)\n    0\n\
    \    >>> sum(14, -15)\n    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4g80_sm7.jl:21\nin expression starting at\
    \ /tmp/tmp4g80_sm7.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a*b).digits\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk6vaz1zp.jl:21\nin expression starting at\
    \ /tmp/tmpk6vaz1zp.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10 \nend \n\"\"\"\nComplete\
    \ the function that takes two integers and returns \n    the sum of the unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    >>> sum(148, 412)\n\
    \    168\n    >>> sum(19, 28)\n    72\n    >>> sum(2020, 1851)\n    2020\n   \
    \ >>> sum(14, -15)\n    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpi1mnkpl_.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi1mnkpl_.jl:18\n\
    in expression starting at /tmp/tmpi1mnkpl_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpphsq754y.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpphsq754y.jl:18\n\
    in expression starting at /tmp/tmpphsq754y.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) \nend \n\"\"\"\nComplete\
    \ the function that takes two integers and returns \n    the product of their\
    \ unit digits and a unit digit of '0'.\n    Assume the input is always valid.\n\
    \    Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjlr9r97g.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjlr9r97g.jl:1\n\
    in expression starting at /tmp/tmpjlr9r97g.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</code>\n<|/ a\
    \ tags=julia |>\n<| c |>\nThis doesn't work. `multiply(148, 412)` returns `16`,\
    \ but `multiply(19, 28)` returns `72`.\n<|/ c |>\n<| c |>\nYes, I missed that\
    \ case. Thanks for pointing it out. I've updated the answer.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer! I really appreciate it! I did some research and found\
    \ that Julia has `divmod` which does exactly what I want.\n<|/ c |>\n<| c |>\n\
    I added my own answer, which I believe is more efficient.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI did some research and found that Julia has divmod which does exactly what\
    \ I want.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpp2h14tqc.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp2h14tqc.jl:18\n\
    in expression starting at /tmp/tmpp2h14tqc.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > a \n        0\n    else\n\
    \        (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes an integer $n$ and returns the number of digits in\
    \ $n$. \nExamples:\n$$\nn_digits(123) = 2\nn_digits(1245) = 3\nn_digits(12456)\
    \ = 4\n$$\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpshso7leu.jl:25\nin expression starting at\
    \ /tmp/tmpshso7leu.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        0\n    elseif\
    \ b == 0 \n        a\n    else\n        multiply(a % 10, (b / 10) * 10) + a %\
    \ 10\n    end\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| a tags=julia,recursion\
    \ |>\nHere is a solution using recursion:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprlkryuvq.jl:27\nin expression starting at\
    \ /tmp/tmprlkryuvq.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) % 10\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nExercise 3\nWrite a function that takes two integers and\
    \ returns the sum of the unit digits. \nAssume the input is always valid.\nExamples:\n\
    >>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n>>> sum(14,\
    \ -15)\n20\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8xofr95o.jl:20\nin expression starting at\
    \ /tmp/tmp8xofr95o.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0\n  \
    \      0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns the sum of their unit digits.\n\
    Assume the input is always valid.\nExamples:\n>>> add(148, 412)\n168\n>>> add(19,\
    \ 28)\n72\n>>> add(2020, 1851)\n0\n>>> add(14, -15)\n20\n</text>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp4alet4tt.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4alet4tt.jl:18\n\
    in expression starting at /tmp/tmp4alet4tt.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10\nend\n</cell>\n<code\
    \ language=julia-1.0>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.0>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.0>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.0>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product \n    (i.e., if the product is 148, the function should return\
    \ 1 + 8).\n    For example, add(148, 412) should return 16.\n    \n    Use a while\
    \ loop to solve this problem.\n    \n    Use a for loop to solve this problem.\n\
    \    \n    Use a for loop to solve this problem.\n    \n    Use a for loop to\
    \ solve this problem.\n    \n    Use a for loop to solve this problem.\n    \n\
    \    Use a for loop to solve this problem.\n    \n    Use a for loop to solve\
    \ this problem.\n    \n    Use a for loop to solve this problem.\n    \n    Use\
    \ a for loop to solve this problem.\n    \n    Use a for loop to solve this problem.\n\
    \    \n    Use a for loop to solve this problem.\n    \n    Use a for loop to\
    \ solve this problem.\n    \n    Use a for loop to solve this problem.\n    \n\
    \    Use a for loop to solve this problem.\n    \n    Use a for loop to solve\
    \ this problem.\n    \n    Use a for loop to solve this problem.\n    \n    Use\
    \ a for loop to solve this problem.\n    \n    Use a for loop to solve this problem.\n\
    \    \n    Use a for loop to solve this problem.\n    \n    Use a for loop to\
    \ solve this problem.\n    \n    Use a for loop to solve this problem.\n    \n\
    \    Use a for loop to solve this problem.\n    \n    Use a for loop to solve\
    \ this problem.\n    \n    Use a for loop to solve this problem.\n    \n    Use\
    \ a for loop to solve this problem.\n    \n    Use a for loop to solve this problem.\n\
    \    \n    Use a for loop to solve this problem.\n    \n    Use a for loop to\
    \ solve this problem.\n    \n    Use a for loop to solve this problem.\n    \n\
    \    Use a for loop to solve this problem.\n    \n    Use a for loop to solve\
    \ this problem.\n    \n    Use a \nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpnu1o712e.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnu1o712e.jl:18\n\
    in expression starting at /tmp/tmpnu1o712e.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else \n        (a * b) % 10\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes an integer and returns the sum of the unit digits.\
    \ \nFor example, the sum of the unit digits of the number 148 would be 1 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf_vwjgm_.jl:20\nin expression starting at\
    \ /tmp/tmpf_vwjgm_.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        a * 10^(b-1)\n\
    \    else\n        0\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis\
    \ does not work. `multiply(148, 412)` returns `16`, not `72`.\n<|/ c |>\n<| c\
    \ |>\nI fixed the code so it now works. I tested it before posting.\n<|/ c |>\n\
    <| c |>\nI tested it again and it works. I must have had a typo when I first tested\
    \ it.\n<|/ c |>\n<| c |>\nI tested it again and it works. I must have had a typo\
    \ when I first tested it.\n<|/ c |>\n<| c |>\nI tested it again and it works.\
    \ I must have had a typo when I first tested it.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfzhukagg.jl:25\nin expression starting at\
    \ /tmp/tmpfzhukagg.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    else if a == 0 || b == 0\n      \
    \  return 0\n    else\n        return (a * b) % 10\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an integer and returns the sum of the\
    \ digits of that integer.\nExamples:\n>>> sum(148)\n8\n>>> sum(19)\n7\n>>> sum(2020)\n\
    0\n>>> sum(14)\n4\n>>> sum(15)\n5\n>>> sum(0)\n0\n>>> sum(1)\n1\n>>> sum(2)\n\
    2\n>>> sum(3)\n3\n>>> sum(4)\n4\n>>> sum(5)\n5\n>>> sum(6)\n6\n>>> sum(7)\n7\n\
    >>> sum(8)\n8\n>>> sum(9)\n9\n>>> sum(10)\n10\n>>> sum(11)\n11\n>>> sum(12)\n\
    12\n>>> sum(13)\n13\n>>> sum(14)\n14\n>>> sum(15)\n15\n>>> sum(16)\n16\n>>> sum(17)\n\
    17\n>>> sum(18)\n18\n>>> sum(19)\n19\n>>> sum(20)\n20\n>>> sum(21)\n21\n>>> sum(22)\n\
    22\n>>> sum(23)\n23\n>>> sum(24)\n24\n>>> sum(25)\n25\n>>> sum(26)\n26\n>>> sum(27)\n\
    27\n>>> sum(28)\n28\n>>> sum(29)\n29\n>>> sum(30)\n30\n>>> sum(31)\n31\n>>> sum(32)\n\
    32\n>>> sum(33)\n33\n>>> sum(34)\n34\n>>> sum(35)\n35\n>>> sum(36)\n36\n>>> sum(37)\n\
    37\n>>> sum(38)\n38\n>>> sum(39)\n39\n>>> sum(40)\n40\n>>> sum(41)\n41\n>>> sum(42)\n\
    42\n>>> sum(43)\n43\n>>> sum(44)\n44\n>>> sum(45)\n45\n>>> sum(46)\n46\n>>> sum(47)\n\
    47\n>>> sum(48)\n48\n>>> sum(49)\n49\n>>> sum(50)\n50\n>>> sum(51)\n51\n>>> sum(52)\n\
    52\n>>> sum(53)\n53\n>>> sum(54)\n54\n>>> sum(55)\n55\n>>> sum(56)\n56\n>>> sum(57)\n\
    57\n>>> sum(58)\n58\n>>> sum(59)\n59\n>>> sum(60)\n60\n>>> sum(61)\n61\n>>> sum(62)\n\
    62\n>>> sum(63)\n\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1e74dqx7.jl:17\nin expression starting at\
    \ /tmp/tmp1e74dqx7.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</code>\n<|/ a\
    \ tags=julia,function |>\n<| c |>\nThank you for your answer. I tried your code,\
    \ but I got this error message: ```MethodError: no method matching multiply(::Int64,\
    \ ::Int64)```\n<|/ c |>\n<| c |>\nI edited my answer to include the full code\
    \ I tested with. Can you try it again?\n<|/ c |>\n<| c |>\nI tested it again and\
    \ it worked! Thank you so much!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpjru4schy.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjru4schy.jl:18\n\
    in expression starting at /tmp/tmpjru4schy.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * 10 + b) \n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf39383hi.jl:21\nin expression starting at\
    \ /tmp/tmpf39383hi.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return a * b\n</code>\n<|/ a tags=haskell,functional-programming\
    \ |>\n<| a dscore=0 |>\n<code>\nimport Data.List\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_09dk2er.jl:19\nin expression starting at\
    \ /tmp/tmp_09dk2er.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        (a * 10^(b\
    \ % 10)) % 10\n    else\n        0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the digits of its argument. \nFor example,\
    \ add(123, 456) should return 71.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg8n3hqud.jl:25\nin expression starting at\
    \ /tmp/tmpg8n3hqud.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes two integers and returns the sum of the\
    \ \n    unit digits of their product (modulo 10).\n    Assume the input is always\
    \ valid.\n    Examples:\n    >>> sum(148, 412)\n    16\n    >>> sum(19, 28)\n\
    \    72\n    >>> sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n    20\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmppyolmpit.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppyolmpit.jl:18\n\
    in expression starting at /tmp/tmppyolmpit.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the digits of its input. \nAssume that\
    \ the input is always valid.\nExamples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n\
    72\n>>> sum(2020, 1851)\n0\n>>> sum(14, -15)\n20\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1fn1meve.jl:21\nin expression starting at\
    \ /tmp/tmp1fn1meve.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b < 10 \n        a * 10\n    elseif b < 100 \n        a * 10 + b\n    elseif\
    \ b < 1000 \n        a * 10 + b * 10\n    elseif b < 10000 \n        a * 10 +\
    \ b * 100\n    elseif b < 100000 \n        a * 10 + b * 1000\n    elseif b < 1000000\
    \ \n        a * 10 + b * 10000\n    elseif b < 10000000 \n        a * 10 + b *\
    \ 100000\n    elseif b < 100000000 \n        a * 10 + b * 1000000\n    elseif\
    \ b < 1000000000 \n        a * 10 + b * 10000000\n    elseif b < 10000000000 \n\
    \        a * 10 + b * 100000000\n    elseif b < 100000000000 \n        a * 10\
    \ + b * 1000000000\n    elseif b < 1000000000000 \n        a * 10 + b * 10000000000\n\
    \    elseif b < 10000000000000 \n        a * 10 + b * 100000000000\n    elseif\
    \ b < 100000000000000 \n        a * 10 + b * 1000000000000\n    elseif b < 1000000000000000\
    \ \n        a * 10 + b * 10000000000000\n    elseif b < 10000000000000000 \n \
    \       a * 10 + b * 100000000000000\n    elseif b < 100000000000000000 \n   \
    \     a * 10 + b * 1000000000000000\n    elseif b < 1000000000000000000 \n   \
    \     a * 10 + b * 10000000000000000\n    elseif b < 10000000000000000000 \n \
    \       a * 10 + b * 100000000000000000\n    elseif b < 100000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000\n    elseif b < 1000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000\n    elseif b < 10000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000\n    elseif b < 100000000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000000\n    elseif b < 1000000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000000\n    elseif b < 10000000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000000\n    elseif b < 100000000000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000000000\n    elseif b < 1000000000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000000000\n    elseif b < 10000000000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000000000\n    elseif b < 100000000000000000000000000000\
    \ \n        a\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplbfhc21g.jl:1\nin expression starting at /tmp/tmplbfhc21g.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits. \n\
    Assume the input is always valid.\nExamples:\n>>> sum(148, 412)\n16\n>>> sum(19,\
    \ 28)\n72\n>>> sum(2020, 1851)\n0\n>>> sum(14, -15)\n20\n\"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfert7b5a.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfert7b5a.jl:18\n\
    in expression starting at /tmp/tmpfert7b5a.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of its\
    \ unit digits. \nAssume that the input is always valid.\nExamples:\n>>> sum(148,\
    \ 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n>>> sum(14, -15)\n20\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph_jbpnkj.jl:21\nin expression starting at\
    \ /tmp/tmph_jbpnkj.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10 \nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpkqf0f108.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkqf0f108.jl:18\n\
    in expression starting at /tmp/tmpkqf0f108.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        return a\n\
    \    else\n        return a*b\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an integer and returns the sum of the unit digits of that\
    \ integer.\nExamples:\n>>> sum(148)\n16\n>>> sum(19)\n7\n>>> sum(2020)\n0\n>>>\
    \ sum(14)\n20\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzgf5lvno.jl:23\nin expression starting at\
    \ /tmp/tmpzgf5lvno.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        0\n    elseif\
    \ b == 0 \n        a\n    else\n        multiply(a/10, b%10)*10 + a*b%10\n   \
    \ end\nend\n</code>\n<|/ a tags=recursion,julia,algorithm |>\n<| c |>\nThis doesn't\
    \ work. Try it with `multiply(148, 412)`.\n<|/ c |>\n<| c |>\nI fixed the bug.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| a dscore=2 |>\nThe other answers here\
    \ are great, but I wanted to add my own.\nI wrote a package called UnitDigits\
    \ that does this for you. Here are some examples:\n<code>\njulia> using UnitDigits\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8fl4rkh3.jl:27\nin expression starting at\
    \ /tmp/tmp8fl4rkh3.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * 10 + b) mod 10\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the digits of its input. \nAssume that\
    \ the input is always valid.\nExamples:\n>>> sum(1234)\n4\n>>> sum(123)\n3\n>>>\
    \ sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpdy0o_blr.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdy0o_blr.jl:18\n\
    in expression starting at /tmp/tmpdy0o_blr.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        0\n    elseif\
    \ b == 0 \n        a\n    elseif b == 1 \n        a\n    elseif b == 2 \n    \
    \    a * 10\n    elseif b == 3 \n        a * 100\n    elseif b == 4 \n       \
    \ a * 1000\n    elseif b == 5 \n        a * 10000\n    elseif b == 6 \n      \
    \  a * 100000\n    elseif b == 7 \n        a * 1000000\n    elseif b == 8 \n \
    \       a * 10000000\n    elseif b == 9 \n        a * 100000000\n    elseif b\
    \ == 10 \n        a * 1000000000\n    elseif b == 11 \n        a * 10000000000\n\
    \    elseif b == 12 \n        a * 100000000000\n    elseif b == 13 \n        a\
    \ * 1000000000000\n    elseif b == 14 \n        a * 10000000000000\n    elseif\
    \ b == 15 \n        a * 100000000000000\n    elseif b == 16 \n        a * 1000000000000000\n\
    \    elseif b == 17 \n        a * 10000000000000000\n    elseif b == 18 \n   \
    \     a * 100000000000000000\n    elseif b == 19 \n        a * 1000000000000000000\n\
    \    elseif b == 20 \n        a * 10000000000000000000\n    elseif b == 21 \n\
    \        a * 100000000000000000000\n    elseif b == 22 \n        a * 1000000000000000000000\n\
    \    elseif b == 23 \n        a * 10000000000000000000000\n    elseif b == 24\
    \ \n        a * 100000000000000000000000\n    elseif b == 25 \n        a * 1000000000000000000000000\n\
    \    elseif b == 26 \n        a * 10000000000000000000000000\n    elseif b ==\
    \ 27 \n        a * 100000000000000000000000000\n    elseif b == 28 \n        a\
    \ * 1000000000000000000000000000\n    elseif b == 29 \n        a * 10000000000000000000000000000\n\
    \    elseif b == 30 \n        a * 100000000000000000000000000000\n    elseif b\
    \ == 31 \n        a * 1000000000000000000000000000000\n    elseif b == 32 \n \
    \       a * 10000000000000000000000000000000\n    elseif b == 33 \n        a *\
    \ 100000000000000000000000000000000\n    elseif b == 34 \n        a * 1000000000000000000000000000000000\n\
    \    elseif b == 35\n        a * 10000000000000000000000000000000000\n    elseif\
    \ b == 36\n        a * 100000000000000000000000000000000000\n    elseif b == 37\n\
    \        a * 1000000000000000000000000000000000000\n    elseif b == 38\n     \
    \   a * 10000000000000000000000000000000000000\n    elseif b == 39\n        a\
    \ * 100000000000000000000000000000000000000\n    elseif b == 40\n        a * 1000000000000000000000000000000000000000\n\
    \    elseif b == 41\n        a * 10000000000000000000000000000000000\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn791s5pc.jl:1\nin expression starting at /tmp/tmpn791s5pc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) % (10^9 + 7)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,\
    \ -15) == 20\n</cell>\n<text>\nProblem 3\nWrite a function that takes a string\
    \ and returns the number of times each character appears in the string.\nExamples:\n\
    >>> count_chars(\"hello\")\n{'h': 2, 'e': 2, 'l': 2, 'o': 1}\n>>> count_chars(\"\
    How are you?\")\n{'H': 1, 'e': 1, 'l': 2, 'o': 2, '?': 1}\n>>> count_chars(\"\
    The quick brown fox jumps over the lazy dog\")\n{'T': 2, 'h': 2, 'q': 2, 'u':\
    \ 2, 'e': 2, 'r': 2, 'n': 2, 'g': 2, 'o': 2, 'f': 2, 'x': 2, 'j': 2, 's': 2, 'u':\
    \ 2, 'y': 2, 'k': 2, 'w': 2, 'o': 2, 'v': 2, 'e': 2, 'd': 2, 'l': 2, 'y': 2, 'o':\
    \ 2, 'h': 2, 'g': 2, 'm': 2, 'p': 2, 'o': 2}\n>>> count_chars(\"The quick brown\
    \ fox jumps over the lazy dog\")\n{'T': 2, 'h': 2, 'q': 2, 'u': 2, 'e': 2, 'r':\
    \ 2, 'n': 2, 'g': 2, 'o': 2, 'f': 2, 'x': 2, 'j': 2, 's': 2, 'u': 2, 'y': 2, 'k':\
    \ 2, 'w': 2, 'o': 2, 'v': 2, 'e': 2, 'd': 2, 'l': 2, 'y': 2, 'o': 2, 'h': 2, 'g':\
    \ 2, 'm': 2, 'p': 2, 'o': 2}\n>>> count_chars(\"The quick brown fox jumps over\
    \ the lazy dog\")\n{'T': 2, 'h': 2, 'q': 2, 'u': 2, 'e': 2, 'r': 2, 'n': 2, 'g':\
    \ 2, 'o': 2, 'f': 2, 'x': 2, 'j': 2, 's': 2, 'u': 2, 'y': 2, 'k': 2, 'w': 2, 'o':\
    \ 2, 'v': 2, 'e': 2, 'd': 2, 'l': 2, 'y': 2, 'o': 2, 'h': 2, 'g': 2, 'm': 2, 'p':\
    \ 2, 'o': 2}\n>>> count_chars(\"The quick brown fox jumps over the lazy dog\"\
    )\n{'T': 2, 'h': 2, 'q': 2, 'u': 2, 'e': 2, 'r': 2, 'n': 2, 'g': 2, 'o': 2, 'f':\
    \ 2, 'x': 2, 'j': 2, 's': 2, 'u': 2, 'y': 2, 'k': 2, 'w': 2, '\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv254bfbh.jl:21\nin expression starting at\
    \ /tmp/tmpv254bfbh.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > a \n        0\n    elseif\
    \ b == a \n        a\n    else\n        multiply(b, a % b)\n    end\nend\n</code>\n\
    <|/ a tags=julia,recursion,algorithm |>\n<| a dscore=2 |>\nI wrote a recursive\
    \ function which returns the product of its unit digits. I used the fact that\
    \ if n is divisible by 10, then its unit digits will be divisible by 10 as well.\
    \ \n<code>\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9tddy590.jl:27\nin expression starting at\
    \ /tmp/tmp9tddy590.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10 \nend \n</cell>\n\
    <code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer and returns the sum of the unit digits of that\
    \ integer.\nExamples:\n>>> sum(148)\n2\n>>> sum(19)\n3\n>>> sum(2020)\n0\n>>>\
    \ sum(14)\n4\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n\
    >>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpv3hhsazc.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv3hhsazc.jl:18\n\
    in expression starting at /tmp/tmpv3hhsazc.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0\n  \
    \      return a\n    \n    if a < 0\n        return multiply(-a, b)\n    \n  \
    \  if b < 0\n        return multiply(a, -b)\n    \n    if a < b\n        return\
    \ multiply(a, b)\n    \n    if a > b\n        return multiply(-a, b)\n    \n \
    \   if a < b\n        return multiply(a, b)\n    \n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63srel_0.jl:1\nin expression starting at /tmp/tmp63srel_0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    else\n        return a * b\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes\
    \ two integers and returns \n    the product of their unit digits.\n    Assume\
    \ the input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n\
    \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4d7k8rnx.jl:21\nin expression starting at\
    \ /tmp/tmp4d7k8rnx.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0 \n        error(\"Invalid input\")\n    else if a == 0 || b == 0\n     \
    \   error(\"Invalid input\")\n    else\n        return (a * b) % 10\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nExamples:\n>>> count_characters(\"\
    Hello World\")\n12\n>>> count_characters(\"Hello World!\")\n10\n>>> count_characters(\"\
    Hello World!\", true)\n5\n>>> count_characters(\"Hello World!\", false)\n6\n>>>\
    \ count_characters(\"Hello World!\", true)\n5\n>>> count_characters(\"Hello World!\"\
    , false)\n6\n>>> count_characters(\"Hello World!\", true)\n5\n>>> count_characters(\"\
    Hello World!\", false)\n6\n>>> count_characters(\"Hello World!\", true)\n5\n>>>\
    \ count_characters(\"Hello World!\", false)\n6\n>>> count_characters(\"Hello World!\"\
    , true)\n5\n>>> count_characters(\"Hello World!\", false)\n6\n>>> count_characters(\"\
    Hello World!\", true)\n5\n>>> count_characters(\"Hello World!\", false)\n6\n>>>\
    \ count_characters(\"Hello World!\", true)\n5\n>>> count_characters(\"Hello World!\"\
    , false)\n6\n>>> count_characters(\"Hello World!\", true)\n5\n>>> count_characters(\"\
    Hello World!\", false)\n6\n>>> count_characters(\"Hello World!\", true)\n5\n>>>\
    \ count_characters(\"Hello World!\", false)\n6\n>>> count_characters(\"Hello World!\"\
    , true)\n5\n>>> count_characters(\"Hello World!\", false)\n6\n>>> count_characters(\"\
    Hello World!\", true)\n5\n>>> count_characters(\"Hello World!\", false)\n6\n>>>\
    \ count_characters(\"Hello World!\", true)\n5\n>>> count_characters(\"Hello World!\"\
    , false)\n6\n>>> count_characters(\"Hello World!\", true)\n5\n>>> count_characters(\"\
    Hello World!\", false)\n6\n>>> count_characters(\"Hello World!\", true)\n5\n>>>\
    \ count_characters(\"Hello World!\", false)\n6\n>>> count_characters(\"Hello World!\"\
    , true)\n5\n>>> count_characters(\"Hello World!\", false)\n6\n>>> count_characters(\"\
    Hello World!\", true)\n5\n>>> count_characters(\"Hello World!\", false)\n6\n>>>\
    \ count_characters(\"Hello World!\", true)\n5\n>>> count_characters(\"Hello World!\"\
    , false)\n6\n>>> count_character\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphi10vvfi.jl:17\nin expression starting at\
    \ /tmp/tmphi10vvfi.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 or b\
    \ < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        0\n    else\n\
    \        (a * b).digits\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"b\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3cawqw2o.jl:15\nin expression starting at /tmp/tmp3cawqw2o.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        return a\n\
    \    else\n        return a*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpczy8boz0.jl:23\nin expression starting at\
    \ /tmp/tmpczy8boz0.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b == 0 \n        a\n    elseif b == 1 \n        10\n    elseif b == 2 \n   \
    \     20\n    elseif b == 3 \n        30\n    elseif b == 4 \n        40\n   \
    \ elseif b == 5 \n        50\n    elseif b == 6 \n        60\n    elseif b ==\
    \ 7 \n        70\n    elseif b == 8 \n        80\n    elseif b == 9 \n       \
    \ 90\n    elseif b == 10 \n        100\n    elseif b == 11 \n        110\n   \
    \ elseif b == 12 \n        120\n    elseif b == 13 \n        130\n    elseif b\
    \ == 14 \n        140\n    elseif b == 15 \n        150\n    elseif b == 16 \n\
    \        160\n    elseif b == 17 \n        170\n    elseif b == 18 \n        180\n\
    \    elseif b == 19 \n        190\n    elseif b == 20 \n        200\n    elseif\
    \ b == 21 \n        210\n    elseif b == 22 \n        220\n    elseif b == 23\
    \ \n        230\n    elseif b == 24 \n        240\n    elseif b == 25 \n     \
    \   250\n    elseif b == 26 \n        260\n    elseif b == 27 \n        270\n\
    \    elseif b == 28 \n        280\n    elseif b == 29 \n        290\n    elseif\
    \ b == 30 \n        300\n    elseif b == 31 \n        310\n    elseif b == 32\
    \ \n        320\n    elseif b == 33 \n        330\n    elseif b == 34 \n     \
    \   340\n    elseif b == 35\n        350\n    elseif b == 36\n        360\n  \
    \  elseif b == 37\n        370\n    elseif b == 38\n        380\n    elseif b\
    \ == 39\n        390\n    elseif b == 40\n        400\n    elseif b == 41 \n \
    \       410\n    elseif b == 42 \n        420\n    elseif b == 43 \n        430\n\
    \    elseif b == 44 \n        440\n    elseif b == 45 \n        450\n    elseif\
    \ b == 46 \n        460\n    elseif b == 47 \n        470\n    elseif b == 48\
    \ \n        480\n    elseif b == 49 \n        490\n    elseif b == 50\n      \
    \  500\n    elseif b == 51 \n        510\n    elseif b == 52 \n        520\n \
    \   elseif b == 53 \n        530\n    elseif b == 54\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo9yq8xy1.jl:1\nin expression starting at /tmp/tmpo9yq8xy1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        (a * 10^(b-1))\
    \ * 10^(b-2)\n    else\n        0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvhxt3b51.jl:25\nin expression starting at\
    \ /tmp/tmpvhxt3b51.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b < a \n        0\n    elseif b == a \n        1\n    elseif b > a \n      \
    \  0\n    elseif b == 0 \n        0\n    elseif b == 1 \n        1\n    elseif\
    \ b == 2 \n        2\n    elseif b == 3 \n        6\n    elseif b == 4 \n    \
    \    24\n    elseif b == 5 \n        120\n    elseif b == 6 \n        720\n  \
    \  elseif b == 7 \n        5040\n    elseif b == 8 \n        40320\n    elseif\
    \ b == 9 \n        362880\n    elseif b == 10 \n        3628800\n    elseif b\
    \ == 11 \n        39916800\n    elseif b == 12 \n        479001600\n    elseif\
    \ b == 13 \n        6227020800\n    elseif b == 14 \n        87178291200\n   \
    \ elseif b == 15 \n        1307674368000\n    elseif b == 16 \n        20922789888000\n\
    \    elseif b == 17 \n        355687428096000\n    elseif b == 18 \n        6402373705728000\n\
    \    elseif b == 19 \n        121645100408832000\n    elseif b == 20 \n      \
    \  2432902008176640000\n    elseif b == 21 \n        51090942171709440000\n  \
    \  elseif b == 22 \n        1124000727777607680000\n    elseif b == 23 \n    \
    \    25852016738884976640000\n    elseif b == 24 \n        620448401733239439360000\n\
    \    elseif b == 25 \n        15511210043330985984000000\n    elseif b == 26 \n\
    \        403291461126605635584000000\n    elseif b == 27 \n        10888869450418352160768000000\n\
    \    elseif b == 28 \n        304888344611713860501504000000\n    elseif b ==\
    \ 29 \n        8841761993739701954543616000000\n    elseif b == 30 \n        265252859812191058636308480000000\n\
    \    elseif b == 31 \n        8222838654177922817725562880000000\n    elseif b\
    \ == 32 \n        17592186044416862704291213372960000000\n    elseif b == 33\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ib437mb.jl:1\nin expression starting at /tmp/tmp2ib437mb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10 \nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpuq4f23r8.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuq4f23r8.jl:18\n\
    in expression starting at /tmp/tmpuq4f23r8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 or b\
    \ < 0 \n        error(\"The input must be positive\")\n    else if a == 0 || b\
    \ == 0\n        error(\"The input must be positive\")\n    else\n        return\
    \ a*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n\
    \    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n\
    \    >>> multiply(14, -15)\n    20\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"b\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8yud1ry3.jl:15\nin expression starting at /tmp/tmp8yud1ry3.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the digits of its input. \nFor example,\
    \ add(123, 456) should return 7. \nAssume that the input is always valid.\nExamples:\n\
    >>> add(148, 412)\n7\n>>> add(19, 28)\n11\n>>> add(2020, 1851)\n0\n>>> add(14,\
    \ -15)\n20\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7qwjtt_r.jl:21\nin expression starting at\
    \ /tmp/tmp7qwjtt_r.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</code>\n<|/ a\
    \ tags=julia |>\n<| c |>\nThis doesn't work. `multiply(148, 412)` returns `16`,\
    \ not `72`.\n<|/ c |>\n<| c |>\nThanks, I fixed the answer\n<|/ c |>\n<| a dscore=2\
    \ |>\nI believe that this is what you are looking for:\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp2mfnh_xx.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2mfnh_xx.jl:18\n\
    in expression starting at /tmp/tmp2mfnh_xx.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        return a\n\
    \    else\n        return a * b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp0_qn3fa.jl:23\nin expression starting at\
    \ /tmp/tmpp0_qn3fa.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * 10^(b-1))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive integer $n$ and returns the number of digits\
    \ in $n$. \nExamples:\n$n = 1$: returns 1\n$n = 2$: returns 2\n$n = 3$: returns\
    \ 3\n$n = 4$: returns 3\n$n = 5$: returns 3\n$n = 6$: returns 3\n$n = 7$: returns\
    \ 3\n$n = 8$: returns 3\n$n = 9$: returns 3\n$n = 10$: returns 4\n$n = 11$: returns\
    \ 4\n$n = 12$: returns 4\n$n = 13$: returns 4\n$n = 14$: returns 4\n$n = 15$:\
    \ returns 4\n$n = 16$: returns 4\n$n = 17$: returns 4\n$n = 18$: returns 4\n$n\
    \ = 19$: returns 4\n$n = 20$: returns 4\n$n = 21$: returns 4\n$n = 22$: returns\
    \ 4\n$n = 23$: returns 4\n$n = 24$: returns 4\n$n = 25$: returns 4\n$n = 26$:\
    \ returns 4\n$n = 27$: returns 4\n$n = 28$: returns 4\n$n = 29$: returns 4\n$n\
    \ = 30$: returns 4\n$n = 31$: returns 4\n$n = 32$: returns 4\n$n = 33$: returns\
    \ 4\n$n = 34$: returns 4\n$n = 35$: returns 4\n$n = 36$: returns 4\n$n = 37$:\
    \ returns 4\n$n = 38$: returns 4\n$n = 39$: returns 4\n$n = 40$: returns 4\n$n\
    \ = 01$: returns 4\n$n = 02$: returns 4\n$n = 03$: returns 4\n$n = 04$: returns\
    \ 4\n$n = 05$: returns 4\n$n = 06$: returns 4\n$n = 07$: returns 4\n$n = 08$:\
    \ returns 4\n$n = 09$: returns 4\n$n = 10$: returns 4\n$n = 11$: returns 4\n$n\
    \ = 12\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpia5y4ee8.jl:21\nin expression starting at\
    \ /tmp/tmpia5y4ee8.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10 \nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpuq4f23r8.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuq4f23r8.jl:18\n\
    in expression starting at /tmp/tmpuq4f23r8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nExercise 2\nWrite a function that takes two integers and\
    \ returns the sum of the unit digits of their product \n(that is, the sum of the\
    \ digits of their product of their unit digits).\nExamples:\n>>> multiply(148,\
    \ 412)\n16\n>>> multiply(19, 28)\n72\n>>> multiply(2020, 1851)\n0\n>>> multiply(14,\
    \ -15)\n20\nHint: You can use the function multiply to compute the product of\
    \ two integers. \nThen you can use the function sum to compute the sum of the\
    \ digits of their product.\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpdw8t2oo9.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdw8t2oo9.jl:18\n\
    in expression starting at /tmp/tmpdw8t2oo9.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        (a * 10^(b-1))\
    \ * 10^(b-2)\n    else\n        0\n    end\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes two integers and returns the sum of the \n    unit\
    \ digits of their product (without using multiplication).\n    Assume the input\
    \ is always valid.\n    Examples:\n    >>> sum(148, 412)\n    16\n    >>> sum(19,\
    \ 28)\n    72\n    >>> sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n    20\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_r2a_ax5.jl:25\nin expression starting at\
    \ /tmp/tmp_r2a_ax5.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in it. \nFor example, \n    count_chars(\"hello\")\
    \ should return 5.\n    count_chars(\"helloworld\") should return 10.\n    count_chars(\"\
    helloworld!\") should return 17.\n    count_chars(\"helloworld!\", true) should\
    \ return 17.\n    count_chars(\"helloworld!\", false) should return 0.\n    count_chars(\"\
    helloworld!\", true) should return 17.\n    count_chars(\"helloworld!\", false)\
    \ should return 0.\n    count_chars(\"helloworld!\", true) should return 17.\n\
    \    count_chars(\"helloworld!\", false) should return 0.\n    count_chars(\"\
    helloworld!\", true) should return 17.\n    count_chars(\"helloworld!\", false)\
    \ should return 0.\n    count_chars(\"helloworld!\", true) should return 17.\n\
    \    count_chars(\"helloworld!\", false) should return 0.\n    count_chars(\"\
    helloworld!\", true) should return 17.\n    count_chars(\"helloworld!\", false)\
    \ should return 0.\n    count_chars(\"helloworld!\", true) should return 17.\n\
    \    count_chars(\"helloworld!\", false) should return 0.\n    count_chars(\"\
    helloworld!\", true) should return 17.\n    count_chars(\"helloworld!\", false)\
    \ should return 0.\n    count_chars(\"helloworld!\", true) should return 17.\n\
    \    count_chars(\"helloworld!\", false) should return 0.\n    count_chars(\"\
    helloworld!\", true) should return 17.\n    count_chars(\"helloworld!\", false)\
    \ should return 0.\n    count_chars(\"helloworld!\", true) should return 17.\n\
    \    count_chars(\"helloworld!\", false) should return 0.\n    count_chars(\"\
    helloworld!\", true) should return 17.\n    count_chars(\"helloworld!\", false)\
    \ should return 0.\n    count_chars(\"helloworld!\", true) should return 17.\n\
    \    count_chars(\"helloworld!\", false) should return 0.\n    count_chars(\"\
    helloworld!\", true) should return 17.\n    count_chars(\"helloworld!\", false)\
    \ should return 0.\n\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvc1hggrv.jl:21\nin expression starting at\
    \ /tmp/tmpvc1hggrv.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"The input must be positive\")\n    elseif b == 0\n    \
    \    error(\"The input must be positive\")\n    elseif b == 1\n        return\
    \ a\n    else\n        return a*b\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvrm1m6f8.jl:25\nin expression starting at\
    \ /tmp/tmpvrm1m6f8.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes two integers and returns the sum of the\
    \ \n    unit digits of their product digits.\n    Assume the input is always valid.\n\
    \    Examples:\n    >>> sum(148, 412)\n    16\n    >>> sum(19, 28)\n    72\n \
    \   >>> sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n    20\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpifrm9312.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpifrm9312.jl:18\n\
    in expression starting at /tmp/tmpifrm9312.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b < 10 \n        10 * b\n    elseif b < 100 \n        10 * b * 10\n    elseif\
    \ b < 1000 \n        10 * b * 10 * 10\n    elseif b < 10000 \n        10 * b *\
    \ 10 * 10 * 10\n    elseif b < 100000 \n        10 * b * 10 * 10 * 10 * 10\n \
    \   elseif b < 1000000 \n        10 * b * 10 * 10 * 10 * 10 * 10\n    elseif b\
    \ < 10000000 \n        10 * b * 10 * 10 * 10 * 10 * 10 * 10\n    elseif b < 100000000\
    \ \n        10 * b * 10 * 10 * 10 * 10 * 10 * 10 * 10\n    elseif b < 1000000000\
    \ \n        10 * b * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\n    elseif b < 10000000000\
    \ \n        10 * b * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\n    elseif b\
    \ < 100000000000 \n        10 * b * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\
    \ * 10\n    elseif b < 1000000000000 \n        10 * b * 10 * 10 * 10 * 10 * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10\n    elseif b < 10000000000000 \n        10 *\
    \ b * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\n    elseif b\
    \ < 100000000000000 \n        10 * b * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10\n    elseif b < 1000000000000000 \n        10 * b * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\n    elseif\
    \ b < 10000000000000000 \n        10 * b * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\n    elseif b < 100000000000000000 \n\
    \        10 * b * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10\n    elseif b < 1000000000000000000 \n        10 * b * 10\
    \ * 10 * 10\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj6qvnel0.jl:1\nin expression starting at /tmp/tmpj6qvnel0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b < 10 \n        a * 10\n    elseif b < 100 \n        a * 10 + b\n    elseif\
    \ b < 1000 \n        a * 10 + b * 10\n    elseif b < 10000 \n        a * 10 +\
    \ b * 100\n    elseif b < 100000 \n        a * 10 + b * 1000\n    elseif b < 1000000\
    \ \n        a * 10 + b * 10000\n    elseif b < 10000000 \n        a * 10 + b *\
    \ 100000\n    elseif b < 100000000 \n        a * 10 + b * 1000000\n    elseif\
    \ b < 1000000000 \n        a * 10 + b * 10000000\n    elseif b < 10000000000 \n\
    \        a * 10 + b * 100000000\n    elseif b < 100000000000 \n        a * 10\
    \ + b * 1000000000\n    elseif b < 1000000000000 \n        a * 10 + b * 10000000000\n\
    \    elseif b < 10000000000000 \n        a * 10 + b * 100000000000\n    elseif\
    \ b < 100000000000000 \n        a * 10 + b * 1000000000000\n    elseif b < 1000000000000000\
    \ \n        a * 10 + b * 10000000000000\n    elseif b < 10000000000000000 \n \
    \       a * 10 + b * 100000000000000\n    elseif b < 100000000000000000 \n   \
    \     a * 10 + b * 1000000000000000\n    elseif b < 1000000000000000000 \n   \
    \     a * 10 + b * 10000000000000000\n    elseif b < 10000000000000000000 \n \
    \       a * 10 + b * 100000000000000000\n    elseif b < 100000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000\n    elseif b < 1000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000\n    elseif b < 10000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000\n    elseif b < 100000000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000000\n    elseif b < 1000000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000000\n    elseif b < 10000000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000000\n    elseif b < 100000000000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000000000\n    elseif b < 1000000000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000000000\n    elseif b < 10000000000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000000000\n    elseif b < 100000000000000000000000000000\
    \ \n        a\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplbfhc21g.jl:1\nin expression starting at /tmp/tmplbfhc21g.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes two integers and returns their sum.\nAssume that the input\
    \ is always valid.\nExamples:\n>>> sum(148, 412)\n168\n>>> sum(19, 28)\n72\n>>>\
    \ sum(2020, 1851)\n0\n>>> sum(14, -15)\n20\n</text>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpnnq0x14y.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnnq0x14y.jl:18\n\
    in expression starting at /tmp/tmpnnq0x14y.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b % 10) * 10 + a \nend \n</cell>\n\
    <code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product (without using multiplication).\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyl0pu0iq.jl:20\nin expression starting at\
    \ /tmp/tmpyl0pu0iq.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return a * b\n</code>\n<|/ a tags=haskell,functional-programming\
    \ |>\n<| c |>\n`multiply` doesn't need to return `0` when the second argument\
    \ is `0`.\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\nimport Data.List\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03rm32us.jl:19\nin expression starting at\
    \ /tmp/tmp03rm32us.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) % 10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nExercise 2\nWrite a function that takes two integers and\
    \ returns the sum of their unit digits.\nAssume the input is always valid.\nExamples:\n\
    >>> add(148, 412)\n16\n>>> add(19, 28)\n72\n>>> add(2020, 1851)\n0\n>>> add(14,\
    \ -15)\n20\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpylrp_zr9.jl:21\nin expression starting at\
    \ /tmp/tmpylrp_zr9.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10 \nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpuq4f23r8.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuq4f23r8.jl:18\n\
    in expression starting at /tmp/tmpuq4f23r8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert multiply(14, -15) == 20\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes two integers and returns\
    \ their sum.\nAs a reminder, here are some examples of valid inputs:\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpqifv7_8n.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqifv7_8n.jl:18\n\
    in expression starting at /tmp/tmpqifv7_8n.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        0\n    elseif\
    \ b == 1\n        a\n    else\n        multiply(a % 10, (b - a) / 10)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes\
    \ two integers and returns \n    the product of their unit digits.\n    Assume\
    \ the input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n\
    \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpijf54_xv.jl:25\nin expression starting at\
    \ /tmp/tmpijf54_xv.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        0\n    elseif\
    \ b == 1\n        a\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the digits of an integer.\n\
    Examples:\n>>> sum(1234)\n4\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv477rfem.jl:25\nin expression starting at\
    \ /tmp/tmpv477rfem.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else \n        (a * b) mod 10\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the digits of its input. \nAssume that\
    \ the input is always valid.\nExamples:\n>>> sum(1234)\n4\n>>> sum(123)\n3\n>>>\
    \ sum(123)\n3\n>>> sum(0)\n0\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp7m1795wf.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7m1795wf.jl:18\n\
    in expression starting at /tmp/tmp7m1795wf.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        0\n    elseif\
    \ b == 1\n        a\n    else\n        multiply(a/10, b%10) * 10 + a%10\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ the sum of its unit digits.\nExamples:\n>>> sum(148)\n16\n>>> sum(19)\n28\n\
    >>> sum(2020)\n1851\n>>> sum(14)\n20\n>>> sum(15)\n20\n>>> sum(0)\n0\n>>> sum(1)\n\
    1\n>>> sum(2)\n2\n>>> sum(3)\n3\n>>> sum(4)\n4\n>>> sum(5)\n5\n>>> sum(6)\n6\n\
    >>> sum(7)\n7\n>>> sum(8)\n8\n>>> sum(9)\n9\n>>> sum(10)\n10\n>>> sum(11)\n11\n\
    >>> sum(12)\n12\n>>> sum(13)\n13\n>>> sum(14)\n14\n>>> sum(15)\n15\n>>> sum(16)\n\
    16\n>>> sum(17)\n17\n>>> sum(18)\n18\n>>> sum(19)\n19\n>>> sum(20)\n20\n>>> sum(21)\n\
    21\n>>> sum(22)\n22\n>>> sum(23)\n23\n>>> sum(24)\n24\n>>> sum(25)\n25\n>>> sum(26)\n\
    26\n>>> sum(27)\n27\n>>> sum(28)\n28\n>>> sum(29)\n29\n>>> sum(30)\n30\n>>> sum(31)\n\
    31\n>>> sum(32)\n32\n>>> sum(33)\n33\n>>> sum(34)\n34\n>>> sum(35)\n35\n>>> sum(36)\n\
    36\n>>> sum(37)\n37\n>>> sum(38)\n38\n>>> sum(39)\n39\n>>> sum(40)\n40\n>>> sum(41)\n\
    41\n>>> sum(42)\n42\n>>> sum(43)\n43\n>>> sum(44)\n44\n>>> sum(45)\n45\n>>> sum(46)\n\
    46\n>>> sum(47)\n47\n>>> sum(48)\n48\n>>> sum(49)\n49\n>>> sum(50)\n50\n>>> sum(51)\n\
    51\n>>> sum(52)\n52\n>>> sum(53)\n53\n>>> sum(54)\n54\n>>> sum(55)\n55\n>>> sum(56)\n\
    56\n>>> sum(57)\n57\n>>> sum(58)\n58\n>>> sum(59)\n59\n>>> sum(60)\n60\n>>> sum(61)\n\
    61\n\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpql6yfo9p.jl:25\nin expression starting at\
    \ /tmp/tmpql6yfo9p.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0\n  \
    \      return a\n    \n    digits = floor(log10(abs(b)))\n    \n    if digits\
    \ < 0\n        digits = -digits\n    \n    unitDigits = b / 10^digits\n    \n\
    \    return a * unitDigits\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two integers and returns\
    \ the sum of the unit digits of their product \n(e.g., multiply(148, 412) returns\
    \ 16).\nAssume that the input is always valid.\nExamples:\n>>> multiply(148, 412)\n\
    16\n>>> multiply(19, 28)\n72\n>>> multiply(2020, 1851)\n0\n>>> multiply(14, -15)\n\
    20\n</text>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzjx1ydrj.jl:27\nin expression starting at\
    \ /tmp/tmpzjx1ydrj.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else \n        (a * b) mod 10\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp5m_tv162.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5m_tv162.jl:18\n\
    in expression starting at /tmp/tmp5m_tv162.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return a * b\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=haskell,functional-programming |>\n<code>\nimport Data.List\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr4ze2444.jl:19\nin expression starting at\
    \ /tmp/tmpr4ze2444.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else \n        multiply(b, a % b)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of two integers, \n    but only if the second\
    \ integer is positive.\n    Examples:\n    >>> add(3, 4)\n    7\n    >>> add(3,\
    \ -4)\n    3\n    >>> add(3, 0)\n    3\n    >>> add(3, -0)\n    3\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpemehb5gm.jl:21\nin expression starting at\
    \ /tmp/tmpemehb5gm.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        if a < 0 \n            0\n        else\n        \
    \    a % b\n        end\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\n\
    The `if` statement can be simplified to `if a < 0 then 0 else a % b end`.\n<|/\
    \ c |>\n<| c |>\nI agree, but I wanted to keep it close to the original code as\
    \ much as possible.\n<|/ c |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo1qywu22.jl:25\nin expression starting at\
    \ /tmp/tmpo1qywu22.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * 10 + b) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise: Write\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product (without using multiplication).\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvet6m0l7.jl:21\nin expression starting at\
    \ /tmp/tmpvet6m0l7.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        a * 10 * multiply(a,\
    \ -b)\n    else\n        0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes two integers and returns the sum of the unit digits\
    \ of their product \n    For example: \n    >>> multiply(148, 412)\n    16\n \
    \   >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n\
    \    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    >>>\
    \ multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020,\
    \ 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    >>> multiply(148, 412)\n\
    \    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n\
    \    >>> multiply(14, -15)\n    20\n    >>> multiply(148, 412)\n    16\n    >>>\
    \ multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14,\
    \ -15)\n    20\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    >>> multiply(148,\
    \ 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n\
    \    0\n    >>> multiply(14, -15)\n    20\n    >>> multiply(148, 412)\n    16\n\
    \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    >>> multiply(\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp04ioquee.jl:25\nin expression starting at\
    \ /tmp/tmp04ioquee.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        a * 10^(b-1)\n\
    \    else\n        0\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two integers and returns\
    \ their sum.\nAssume the input is always valid.\nExamples:\n>>> add(148, 412)\n\
    16\n>>> add(19, 28)\n72\n>>> add(2020, 1851)\n0\n>>> add(14, -15)\n20\n\"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptqj0g_jy.jl:25\nin expression starting at\
    \ /tmp/tmptqj0g_jy.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0\n  \
    \      return 0\n    \n    mult_digits = zeros(10)\n    \n    mult_digits[a%10]\
    \ = a%10\n    \n    mult_digits[b%10] = b%10\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits * 10\n    \n    mult_digits = sum(mult_digits)\n\
    \    \n    return mult_digits\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes two integers and returns\
    \ the sum of the unit digits of their product \n    (i.e. the sum of the digits\
    \ of the product of their unit digits).\n    For example, multiply(148, 412) returns\
    \ 16 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmgspn9_1.jl:32\nin expression starting at\
    \ /tmp/tmpmgspn9_1.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return a * b\n</code>\n<|/ a dscore=1 |>\n\
    <| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp86az6rkm.jl:19\nin expression starting at\
    \ /tmp/tmp86az6rkm.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > a \n        0\n    else\n\
    \        (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    Complete the function that takes two integers and returns \n    the product of\
    \ their unit digits.\n    Assume the input is always valid.\n    Examples:\n \
    \   >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9dcn3yy7.jl:25\nin expression starting at\
    \ /tmp/tmp9dcn3yy7.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx8onp0n3.jl:21\nin expression starting at\
    \ /tmp/tmpx8onp0n3.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b < 10 \n        a * 10\n    elseif b < 100 \n        a * 10 + b\n    elseif\
    \ b < 1000 \n        a * 10 + b / 10\n    elseif b < 10000 \n        a * 10 +\
    \ b / 100\n    elseif b < 100000 \n        a * 10 + b / 1000\n    elseif b < 1000000\
    \ \n        a * 10 + b / 10000\n    elseif b < 10000000 \n        a * 10 + b /\
    \ 100000\n    elseif b < 100000000 \n        a * 10 + b / 1000000\n    elseif\
    \ b < 1000000000 \n        a * 10 + b / 10000000\n    elseif b < 10000000000 \n\
    \        a * 10 + b / 100000000\n    elseif b < 100000000000 \n        a * 10\
    \ + b / 1000000000\n    elseif b < 1000000000000 \n        a * 10 + b / 10000000000\n\
    \    elseif b < 10000000000000 \n        a * 10 + b / 100000000000\n    elseif\
    \ b < 100000000000000 \n        a * 10 + b / 1000000000000\n    elseif b < 1000000000000000\
    \ \n        a * 10 + b / 10000000000000\n    elseif b < 10000000000000000 \n \
    \       a * 10 + b / 100000000000000\n    elseif b < 100000000000000000 \n   \
    \     a * 10 + b / 1000000000000000\n    elseif b < 1000000000000000000 \n   \
    \     a * 10 + b / 10000000000000000\n    elseif b < 10000000000000000000 \n \
    \       a * 10 + b / 100000000000000000\n    elseif b < 100000000000000000000\
    \ \n        a * 10 + b / 1000000000000000000\n    elseif b < 1000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000\n    elseif b < 10000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000\n    elseif b < 100000000000000000000000\
    \ \n        a * 10 + b / 1000000000000000000000\n    elseif b < 1000000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000000\n    elseif b < 10000000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000000\n    elseif b < 100000000000000000000000000\
    \ \n        a * 10 + b / 1000000000000000000000000\n    elseif b < 1000000000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000000000\n    elseif b < 10000000000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000000000\n    elseif b < 100000000000000000000000000000\
    \ \n        a\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpshbqps7s.jl:1\nin expression starting at /tmp/tmpshbqps7s.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b < a \n        0\n    elseif b == a \n        1\n    elseif b > a \n      \
    \  0\n    elseif b == 0 \n        0\n    elseif b == 1 \n        a\n    elseif\
    \ b == 2 \n        a * 10\n    elseif b == 3 \n        a * 100\n    elseif b ==\
    \ 4 \n        a * 1000\n    elseif b == 5 \n        a * 10000\n    elseif b ==\
    \ 6 \n        a * 100000\n    elseif b == 7 \n        a * 1000000\n    elseif\
    \ b == 8 \n        a * 10000000\n    elseif b == 9 \n        a * 100000000\n \
    \   elseif b == 10 \n        a * 1000000000\n    elseif b == 11 \n        a *\
    \ 10000000000\n    elseif b == 12 \n        a * 100000000000\n    elseif b ==\
    \ 13 \n        a * 1000000000000\n    elseif b == 14 \n        a * 10000000000000\n\
    \    elseif b == 15 \n        a * 100000000000000\n    elseif b == 16 \n     \
    \   a * 1000000000000000\n    elseif b == 17 \n        a * 10000000000000000\n\
    \    elseif b == 18 \n        a * 100000000000000000\n    elseif b == 19 \n  \
    \      a * 1000000000000000000\n    elseif b == 20 \n        a * 10000000000000000000\n\
    \    elseif b == 21 \n        a * 100000000000000000000\n    elseif b == 22 \n\
    \        a * 1000000000000000000000\n    elseif b == 23 \n        a * 10000000000000000000000\n\
    \    elseif b == 24 \n        a * 100000000000000000000000\n    elseif b == 25\
    \ \n        a * 1000000000000000000000000\n    elseif b == 26 \n        a * 10000000000000000000000000\n\
    \    elseif b == 27 \n        a * 100000000000000000000000000\n    elseif b ==\
    \ 28 \n        a * 1000000000000000000000000000\n    elseif b == 29 \n       \
    \ a * 10000000000000000000000000000\n    elseif b == 30 \n        a * 100000000000000000000000000000\n\
    \    elseif b == 31 \n        a * 1000000000000000000000000000000\n    elseif\
    \ b == 32 \n        a * 10000000000000000000000000000000\n    elseif b == 33 \n\
    \        a * 100000000000000000000000000000000\n    elseif b == 34 \n        a\
    \ * 1000000000000000000000000000000000\n    elseif b == 35\n        a * 1000000000000000000000000000000000\n\
    \    elseif b == 36\n        a * 1000000000000000000000000000000000\n    elseif\
    \ b == 37\n        a * 1000000000000000000000000000000000\n    elseif b == 38\n\
    \        a * 1000000000000000000000000000000000\n    elseif b == 39\n        a\
    \ * 1000000000000000000000000000000000\n    elseif \nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing condition in \"elseif\" at /tmp/tmpbfhq8kzu.jl:107\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpbfhq8kzu.jl:108\nin expression\
    \ starting at /tmp/tmpbfhq8kzu.jl:108\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > a \n        0\n    else\n\
    \        (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes two integers and returns their sum.\nExamples:\n>>>\
    \ add(3, 4)\n7\n>>> add(5, -2)\n3\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>>\
    \ add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n\
    >>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n\
    0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n\
    0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n\
    0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n\
    0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n\
    0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n\
    0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n\
    0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n\
    0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n\
    0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n\
    0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmdy_sppr.jl:25\nin expression starting at\
    \ /tmp/tmpmdy_sppr.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 or b\
    \ < 0 \n        error(\"Invalid input\")\n    else if a == 0 || b == 0\n     \
    \   error(\"Invalid input\")\n    else\n        return a * b\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    digits(a::Int64)::Array{Int64}\n    digits(a::Int64,\
    \ b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64,\
    \ b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64,\
    \ b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64,\
    \ b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64,\
    \ b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64,\
    \ b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64,\
    \ b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64,\
    \ b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64,\
    \ b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64,\
    \ b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64,\
    \ b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64,\
    \ b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"b\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu0f_ob8k.jl:15\nin expression starting at /tmp/tmpu0f_ob8k.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer $n$\
    \ and returns the number of digits in $n$. \nExamples:\n$n = 10$ should return\
    \ $2$\n$n = 100$ should return $3$\n$n = 1000$ should return $4$\n$n = 10000$\
    \ should return $5$\n$n = 100000$ should return $6$\n$n = 1000000$ should return\
    \ $7$\n$n = 10000000$ should return $8$\n$n = 100000000$ should return $9$\n$n\
    \ = 1000000000$ should return $10$\n$n = 10000000000$ should return $11$\n$n =\
    \ 100000000000$ should return $12$\n$n = 1000000000000$ should return $13$\n$n\
    \ = 10000000000000$ should return $14$\n$n = 100000000000000$ should return $15$\n\
    $n = 1000000000000000$ should return $16$\n$n = 10000000000000000$ should return\
    \ $17$\n$n = 100000000000000000$ should return $18$\n$n = 1000000000000000000$\
    \ should return $19$\n$n = 10000000000000000000$ should return $20$\n$n = 100000000000000000000$\
    \ should return $21$\n$n = 1000000000000000000000$ should return $22$\n$n = 10000000000000000000000$\
    \ should return $23$\n$n = 100000000000000000000000$ should return $24$\n$n =\
    \ 1000000000000000000000000$ should return $25$\n$n = 10000000000000000000000000$\
    \ should return $26$\n$n = 100000000000000000000000000$ should return $27$\n$n\
    \ = 1000000000000000000000000000$ should return $28$\n$n = 10000000000000000000000000000$\
    \ should return $29$\n$n = 100000000000000000000000000000$ should return $30$\n\
    $n = 1000000000000000000000000000000$ should return $31$\n$n = 10000000000000000000000000000000$\
    \ should return $32$\n$n = 100000000000000000000000000000000$ should return $33$\n\
    $n = 1000000000000000000000000000000000$ should return $34$\n$n = 10000000000000000000000000000000000$\
    \ should return $35$\n$n = 100000000000000000000000000000000000$ should return\
    \ $36$\n$n = 100\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp4_trvfcx.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4_trvfcx.jl:18\n\
    in expression starting at /tmp/tmp4_trvfcx.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * 10 * b) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpufxom8h9.jl:21\nin expression starting at\
    \ /tmp/tmpufxom8h9.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b == 0 \n        a\n    elseif b == 1 \n        10\n    elseif b == 2 \n   \
    \     20\n    elseif b == 3 \n        30\n    elseif b == 4 \n        40\n   \
    \ elseif b == 5 \n        50\n    elseif b == 6 \n        60\n    elseif b ==\
    \ 7 \n        70\n    elseif b == 8 \n        80\n    elseif b == 9 \n       \
    \ 90\n    elseif b == 10 \n        100\n    elseif b == 11 \n        110\n   \
    \ elseif b == 12 \n        120\n    elseif b == 13 \n        130\n    elseif b\
    \ == 14 \n        140\n    elseif b == 15 \n        150\n    elseif b == 16 \n\
    \        160\n    elseif b == 17 \n        170\n    elseif b == 18 \n        180\n\
    \    elseif b == 19 \n        190\n    elseif b == 20 \n        200\n    elseif\
    \ b == 21 \n        210\n    elseif b == 22 \n        220\n    elseif b == 23\
    \ \n        230\n    elseif b == 24 \n        240\n    elseif b == 25 \n     \
    \   250\n    elseif b == 26 \n        260\n    elseif b == 27 \n        270\n\
    \    elseif b == 28 \n        280\n    elseif b == 29 \n        290\n    elseif\
    \ b == 30 \n        300\n    elseif b == 31 \n        310\n    elseif b == 32\
    \ \n        320\n    elseif b == 33 \n        330\n    elseif b == 34 \n     \
    \   340\n    elseif b == 35\n        350\n    elseif b == 36\n        360\n  \
    \  elseif b == 37\n        370\n    elseif b == 38\n        380\n    elseif b\
    \ == 39\n        390\n    elseif b == 40\n        400\n    elseif b == 41 \n \
    \       410\n    elseif b == 42 \n        420\n    elseif b == 43 \n        430\n\
    \    elseif b == 44\n        440\n    elseif b == 45\n        450\n    elseif\
    \ b == 46\n        460\n    elseif b == 47\n        470\n    elseif b == 48\n\
    \        480\n    elseif b == 49\n        490\n    elseif b == 50\n        500\n\
    \    elseif b == 51 \n        510\n    elseif b == 52 \n        520\n    elseif\
    \ b == 53 \n        530\n    elseif b == 54\n        540\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppw9f1ynl.jl:1\nin expression starting at /tmp/tmppw9f1ynl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else \n        multiply(b, a % b)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.4>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.4>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns their sum.\nExamples:\n>>> add(4,\
    \ 5)\n9\n>>> add(2, -3)\n5\n>>> add(2, 0)\n2\n>>> add(2, -2)\n0\n>>> add(2, -3)\n\
    5\n>>> add(2, -4)\n-2\n>>> add(2, -5)\n-5\n>>> add(2, -6)\n-6\n>>> add(2, -7)\n\
    -7\n>>> add(2, -8)\n-8\n>>> add(2, -9)\n-9\n>>> add(2, -10)\n-10\n>>> add(2, -11)\n\
    -11\n>>> add(2, -12)\n-12\n>>> add(2, -13)\n-13\n>>> add(2, -14)\n-14\n>>> add(2,\
    \ -15)\n-15\n>>> add(2, -16)\n-16\n>>> add(2, -17)\n-17\n>>> add(2, -18)\n-18\n\
    >>> add(2, -19)\n-19\n>>> add(2, -20)\n-20\n>>> add(2, -21)\n-21\n>>> add(2, -22)\n\
    -22\n>>> add(2, -23)\n-23\n>>> add(2, -24)\n-24\n>>> add(2, -25)\n-25\n>>> add(2,\
    \ -26)\n-26\n>>> add(2, -27)\n-27\n>>> add(2, -28)\n-28\n>>> add(2, -29)\n-29\n\
    >>> add(2, -30)\n-30\n>>> add(2, -31)\n-31\n>>> add(2, -32)\n-32\n>>> add(2, -33)\n\
    -33\n>>> add(2, -34)\n-34\n>>> add(2, -35)\n-35\n>>> add(2, -36)\n-36\n>>> add(2,\
    \ -37)\n-37\n>>> add(2, -38)\n-38\n>>> add(2, -39)\n-39\n>>> add(2, -40)\n-40\n\
    >>> add(2, -41)\n-41\n>>> add(2, -42)\n-42\n>>> add(2, -43)\n-43\n>>> add(2, -44)\n\
    -44\n>>> add(2, \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpca5gym0_.jl:21\nin expression starting at\
    \ /tmp/tmpca5gym0_.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b < a \n        0\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nExamples:\n>>> count_characters(\"Hello World\")\n12\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!!\")\n12\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_character\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpljh9u1w3.jl:27\nin expression starting at\
    \ /tmp/tmpljh9u1w3.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nProblem 3\nWrite a function that returns the sum of the\
    \ digits of its input argument, \n    multiplied by its unit digit.\n    Assume\
    \ the input is always valid.\n    Examples:\n    >>> sum(148, 412)\n    16\n \
    \   >>> sum(19, 28)\n    72\n    >>> sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n\
    \    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp0e7r1a81.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0e7r1a81.jl:18\n\
    in expression starting at /tmp/tmp0e7r1a81.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0 \n        error(\"Invalid input\")\n    elseif b == 0 \n        return a\n\
    \    elseif b == 1 \n        return a * b\n    elseif b > 1 \n        return multiply(a,\
    \ b / 10)\n    elseif b < 0 \n        return multiply(a, -b / 10)\n    else \n\
    \        return multiply(a, b % 10)\nend\n</cell>\n<code language=julia-1.0>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.0>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.0>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.0>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ integers and returns the sum of the unit digits. \nAssume the input is always\
    \ valid.\nExamples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020,\
    \ 1851)\n0\n>>> sum(14, -15)\n20\n</text>\n<code language=julia-1.0>\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpohaycyql.jl:28\nin expression starting at\
    \ /tmp/tmpohaycyql.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b < 10 \n        a * 10\n    else\n        a * 10 + b\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two integers and returns their\
    \ sum.\nExamples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n\
    0\n>>> sum(14, -15)\n20\n</text>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_mnm4yv9.jl:27\nin expression starting at\
    \ /tmp/tmp_mnm4yv9.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0\n  \
    \      return 0\n    \n    if a < 0\n        return -multiply(abs(a), b)\n   \
    \ \n    if b < 0\n        return -multiply(a, b + abs(b))\n    \n    if a < b\n\
    \        return multiply(a - b, b)\n    \n    return a * b\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number of\
    \ digits in an integer.\nExamples:\n>>> digits(148)\n3\n>>> digits(19)\n2\n>>>\
    \ digits(2020)\n4\n>>> digits(0)\n0\n>>> digits(-14)\n-1\n>>> digits(-15)\n-2\n\
    >>> digitsn\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1e1dku9t.jl:29\nin expression starting at\
    \ /tmp/tmp1e1dku9t.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nExercise 2\nWrite a function that takes two integers and\
    \ returns their sum.\nAssume the input is always valid.\nExamples:\n>>> add(148,\
    \ 412)\n164\n>>> add(19, 28)\n73\n>>> add(2020, 1851)\n2020\n>>> add(14, -15)\n\
    14\n</text>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpzq4keb0d.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzq4keb0d.jl:18\n\
    in expression starting at /tmp/tmpzq4keb0d.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0\n  \
    \      0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes two integers and returns the sum of the\
    \ \n    unit digits of their product (that is, the sum of the unit digits of the\n\
    \    product of the two integers). Assume the input is always valid.\n    Examples:\n\
    \    >>> sum(148, 412)\n    16\n    >>> sum(19, 28)\n    72\n    >>> sum(2020,\
    \ 1851)\n    0\n    >>> sum(14, -15)\n    20\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpmmwz3vjo.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmmwz3vjo.jl:18\n\
    in expression starting at /tmp/tmpmmwz3vjo.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0 \n        error(\"Invalid input\")\n    elseif b == 0 \n        error(\"\
    Invalid input\")\n    elseif b == 1 \n        return a\n    elseif b == 2 \n \
    \       return a * 10\n    elseif b == 3 \n        return a * 100\n    elseif\
    \ b == 4 \n        return a * 1000\n    elseif b == 5 \n        return a * 10000\n\
    \    elseif b == 6 \n        return a * 100000\n    elseif b == 7 \n        return\
    \ a * 1000000\n    elseif b == 8 \n        return a * 10000000\n    elseif b ==\
    \ 9 \n        return a * 100000000\n    else\n        error(\"Invalid input\"\
    )\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsgvgjk4q.jl:41\nin expression starting at\
    \ /tmp/tmpsgvgjk4q.jl:41\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.4>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.4>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in it.\n\
    Examples:\n>>> count_chars(\"Hello World\")\n12\n>>> count_chars(\"Hello World!\"\
    )\n11\n>>> count_chars(\"Hello World!!\")\n12\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpp3ra6bb3.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3ra6bb3.jl:18\n\
    in expression starting at /tmp/tmpp3ra6bb3.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        return a\n\
    \    else\n        return a*b\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes two integers and returns the sum of the \nunit digits\
    \ of their product (that is, the sum of the digits of the \nproduct of the two\
    \ numbers). Assume the input is always valid.\nExamples:\n>>> sum(148, 412)\n\
    16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n>>> sum(14, -15)\n20\n\"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8r5stgz5.jl:23\nin expression starting at\
    \ /tmp/tmp8r5stgz5.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10 \nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpkqf0f108.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkqf0f108.jl:18\n\
    in expression starting at /tmp/tmpkqf0f108.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10 \nend\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer and returns the sum of its unit digits.\nExamples:\n\
    >>> sum(148)\n16\n>>> sum(19)\n28\n>>> sum(2020)\n1851\n>>> sum(14)\n20\n>>> sum(15)\n\
    0\n>>> sum(0)\n0\n>>> sum(10)\n10\n>>> sum(100)\n100\n>>> sum(1000)\n1000\n>>>\
    \ sum(10000)\n10000\n>>> sum(100000)\n100000\n>>> sum(1000000)\n1000000\n>>> sum(10000000)\n\
    10000000\n>>> sum(100000000)\n100000000\n>>> sum(1000000000)\n1000000000\n>>>\
    \ sum(10000000000)\n10000000000\n>>> sum(100000000000)\n100000000000\n>>> sum(1000000000000)\n\
    1000000000000\n>>> sum(1000000000001)\n1000000000001\n>>> sum(1000000000002)\n\
    1000000000002\n>>> sum(1000000000003)\n1000000000003\n>>> sum(1000000000004)\n\
    1000000000004\n>>> sum(1000000000005)\n1000000000005\n>>> sum(1000000000006)\n\
    1000000000006\n>>> sum(1000000000007)\n1000000000007\n>>> sum(1000000000008)\n\
    1000000000008\n>>> sum(1000000000009)\n1000000000009\n>>> sum(1000000000010)\n\
    1000000000010\n>>> sum(1000000000011)\n1000000000011\n>>> sum(1000000000012)\n\
    1000000000012\n>>> sum(1000000000013)\n1000000000013\n>>> sum(1000000000014)\n\
    1000000000014\n>>> sum(1000000000015)\n1000000000015\n>>> sum(1000000000016)\n\
    1000000000016\n>>> sum(1000000000017)\n1000000000017\n>>> sum(1000000000018)\n\
    1000000000018\n>>> sum(1000000000019)\n1000000000019\n>>> sum(1000000000020)\n\
    1000000000020\n>>> sum(1000000000021)\n1000000000021\n>>> sum(1000000000022)\n\
    1000000000022\n>>> sum(1000000000023)\n1000000000023\n>>> sum(1000000000024)\n\
    1000000000024\n>>> sum(1000000000025)\n1000000000025\n>>> sum(1000000000026)\n\
    1000000000026\n\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp80myma8g.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp80myma8g.jl:18\n\
    in expression starting at /tmp/tmp80myma8g.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        0\n    elseif\
    \ b == 1\n        a\n    else\n        multiply(a/10, b%10)*10 + multiply(a%10,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9a_71ir0.jl:25\nin expression starting at\
    \ /tmp/tmp9a_71ir0.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * 10 + b) \nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ digits of its input. \nAssume that the input is always valid.\nExamples:\n>>>\
    \ sum(1234)\n4\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_z3l70rv.jl:20\nin expression starting at\
    \ /tmp/tmp_z3l70rv.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        0\n    else\n\
    \        (a * b).digits\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpojuc9hbu.jl:23\nin expression starting at\
    \ /tmp/tmpojuc9hbu.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * 10 + b) mod 10\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfcdt32jo.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfcdt32jo.jl:18\n\
    in expression starting at /tmp/tmpfcdt32jo.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the digits of its input. \nAssume that\
    \ the input is always valid.\nExamples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n\
    72\n>>> sum(2020, 1851)\n0\n>>> sum(14, -15)\n20\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqj3vkgvz.jl:21\nin expression starting at\
    \ /tmp/tmpqj3vkgvz.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else \n        if a < 0 \n            multiply(-a, -b)\n      \
    \  else \n            multiply(a, -b)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes two\
    \ integers and returns the sum of the unit digits of their product \n    For example:\
    \ multiply(148, 412) should return 16 + 12 = 26\n    \n    Use a while loop to\
    \ solve this problem. \n    \n    Use a for loop to solve this problem. \n   \
    \ \n    Use a recursive function to solve this problem. \n    \n    Use a while\
    \ loop to solve this problem. \n    \n    Use a for loop to solve this problem.\
    \ \n    \n    Use a recursive function to solve this problem. \n    \n    Use\
    \ a while loop to solve this problem. \n    \n    Use a for loop to solve this\
    \ problem. \n    \n    Use a recursive function to solve this problem. \n    \n\
    \    Use a while loop to solve this problem. \n    \n    Use a for loop to solve\
    \ this problem. \n    \n    Use a recursive function to solve this problem. \n\
    \    \n    Use a while loop to solve this problem. \n    \n    Use a for loop\
    \ to solve this problem. \n    \n    Use a recursive function to solve this problem.\
    \ \n    \n    Use a while loop to solve this problem. \n    \n    Use a for loop\
    \ to solve this problem. \n    \n    Use a recursive function to solve this problem.\
    \ \n    \n    Use a while loop to solve this problem. \n    \n    Use a for loop\
    \ to solve this problem. \n    \n    Use a recursive function to solve this problem.\
    \ \n    \n    Use a while loop to solve this problem. \n    \n    Use a for loop\
    \ to solve this problem. \n    \n    Use a recursive function to solve this problem.\
    \ \n    \n    Use a while loop to solve this problem. \n    \n    Use a for loop\
    \ to solve this problem. \n    \n    Use a recursive function to solve this problem.\
    \ \n    \n    Use a while loop to solve this problem. \n    \n    Use a for loop\
    \ to solve this problem. \n    \n    Use a recursive function to \nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk0m_o5wh.jl:24\nin expression starting at\
    \ /tmp/tmpk0m_o5wh.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes two integers and returns the sum of the\
    \ \n    unit digits of their product (that is, the sum of the digits of the \n\
    \    product of the two integers). Assume the input is always valid.\n    Examples:\n\
    \    >>> sum(148, 412)\n    16\n    >>> sum(19, 28)\n    72\n    >>> sum(2020,\
    \ 1851)\n    0\n    >>> sum(14, -15)\n    20\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpyh_9d7gc.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyh_9d7gc.jl:18\n\
    in expression starting at /tmp/tmpyh_9d7gc.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a*b).digits()\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4mcfloo1.jl:21\nin expression starting at\
    \ /tmp/tmp4mcfloo1.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b < a \n        0\n    else\n        (a * b) % 10\n    end\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nI like your solution, but I believe it would be better\
    \ to use a `while` loop instead of `if` statements.\n<|/ c |>\n<| c |>\nI agree\
    \ with you. I was just trying to solve the problem as I saw the problem and thought\
    \ of solving it this way. Thanks for your suggestion.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6vrza6ax.jl:27\nin expression starting at\
    \ /tmp/tmp6vrza6ax.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        return 0 \n    else if a == 0 || b == 0\n        return 0 \n  \
    \  else if a == 0\n        return b \n    else \n        return a * b\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_0kyhtnu.jl:17\nin expression starting at\
    \ /tmp/tmp_0kyhtnu.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else \n        (a*b).digits[end] = (a*b).digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmplyticm7e.jl:15 expected \"\
    end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplyticm7e.jl:19\n\
    in expression starting at /tmp/tmplyticm7e.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b < 10 \n        a * 10\n    elseif b < 100 \n        a * 10 + b\n    elseif\
    \ b < 1000 \n        a * 10 + b / 10\n    elseif b < 10000 \n        a * 10 +\
    \ b / 100\n    elseif b < 100000 \n        a * 10 + b / 1000\n    elseif b < 1000000\
    \ \n        a * 10 + b / 10000\n    elseif b < 10000000 \n        a * 10 + b /\
    \ 100000\n    elseif b < 100000000 \n        a * 10 + b / 1000000\n    elseif\
    \ b < 1000000000 \n        a * 10 + b / 10000000\n    elseif b < 10000000000 \n\
    \        a * 10 + b / 100000000\n    elseif b < 100000000000 \n        a * 10\
    \ + b / 1000000000\n    elseif b < 1000000000000 \n        a * 10 + b / 10000000000\n\
    \    elseif b < 10000000000000 \n        a * 10 + b / 100000000000\n    elseif\
    \ b < 100000000000000 \n        a * 10 + b / 1000000000000\n    elseif b < 1000000000000000\
    \ \n        a * 10 + b / 10000000000000\n    elseif b < 10000000000000000 \n \
    \       a * 10 + b / 100000000000000\n    elseif b < 100000000000000000 \n   \
    \     a * 10 + b / 1000000000000000\n    elseif b < 1000000000000000000 \n   \
    \     a * 10 + b / 10000000000000000\n    elseif b < 10000000000000000000 \n \
    \       a * 10 + b / 100000000000000000\n    elseif b < 100000000000000000000\
    \ \n        a * 10 + b / 1000000000000000000\n    elseif b < 1000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000\n    elseif b < 10000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000\n    elseif b < 100000000000000000000000\
    \ \n        a * 10 + b / 1000000000000000000000\n    elseif b < 1000000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000000\n    elseif b < 10000000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000000\n    elseif b < 100000000000000000000000000\
    \ \n        a * 10 + b / 1000000000000000000000000\n    elseif b < 1000000000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000000000\n    elseif b < 10000000000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000000000\n    elseif b < 100000000000000000000000000000\
    \ \n        a\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpshbqps7s.jl:1\nin expression starting at /tmp/tmpshbqps7s.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b == 0 \n        a\n    elseif b == 1 \n        10\n    elseif b == 2 \n   \
    \     20\n    elseif b == 3 \n        30\n    elseif b == 4 \n        40\n   \
    \ elseif b == 5 \n        50\n    elseif b == 6 \n        60\n    elseif b ==\
    \ 7 \n        70\n    elseif b == 8 \n        80\n    elseif b == 9 \n       \
    \ 90\n    elseif b == 10 \n        100\n    elseif b == 11 \n        110\n   \
    \ elseif b == 12 \n        120\n    elseif b == 13 \n        130\n    elseif b\
    \ == 14 \n        140\n    elseif b == 15 \n        150\n    elseif b == 16 \n\
    \        160\n    elseif b == 17 \n        170\n    elseif b == 18 \n        180\n\
    \    elseif b == 19 \n        190\n    elseif b == 20 \n        200\n    elseif\
    \ b == 21 \n        210\n    elseif b == 22 \n        220\n    elseif b == 23\
    \ \n        230\n    elseif b == 24 \n        240\n    elseif b == 25 \n     \
    \   250\n    elseif b == 26 \n        260\n    elseif b == 27 \n        270\n\
    \    elseif b == 28 \n        280\n    elseif b == 29 \n        290\n    elseif\
    \ b == 30 \n        300\n    elseif b == 31 \n        310\n    elseif b == 32\
    \ \n        320\n    elseif b == 33 \n        330\n    elseif b == 34 \n     \
    \   340\n    elseif b == 35\n        350\n    elseif b == 36\n        360\n  \
    \  elseif b == 37\n        370\n    elseif b == 38\n        380\n    elseif b\
    \ == 39\n        390\n    elseif b == 40\n        400\n    elseif b == 41\n  \
    \      410\n    elseif b == 42\n        420\n    elseif b == 43\n        430\n\
    \    elseif b == 44\n        440\n    elseif b == 45\n        450\n    elseif\
    \ b == 46\n        460\n    elseif b == 47\n        470\n    elseif b == 48\n\
    \        480\n    elseif b == 49\n        490\n    elseif b == 50\n        500\n\
    \    elseif b == 51\n        510\n    elseif b == 52\n        520\n    elseif\
    \ b == 53\n        530\n    elseif b == \nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpev15e4ye.jl:1\nin expression starting at /tmp/tmpev15e4ye.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        return -1\n    else\n        return a*b\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test your function\n@assert multiply(148, 412) ==\
    \ 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == -1\n@assert\
    \ multiply(14, -15) == 20\n</cell>\n<text>\nProblem 3\nThe Fibonacci sequence\
    \ is defined by the formula:\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgh_9s4o5.jl:21\nin expression starting at\
    \ /tmp/tmpgh_9s4o5.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        0\n    elseif\
    \ b == 1\n        a\n    else\n        multiply(a/10, b%10) * 10 + a%10\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a positive integer and returns the sum of its unit digits.\n\
    Examples:\n>>> sum(148)\n16\n>>> sum(19)\n28\n>>> sum(2020)\n1851\n>>> sum(14)\n\
    20\n>>> sum(-15)\n20\n>>> sum(0)\n0\n>>> sum(1)\n1\n>>> sum(2)\n2\n>>> sum(3)\n\
    3\n>>> sum(4)\n4\n>>> sum(5)\n5\n>>> sum(6)\n6\n>>> sum(7)\n7\n>>> sum(8)\n8\n\
    >>> sum(9)\n9\n>>> sum(10)\n10\n>>> sum(11)\n11\n>>> sum(12)\n12\n>>> sum(13)\n\
    13\n>>> sum(14)\n14\n>>> sum(15)\n15\n>>> sum(16)\n16\n>>> sum(17)\n17\n>>> sum(18)\n\
    18\n>>> sum(19)\n19\n>>> sum(20)\n20\n>>> sum(21)\n21\n>>> sum(22)\n22\n>>> sum(23)\n\
    23\n>>> sum(24)\n24\n>>> sum(25)\n25\n>>> sum(26)\n26\n>>> sum(27)\n27\n>>> sum(28)\n\
    28\n>>> sum(29)\n29\n>>> sum(30)\n30\n>>> sum(31)\n31\n>>> sum(32)\n32\n>>> sum(33)\n\
    33\n>>> sum(34)\n34\n>>> sum(35)\n35\n>>> sum(36)\n36\n>>> sum(37)\n37\n>>> sum(38)\n\
    38\n>>> sum(39)\n39\n>>> sum(40)\n40\n>>> sum(41)\n41\n>>> sum(42)\n42\n>>> sum(43)\n\
    43\n>>> sum(44)\n44\n>>> sum(45)\n45\n>>> sum(46)\n46\n>>> sum(47)\n47\n>>> sum(48)\n\
    48\n>>> sum(49)\n49\n>>> sum(50)\n50\n>>> sum(51)\n51\n>>> sum(52)\n52\n>>> \n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbggeh9p9.jl:25\nin expression starting at\
    \ /tmp/tmpbggeh9p9.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        (a * 10 +\
    \ b) \n    else\n        0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdldo_gzl.jl:25\nin expression starting at\
    \ /tmp/tmpdldo_gzl.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10 \nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp0q9oi2_k.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0q9oi2_k.jl:18\n\
    in expression starting at /tmp/tmp0q9oi2_k.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        return -1\n    else if a == 0 || b == 0\n        return 0\n   \
    \ else\n        return (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdnf8lm5p.jl:17\nin expression starting at\
    \ /tmp/tmpdnf8lm5p.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10 \nend\n</cell>\n<code\
    \ language=julia-1.0>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.0>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.0>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.0>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns their sum.\nExamples:\n>>> add(4,\
    \ 5)\n10\n>>> add(2, 3)\n5\n>>> add(10, -5)\n5\n>>> add(10, 0)\n10\n>>> add(10,\
    \ -10)\n0\n>>> add(10, -100)\n10\n>>> add(10, -1000)\n10\n>>> add(10, -10000)\n\
    10\n>>> add(10, -100000)\n10\n>>> add(10, -1000000)\n10\n>>> add(10, -10000000)\n\
    10\n>>> add(10, -100000000)\n10\n>>> add(10, -1000000000)\n10\n>>> add(10, -10000000000)\n\
    10\n>>> add(10, -100000000000)\n10\n>>> add(10, -1000000000000)\n10\n>>> add(10,\
    \ -10000000000000)\n10\n>>> add(10, -100000000000000)\n10\n>>> add(10, -1000000000000000)\n\
    10\n>>> add(10, -10000000000000000)\n10\n>>> add(10, -100000000000000000)\n10\n\
    >>> add(10, -1000000000000000000)\n10\n>>> add(10, -10000000000000000000)\n10\n\
    >>> add(10, -100000000000000000000)\n10\n>>> add(10, -100000000000000000000)\n\
    10\n>>> add(10, -100000000000000000000)\n10\n>>> add(10, -100000000000000000000)\n\
    10\n>>> add(10, -100000000000000000000)\n10\n>>> add(10, -100000000000000000000)\n\
    10\n>>> add(10, -100000000000000000000)\n10\n>>> add(10, -100000000000000000000)\n\
    10\n>>> add(10, -100000000000000000000)\n10\n>>> add(10, -100000000000000000000)\n\
    10\n>>> add(10, -100000000000000000000)\n10\n>>> add(10, -100000000000000000000)\n\
    10\n>>> add(10, -100000000000000000000)\n10\n>>> add(10, -100000000000000000000)\n\
    10\n>>> add(10, -100000000000000000000)\n10\n>>> add(10, -100000000000000000000)\n\
    10\n>>> add(10, -100000000000000000000)\n10\n>>> add(10, -100000000000000000000)\n\
    10\n>>> add(10, -100000000000000000000)\n10\n>>> add(10, -100000000000000000000)\n\
    10\n>>> add(10, -100\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp1v48der0.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1v48der0.jl:18\n\
    in expression starting at /tmp/tmp1v48der0.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        0\n    else\n\
    \        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise\nWrite a function that returns the\
    \ sum of the digits of its input. \nAssume that the input is always valid.\nExamples:\n\
    >>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n>>> sum(14,\
    \ -15)\n20\n</text>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpcycqnbnl.jl:19 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcycqnbnl.jl:22\n\
    in expression starting at /tmp/tmpcycqnbnl.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\n\
    Examples:\n>>> count_characters(\"Hello World\")\n10\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!!\")\n12\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmppiyrktdx.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppiyrktdx.jl:18\n\
    in expression starting at /tmp/tmppiyrktdx.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else \n        if a < 0 \n            0\n        else \n      \
    \      multiply(abs(a), abs(b)) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp10d3bzjm.jl:24\nin expression starting at\
    \ /tmp/tmp10d3bzjm.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        0\n    elseif\
    \ a == 0\n        0\n    else\n        (a * b) % 10\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmphax1w8ri.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmphax1w8ri.jl:30\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphax1w8ri.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphax1w8ri.jl:29\ntest set: Test\
    \ Failed at /tmp/tmphax1w8ri.jl:31\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphax1w8ri.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphax1w8ri.jl:29\ntest set: Error\
    \ During Test at /tmp/tmphax1w8ri.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(14, -15) == 20\n  Invalid input\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmphax1w8ri.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphax1w8ri.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphax1w8ri.jl:29\ntest set:\
    \ Test Failed at /tmp/tmphax1w8ri.jl:34\n  Expression: candidate(76, 67) == 42\n\
    \   Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphax1w8ri.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphax1w8ri.jl:29\ntest set: Test\
    \ Failed at /tmp/tmphax1w8ri.jl:35\n  Expression: candidate(17, 27) == 49\n  \
    \ Evalua"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    else if a == 0 || b == 0\n      \
    \  return 0\n    else\n        return (a * b) % 10\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert multiply(14, -15) == 20\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of its unit\
    \ digits. \nAssume the input is always valid.\nExamples:\n>>> sum(148, 412)\n\
    16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n>>> sum(14, -15)\n20\n\"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_l_j_say.jl:17\nin expression starting at\
    \ /tmp/tmp_l_j_say.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        (a * 10 +\
    \ b) \n    elseif b < 0 \n        0\n    elseif b > 0 \n        0\n    else \n\
    \        0\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ the sum of its unit digits.\nExamples:\n>>> sum(148)\n16\n>>> sum(19)\n28\n\
    >>> sum(2020)\n1851\n>>> sum(14)\n20\n>>> sum(-15)\n20\n>>> sum(0)\n0\n>>> sum(NaN)\n\
    0\n>>> sum(Inf)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>>\
    \ sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n\
    0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>>\
    \ sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n\
    0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>>\
    \ sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n\
    0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>>\
    \ sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n\
    0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>>\
    \ sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n\
    0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>>\
    \ sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjayeldy_.jl:29\nin expression starting at\
    \ /tmp/tmpjayeldy_.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp7_568f6s.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7_568f6s.jl:18\n\
    in expression starting at /tmp/tmp7_568f6s.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"The inputs must be positive\")\n    elseif b == 0\n   \
    \     0\n    else\n        (a * b).digits\n    end\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that takes an integer and returns the sum of the unit digits\
    \ of that integer.\nExamples:\n>>> sum(148)\n16\n>>> sum(19)\n72\n>>> sum(2020)\n\
    0\n>>> sum(14)\n20\n>>> sum(-15)\n20\n</text>\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx2vwjycd.jl:23\nin expression starting at\
    \ /tmp/tmpx2vwjycd.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        a * 10^(b-1)\n\
    \    else\n        0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    Complete the function that takes two integers and returns \n    the product of\
    \ their unit digits.\n    Assume the input is always valid.\n    Examples:\n \
    \   >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4g_hxed0.jl:25\nin expression starting at\
    \ /tmp/tmp4g_hxed0.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b < a \n        0\n    elseif b == a \n        1\n    elseif b > a \n      \
    \  0\n    elseif b == 0 \n        0\n    elseif b == 1 \n        1\n    elseif\
    \ b == 2 \n        2\n    elseif b == 3 \n        6\n    elseif b == 4 \n    \
    \    24\n    elseif b == 5 \n        120\n    elseif b == 6 \n        720\n  \
    \  elseif b == 7 \n        5040\n    elseif b == 8 \n        40320\n    elseif\
    \ b == 9 \n        362880\n    elseif b == 10 \n        3628800\n    elseif b\
    \ == 11 \n        39916800\n    elseif b == 12 \n        479001600\n    elseif\
    \ b == 13 \n        6227020800\n    elseif b == 14 \n        87178291200\n   \
    \ elseif b == 15 \n        1307674368000\n    elseif b == 16 \n        20922789888000\n\
    \    elseif b == 17 \n        355687428096000\n    elseif b == 18 \n        6402373705728000\n\
    \    elseif b == 19 \n        121645100408832000\n    elseif b == 20 \n      \
    \  2432902008176640000\n    elseif b == 21 \n        51090942171709440000\n  \
    \  elseif b == 22 \n        1124000727777607680000\n    elseif b == 23 \n    \
    \    25852016738884976640000\n    elseif b == 24 \n        620448401733239439360000\n\
    \    elseif b == 25 \n        15511210043330985984000000\n    elseif b == 26 \n\
    \        403291461126605635584000000\n    elseif b == 27 \n        10888869450418352160768000000\n\
    \    elseif b == 28 \n        304888344611713860501504000000\n    elseif b ==\
    \ 29 \n        8841761993739701954543616000000\n    elseif b == 30 \n        265252859812191058636308480000000\n\
    \    elseif b == 31 \n        8222838654177922817725562880000000\n    elseif b\
    \ == 32 \n        17592186044416862704291213372960000000\n    elseif b == 33\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ib437mb.jl:1\nin expression starting at /tmp/tmp2ib437mb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0\n  \
    \      0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ digits of its input. \nAssume that the input is always valid.\nExamples:\n>>>\
    \ sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(12\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp5lqkalnt.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5lqkalnt.jl:18\n\
    in expression starting at /tmp/tmp5lqkalnt.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * 10 + b) \n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.0>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.0>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.0>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns their sum.\nAs a reminder, Julia\
    \ has a built-in function called sum that does this for you.\nExamples:\n>>> sum(148,\
    \ 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n>>> sum(14, -15)\n20\n\
    </text>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv74siiqx.jl:21\nin expression starting at\
    \ /tmp/tmpv74siiqx.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        0\n    else\n\
    \        (a * b).digits\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes two integers and returns the sum of the \n    unit digits of their\
    \ product (assuming the input is valid).\n    Examples:\n    >>> sum(148, 412)\n\
    \    16\n    >>> sum(19, 28)\n    72\n    >>> sum(2020, 1851)\n    0\n    >>>\
    \ sum(14, -15)\n    20\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ves4rem.jl:23\nin expression starting at\
    \ /tmp/tmp4ves4rem.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 || b\
    \ < 0 \n        error(\"Invalid input\")\n    else if a == 0 || b == 0\n     \
    \   error(\"Invalid input\")\n    else\n        return a * b\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function \nmultiply(148, 412)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string.\nExamples:\n>>> count_characters(\"Hello World\"\
    )\n10\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"Hello\
    \ World!!\")\n12\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8cvqkugk.jl:17\nin expression starting at\
    \ /tmp/tmp8cvqkugk.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 or b\
    \ < 0\n        error(\"Invalid input\")\n    else if a == 0\n        error(\"\
    Invalid input\")\n    else if b == 0\n        error(\"Invalid input\")\n    else\n\
    \        return a * b\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes an integer and returns the sum of the unit digits. \nExamples:\n>>> sum(148)\n\
    16\n>>> sum(19)\n28\n>>> sum(2020)\n1851\n>>> sum(14)\n20\n>>> sum(-15)\n20\n\
    </text>\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"b\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl49it0qq.jl:15\nin expression starting at /tmp/tmpl49it0qq.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > a \n        0\n    elseif\
    \ b == a \n        a\n    else\n        multiply(b, a % b)\n    end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/27818883)\n<|/ c |>\n<| c |>\n\
    I believe it does answer the question. He asked how to implement the function\
    \ `multiply`, which I did in the code snippet above. He also asked how to implement\
    \ the function `isUnitDigit`, which I did in the code snippet above. He also asked\
    \ how to implement the function `isUnitDigit`, which I did in the code snippet\
    \ above. He also asked how to implement the function `isUnitDigit`, which I did\
    \ in the code snippet above. He also asked how to implement the function `isUnitDigit`,\
    \ which I did in the code snippet above. He also asked how to implement the function\
    \ `isUnitDigit`, which I did in the code snippet above. He also asked how to implement\
    \ the function `isUnitDigit`, which I did in the code snippet above. He also asked\
    \ how to implement the function `isUnitDigit`, which I did in the code snippet\
    \ above.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/27818883)\n<|/ c |>\n<| c |>\n\
    I believe it does answer the question. He asked how to implement the function\
    \ `multiply`, which I did in the code snippet above. He also asked how to implement\
    \ the function `isUnitDigit`, which I did in the code snippet above. He also asked\
    \ how to implement the function `isUnitDigit`, which I did in the code snippet\
    \ above. He also asked how to implement the function `isUnitDigit`, which I did\
    \ in the code snippet above. He also asked how to implement the function `isUnitDigit`,\
    \ which I did in the code snippet above. He also asked how to implement the function\
    \ `isUnitDigit`, which I did \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjb92ztsi.jl:27\nin expression starting at\
    \ /tmp/tmpjb92ztsi.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return a * b \nend \n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5lv2_ssy.jl:20\nin expression starting at\
    \ /tmp/tmp5lv2_ssy.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        a * 10^(b-1)\n\
    \    else\n        0\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\
    Complete the function that takes two integers and returns \n    the product of\
    \ their unit digits.\n    Assume the input is always valid.\n    Examples:\n \
    \   >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5s_f7t8.jl:25\nin expression starting at\
    \ /tmp/tmpb5s_f7t8.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 or b\
    \ < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        return a\n\
    \    elseif b == 1\n        return a * b\n    else\n        return a * b / 10\n\
    end\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise: Write\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product (without using multiplication).\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"b\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy3mdkbss.jl:15\nin expression starting at /tmp/tmpy3mdkbss.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) mod 10 \nend\n</cell>\n<code\
    \ language=julia-1.3>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.3>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.3>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.3>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in it.\n\
    Examples:\n>>> count_characters(\"Hello World\")\n10\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpeuq_7ky_.jl:15 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeuq_7ky_.jl:18\n\
    in expression starting at /tmp/tmpeuq_7ky_.jl:18\n"
  stdout: ''
