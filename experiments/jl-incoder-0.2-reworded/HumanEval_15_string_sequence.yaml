name: HumanEval_15_string_sequence
language: jl
prompt: "\"\"\" Return a string containing space-delimited numbers starting from 0\
  \ upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
  \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
  \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0\
  \ 1 2 3 4 5 6 7 8 9 10\")\nend\n"
completions: ["    if n < 0\n        error(\"n must be positive\")\n    else if n\
    \ == 0\n        return \"0\"\n    else if n > 0\n        str = string_sequence(n-1)\n\
    \        str = str + \" \"\n        str = str + string_sequence(n-1)\n       \
    \ return str\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n < 0\n\
    \        error(\"n must be positive\")\n    else if n == 0\n        return \"\
    0\"\n    else if n > 0\n        str = string_sequence(n-1)\n        str = str\
    \ + \" \"\n        str = str + string_sequence(n)\n        return str\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    string_seq = \"\"\n    for i =\
    \ n-1 downto 0 do\n        string_seq = string_seq + string(i)\n    end\n    return\
    \ string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the number of characters\
    \ in the string.", "    \"\"\"\" Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n \
    \   >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n    \"\"\"", "    if n == 0 \n\
    \        then return \"0\"\n    else \n        string_sequence(n - 1)\n      \
    \  + \" \" + n\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise: Write a function that takes a vector of strings and\
    \ returns a vector of integers representing the number of times each string appears\
    \ in the vector. For example, string_sequence(\"a\", \"b\", \"a\", \"c\") should\
    \ return [1, 1, 2, 1]. Hint: Use a for loop to iterate over the strings in the\
    \ vector.", "    string_seq = String[]\n    for i = 1:n\n        string_seq +=\
    \ String(i)\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the numbers. \nThe function should work for vectors of any length.",
  "    if n == 0 \n        return \"0\" \n    else \n        return string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nHint: Use length()", "    string =\
    \ \"\"\n    for i = 1 to n do\n        string = string + i\n    end\n    return\
    \ string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nWrite a function that takes a string and returns the number of characters\
    \ in that string.\nHint: Use length() function", "    \n    if n == 0 \n     \
    \   then return \"0\"\n    else \n        string_sequence(n-1)\n        +\" \"\
    \n        +string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: Use a while loop to keep looping until you reach the desired number\
    \ of prime numbers.", "    string_seq = String[]\n    for i = 1:n\n        string_seq[i]\
    \ = i\n    end\n    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ number n and returns the string \"n\" repeated n times.\nFor example, string_sequence(5)\
    \ returns \"5\" repeated 5 times.", "    \n    string = \"\"\n    for i = 1 to\
    \ n do\n        string = string + i\n    end\n    return string\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(0)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the string with all the characters in reverse order.", " \
    \   str = String[Int64](0)\n    for i = 1:n\n        str = str + String[i]\n \
    \   end\n    str\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype string_sequence(5)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype string_sequence(10)\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of numbers and returns\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.",
  "    string_sequence = \"\"\n    for i = n-1 downto 1 do\n        string_sequence\
    \ = string_sequence + \" \" + string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nHint: Use length() function", "    string_seq = String[]\n \
    \   for i in 0:n\n        string_seq.append(i::Int64)\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(10)\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of strings and returns a vector of integers\
    \ containing the number of times each string appears in the vector.", "    string_seq\
    \ = String[]\n    for i = 1:n\n        string_seq.append(i::Int64)\n    return\
    \ string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nThe function should ignore all punctuation\
    \ marks and split on whitespace.\nThe function should ignore all empty strings.\n\
    The function should ignore all strings containing only whitespace.\nThe function\
    \ should ignore all strings containing only punctuation marks.\nThe function should\
    \ ignore all strings containing only digits.\nThe function should ignore all strings\
    \ containing only letters.\nThe function should ignore all strings containing\
    \ only symbols.\nThe function should ignore all strings containing only uppercase\
    \ letters.\nThe function should ignore all strings containing only lowercase letters.\n\
    The function should ignore all strings containing only digits.\nThe function should\
    \ ignore all strings containing only lowercase letters.\nThe function should ignore\
    \ all strings containing only uppercase letters.\nThe function should ignore all\
    \ strings containing only symbols.\nThe function should ignore all strings containing\
    \ only digits.\nThe function should ignore all strings containing only letters.\n\
    The function should ignore all strings containing only symbols.\nThe function\
    \ should ignore all strings containing only uppercase letters.\nThe function should\
    \ ignore all strings containing only lowercase letters.\nThe function should ignore\
    \ all strings containing only digits.\nThe function should ignore all strings\
    \ containing only lowercase letters.\nThe function should ignore all strings containing\
    \ only uppercase letters.\nThe function should ignore all strings containing only\
    \ symbols.\nThe function should ignore all strings containing only digits.\nThe\
    \ function should ignore all strings containing only letters.\nThe function should\
    \ ignore all strings containing only symbols.\nThe function should ignore all\
    \ strings containing only uppercase letters.\nThe function should ignore all strings\
    \ containing only lowercase letters.\nThe function should ignore all strings containing\
    \ only digits.\nThe function should ignore all strings containing only lowercase\
    \ letters.\nThe function should ignore all strings containing only uppercase letters.\n\
    The function should ignore all strings containing only symbols.\nThe function\
    \ should ignore all strings containing only digits.\nThe function should ignore\
    \ all strings containing only letters.\nThe function should ignore all strings\
    \ containing only symbols.\nThe function should ignore all strings containing\
    \ only uppercase letters.\nThe function should ignore all strings containing only\
    \ lowercase letters.\nThe function should ignore all strings containing only digits.\n\
    The function should ignore all strings containing only lowercase letters.\nThe\
    \ function should ignore all strings ", "    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return an empty string\
    \ if n is less than or equal to 0.\"\n    if n <= 0 \n        \"\"\n    else\n\
    \        \" Return an empty string if n is less than or equal to 0.\"\n      \
    \  \" Return an empty string if n is less than or equal to 0.\"\n        \" Return\
    \ an empty string if n is less than or equal to 0.\"\n        \" Return an empty\
    \ string if n is less than or equal to 0.\"\n        \" Return an empty string\
    \ if n is less than or equal to 0.\"\n        \" Return an empty string if n is\
    \ less than or equal to 0.\"\n        \" Return an empty string if n is less than\
    \ or equal to 0.\"\n        \" Return an empty string if n is less than or equal\
    \ to 0.\"\n        \" Return an empty string if n is less than or equal to 0.\"\
    \n        \" Return an empty string if n is less than or equal to 0.\"\n     \
    \   \" Return an empty string if n is less than or equal to 0.\"\n        \" Return\
    \ an empty string if n is less than or equal to 0.\"\n        \" Return an empty\
    \ string if n is less than or equal to 0.\"\n        \" Return an empty string\
    \ if n is less than or equal to 0.\"\n        \" Return an empty string if n is\
    \ less than or equal to 0.\"\n        \" Return an empty string if n is less than\
    \ or equal to 0.\"\n        \" Return an empty string if n is less than or equal\
    \ to 0.\"\n        \" Return an empty string if n is less than or equal to 0.\"\
    \n        \" Return an empty string if n is less than or equal to 0.\"\n     \
    \   \" Return an empty string if n is less than or equal to 0.\"\n        \" Return\
    \ an empty string if n is less than or equal to 0.\"\n        \" Return an empty\
    \ string if n is less than or equal to 0.\"\n        \" Return an empty string\
    \ if n is less than or equal to 0.\"\n        \" Return an empty string if n is\
    \ less than or equal to 0.\"\n        \" Return an empty string if n is less than\
    \ or equal to 0.\"\n        \" Return an empty string if n is less than or equal\
    \ to 0.\"\n        \" Return an empty string if n is less than or equal to 0.\"\
    \n        \" Return an empty string if n is less than or equal to 0.\"\n     \
    \   \" Return an empty string if n is less than or equal to 0.\"\n        \" Return\
    \ an empty string if n is less than or equal to 0.\"\n        \" Return an empty\
    \ string if n is less than or equal to 0.\"\n        \" Return an empty string\
    \ if n is less than or equal to 0.\"\n        \" Return an empty string if n is\
    \ less than or equal to 0.\"\n        \" Return an empty string if ", "    \"\"\
    \"\" Return a string containing space-delimited numbers starting from 0 upto n\
    \ inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"", "    \"\"\"\" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"\
    0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n    \"\"\"", "    if n ==\
    \ 0\n        return \"0\"\n    else if n == 1\n        return \"1\"\n    else\n\
    \        return string_sequence(n-1) + \", \" + string_sequence(n-1)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a number.",
  "    \"\"\"\" Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"", "    string = \"\"\n    for i = 1:n\n     \
    \   string = string + string(i)\n    end\n    return string\nend", "    if n==0\
    \ \n        then return \"0\"\n    else \n        string_sequence(n-1)+\", \"\
    +string_sequence(n)\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 1\nWrite a function that takes a number n and returns\
    \ the string \"n is even\" if n is even, and \"n is odd\" if n is odd.", "   \
    \ string_sequence = \"\"\n    for i = n\n        do\n            string_sequence\
    \ = string_sequence + \" \" + string(i)\n        end\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<code language=julia-1.5>",
  "    string_seq = String[]\n    for x in 0:n-1\n        string_seq <- string_seq\
    \ + String(x)\n    string_seq\nend\n</cell>\n<code language=julia-1.3>", "   \
    \ \n    string = \"\"\n    for i = 1:n\n        string = string + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 1\nWrite a function named string_sequence that takes\
    \ a single argument n and returns a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.", "    \n    string = \"\"\n    for i = 1\
    \ to n do\n        string = string + string(i)\n    end\n    return string\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(0)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 4\nWrite a function that takes a\
    \ vector of integers and returns a vector of strings. Each string in the returned\
    \ vector is the concatenation of the integers in the input vector. For example,\
    \ if the input vector is [1,2,3,4,5], the returned vector should be [\"012\",\
    \ \"023\", \"034\", \"044\", \"055\"].", "    string_seq = String[]\n    for i\
    \ in 0..n-1\n        string_seq[i] = string(i)\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ n and returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nThe function should return an error if the input is not an integer.\n\
    Hint: Use string(n) to convert n to a string.", "    \"\"\"\" Return a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\n    >>>\
    \ string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\
    \n    \"\"\"", "    str = \" \"\n    for i = 1:n\n        str = str + i\n    end\n\
    \    return str\nend", "    \" Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 ", "    \n    string = \"\"\n    for\
    \ i = n\n    do\n        string += i\n    done\n    return string\n</code>\n<|/\
    \ a |>\n<| a tags=julia |>\n<code>", "    string_sequence = \"\"\n    for i =\
    \ n\n    do\n        string_sequence = string_sequence + \" \" + i\n    done\n\
    \    return string_sequence\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>", " \
    \   string_seq = String[]()\n    for i in 0 .. n\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string as input and returns a string with all the characters in that string\
    \ in reverse order.\nFor example, string_sequence(\"hello\") should return \"\
    olleh\"\nHint: Use a for loop to iterate over the characters in the string.",
  "    \n    string = \"\"\n    for i = 1 to n do\n        string = string + i\n \
    \   end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that generates a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nThe function should\
    \ take two arguments: n and delimiter.\nThe function should return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nThe function should\
    \ return an empty string if n is less than 0.\nThe function should return an empty\
    \ string if n is greater than or equal to 0.\nThe function should return an empty\
    \ string if delimiter is an empty string.", "    string_sequence = \" \"\n   \
    \ for i = 1:n\n        string_sequence = string_sequence + \" \" + to_string(i)\n\
    \    end\n    return string_sequence\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>", "    \n    string_sequence = \" \"\n    for i = 1:n\n        string_sequence\
    \ = string_sequence + \" \" + to_string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the numbers. \nThe function should only take a single argument.\nThe function\
    \ should return a number.", "    if n < 0\n        error(\"n must be positive\"\
    )\n    else if n == 0\n        return \"0\"\n    else if n == 1\n        return\
    \ \"1\"\n    else if n == 2\n        return \"1 2\"\n    else if n == 3\n    \
    \    return \"1 2 3\"\n    else if n == 4\n        return \"1 2 3 4\"\n    else\
    \ if n == 5\n        return \"1 2 3 4 5\"\n    else if n == 6\n        return\
    \ \"1 2 3 4 5 6\"\n    else if n == 7\n        return \"1 2 3 4 5 6 7\"\n    else\
    \ if n == 8\n        return \"1 2 3 4 5 6 7 8\"\n    else if n == 9\n        return\
    \ \"1 2 3 4 5 6 7 8 9\"\n    else if n == 10\n        return \"1 2 3 4 5 6 7 8\
    \ 9 10\"\n    else if n == 11\n        return \"1 2 3 4 5 6 7 8 9 10 11\"\n  \
    \  else if n == 12\n        return \"1 2 3 4 5 6 7 8 9 10 11 12\"\n    else if\
    \ n == 13\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13\"\n    else if n ==\
    \ 14\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14\"\n    else if n == 15\n\
    \        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\"\n    else if n == 16\n\
    \        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\"\n    else if n == 17\n\
    \        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\"\n    else if n ==\
    \ 18\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\"\n    else\
    \ if n == 19\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\
    \n    else if n == 20\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\
    \ 17 18 19 20\"\n    else if n == 21\n        return \"1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16 17 18 19 20 21\"\n    else if n == 22\n        return \"1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\"\n    else if n == 23\n\
    \        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\"\
    \n    else if n == 24\n        return \"1 2 3 4 5 6 7 8 ", "    \n    string =\
    \ \"\"\n    for i = 1 to n do\n        string = string + \" \" + to_string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings as\
    \ input and returns a vector of integers containing the number of times each string\
    \ appears in the input vector.", "    string_sequence = \"\"\n    for i in 0:n-1\n\
    \        string_sequence = string_sequence + \" \" + to_string(i)\n    end\n \
    \   return string_sequence\nend", "    string_seq = String[]\n    for i = 1 to\
    \ n do\n        string_seq.append(i.toString())\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(0)\n</cell>\n\
    <code language=julia-1.0>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in that\
    \ string.", "    \n    string = \"\"\n    for i = 1:n\n        string = string\
    \ + \" \" + string(i)\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ number n and returns the string \"n!\".\nWrite a function that takes a number\
    \ n and returns the string \"n!+n!-...!\".\nWrite a function that takes a number\
    \ n and returns the string \"n!+n!-...!+n!-...!-...!\".", "    string_sequence\
    \ = \"\"\n    for i = 1:n\n        string_sequence = string_sequence + \" \" +\
    \ to_string(i)\n    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nHint: Use length()\
    \ function", "    \n    if n == 0\n        return \"0\"\n    \n    string = \"\
    \"\n    \n    for i = 1 to n\n        string = string + string_sequence(i-1) +\
    \ \" \"\n    end\n    \n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the number of words in the string.", "    str =\
    \ String[Int64]()\n    for i = 1:n\n        str = str + i\n    end\n    str\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an integer $n$ and returns the string\
    \ $n!$. For example, string_sequence(5) should return \"5 4 3 2 1\". Hint: use\
    \ recursion.", "    string_seq = String[]\n    for n in 0 .. n\n        string_seq\
    \ += String(n)\n    return string_seq\n</code>\n<|/ a |>\n<| c |>\nI like this\
    \ solution. One thing I noticed is that it requires you to import `String` from\
    \ `Prelude`. However, you can just use `String` directly without importing it.\
    \ Also, `String` can be imported from `Data.String`.\n<|/ c |>\n<| a tags=haskell,string,list\
    \ |>\n<code>\nimport Data.List", "    string_seq = String[]\n    for i = 1:n\n\
    \        push!(string_seq,string(i))\n    end\n    return join(\" \",string_seq)\n\
    end\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nHint: Use length() function", "    string = \"\"\n    for i\
    \ = 1:n\n        string = string + \" \" + i\n    end\n    return string\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings and returns a vector of integers\
    \ representing the number of times each string appears in the vector.\nFor example,\
    \ string_sequence(\"abcde\") should return [1 2 1 3 1 4 1 5 1].\nHint: Use a for\
    \ loop to iterate over the strings in the vector.", "    str = String[Int64]()\n\
    \    i = 0\n    while i < n do\n        str = str + i\n        i = i + 1\n   \
    \ end\n    return str\nend", "    if n == 0 \n        return \"0\" \n    else\
    \ \n        return string_sequence(n-1) + \", \" + string_sequence(n-1) \nend\
    \ \n</cell>\n<text>\nExercise 3\nWrite a function that returns the first n prime\
    \ numbers. \nThe function should take an Int argument n and return a String containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nThe function should\
    \ return \"0\" if the argument n is less than or equal to 0.\nThe function should\
    \ return \"0\" if the argument n is equal to 0.\nThe function should return \"\
    0\" if the argument n is greater than or equal to 0.\nThe function should return\
    \ \"0\" if the argument n is negative.\nThe function should return \"0\" if the\
    \ argument n is greater than or equal to 0.\nThe function should return \"0\"\
    \ if the argument n is negative.\nThe function should return \"0\" if the argument\
    \ n is greater than or equal to 0.\nThe function should return \"0\" if the argument\
    \ n is negative.\nThe function should return \"0\" if the argument n is greater\
    \ than or equal to 0.\nThe function should return \"0\" if the argument n is negative.\n\
    The function should return \"0\" if the argument n is greater than or equal to\
    \ 0.\nThe function should return \"0\" if the argument n is negative.\nThe function\
    \ should return \"0\" if the argument n is greater than or equal to 0.\nThe function\
    \ should return \"0\" if the argument n is negative.\nThe function should return\
    \ \"0\" if the argument n is greater than or equal to 0.\nThe function should\
    \ return \"0\" if the argument n is negative.\nThe function should return \"0\"\
    \ if the argument n is greater than or equal to 0.\nThe function should return\
    \ \"0\" if the argument n is negative.\nThe function should return \"0\" if the\
    \ argument n is greater than or equal to 0.\nThe function should return \"0\"\
    \ if the argument n is negative.\nThe function should return \"0\" if the argument\
    \ n is greater than or equal to 0.\nThe function should return \"0\" if the argument\
    \ n is negative.\nThe function should return \"0\" if the argument n is greater\
    \ than or equal to 0.\nThe function should return \"0\" if the argument n is negative.\n\
    The function should return \"0\" if the argument n is greater than or equal to\
    \ 0.\nThe function should return \"0\" if the argument n is negative.\nThe function\
    \ should return \"0\" if the argument n is greater than or equal to 0.\nThe function\
    \ should return \"0\" if the argument n is negative.\nThe function should return\
    \ \"0\" if the argument n is greater than or equal to 0.\nThe function should\
    \ return \"0\" if the argument n is negative.\nThe function should return \"0\"\
    \ if the argument n is greater than or equal to 0.\nThe function should return\
    \ \"0\" if the ", "    if n < 0\n        error(\"n must be positive\")\n    else\
    \ if n == 0\n        return \"0\"\n    else\n        str = string_sequence(n-1)\n\
    \        str = str + \" \"\n        str = str + str\n        return str\nend\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns the number of words\
    \ in the string.", "    str = String[Int64]()\n    for i = 1:n\n        push!(str,\
    \ i)\n    end\n    str\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of characters in the string.", "    string_seq\
    \ = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n    end\n    return\
    \ string_seq\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the first n prime numbers. \n\
    The function should take n as an argument and return a vector of prime numbers.\n\
    The function should return an empty vector if n is less than 2.\nThe function\
    \ should return an error if n is negative.", "    str = String[Int64]()\n    for\
    \ i = 1:n\n        str = str + i\n    end\n    str\nend\n</cell>\n<code language=julia-1.3>",
  "    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in it.", "    string = \"\"\n    for i = n\n    do\n\
    \        string += i\n        string += \" \"\n    done\n    string\nend\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(0)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise: Write a function that takes a number\
    \ n and returns the string \"n\" repeated n times.\nHint: Use a for loop.", " \
    \   if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n    \
    \    return \"0\"\n    else if n == 1\n        return \"1\"\n    else if n ==\
    \ 2\n        return \"1 2\"\n    else if n == 3\n        return \"1 2 3\"\n  \
    \  else if n == 4\n        return \"1 2 3 4\"\n    else if n == 5\n        return\
    \ \"1 2 3 4 5\"\n    else if n == 6\n        return \"1 2 3 4 5 6\"\n    else\
    \ if n == 7\n        return \"1 2 3 4 5 6 7\"\n    else if n == 8\n        return\
    \ \"1 2 3 4 5 6 7 8\"\n    else if n == 9\n        return \"1 2 3 4 5 6 7 8 9\"\
    \n    else if n == 10\n        return \"1 2 3 4 5 6 7 8 9 10\"\n    else if n\
    \ == 11\n        return \"1 2 3 4 5 6 7 8 9 10 11\"\n    else if n == 12\n   \
    \     return \"1 2 3 4 5 6 7 8 9 10 11 12\"\n    else if n == 13\n        return\
    \ \"1 2 3 4 5 6 7 8 9 10 11 12 13\"\n    else if n == 14\n        return \"1 2\
    \ 3 4 5 6 7 8 9 10 11 12 13 14\"\n    else if n == 15\n        return \"1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15\"\n    else if n == 16\n        return \"1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15 16\"\n    else if n == 17\n        return \"1\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\"\n    else if n == 18\n        return\
    \ \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\"\n    else if n == 19\n    \
    \    return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\n    else if n\
    \ == 20\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\
    \n    else if n == 21\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\
    \ 17 18 19 20 21\"\n    else if n == 22\n        return \"1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 16 17 18 19 20 21 22\"\n    else if n == 23\n        return \"\
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\"\n    else if n ==\
    \ 24\n        return \"1 2 3 4 5 6 7 8 ", "    if n == 0 \n        return \"0\"\
    \ \n    else \n        return string_sequence(n-1) + \", \" + string_sequence(n-1)\n\
    end\n</cell>\n<code language=julia-1.1>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns a string\
    \ with all the characters in lower case. \nThe function should ignore any non-alphabetic\
    \ characters. \nThe function should ignore any leading or trailing whitespace.\
    \ \nThe function should ignore any leading or trailing punctuation. \nThe function\
    \ should ignore any leading or trailing numbers. \nThe function should ignore\
    \ any leading or trailing periods. \nThe function should ignore any leading or\
    \ trailing commas. \nThe function should ignore any leading or trailing semicolons.\
    \ \nThe function should ignore any leading or trailing colons. \nThe function\
    \ should ignore any leading or trailing semicolons. \nThe function should ignore\
    \ any leading or trailing colons. \nThe function should ignore any leading or\
    \ trailing colons. \nThe function should ignore any leading or trailing colons.\
    \ \nThe function should ignore any leading or trailing colons. \nThe function\
    \ should ignore any leading or trailing colons. \nThe function should ignore any\
    \ leading or trailing colons. \nThe function should ignore any leading or trailing\
    \ colons. \nThe function should ignore any leading or trailing colons. \nThe function\
    \ should ignore any leading or trailing colons. \nThe function should ignore any\
    \ leading or trailing colons. \nThe function should ignore any leading or trailing\
    \ colons. \nThe function should ignore any leading or trailing colons. \nThe function\
    \ should ignore any leading or trailing colons. \nThe function should ignore any\
    \ leading or trailing colons. \nThe function should ignore any leading or trailing\
    \ colons. \nThe function should ignore any leading or trailing colons. \nThe function\
    \ should ignore any leading or trailing colons. \nThe function should ignore any\
    \ leading or trailing colons. \nThe function should ignore any leading or trailing\
    \ colons. \nThe function should ignore any leading or trailing colons. \nThe function\
    \ should ignore any leading or trailing colons. \nThe function should ignore any\
    \ leading or trailing colons. \nThe function should ignore any leading or trailing\
    \ colons. \nThe function should ignore any leading or trailing colons. \nThe function\
    \ should ignore any leading or trailing colons. \nThe function should ignore any\
    \ leading or trailing colons. \nThe function should ignore any leading or trailing\
    \ colons. \nThe function should ignore any leading or trailing colons. \nThe function\
    \ should ignore any leading or trailing colons. \nThe function should ignore any\
    \ leading or trailing colons. \nThe function should ignore any leading or trailing\
    \ colons. \nThe ", "    string_seq = \"\"\n    for i = n-1 downto 1 do\n     \
    \   string_seq = string_seq + string(i)\n    end\n    return string_seq\nend\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(0)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string.", "    string_seq\
    \ = String[]\n    for n in 0 .. n\n        string_seq += String(n)\n    return\
    \ string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings and\
    \ returns a vector of integers containing the number of times each string appears\
    \ in the vector.", "    \" Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\"\n    \n    \" Return an empty string if\
    \ n is less than 0.\"\n    if n < 0 \n        \" Return an empty string.\"\n \
    \       return \"\"\n    \" Return an empty string if n is 0.\"\n    if n == 0\
    \ \n        \" Return an empty string.\"\n        return \"\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    return \" \".(string_sequence(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string.\nThe function\
    \ should ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing punctuation.\nThe function should ignore leading and trailing digits.\n\
    The function should ignore leading and trailing spaces.\nThe function should ignore\
    \ leading and trailing periods.\nThe function should ignore leading and trailing\
    \ commas.\nThe function should ignore leading and trailing colons.\nThe function\
    \ should ignore leading and trailing semicolons.\nThe function should ignore leading\
    \ and trailing colons.\nThe function should ignore leading and trailing semicolons.\n\
    The function should ignore leading and trailing colons.\nThe function should ignore\
    \ leading and trailing colons.\nThe function should ignore leading and trailing\
    \ colons.\nThe function should ignore leading and trailing colons.\nThe function\
    \ should ignore leading and trailing colons.\nThe function should ignore leading\
    \ and trailing colons.\nThe function should ignore leading and trailing colons.\n\
    The function should ignore leading and trailing colons.\nThe function should ignore\
    \ leading and trailing colons.\nThe function should ignore leading and trailing\
    \ colons.\nThe function should ignore leading and trailing colons.\nThe function\
    \ should ignore leading and trailing colons.\nThe function should ignore leading\
    \ and trailing colons.\nThe function should ignore leading and trailing colons.\n\
    The function should ignore leading and trailing colons.\nThe function should ignore\
    \ leading and trailing colons.\nThe function should ignore leading and trailing\
    \ colons.\nThe function should ignore leading and trailing colons.\nThe function\
    \ should ignore leading and trailing colons.\nThe function should ignore leading\
    \ and trailing colons.\nThe function should ignore leading and trailing colons.\n\
    The function should ignore leading and trailing colons.\nThe function should ignore\
    \ leading and trailing colons.\nThe function should ignore leading and trailing\
    \ colons.\nThe function should ignore leading and trailing colons.\nThe function\
    \ should ignore leading and trailing colons.\nThe function should ignore leading\
    \ and trailing colons.\nThe function should ignore ", "    string_seq = String[]\n\
    \    for i = 1:n\n        push!(string_seq,string(i))\n    end\n    return join(\"\
    \ \",string_seq)\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers in the vector.\nThe function should work\
    \ for vectors of any length.", "    string_sequence = \"\"\n    for i = 1 to n\
    \ do\n        string_sequence = string_sequence + \" \" + to_string(i)\n    end\n\
    \    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of the squares of the integers. \nThe function should work\
    \ for vectors of any length.", "    string_seq = String[]\n    for x in 0..n-1\n\
    \        string_seq.append(x)\n    string_seq.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nstring_sequence(5)\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes a number n and returns the string \"nth term\" where n is\
    \ an integer between 1 and 20.", "    string_seq = String[]\n    for i in 0 ..\
    \ n\n        string_seq.append(i.toString())\n    return string_seq.join(\" \"\
    )\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns the number of characters\
    \ in the string.\nHint: Use a for loop to iterate over the characters in the string.",
  "    string_sequence = String[]()\n    for i = 1 to n do\n        string_sequence\
    \ = string_sequence @ [String(i)]\n    end\n    string_sequence\nend\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in that\
    \ string.\nHint: Use length() function", "    string_sequence = \"\"\n    for\
    \ i = 1 to n do\n        string_sequence = string_sequence + \" \" + to_string(i)\n\
    \    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ number n and returns the string \"n!\".\nFor example, if n is 5, the output\
    \ should be \"5!\".", "    \n    string_sequence = \"\"\n    for i = n\n    do\n\
    \        string_sequence = string_sequence + string(i)\n    done\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string.", "    \"\
    \"\"\" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"", "    \n    string = \"\"\n    for i = 1:n\n\
    \        string = string + i\n    end\n    return string\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(0)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ all the prime numbers less than or equal to n.", "    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited ", "    string_sequence\
    \ = \"\"\n    for i = n\n    do\n        string_sequence = string_sequence + \"\
    \ \" + to_string(i)\n    done\n    return string_sequence\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/26812158)\n<|/ c |>\n<| c |>\nI believe this\
    \ does answer the question. Perhaps I misunderstood the question?\n<|/ c |>\n\
    <| c |>\nI believe this does answer the question. Perhaps I misunderstood the\
    \ question?\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/26812158)\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question. Perhaps I misunderstood the question?\n\
    <|/ c |>\n<| a dscore=3 |>\nI believe that this is what you are looking for:\n\
    <code>\njulia> string_sequence(5)\n\"0 1 2 3 4 5\"\n</code>\n<|/ a tags=julia\
    \ |>\n<| a tags=julia |>\n<code>", "    str = String[Int64]()\n    for i = 1:n\n\
    \        str = str + i\n    end\n    return str\nend\n</cell>\n<code language=julia-1.3>",
  "    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence = string_sequence\
    \ + \" \" + to_string(i)\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.1>\nstring_sequence(5)\n</cell>\n<text>\nExercise 10\n\
    Write a function that takes a vector of numbers as an argument and returns the\
    \ sum of the numbers. \nThe function should also accept a second argument that\
    \ specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. ", "    \n    string_seq = String[]()\n    for x in\
    \ 0:n\n        string_seq.append(x)\n    return string_seq.join(\" \")\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nHint: Use split() to split the string into words.", "    if n == 0\n\
    \        return \"0\"\n    else if n == 1\n        return \"1\"\n    else\n  \
    \      return string_sequence(n - 1) + \" \" ++ string_sequence(n - 2)\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a number n and returns\
    \ the string \"n!\".\nFor example, string_sequence(3) should return \"3!\".",
  "    \n    string = \"\"\n    for i = n\n    do\n        string += i\n        i\
    \ += 1\n    done\n    return string\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "    string_sequence = \"\"\n    for i in 0:n-1\n        string_sequence\
    \ = string_sequence + \" \" + string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of words in the string.", "    string = \"\"\n    for i = 1:n\n        string\
    \ = string + \" \" + to_string(i)\n    end\n    return string\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that returns the first n prime numbers. Use a while loop to do this.",
  "    \n    string = \"\"\n    for i = 1 to n do\n        string = string + i\n \
    \   end\n    return string\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nWrite a function that takes a string and returns the number of\
    \ characters in it.", "    string = \"\"\n    for i = 1 to n do\n        string\
    \ = string + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ number n and returns the string \"n is even\" if the number is even, and \"\
    n is odd\" if the number is odd.", "    string_seq = String[]\n    for i = 1 to\
    \ n do\n        string_seq.append(i.toString())\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(0)\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a number n and returns the nth Fibonacci number.", " \
    \   string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + to_string(i)\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the first n Fibonacci numbers. \nThe Fibonacci numbers\
    \ are defined as:", "    \"\"\"\" Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n \
    \   >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n    \"\"\"", "    string_sequence\
    \ = \"\"\n    for i = 1 to n do\n        string_sequence = string_sequence + \"\
    \ \" + to_string(i)\n    end\n    return string_sequence\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns the number of characters\
    \ in the string.\nHint: Use length() function", "    \n    string = \"\"\n   \
    \ for i = 1:n\n        string = string + i\n    end\n    return string\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that generates all the prime numbers less than or equal\
    \ to n.", "    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq\
    \ + string(i)\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the numbers. \nHint: use the reduce\
    \ function.", "    string_sequence = \"\"\n    for i = n\n    do\n        string_sequence\
    \ = string_sequence + \" \" + to_string(i)\n    done\n    return string_sequence\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\n<code>", "    string_seq = \"\"\
    \n    for i = n\n        string_seq = string_seq + string(i)\n    end\n    return\
    \ string_seq\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(0)\n</cell>\n\
    <code language=julia-1.0>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns a string with all the characters\
    \ in lower case.", "    \n    string = \"\"\n    \n    for i = 1:n\n        string\
    \ = string + \" \" + i\n    end\n    \n    return string\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the number of characters\
    \ in the string.\nHint: Use length() function", "    string_seq = String[]\n \
    \   for i = 1:n\n        push!(string_seq,string(i))\n    end\n    return join(string_seq,\"\
    \ \")\nend", "    str = String[Int64]()\n    for i = 1:n\n        str = str +\
    \ i\n    end\n    return str\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns a string with all the characters in lower case.\nHint: Use lowercase()\
    \ function", "    string_sequence = \"\"\n    for i = 1:n\n        string_sequence\
    \ = string_sequence + \" \" + to_string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector.\nFor example, if the input vector is [1,2,3,4,5],\
    \ the output should be 15.\nHint: Use a for loop to iterate through the vector.",
  "    if n < 0\n        error(\"string_sequence: n must be non-negative\")\n    else\
    \ if n == 0\n        return \"0\"\n    else if n > 0\n        str = string_sequence(n-1)\n\
    \        str = str + \" \"\n        str = str + string_sequence(n-1)\n       \
    \ return str\n    end\nend", "    \n    string = \"\"\n    for i = 1:n\n     \
    \   string = string + \" \" + i\n    end\n    return string\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a string as input and returns a string with all the characters\
    \ in reverse order.", "    if n < 0\n        error(\"n must be non-negative\"\
    )\n    end\n    \n    string = \"\"\n    for i = 1:n\n        string = string\
    \ + \" \" + string(i)\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ the string with all the characters in lower case.", "    \n    string_seq =\
    \ String[]()\n    \n    for n in 0 .. n\n        string_seq.append(string(n))\n\
    \    \n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the string with each character replaced by its ASCII code (a number between\
    \ 0 and 127).\nFor example, string_encode(\"Hello\") should return \"65 101 108\
    \ 108 111 32 87 111 114 108 100\".", "    \n    string = \"\"\n    for i = 1:n\n\
    \        string = string + \" \" + i\n    end\n    return string\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(0)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.", "    string = \"\"\n    for i = 1:n\n\
    \        string = string + \" \" + to_string(i)\n    end\n    return string\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the numbers. \nThe function should also print a message to the console if\
    \ the vector is empty.\nHint: use the sum function.", "    string_seq = String[]\n\
    \    for i = 1 to n do\n        string_seq.append(i.toString())\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of words in that string.", "    str = \" \"\n    for i = n\n        str = str\
    \ + i\n    return str\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=2 |>\n\
    In Julia 1.3 you can also use string interpolation with commas:\n<code>\njulia>\
    \ \"$(1:5)\"\n\"1 2 3 4 5\"\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=2\
    \ |>\nIn Julia 1.3 you can also use string interpolation with commas:\n<code>\n\
    julia> \"$(1:5)\"\n\"1 2 3 4 5\"\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.3 you can also use string interpolation with commas:\n<code>\n\
    julia> \"$(1:5)\"\n\"1 2 3 4 5\"\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    In Julia 1.3 you can also use string interpolation with commas:\n<code>\njulia>\
    \ \"$(1:5)\"\n\"1 2 3 4 5\"\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=1\
    \ |>\nIn Julia 1.3 you can also use string interpolation with commas:\n<code>\n\
    julia> \"$(1:5)\"\n\"1 2 3 4 5\"\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.3 you can also use string interpolation with commas:\n<code>\n\
    julia> \"$(1:5)\"\n\"1 2 3 4 5\"\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n\
    In Julia 1.3 you can also use string interpolation with commas:\n<code>\njulia>\
    \ \"$(1:5)\"\n\"1 2 3 4 5\"\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.3 you can also use string interpolation with commas:\n<code>\n\
    julia> \"$(1:5)\"\n\"1 2 3 4 5\"\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.3 you can also use string interpolation with commas:\n<code>\n\
    julia> \"$(1:5)\"\n\"1 2 3 4 5\"\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    In Julia 1.3 you can also use string interpolation with commas:\n<code>\njuli",
  "    \n    string = \"\"\n    for i = 1 to n do\n        string = string + \" \"\
    \ + string(i)\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string.\nHint: Use\
    \ length()", "    \n    string = \"\"\n    \n    for i = 1 to n do\n        string\
    \ = string + \" \" + i\n    \n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the string with all the characters in lower case.\
    \ \nHint: Use tolower() function.", "    string_seq = \"\"\n    for i = n\n  \
    \  do\n        string_seq = string_seq + i\n    done\n    return string_seq\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nIn Julia 1.1 you can use the function\
    \ Base.string() which does exactly what you want.\n<code>\njulia> string(1:5)\n\
    \"12345\"\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nIn\
    \ Julia 1.1 you can use the function Base.string() which does exactly what you\
    \ want.\n<code>\njulia> string(1:5)\n\"12345\"\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a |>\nIn Julia 1.1 you can use the function Base.string() which does exactly\
    \ what you want.\n<code>\njulia> string(1:5)\n\"12345\"\n</code>\n<|/ a dscore=1\
    \ tags=julia,string |>\n<| a dscore=1 |>\nIn Julia 1.1 you can use the function\
    \ Base.string() which does exactly what you want.\n<code>\njulia> string(1:5)\n\
    \"12345\"\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=0 |>\nIn Julia 1.1\
    \ you can use the function Base.string() which does exactly what you want.\n<code>\n\
    julia> string(1:5)\n\"12345\"\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.1 you can use the function Base.string() which does exactly what\
    \ you want.\n<code>\njulia> string(1:5)\n\"12345\"\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=julia,string |>\nIn Julia 1.1 you can use the function Base.string()\
    \ which does exactly what you want.\n<code>\njulia> string(1:5)\n\"12345\"\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=julia,string |>\nIn Julia 1.1 you can use the function\
    \ Base.string() which does exactly what you want.\n<code>\njulia> string(1:5)\n\
    \"12345\"\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nIn Julia 1.1 you can\
    \ use the function Base.string() which does exactly what you want.\n<code>\njulia>\
    \ string(1:5)\n\"12345\"\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.1 you can use the function Base.string() which does exactly what\
    \ you want.", "    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence\
    \ = string_sequence + \" \" + i\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the number of characters\
    \ in the string.\nHint: Use length() function", "    \n    string = \"\"\n   \
    \ for i = 1:n\n        string = string + \" \" + i\n    end\n    return string\n\
    end", "    string_seq = \"\"\n    for i = n\n    do\n        string_seq = string_seq\
    \ + i\n    done\n    return string_seq\n</code>\n<|/ a tags=julia,string |>\n\
    <| a tags=julia,string |>\n<code>", "    string_sequence = \"\"\n    for i = 1\
    \ to n do\n        string_sequence = string_sequence + \" \" + string(i)\n   \
    \ end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string.", "    string_seq = \"\"\n    for i\
    \ = n-1 downto 0 do \n        string_seq = string_seq + string(i)\n    end\n \
    \   return string_seq\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nThe function string_sequence is now defined. Let's see how it\
    \ works.", "    string_seq = String[]\n    for i = 1 to n do\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ number n and returns the string \"n is a multiple of 3\" if the number is divisible\
    \ by 3 and \"n is not a multiple of 3\" otherwise.", "    string_seq = String[]\n\
    \    for i = 1 to n do\n        string_seq.append(i.toString())\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <code language=julia-1.5>", "    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited ", "    \n    string_sequence\
    \ = String[]()\n    \n    for i in 0:n-1\n        string_sequence = string_sequence\
    \ + String(i)\n    end\n    \n    return string_sequence\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of numbers and returns the sum of the numbers.\
    \ \nHint: Use a for loop to iterate through the vector", "    string = \"\"\n\
    \    for i = 1:n\n        string = string + i\n    end\n    return string\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a number n and returns the string \"n!\".\nFor\
    \ example, string_sequence(5) should return \"5!\".", "    if n == 0\n       \
    \ return \"0\"\n    else if n == 1\n        return \"1\"\n    else\n        return\
    \ string_sequence(n-1) + \", \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nWrite a\
    \ function that takes a string and returns the number of sentences in the string.\n\
    Write a function that takes a string and returns the number of lines in the string.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are not spaces.\nWrite a function that takes a string and returns\
    \ the number of words in the string that are not spaces.\nWrite a function that\
    \ takes a string and returns the number of sentences in the string that are not\
    \ spaces.\nWrite a function that takes a string and returns the number of lines\
    \ in the string that are not spaces.\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are not spaces that are\
    \ not punctuation.\nWrite a function that takes a string and returns the number\
    \ of words in the string that are not spaces that are not punctuation.\nWrite\
    \ a function that takes a string and returns the number of sentences in the string\
    \ that are not spaces that are not punctuation.\nWrite a function that takes a\
    \ string and returns the number of lines in the string that are not spaces that\
    \ are not punctuation.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not spaces that are not punctuation that\
    \ are not digits.\nWrite a function that takes a string and returns the number\
    \ of words in the string that are not spaces that are not punctuation that are\
    \ not digits.\nWrite a function that takes a string and returns the number of\
    \ sentences in the string that are not spaces that are not punctuation that are\
    \ not digits.\nWrite a function that takes a string and returns the number of\
    \ lines in the string that are not spaces that are not punctuation that are not\
    \ digits.", "    if n <= 0 \n        error(\"n must be positive\")\n    else if\
    \ n == 1 \n        return \"0\"\n    else \n        return string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers. \nThe function should raise an error if the\
    \ vector is empty.\nHint: use sum.", "    if n < 0\n        error(\"n must be\
    \ non-negative\")\n    else if n == 0\n        return \"0\"\n    else if n ==\
    \ 1\n        return \"1\"\n    else if n == 2\n        return \"1 2\"\n    else\
    \ if n == 3\n        return \"1 2 3\"\n    else if n == 4\n        return \"1\
    \ 2 3 4\"\n    else if n == 5\n        return \"1 2 3 4 5\"\n    else if n ==\
    \ 6\n        return \"1 2 3 4 5 6\"\n    else if n == 7\n        return \"1 2\
    \ 3 4 5 6 7\"\n    else if n == 8\n        return \"1 2 3 4 5 6 7 8\"\n    else\
    \ if n == 9\n        return \"1 2 3 4 5 6 7 8 9\"\n    else if n == 10\n     \
    \   return \"1 2 3 4 5 6 7 8 9 10\"\n    else if n == 11\n        return \"1 2\
    \ 3 4 5 6 7 8 9 10 11\"\n    else if n == 12\n        return \"1 2 3 4 5 6 7 8\
    \ 9 10 11 12\"\n    else if n == 13\n        return \"1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13\"\n    else if n == 14\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14\"\n    else if n == 15\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15\"\n    else if n == 16\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15 16\"\n    else if n == 17\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15 16 17\"\n    else if n == 18\n        return \"1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16 17 18\"\n    else if n == 19\n        return \"1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14 15 16 17 18 19\"\n    else if n == 20\n        return \"\
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\n    else if n == 21\n  \
    \      return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\"\n    else\
    \ if n == 22\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\
    \ 20 21 22\"\n    else if n == 23\n        return \"1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17 18 19 20 21 22 23\"\n    else if n == 24\n        return \"1\
    \ 2 3 4 5 6 7 ", "    if n == 0 \n        then return \"0\"\n    else \n     \
    \   string_sequence(n-1) + \", \" + string_sequence(n-1)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 1\nWrite\
    \ a function that takes a number n and returns the string \"n!\".\nHint: Use recursion.",
  "    \n    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence\
    \ = string_sequence + \" \" + i\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a string as input and returns a string containing all\
    \ the characters in the string in alphabetical order.\nHint: Use a for loop to\
    \ iterate over the characters in the string.", "    string_seq = String[]\n  \
    \  for i = 1:n\n        push!(string_seq,string(i))\n    end\n    return join(\"\
    \ \",string_seq)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the first n prime numbers.\
    \ \nThe function should take an argument n and should return the prime numbers\
    \ from 0 to n-1. \nThe function should return an array of integers containing\
    \ the prime numbers. \nThe function should return nothing if the argument n is\
    \ less than or equal to 0.", "    if n < 0\n        error(\"n must be positive\"\
    )\n    end\n    \n    string = \"\"\n    for i in 0:n-1\n        string = string\
    \ + string(i)\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function called string_sequence that takes a single\
    \ argument n and returns a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.", "    string_seq = \"\"\n    for i = 1:n\n       \
    \ string_seq = string_seq + string(i)\n    end\n    return string_seq\nend\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\n\
    Hint: Use length() function", "    string_seq = String[]\n    for i = 1:n\n  \
    \      push!(string_seq,string(i))\n    end\n    return join(\" \",string_seq)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the string with all the characters in lower case. \nHint: use the function lower()\
    \ to do this.\nHint: use the function replace() to replace all the characters\
    \ in lower case with an empty string.\nHint: use the function join() to concatenate\
    \ all the characters in lower case into a string.\nHint: use the function split()\
    \ to split the string into substrings.", "    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    if n==0 then return \"0\"\n\
    \    else return string_sequence(n-1) + \", \" + string_sequence(n-1)\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a number as input and returns\
    \ the string representation of that number in reverse order. For example, if the\
    \ input is 5, the function should return \"5 4 3 2 1\". Hint: Use recursion.",
  "    \n    string = \"\"\n    \n    for i in 0:n-1\n        string = string + i\n\
    \    \n    return string\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThanks\
    \ for your answer! I actually tried this before posting my question, but I didn't\
    \ know that Julia had a built-in function called `string_sequence`. I was wondering\
    \ why it didn't work. Now I know!\n<|/ c |>\n<| a tags=julia,string |>\nIn Julia\
    \ 1.5 you can use the function repeat to repeat a string a number of times. For\
    \ example:\n<code>\njulia> repeat(\"a\", 5)\n\"aaaaa\"\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.5 you can use the function repeat\
    \ to repeat a string a number of times. For example:\n<code>\njulia> repeat(\"\
    a\", 5)\n\"aaaaa\"\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nIn Julia 1.5\
    \ you can use the function repeat to repeat a string a number of times. For example:\n\
    <code>\njulia> repeat(\"a\", 5)\n\"aaaaa\"\n</code>\n<|/ a tags=julia,string |>\n\
    <| a dscore=0 |>\nIn Julia 1.5 you can use the function repeat to repeat a string\
    \ a number of times. For example:\n<code>\njulia> repeat(\"a\", 5)\n\"aaaaa\"\n\
    </code>\n<|/ a tags=julia,string |>\n<| a dscore=0 |>\nIn Julia 1.5 you can use\
    \ the function repeat to repeat a string a number of times. For example:\n<code>\n\
    julia> repeat(\"a\", 5)\n\"aaaaa\"\n</code>\n<|/ a tags=julia,string |>\n<| a\
    \ tags=julia,string |>\nIn Julia 1.5 you can use the function repeat to repeat\
    \ a string a number of times. For example:\n<code>\njulia> repeat(\"a\", 5)\n\"\
    aaaaa\"\n</code>\n<|/ a dscore=0 |>\n<| a |>\nIn Julia 1.5 you can use the function\
    \ repeat to repeat a string a number of times. For example:\n<code>\njulia> repeat(\"\
    a\", 5)\n\"aaaaa\"\n</code>\n<|/ a dscore=0 tags=julia,string |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.5 you can use the function repeat to repeat a string a number\
    \ of times. For example:\n<code>\njulia> repeat(\"a\", 5)\n\"aaaaa\"\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=julia,string ", "    \n    string_seq = \"\"\n  \
    \  for i = 1:n\n        string_seq = string_seq + i\n    end\n    return string_seq\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector.\nFor example, if the vector is [5, 3, 2], the\
    \ function should return 11.\nHint: use the reduce function.", "    \"\"\"\" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1\
    \ 2 3 4 5\"\n    \"\"\"", "    string_seq = \"\"\n    for i = 1:n\n        string_seq\
    \ = string_seq + string(i)\n    end\n    return string_seq\nend\n</cell>\n<code\
    \ language=julia-1.0>\nstring_sequence(5)\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\n\
    Hint: Use length() function", "    if n <= 0 \n        error(\"n must be positive\"\
    )\n    else if n == 1 \n        return \"0\"\n    else \n        string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a number n and returns\
    \ the string \"n!\".\nFor example, if n is 5, the function should return \"5!\"\
    .", "    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq +\
    \ i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.1>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in it.", "    string_sequence =\
    \ \"\"\n    for i = 1:n\n        string_sequence = string_sequence + \" \" + string(i)\n\
    \    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.0>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an\
    \ integer $n$ and returns the string \"n\"\nWrite a function that takes an integer\
    \ $n$ and returns the string \"n\"\nWrite a function that takes an integer $n$\
    \ and returns the string \"n\"\nWrite a function that takes an integer $n$ and\
    \ returns the string \"n\"\nWrite a function that takes an integer $n$ and returns\
    \ the string \"n\"\nWrite a function that takes an integer $n$ and returns the\
    \ string \"n\"\nWrite a function that takes an integer $n$ and returns the string\
    \ \"n\"\nWrite a function that takes an integer $n$ and returns the string \"\
    n\"\nWrite a function that takes an integer $n$ and returns the string \"n\"\n\
    Write a function that takes an integer $n$ and returns the string \"n\"\nWrite\
    \ a function that takes an integer $n$ and returns the string \"n\"\nWrite a function\
    \ that takes an integer $n$ and returns the string \"n\"\nWrite a function that\
    \ takes an integer $n$ and returns the string \"n\"\nWrite a function that takes\
    \ an integer $n$ and returns the string \"n\"\nWrite a function that takes an\
    \ integer $n$ and returns the string \"n\"\nWrite a function that takes an integer\
    \ $n$ and returns the string \"n\"\nWrite a function that takes an integer $n$\
    \ and returns the string \"n\"\nWrite a function that takes an integer $n$ and\
    \ returns the string \"n\"\nWrite a function that takes an integer $n$ and returns\
    \ the string \"n\"\nWrite a function that takes an integer $n$ and returns the\
    \ string \"n\"\nWrite a function that takes an integer $n$ and returns the string\
    \ \"n\"\nWrite a function that takes an integer $n$ and returns the string \"\
    n\"\nWrite a function that takes an integer $n$ and returns the string \"n\"\n\
    Write a function that takes an integer $n$ and returns the string \"n\"\nWrite\
    \ a function that takes an integer $n$ and returns the string \"n\"\nWrite a function\
    \ that takes an integer $n$ and returns the string \"n\"\nWrite a function that\
    \ takes an integer $n$ and returns the string \"n\"\nWrite a function that takes\
    \ an integer $n$ and returns the string \"n\"\nWrite a function that takes an\
    \ integer $n$ and returns the string ", "    if n == 0 \n        then return \"\
    0\"\n    else \n        string_sequence(n - 1) + \" \" + to_string(n)\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of strings and returns a vector of integers containing\
    \ the number of characters in each string.", "    string_seq = String[]\n    for\
    \ n in 0..n\n        string_seq.append(string(n))\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string.\nHint: Use length() function.", "  \
    \  \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nThe function should\
    \ take two arguments: n and digits_separator.\nThe function should return a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\nThe function\
    \ should return an empty string if n is less than or equal to 0.\nThe function\
    \ should return an error message if n is greater than or equal to 0.\nThe function\
    \ should return an error message if digits_separator is less than or equal to\
    \ 0.\nThe function should return an error message if digits_separator is greater\
    \ than or equal to 0.\nThe function should return an error message if digits_separator\
    \ is neither a String nor a Char.\nThe function should return an error message\
    \ if digits_separator is not a String or a Char.\nThe function should return an\
    \ error message if digits_separator is not a String or a Char.\nThe function should\
    \ return an error message if digits_separator is not a String or a Char.\nThe\
    \ function should return an error message if digits_separator is not a String\
    \ or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a ", "    string_seq = String[]\n    for i in 0:n\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in the string.", "    string_seq\
    \ = \"\"\n    for i = 1 to n do\n        string_seq = string_seq + i\n    end\n\
    \    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<code language=julia-1.5>", "    string_seq = String[]\n    for i = 1\
    \ to n do\n        string_seq.append(i.toString())\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(0)\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise 1\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\n\
    Hint: Use length()", "    string_seq = \"\"\n    for i = 1:n\n        string_seq\
    \ = string_seq + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of integers and returns a vector of strings where each string is the\
    \ string representation of each integer in the vector.\nFor example, if the input\
    \ vector is [1,2,3] the output vector should be [\"1\",\"2\",\"3\"].", "    string_seq\
    \ = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n    end\n    return\
    \ string_seq\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string.\nHint: Use length() function", "    string_sequence\
    \ = \"\"\n    for i = n\n    do\n        string_sequence = string_sequence + \"\
    \ \" + to_string(i)\n    done\n    return string_sequence\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=julia |>\n<code>", "    string_seq = String[]\n    for i = 1 to\
    \ n do\n        push!(string_seq,String(i))\n    end\n    return join(\" \",string_seq)\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an array of numbers and returns the sum\
    \ of the numbers in the array.", "    if n <= 0\n        error(\"n must be positive\"\
    )\n    else if n == 1\n        return \"0\"\n    else if n == 2\n        return\
    \ \"0 1\"\n    else if n == 3\n        return \"0 1 2\"\n    else if n == 4\n\
    \        return \"0 1 2 3\"\n    else if n == 5\n        return \"0 1 2 3 4\"\n\
    \    else if n == 6\n        return \"0 1 2 3 4 5\"\n    else if n == 7\n    \
    \    return \"0 1 2 3 4 5 6\"\n    else if n == 8\n        return \"0 1 2 3 4\
    \ 5 6 7\"\n    else if n == 9\n        return \"0 1 2 3 4 5 6 7 8\"\n    else\
    \ if n == 10\n        return \"0 1 2 3 4 5 6 7 8 9\"\n    else if n == 11\n  \
    \      return \"0 1 2 3 4 5 6 7 8 9 10\"\n    else if n == 12\n        return\
    \ \"0 1 2 3 4 5 6 7 8 9 10 11\"\n    else if n == 13\n        return \"0 1 2 3\
    \ 4 5 6 7 8 9 10 11 12\"\n    else if n == 14\n        return \"0 1 2 3 4 5 6\
    \ 7 8 9 10 11 12 13\"\n    else if n == 15\n        return \"0 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13 14\"\n    else if n == 16\n        return \"0 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13 14 15\"\n    else if n == 17\n        return \"0 1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14 15 16\"\n    else if n == 18\n        return \"0 1 2 3 4\
    \ 5 6 7 8 9 10 11 12 13 14 15 16 17\"\n    else if n == 19\n        return \"\
    0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\"\n    else if n == 20\n      \
    \  return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\n    else if n\
    \ == 21\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\
    \n    else if n == 22\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\
    \ 16 17 18 19 20 21\"\n    else if n == 23\n        return \"0 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13 14 15 16 17 18 19 20 21 22\"\n    else if n == 24\n        return\
    \ \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ", "    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Initialize\
    \ a string variable with an empty string.\"\n    \" Initialize a variable i to\
    \ 0.\"\n    \" Initialize a variable j to n.\"\n    \" Initialize a variable k\
    \ to 0.\"\n    \" Initialize a variable l to 0.\"\n    \" Initialize a variable\
    \ m to 0.\"\n    \" Initialize a variable n to 0.\"\n    \" Initialize a variable\
    \ o to 0.\"\n    \" Initialize a variable p to 0.\"\n    \" Initialize a variable\
    \ q to 0.\"\n    \" Initialize a variable r to 0.\"\n    \" Initialize a variable\
    \ s to 0.\"\n    \" Initialize a variable t to 0.\"\n    \" Initialize a variable\
    \ u to 0.\"\n    \" Initialize a variable v to 0.\"\n    \" Initialize a variable\
    \ w to 0.\"\n    \" Initialize a variable x to 0.\"\n    \" Initialize a variable\
    \ y to 0.\"\n    \" Initialize a variable z to 0.\"\n    \" Initialize a variable\
    \ a to 0.\"\n    \" Initialize a variable b to 0.\"\n    \" Initialize a variable\
    \ c to 0.\"\n    \" Initialize a variable d to 0.\"\n    \" Initialize a variable\
    \ e to 0.\"\n    \" Initialize a variable f to 0.\"\n    \" Initialize a variable\
    \ g to 0.\"\n    \" Initialize a variable h to 0.\"\n    \" Initialize a variable\
    \ i to 0.\"\n    \" Initialize a variable j to n.\"\n    \" Initialize a variable\
    \ k to 0.\"\n    \" Initialize a variable l to 0.\"\n    \" Initialize a variable\
    \ m to 0.\"\n    \" Initialize a variable n to n.\"\n    \" Initialize a variable\
    \ o to n.\"\n    \" Initialize a variable p to n.\"\n    \" Initialize a variable\
    \ q to n.\"\n    \" Initialize a variable r to n.\"\n    \" Initialize a variable\
    \ s to n.\"\n    \" Initialize a variable t to n.\"\n    \" Initialize a variable\
    \ u to n.\"\n    \" Initialize a variable v to n.\"\n    \" Initialize a variable\
    \ w to n.\"\n    \" Initialize a variable x to n.\"\n    \" Initialize a variable\
    \ y to n.\"\n    \" Initialize a variable z to n.\"\n    \" Initialize a variable\
    \ a to n.\"\n    \" Initialize a variable b to n.\"\n    \" Initialize a variable\
    \ c to n.\"\n    \" Initialize a variable d to n.\"\n    \" Initialize a variable\
    \ e to n.\"\n    \" ", "    string_seq = String[]\n    for i in 0..n-1\n     \
    \   string_seq[i] = \"%d\" %i\n    return string_seq.join(\" \")\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string.",
  "    \n    string = \"\"\n    \n    for i = 1:n\n        string = string + \" \"\
    \ + string(i)\n    end\n    \n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nHint: Use length()",
  "    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence = string_sequence\
    \ + \" \" + i\n    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<code language=julia-1.5>", "    if n==0\n      \
    \  0\n    else\n        string_sequence(n-1)+\" \"*(n-1)+string_sequence(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns the number of words\
    \ in the string.\nHint: Use split() to split the string into a vector of words\
    \ and then count the length of the vector.", "    string_seq = String[]\n    for\
    \ n in 0 .. n\n        string_seq += String(n)\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the string with all the characters in lower case. \nFor example,\
    \ string_lower(\"Hello World\") should return \"hello world\".", "    string =\
    \ \"\"\n    for i = 1 to n do\n        string = string + \" \" + to_string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns a vector of strings containing the numbers converted to strings. \n\
    For example, string_vector([1,2,3]) should return [\"1 2 3\"].\nHint: Use a for\
    \ loop to iterate over the vector and append the elements to a string.", "   \
    \ if n==0 \n        then return \"0\"\n    else \n        string_sequence(n-1)+\"\
    , \"+string_sequence(n)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a number n and returns the string \"n is even\" if the number is even,\
    \ and \"n is odd\" if the number is odd.", "    if n == 0\n        return \"0\"\
    \n    else if n == 1\n        return \"1\"\n    else\n        return string_sequence(n-1)\
    \ + \", \" + string_sequence(n-2) \nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of characters in the string.\nHint: Use length",
  "    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend", "    string_sequence = \"\"\n    for i\
    \ = n-1, 0, -1 do string_sequence = string_sequence + string(i) end\n    return\
    \ string_sequence\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 1\nWrite a function that takes an integer $n$ and returns the string \"0 1 2\
    \ 3 4 5\" up to and including $n$. Test it by calling it with the argument $n=5$.",
  "    if n == 0\n        return \"0\"\n    else if n == 1\n        return \"1\"\n\
    \    else\n        return string_sequence(n-1) + \", \" + string_sequence(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in it.", "    \"\"\"\" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"", "    string_seq = String[]\n    for i in 0\
    \ .. n\n        string_seq.append(i.toString())\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the string with all the characters\
    \ in lower case. For example, \"Hello World\" becomes \"hello world\".", "   \
    \ string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n  \
    \  end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<code language=julia-1.4>", "    string_seq = \"\"\n    for i = 1:n\n\
    \        string_seq = string_seq + i\n    end\n    return string_seq\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns a string with all the characters\
    \ in lower case.\nHint: use the function lower() to do this.\nHint: use the function\
    \ replace() to replace all occurrences of \" \" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\n\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\t\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\r\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\t\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\r\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\t\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\r\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\t\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\r\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\t\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\r\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\t\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\r\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\t\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\r\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\t\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\r\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\t\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\r\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\t\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\r\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\t\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\r\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\t\" with \"\".\nHint: use the function\
    \ replace() to replace all occurrences of \"\\r\" with ", "    \"\"\"\" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1\
    \ 2 3 4 5\"\n    \"\"\"", "    \n    string = \"\"\n    for i = 1 to n do\n  \
    \      string = string + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string.", "    str = String[Int64]()\n    for i = 1:n\n\
    \        push!(str, i)\n    end\n    str\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers in the vector. For example, if the input vector is [1,2,3],\
    \ the output should be 6. Write a test for this function.", "    if n==0\n   \
    \     0\n    else\n        string_sequence(n-1)+\" \"*(n-1)+string_sequence(n)\n\
    end\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nHint: Use split() to split the string into a vector of words.",
  "    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<code language=julia-1.5>",
  "    string_seq = String[]\n    for i in 0 .. n\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the string with all occurrences of \"a\" replaced\
    \ by \"b\".\nFor example, string_replace(\"aba\", \"a\", \"b\") returns \"bbb\"\
    .", "    string_seq = String[]\n    for x in 0:n\n        string_seq += String(x)\n\
    \    return string_seq\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>",
  "    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n\
    \    end\n    string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nHint: Use length() function", "   \
    \ str = \" \"\n    for i = n-1 downto 1 do\n        str = str + i\n    end\n \
    \   return str\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<code language=julia-1.5>",
  "    str = String[Int64]()\n    for i = 1:n\n        str = str + i\n    end\n  \
    \  str\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns a vector of strings.\
    \ Each string in the returned vector is the concatenation of all the integers\
    \ in the input vector. For example, if the input vector is [1,2,3], the returned\
    \ vector should be [\"1\",\"2\",\"3\"].", "    string_seq = \"\"\n    for i =\
    \ 1 to n do\n        string_seq = string_seq + i\n    end\n    return string_seq\n\
    end\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of words in the string.\nThe function should ignore all punctuation and capitalization.\n\
    The function should ignore all empty words.\nThe function should ignore all words\
    \ shorter than 3 characters.\nThe function should ignore all words longer than\
    \ 50 characters.\nThe function should ignore all words that contain only numbers.\n\
    The function should ignore all words that contain only letters.\nThe function\
    \ should ignore all words that contain only symbols.\nThe function should ignore\
    \ all words that contain only uppercase letters.\nThe function should ignore all\
    \ words that contain only lowercase letters.\nThe function should ignore all words\
    \ that contain only symbols.\nThe function should ignore all words that contain\
    \ only uppercase letters.\nThe function should ignore all words that contain only\
    \ lowercase letters.\nThe function should ignore all words that contain only symbols.\n\
    The function should ignore all words that contain only uppercase letters.\nThe\
    \ function should ignore all words that contain only lowercase letters.\nThe function\
    \ should ignore all words that contain only symbols.\nThe function should ignore\
    \ all words that contain only uppercase letters.\nThe function should ignore all\
    \ words that contain only lowercase letters.\nThe function should ignore all words\
    \ that contain only symbols.\nThe function should ignore all words that contain\
    \ only uppercase letters.\nThe function should ignore all words that contain only\
    \ lowercase letters.\nThe function should ignore all words that contain only symbols.\n\
    The function should ignore all words that contain only uppercase letters.\nThe\
    \ function should ignore all words that contain only lowercase letters.\nThe function\
    \ should ignore all words that contain only symbols.\nThe function should ignore\
    \ all words that contain only uppercase letters.\nThe function should ignore all\
    \ words that contain only lowercase letters.\nThe function should ignore all words\
    \ that contain only symbols.\nThe function should ignore all words that contain\
    \ only uppercase letters.\nThe function should ignore all words that contain only\
    \ lowercase letters.\nThe function should ignore all words that contain only symbols.\n\
    The function should ignore all words that contain only uppercase letters.\nThe\
    \ function should ignore all words that contain only lowercase letters.\nThe function\
    \ should ignore all words that contain only symbols.\nThe function should ignore\
    \ all words that contain only uppercase letters.\nThe function should ignore all\
    \ words that contain only lowercase letters.\nThe function should ignore all words\
    \ that contain only symbols.\nThe function should ignore all ", "    \"\"\"\"\
    \ Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1\
    \ 2 3 4 5\"\n    \"\"\"", "    string_sequence = \"\"\n    for i = n\n    do\n\
    \        string_sequence = string_sequence + \" \" + to_string(i)\n    done\n\
    \    return string_sequence\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\n\
    I like using mapslices for these kinds of things:\n<code>\njulia> mapslices(x\
    \ -> string(x), 0:5, dims=2)\n5-element Array{String,1}:\n \"0\"\n \"1 2\"\n \"\
    3 4 5\"\n \"6 7 8 9\"\n \"10 11 12 13 14 15\"\n</code>\n<|/ a tags=julia |>\n\
    <| a tags=julia |>\nI like using mapslices for these kinds of things:\n<code>\n\
    julia> mapslices(x -> string(x), 0:5, dims=2)\n5-element Array{String,1}:\n \"\
    0\"\n \"1 2\"\n \"3 4 5\"\n \"6 7 8 9\"\n \"10 11 12 13 14 15\"\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=1 |>\nI like using mapslices for these kinds of things:\n\
    <code>\njulia> mapslices(x -> string(x), 0:5, dims=2)\n5-element Array{String,1}:\n\
    \ \"0\"\n \"1 2\"\n \"3 4 5\"\n \"6 7 8 9\"\n \"10 11 12 13 14 15\"\n</code>\n\
    <|/ a tags=julia |>\n<| a tags=julia |>\nI like using mapslices for these kinds\
    \ of things:\n<code>\njulia> mapslices(x -> string(x), 0:5, dims=2)\n5-element\
    \ Array{String,1}:\n \"0\"\n \"1 2\"\n \"3 4 5\"\n \"6 7 8 9\"\n \"10 11 12 13\
    \ 14 15\"\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\nI like using mapslices\
    \ for these kinds of things:\n<code>\njulia> mapslices(x -> string(x), 0:5, dims=2)\n\
    5-element Array{String,1}:\n \"0\"\n \"1 2\"\n \"3 4 5\"\n \"6 7 8 9\"\n \"10\
    \ 11 12 13 14 15\"\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI like using\
    \ mapslices for these kinds of things:\n<code>\njulia> mapslices(x -> string(x),\
    \ 0:5, dims=2)\n5-element Array{String,1}:\n \"0\"\n \"1 2\"\n \"", "    string_seq\
    \ = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n    end\n    return\
    \ string_seq\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ a string with all the characters in reverse order.\nFor example, string_sequence(\"\
    hello\") should return \"olleh\"\nHint: Use reverse()", "    string = \"\"\n \
    \   for i = 1:n\n        string = string + \" \" + to_string(i)\n    end\n   \
    \ return string\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<code language=julia-1.4>",
  "    \n    string = \"\"\n    for i = 1 to n do\n        string = string + i\n \
    \   end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ the number of characters in the string.", "    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive. \"\n    \n    string\
    \ = \"\"\n    for i = 1 to n do\n        string = string + \" \" + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 1\nWrite a function that returns the first n prime numbers. \nHint: Use a for\
    \ loop to iterate from 2 to n and test each number for primality. \nHint: Use\
    \ a while loop to iterate from 2 to n and test each number for primality. \nHint:\
    \ Use a recursive function to implement the algorithm.", "    \n    string = \"\
    \"\n    for i = 1:n\n        string = string + \" \" + to_string(i)\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers. \nHint: Use a for loop and a variable that accumulates\
    \ the sum.", "    if n == 0 \n        return \"0\" \n    else \n        string_sequence(n\
    \ - 1) + \" \" + to_string(n) \nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers. \nFor example, if the input vector is [1,2,3,4,5],\
    \ the output should be 15.", "    string_sequence = \"\"\n    for i in 0:n-1\n\
    \        string_sequence = string_sequence + string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.1>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first n prime numbers. \nHint: Use\
    \ a for loop and a prime number generator function.", "    string_seq = String[]\n\
    \    for i in 0:n-1\n        string_seq[i] = i\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string.", "    \n    string = \"\"\n    for\
    \ i = 1 to n do\n        string = string + \" \" + i\n    end\n    return string\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the string\
    \ with all characters replaced by '#'.\nFor example, string_sequence(\"hello\"\
    ) should return \"h#e#l#l#o\".", "    \n    string = \"\"\n    for i = 1 to n\
    \ do\n        string = string + \" \" + to_string(i)\n    end\n    return string\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of numbers and returns a vector\
    \ where each element is the product of all the numbers in the original vector.\
    \ For example, if the input vector is [1,2,3], the output vector should be [1,2,3].",
  "    \n    string = \"\"\n    for i = 1 to n do\n        string = string + i\n \
    \   end\n    return string\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function called string_sequence that returns\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.",
  "    string = \"\"\n    for i = 1 to n do\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: Use a for loop and a prime number test.", "    string_sequence = \"\"\
    \n    for i in 0:n-1\n        string_sequence = string_sequence + \" \" + string(i)\n\
    \    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number ", "    \n    string = \"\"\n    for i = 1 to n do\n        string\
    \ = string + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the numbers in the vector. \nFor example,\
    \ if the input vector is [1,2,3,4,5], the output should be 15.", "    if n ==\
    \ 0 \n        then return \"0\"\n    else \n        string_sequence(n - 1) + \"\
    \ \" ++ string_sequence(n)\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 1\nWrite a function that takes a string and returns\
    \ the number of characters in the string.", "    if n < 0\n        error(\"n must\
    \ be positive\")\n    elseif n == 0\n        return \"0\"\n    else\n        string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype string_sequence(0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ string_sequence(5)\n</cell>\n<text>\nExercise: Write a function that takes a\
    \ string and returns the number of characters in the string.", "    \n    string_seq\
    \ = \"\"\n    for i in 0:n\n        string_seq = string_seq + i\n    end\n   \
    \ return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes an integer n and returns\
    \ the string \"n!\".\nWrite a function that takes an integer n and returns the\
    \ string \"n!+n\"\nWrite a function that takes an integer n and returns the string\
    \ \"n!+n+n\"\nWrite a function that takes an integer n and returns the string\
    \ \"n!+n+n+n\"\nWrite a function that takes an integer n and returns the string\
    \ \"n!+n+n+n+n\"\nWrite a function that takes an integer n and returns the string\
    \ \"n!+n+n+n+n+n\"\nWrite a function that takes an integer n and returns the string\
    \ \"n!+n+n+n+n+n+n\"\nWrite a function that takes an integer n and returns the\
    \ string \"n!+n+n+n+n+n+n+n\"\nWrite a function that takes an integer n and returns\
    \ the string \"n!+n+n+n+n+n+n+n+n\"\nWrite a function that takes an integer n\
    \ and returns the string \"n!+n+n+n+n+n+n+n+n+n\"\nWrite a function that takes\
    \ an integer n and returns the string \"n!+n+n+n+n+n+n+n+n+n+n\"\nWrite a function\
    \ that takes an integer n and returns the string \"n!+n+n+n+n+n+n+n+n+n+n+n\"\n\
    Write a function that takes an integer n and returns the string \"n!+n+n+n+n+n+n+n+n+n+n+n+n\"\
    \nWrite a function that takes an integer n and returns the string \"n!+n+n+n+n+n+n+n+n+n+n+n+n+n\"\
    \nWrite a function that takes an integer n and returns the string \"n!+n+n+n+n+n+n+n+n+n+n+n+n+n+n\"\
    \nWrite a function that takes an integer n and returns the string \"n!+n+n+n+n+n+n+",
  "    if n==0 then return \"0\"\n    else return string_sequence(n-1) + \", \" +\
    \ string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function named string_sequence that returns\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    Write a test that checks your function by comparing the result to the expected\
    \ output.", "    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 ", "    \n    string = \"\"\n    for i = 1 to n do\n\
    \        string = string + i\n    end\n    return string\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the first n integers of a given sequence.", "    string_seq\
    \ = String[]\n    for i in 0 .. n-1 do\n        push!(string_seq,String(i))\n\
    \    return join(\" \",string_seq)\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a string and returns the number of characters in the string.\n\
    Hint: Use length()", "    if n==0 then return \"0\"\n    else return string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.", "    if n < 0\n        error(\"n must\
    \ be positive\")\n    else if n == 0\n        return \"0\"\n    else\n       \
    \ str = string_sequence(n-1)\n        str = str + \" \"\n        str = str + string_sequence(n)\n\
    \        return str\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.", "    string_seq = \"\"\n    for i\
    \ = 1:n\n        string_seq = string_seq + i\n    end\n    return string_seq\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nWrite a function that takes a string and\
    \ returns the number of characters in that string.\n>>> count_characters(\"hello\"\
    )\n5\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n", "    string_sequence = String[]()\n\
    \    for i = 1 to n do\n        string_sequence = string_sequence @ [String(i)]\n\
    \    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of characters in the string.", "    string_seq\
    \ = \"\"\n    for i = 1 to n do\n        string_seq = string_seq + i\n    end\n\
    \    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 \n        then return \"0\"\
    \n    else \n        string_sequence(n - 1) + \" \" ++ string_sequence(n)\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the number of words\
    \ in the string.", "    string_seq = String[]\n    for i = 1 to n do\n       \
    \ string_seq.append(i.toString())\n    return string_seq.join(\" \")\nend\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the string with all the letters capitalized.\n\
    e.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" ", "    \n    if n==0\n        return \"0\"\n    \n   \
    \ string = \"\"\n    \n    for i = 1 to n\n        string = string + \" \" + to_string(i)\n\
    \    \n    return string\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings where each string is the string representation\
    \ of each integer in the vector. For example, if the input vector is [1,2,3] the\
    \ output should be [\"1\",\"2\",\"3\"].", "    \n    string = \"\"\n    \n   \
    \ for i in 0:n\n        string += i\n    \n    return string\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
