language: jl
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter((x) -> startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input vector of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf0rdxsk7.jl:11\nin expression starting at\
    \ /tmp/tmpf0rdxsk7.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpo0gcja9a.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpo0gcja9a.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching delete!(::String, ::String)\n  Closest candidates are:\n    delete!(!Matched::IdDict{K},\
    \ ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \     @ Main /tmp/tmpo0gcja9a.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo0gcja9a.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo0gcja9a.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter_by_prefix(\n        map(x -> startswith(x, prefix), strings),\n\
    \        prefix\n    )\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(string,\
    \ prefix) returns a vector containing only strings that start with the given prefix.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd5iqm9zo.jl:13\nin expression starting at\
    \ /tmp/tmpd5iqm9zo.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter( x -> startswith(prefix, x), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp885jhzw0.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp885jhzw0.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp885jhzw0.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp885jhzw0.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_len = length(prefix)\n    \n    strings = filter( x -> startswith(x,\
    \ prefix), strings)\n    \n    strings = filter( x -> length(x) > prefix_len,\
    \ strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input vector of strings only for\
    \ ones that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n  \
    \  []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaerry6e.jl:17\nin expression starting at\
    \ /tmp/tmpxaerry6e.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsgsyorsh.jl:19\nin expression starting at\
    \ /tmp/tmpsgsyorsh.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.startswith(prefix)\n     \
    \       push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters strings by a predicate that returns true if the string\
    \ starts with \"a\" and false otherwise. For example, filter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\") should return [\"abc\", \"array\"].\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfuefhnzz.jl:21\nin expression starting at\
    \ /tmp/tmpfuefhnzz.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = filter( x -> startswith(prefix, x), strings)\n    \n \
    \   return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4dr5ep5v.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp4dr5ep5v.jl:19\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4dr5ep5v.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4dr5ep5v.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input vector of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpett6a5za.jl:19\nin expression starting at\
    \ /tmp/tmpett6a5za.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp87yelhj6.jl:19\nin expression starting at\
    \ /tmp/tmp87yelhj6.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abde\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6mqjii64.jl:21\nin expression starting at\
    \ /tmp/tmp6mqjii64.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = filter(x->startswith(x, prefix), strings)\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix([],\
    \ \"a\")\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqhfvwszp.jl:13\nin expression starting at\
    \ /tmp/tmpqhfvwszp.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter((x) -> startswith(prefix, x), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp43ya_9y0.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp43ya_9y0.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp43ya_9y0.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp43ya_9y0.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(vector, prefix)\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2568_bsw.jl:15\nin expression starting at\
    \ /tmp/tmp2568_bsw.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    if prefix_length == 0\n\
    \        return strings\n    \n    strings_filtered = Vector{String}(undef, 0)\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(strings_filtered, string)\n        end\n    end\n    \n    return\
    \ strings_filtered\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an array of strings only for those that end with a given\
    \ suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5xd08iky.jl:24\nin expression starting at\
    \ /tmp/tmp5xd08iky.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpw1ebjxbc.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpw1ebjxbc.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpw1ebjxbc.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1ebjxbc.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1ebjxbc.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(s,\
    \ prefix)\n            delete!(s, prefix)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vector,\
    \ prefix)\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp91nbf85n.jl:19\nin expression starting at\
    \ /tmp/tmp91nbf85n.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(x, prefix), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vector, prefix)\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwe3g3c7o.jl:11\nin expression starting at\
    \ /tmp/tmpwe3g3c7o.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(x, prefix), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input vector of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdq0mmztn.jl:11\nin expression starting at\
    \ /tmp/tmpdq0mmztn.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpw1ebjxbc.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpw1ebjxbc.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpw1ebjxbc.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1ebjxbc.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1ebjxbc.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(x,prefix), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input vector of strings only for\
    \ ones that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n  \
    \  []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6dbt7r09.jl:19\nin expression starting at\
    \ /tmp/tmp6dbt7r09.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter(x->startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter(x->startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter(x->startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter(x->startswith(String(x), prefix), strings)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter(x->startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter(x->startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter(x->startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter(x->startswith(String(x), prefix), strings)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter(x->startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter(x->startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter(x->startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter(x->startswith(String(x), prefix), strings)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter(x->startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter(x->startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter(x->startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter(x->startswith(String(x), prefix), strings)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter(x->startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter(x->startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter(x->startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter(x->startswith(String(x), prefix), strings)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3q46ug9q.jl:76\nin expression starting at\
    \ /tmp/tmp3q46ug9q.jl:76\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> startswith(x,\
    \ prefix), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3: Filter a vector of strings based on a regular expression\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq1p8gk__.jl:15\nin expression starting at\
    \ /tmp/tmpq1p8gk__.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = filter(x->startswith(x, prefix), strings)\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise: Write a function\
    \ that filters strings by a prefix and suffix.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2fctya0f.jl:13\nin expression starting at\
    \ /tmp/tmp2fctya0f.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6zh1z4k9.jl:21\nin expression starting at\
    \ /tmp/tmp6zh1z4k9.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.startswith(prefix)\n     \
    \       strings = filter!(x -> x != string, strings)\n        end\n    end\n \
    \   \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9m2tvsbl.jl:21\nin expression starting at\
    \ /tmp/tmp9m2tvsbl.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(s,\
    \ prefix)\n            delete!(s, prefix)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters strings by a predicate that returns true if the string starts with\
    \ a given prefix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpztfo5tra.jl:19\nin expression starting at\
    \ /tmp/tmpztfo5tra.jl:19\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(x, prefix), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpw1ebjxbc.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpw1ebjxbc.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpw1ebjxbc.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1ebjxbc.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1ebjxbc.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(x, prefix), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vector, prefix)\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphf9ttpup.jl:19\nin expression starting at\
    \ /tmp/tmphf9ttpup.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 0\n        strings\n    else\n \
    \       map(x->substring(x, prefix_length), strings)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_prefix\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvc8a25xd.jl:19\nin expression starting at\
    \ /tmp/tmpvc8a25xd.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[start:end] \n    \n    return strings\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp054a4ov_.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp054a4ov_.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: start not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmp054a4ov_.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp054a4ov_.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp054a4ov_.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp054a4ov_.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: start not defined\n\
    \  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \     @ Main /tmp/tmp054a4ov_.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp054a4ov_.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp054a4ov_.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     2      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter( x -> startswith(prefix, x), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp885jhzw0.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp885jhzw0.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp885jhzw0.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp885jhzw0.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter( x -> startswith(x, prefix), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix) == true\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that filters an input vector of strings only for ones that end with a given\
    \ suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0qklaehb.jl:21\nin expression starting at\
    \ /tmp/tmp0qklaehb.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[start:end]\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input vector of strings only for\
    \ ones that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n  \
    \  []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0bs4vjy_.jl:10\nin expression starting at\
    \ /tmp/tmp0bs4vjy_.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(String[], String)\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw0eiq81i.jl:19\nin expression starting at\
    \ /tmp/tmpw0eiq81i.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.startswith(prefix)\n     \
    \       push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk7v1bxd1.jl:21\nin expression starting at\
    \ /tmp/tmpk7v1bxd1.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpw1ebjxbc.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpw1ebjxbc.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpw1ebjxbc.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1ebjxbc.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1ebjxbc.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    if prefix_length == 0\n        return strings\n\
    \    else\n        \n        prefix_strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n        \n        prefix_strings = filter(x->length(x) >\
    \ prefix_length, prefix_strings)\n        \n        return prefix_strings\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5vyq4rw3.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp5vyq4rw3.jl:30\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxxAAA\"] == [\"xxx\", \"xxxAAA\", \"\
    xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5vyq4rw3.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5vyq4rw3.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings_filtered = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        strings_filtered << string\n        end\n    end\n    \n    return strings_filtered\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input vector of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"c\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"cde\", \"array\"]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\"\
    , \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcd\")\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcde\")\n[\"abc\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdea\")\n\
    [\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcdeab\")\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabd\")\n[\"abc\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabdc\"\
    )\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcdeabdca\")\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabdcab\")\n[\"abc\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx6nu396_.jl:21\nin expression starting at\
    \ /tmp/tmpx6nu396_.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter( x -> startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input vector of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9q_vpfgi.jl:11\nin expression starting at\
    \ /tmp/tmp9q_vpfgi.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter((x) -> startswith(prefix, x), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp43ya_9y0.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp43ya_9y0.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp43ya_9y0.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp43ya_9y0.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter( x -> startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input vector of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptwt_ve4v.jl:11\nin expression starting at\
    \ /tmp/tmptwt_ve4v.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter(x->startswith(x,\
    \ prefix), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that filters an input vector of strings only for\
    \ ones that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n  \
    \  []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"array\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41yyvc6_.jl:15\nin expression starting at\
    \ /tmp/tmp41yyvc6_.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter( x -> startswith(prefix, x), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp885jhzw0.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp885jhzw0.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp885jhzw0.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp885jhzw0.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter((x) -> startswith(prefix, x), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp43ya_9y0.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp43ya_9y0.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp43ya_9y0.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp43ya_9y0.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter!(x -> startswith(prefix, x), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise: Write a function that filters an input vector of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n\
    \    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\", \"array\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdjhwks_a.jl:10\nin expression starting at\
    \ /tmp/tmpdjhwks_a.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter!(x -> startswith(x, prefix), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an array of strings only for those that\
    \ end with a given suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe_hlan15.jl:10\nin expression starting at\
    \ /tmp/tmpe_hlan15.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    prefix_idx = 1\n    \n    for string\
    \ in strings\n        if string.startswith(prefix)\n            strings[prefix_idx]\
    \ = string\n            prefix_idx += 1\n        end\n    end\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp4aw7p95c.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp4aw7p95c.jl:28\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ startswith\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmp4aw7p95c.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4aw7p95c.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4aw7p95c.jl:26\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input vector of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdj795m30.jl:11\nin expression starting at\
    \ /tmp/tmpdj795m30.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that filters strings by a prefix, but only if the prefix is at the\
    \ start of the string.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbcqtp2fe.jl:19\nin expression starting at\
    \ /tmp/tmpbcqtp2fe.jl:19\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5tlpig6d.jl:19\nin expression starting at\
    \ /tmp/tmp5tlpig6d.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[beginswith(strings, prefix)]\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that filters strings by a regex pattern.\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn3y7wcam.jl:10\nin expression starting at\
    \ /tmp/tmpn3y7wcam.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    filter_by_prefix(\n        filter(\n            x -> startswith(prefix,\
    \ x),\n            strings),\n        prefix)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(vector, prefix)\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmom4j7co.jl:15\nin expression starting at\
    \ /tmp/tmpmom4j7co.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 3: Filtering\
    \ by prefix\nWrite a function that filters an input vector of strings only for\
    \ ones that start with a given prefix.\nFor example, given the following input\
    \ vector:\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2h_rtayq.jl:19\nin expression starting at\
    \ /tmp/tmp2h_rtayq.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(x, prefix), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqjaw0je.jl:11\nin expression starting at\
    \ /tmp/tmpmqjaw0je.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 3: Filter a\
    \ vector of strings for strings that end with a given suffix\nWrite a function\
    \ that filters a vector of strings only for strings that end with a given suffix.\n\
    For example, given the following input:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7bskz735.jl:19\nin expression starting at\
    \ /tmp/tmp7bskz735.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxuj5mwfe.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpxuj5mwfe.jl:21\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxuj5mwfe.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxuj5mwfe.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(s,\
    \ prefix)\n            delete!(s, prefix)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters an array of strings based on whether they end with a given suffix.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkk8bqs5n.jl:19\nin expression starting at\
    \ /tmp/tmpkk8bqs5n.jl:19\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = filter(x->startswith(x, prefix), strings)\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrays\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\"\
    )\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n\
    []\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdj5mqoqf.jl:21\nin expression starting at\
    \ /tmp/tmpdj5mqoqf.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters strings by a prefix and suffix.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzduikiut.jl:21\nin expression starting at\
    \ /tmp/tmpzduikiut.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    strings = filter((x) -> startswith(prefix, x),\
    \ strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjekngjsu.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpjekngjsu.jl:18\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjekngjsu.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjekngjsu.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpap4twe61.jl:21\nin expression starting at\
    \ /tmp/tmpap4twe61.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpw1ebjxbc.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpw1ebjxbc.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpw1ebjxbc.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1ebjxbc.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1ebjxbc.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[2:end]\n    return strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo9vai6jp.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpo9vai6jp.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"] == [\"xxx\", \"xxxAAA\", \"xxx\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo9vai6jp.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo9vai6jp.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[2:end-1]\n    strings = strings[strings.startsWith(prefix)]\n\
    \    return strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that filters\
    \ input strings based on whether they start with a given prefix.\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp31tnq9mo.jl:12\nin expression starting at\
    \ /tmp/tmp31tnq9mo.jl:12\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(x, prefix), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter((x) -> startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input vector of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"c\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"de\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"b\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsu3a_faz.jl:11\nin expression starting at\
    \ /tmp/tmpsu3a_faz.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpfikam9ct.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpfikam9ct.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpfikam9ct.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfikam9ct.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfikam9ct.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> startswith(x,\
    \ prefix), strings)\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings_filtered = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        strings_filtered << string\n        end\n    end\n    \n    return strings_filtered\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input vector of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6fz9_mue.jl:21\nin expression starting at\
    \ /tmp/tmp6fz9_mue.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter( x -> startswith(prefix, x), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp885jhzw0.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp885jhzw0.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp885jhzw0.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp885jhzw0.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"b\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"bcd\", \"cde\"]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"d\")\n[\"abc\", \"\
    bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"e\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"f\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"g\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"h\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"i\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"j\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"k\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"l\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"m\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"n\")\n[\"abc\", \"bcd\", \"cde\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxfezvpph.jl:21\nin expression starting at\
    \ /tmp/tmpxfezvpph.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter((x) -> startswith(x, prefix), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input vector of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qiyqr8_.jl:11\nin expression starting at\
    \ /tmp/tmp1qiyqr8_.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_prefix\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3o17hb9a.jl:11\nin expression starting at\
    \ /tmp/tmp3o17hb9a.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpfikam9ct.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpfikam9ct.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpfikam9ct.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfikam9ct.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfikam9ct.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> startswith(x,\
    \ prefix), strings)\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(s,\
    \ prefix)\n            delete!(s, prefix)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that filters strings by a regular expression. \nThe function should take as\
    \ input a vector of strings and a regular expression and return a vector of strings\
    \ that match the regular expression. \nThe function should return an empty vector\
    \ if the input vector is empty or if the input vector does not contain any strings\
    \ that match the regular expression.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4o4fuh0j.jl:19\nin expression starting at\
    \ /tmp/tmp4o4fuh0j.jl:19\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[findall(s -> startswith(s, prefix), strings)]\n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    strings = filter(x->startswith(x, prefix), strings)\n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 3: Write a\
    \ function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppmyu6oya.jl:19\nin expression starting at\
    \ /tmp/tmppmyu6oya.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter( x -> startswith(prefix, x), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp885jhzw0.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp885jhzw0.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp885jhzw0.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp885jhzw0.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[findall(s -> startswith(s, prefix), strings)]\n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_prefix()\n\
    Write a function that filters an input vector of strings only for ones that end\
    \ with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcde\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdea\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeab\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeaba\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabac\")\n[\"abc\", \"bcd\"]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabacd\")\n\
    [\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcdcdeabacde\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"bcdcdeabacdea\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxjvmfiga.jl:21\nin expression starting at\
    \ /tmp/tmpxjvmfiga.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    prefix_len = len(prefix)\n    \n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  strings.remove(string)\n        end\n    end\n    \n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"a\")\n</cell>\n<text>\nExercise 3: Filtering by substrings\nWrite\
    \ a function that filters an input vector of strings only for ones that contain\
    \ a given substring.\n    >>> filter_by_substring([], \"a\")\n    []\n    >>>\
    \ filter_by_substring([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"\
    abc\"]\n    >>> filter_by_substring([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    bc\")\n    [\"abc\", \"bcd\"]\n    >>> filter_by_substring([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"cd\")\n    [\"cde\"]\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n    [\"array\"]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8pibfnv1.jl:21\nin expression starting at\
    \ /tmp/tmp8pibfnv1.jl:21\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(x,prefix), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nfilter_by_prefix([], \"a\")\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1nwz8pop.jl:19\nin expression starting at\
    \ /tmp/tmp1nwz8pop.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3: Filter an input vector of strings only for ones that end with a given\
    \ suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ixhpe19.jl:19\nin expression starting at\
    \ /tmp/tmp4ixhpe19.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings_filtered = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        strings_filtered << string\n        end\n    end\n    \n    return strings_filtered\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input vector of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6fz9_mue.jl:21\nin expression starting at\
    \ /tmp/tmp6fz9_mue.jl:21\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(x, prefix), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter!(x -> startswith(x, prefix), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L, P) returns a new vector L of all elements of L that start\
    \ with the prefix P.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnkx33s_t.jl:10\nin expression starting at\
    \ /tmp/tmpnkx33s_t.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5he6yb8t.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp5he6yb8t.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5he6yb8t.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5he6yb8t.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[strings .starts_with(prefix)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"strings .\"\
    \ at /tmp/tmps4ex3jol.jl:8\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps4ex3jol.jl:8\n\
    in expression starting at /tmp/tmps4ex3jol.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(x, prefix), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise: Write a function that filters\
    \ an input vector of strings only for ones that end with a given suffix.\n   \
    \ >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\",\
    \ \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvtsp6zo3.jl:11\nin expression starting at\
    \ /tmp/tmpvtsp6zo3.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8jjnakkz.jl:21\nin expression starting at\
    \ /tmp/tmp8jjnakkz.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter((x) -> startswith(prefix, x), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp43ya_9y0.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp43ya_9y0.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp43ya_9y0.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp43ya_9y0.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise: Write a function that filters an input vector of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n\
    \    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmthwkv_t.jl:19\nin expression starting at\
    \ /tmp/tmpmthwkv_t.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[start:end]\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3: Filter an input vector of strings only for ones that end with a given\
    \ suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz12oy8gt.jl:10\nin expression starting at\
    \ /tmp/tmpz12oy8gt.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input vector of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdj795m30.jl:11\nin expression starting at\
    \ /tmp/tmpdj795m30.jl:11\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(x, prefix), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> startswith(x,\
    \ prefix), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input vector of strings only for\
    \ ones that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"\
    , \"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bc\"\
    )\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"de\")\n[\"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"abd\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"bcd\")\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"cde\")\n[\"cde\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"dea\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"de\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"dea\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"de\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"dea\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"de\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"dea\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"de\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"dea\")\n[\"cde\"]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp930gwwgk.jl:15\nin expression starting at\
    \ /tmp/tmp930gwwgk.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ vector of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"x\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"y\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"z\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"abz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abc\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcd\")\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"cde\")\n[\"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"x\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"y\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    z\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abz\"\
    )\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abc\")\n\
    [\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bcd\"\
    )\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqyqsrhse.jl:19\nin expression starting at\
    \ /tmp/tmpqyqsrhse.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = filter(x->startswith(x, prefix), strings)\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters an input vector of strings only for ones that end with a given\
    \ suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcde\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdea\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeab\")\n[\"abc\", \"array\"]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabc\")\n[\"\
    abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcdcdearray\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcdearraya\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"bcdcdearrayab\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdearrayabc\")\n[\"array\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo8v4030t.jl:13\nin expression starting at\
    \ /tmp/tmpo8v4030t.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter!(x -> startswith(prefix, x), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that filters an input vector of strings only for\
    \ ones that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n  \
    \  []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplk_oh14d.jl:10\nin expression starting at\
    \ /tmp/tmplk_oh14d.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpw1ebjxbc.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpw1ebjxbc.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpw1ebjxbc.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1ebjxbc.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1ebjxbc.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that filters\
    \ strings by a regular expression. For example, given the following input:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi00c7ot5.jl:21\nin expression starting at\
    \ /tmp/tmpi00c7ot5.jl:21\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[findall(startswith(strings, prefix))]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmplj4xcr8l.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmplj4xcr8l.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching startswith(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    startswith(!Matched::Union{SubString{String}, String},\
    \ ::Union{SubString{String}, String}) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:48\n\
    \    startswith(!Matched::AbstractString, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:21\n\
    \    startswith(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:150\n\
    \  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \     @ Main /tmp/tmplj4xcr8l.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplj4xcr8l.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplj4xcr8l.jl:15\ntest set:\
    \ Error During Test at /tmp/tmplj4xcr8l.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching startswith(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    startswith(!Matched::Union{SubString{String},\
    \ String}, ::Union{SubString{String}, String}) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:48\n\
    \    startswith(!Matched::AbstractString, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:21\n\
    \    startswith(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:150\n\
    \  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \     @ Main /tmp/tmplj4xcr8l.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplj4xcr8l.jl:17 [inlined]\n\
    \   [4] mac"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpw1ebjxbc.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpw1ebjxbc.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpw1ebjxbc.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1ebjxbc.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1ebjxbc.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that filters an input vector\
    \ of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"array\")\n[\"array\"]\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvv6tnbdo.jl:19\nin expression starting at\
    \ /tmp/tmpvv6tnbdo.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = filter( x -> startswith(prefix, x), strings)\n    \n \
    \   return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4dr5ep5v.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp4dr5ep5v.jl:19\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4dr5ep5v.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4dr5ep5v.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input vector of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph54o74gb.jl:11\nin expression starting at\
    \ /tmp/tmph54o74gb.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 3: Filtering by Prefix\nWrite\
    \ a function that filters an input vector of strings only for ones that start\
    \ with a given prefix.\nThis function should take as input a vector of strings\
    \ and a prefix string.\nThe function should return a vector of strings that start\
    \ with the given prefix.\nFor example, given the following input vector:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcvzx09nj.jl:21\nin expression starting at\
    \ /tmp/tmpcvzx09nj.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 4\nWrite a function that filters\
    \ an input vector of strings only for ones that end with a given suffix.\n>>>\
    \ filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"ab\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp470nu7re.jl:21\nin expression starting at\
    \ /tmp/tmp470nu7re.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input vector of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"e\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrays\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abce\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abced\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abcede\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abcedef\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abcedefg\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abcedefgh\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abcedefghi\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abcedefghij\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abcedefghijk\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abcedefghijkl\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abcedef\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyubp1jsu.jl:11\nin expression starting at\
    \ /tmp/tmpyubp1jsu.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(s,\
    \ prefix)\n            delete!(s, prefix)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw4hkn_li.jl:19\nin expression starting at\
    \ /tmp/tmpw4hkn_li.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(s,\
    \ prefix)\n            delete!(s, prefix)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3: Filter an\
    \ input vector of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpce9te_ef.jl:19\nin expression starting at\
    \ /tmp/tmpce9te_ef.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[findall(startswith(strings, prefix))]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vector, prefix)\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmowjl5x0.jl:11\nin expression starting at\
    \ /tmp/tmpmowjl5x0.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpw1ebjxbc.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpw1ebjxbc.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpw1ebjxbc.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1ebjxbc.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1ebjxbc.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = filter( x ->\
    \ startswith(String(x), prefix), strings)\n    \n    if prefix_length == 0\n \
    \       return strings\n    else\n        return filter( x -> startswith(String(x),\
    \ prefix), strings)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters an input vector of strings only for ones that end with a given\
    \ suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdc\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdce\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdcef\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdcefg\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"b\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9bjssqo_.jl:19\nin expression starting at\
    \ /tmp/tmp9bjssqo_.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = filter( x -> startswith(prefix, x), strings)\n    \n \
    \   return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4dr5ep5v.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp4dr5ep5v.jl:19\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4dr5ep5v.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4dr5ep5v.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter!(x -> startswith(prefix, x), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5y33gc6b.jl:10\nin expression starting at\
    \ /tmp/tmp5y33gc6b.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input vector\
    \ of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"c\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bc\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"ab\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdc\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"abdce\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcef\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefg\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr3zlfze0.jl:11\nin expression starting at\
    \ /tmp/tmpr3zlfze0.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    if prefix_length == 0\n\
    \        return strings\n    end\n    \n    strings = filter_by_prefix(strings,\
    \ prefix[1:prefix_length])\n    \n    if prefix_length == length(prefix)\n   \
    \     return strings\n    end\n    \n    strings = filter_by_prefix(strings, prefix[prefix_length+1:end])\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3gpprn45.jl:25\nin expression starting at\
    \ /tmp/tmp3gpprn45.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(vector, prefix)\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnijnu68s.jl:19\nin expression starting at\
    \ /tmp/tmpnijnu68s.jl:19\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(x, prefix), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpo0gcja9a.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpo0gcja9a.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching delete!(::String, ::String)\n  Closest candidates are:\n    delete!(!Matched::IdDict{K},\
    \ ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \     @ Main /tmp/tmpo0gcja9a.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo0gcja9a.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo0gcja9a.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input vector of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"ab\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abde\")\n[]\n>>> filter_by_suffix([\"abc\",\
    \ \"bcd\", \"cde\", \"array\"], \"abdez\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdeza\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezab\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezabc\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezabcd\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezabcde\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabcdez\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabcdeza\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabcdezab\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabcdezabc\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabcdezabcd\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabcdezabcde\")\n[]\n>>> filter_by_suffix\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprvostzam.jl:11\nin expression starting at\
    \ /tmp/tmprvostzam.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[findall(x -> startswith(x, prefix), strings)]\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vec)\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx6wdpp32.jl:11\nin expression starting at\
    \ /tmp/tmpx6wdpp32.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = filter(x->startswith(x,\
    \ prefix), strings)\n    \n    strings = filter(x->length(x) > prefix_length,\
    \ strings)\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbhek9qot.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpbhek9qot.jl:23\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxxAAA\"] == [\"xxx\", \"xxxAAA\", \"\
    xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbhek9qot.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbhek9qot.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(x, prefix), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter(x -> startswith(x, prefix), L)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzazjq0zm.jl:11\nin expression starting at\
    \ /tmp/tmpzazjq0zm.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter((x) -> startswith(prefix, x), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp43ya_9y0.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp43ya_9y0.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp43ya_9y0.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp43ya_9y0.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpfikam9ct.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpfikam9ct.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpfikam9ct.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfikam9ct.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfikam9ct.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(x, prefix), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that filters strings based\
    \ on whether they start with a given prefix.\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvlx3hjtj.jl:19\nin expression starting at\
    \ /tmp/tmpvlx3hjtj.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5he6yb8t.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp5he6yb8t.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5he6yb8t.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5he6yb8t.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(vector, prefix)\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnijnu68s.jl:19\nin expression starting at\
    \ /tmp/tmpnijnu68s.jl:19\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(x, prefix), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = filter( x ->\
    \ startswith(prefix, x), strings)\n    \n    if prefix_length == 0\n        strings\n\
    \    else\n        prefix = prefix[1:prefix_length]\n        filter_by_prefix(strings,\
    \ prefix)\n    end\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9vkuj912.jl:20\nin expression starting at\
    \ /tmp/tmp9vkuj912.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input vector of strings only for\
    \ ones that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\"\
    , \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"de\"\
    )\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"arrays\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"bcd\")\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcds\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"bcdc\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"bcdcde\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcdes\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcdes\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcdes\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcdes\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcdes\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcdes\")\n[]\n>>> filter\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgdyvt2pz.jl:19\nin expression starting at\
    \ /tmp/tmpgdyvt2pz.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxuj5mwfe.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpxuj5mwfe.jl:21\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxuj5mwfe.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxuj5mwfe.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5he6yb8t.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp5he6yb8t.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5he6yb8t.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5he6yb8t.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(x, prefix), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter!(x -> startswith(prefix, x), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} \n    filter!(x\
    \ -> startswith(prefix, x), L)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnpob34nx.jl:10\nin expression starting at\
    \ /tmp/tmpnpob34nx.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input vector of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqs509r_0.jl:21\nin expression starting at\
    \ /tmp/tmpqs509r_0.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpw1ebjxbc.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpw1ebjxbc.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpw1ebjxbc.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1ebjxbc.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1ebjxbc.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcde\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdea\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeab\")\n[\"abc\", \"array\"]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabc\")\n[\"\
    abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcdcdeabcde\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"bcdcdeabcdea\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabcdeab\")\n[\"abc\", \"array\"]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabcdeabc\"\
    )\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcdcdeabcdeabcde\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"bcdcdeabcdeabcdea\")\n[\"abc\", \"array\"]\n\
    >>> filter\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy6am78y5.jl:19\nin expression starting at\
    \ /tmp/tmpy6am78y5.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter( x -> startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vec)\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwggvvk5p.jl:11\nin expression starting at\
    \ /tmp/tmpwggvvk5p.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    filtered_strings = copy(strings)\n    for string in strings\n  \
    \      if string.starts_with(prefix)\n            filtered_strings = remove(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_prefix\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy72g7c01.jl:18\nin expression starting at\
    \ /tmp/tmpy72g7c01.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter((x) -> startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} is similar to filter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}, except that it does not modify the input vector.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbl40ug4h.jl:11\nin expression starting at\
    \ /tmp/tmpbl40ug4h.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    strings = filter((x) -> startswith(prefix, x),\
    \ strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjekngjsu.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpjekngjsu.jl:18\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjekngjsu.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjekngjsu.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.startswith(prefix)\n     \
    \       push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that filters\
    \ strings by a regular expression. For example, given the following input:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzr9spj59.jl:21\nin expression starting at\
    \ /tmp/tmpzr9spj59.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        strings = filter!(x -> x != string, strings)\n        end\n    end\n\
    \    \n    return strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that filters an input vector of strings only for ones that end with a given\
    \ suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2lpdezsx.jl:21\nin expression starting at\
    \ /tmp/tmp2lpdezsx.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpw1ebjxbc.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpw1ebjxbc.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpw1ebjxbc.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1ebjxbc.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1ebjxbc.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(x, prefix), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(x, prefix), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_len = length(prefix)\n    \n    strings = strings[:]\n  \
    \  \n    for s in strings\n        if startswith(s, prefix)\n            strings\
    \ = filter!(s => startswith(s, prefix), strings)\n        end\n    end\n    \n\
    \    return strings\nend\n</cell>\n<text>\nExercise 4\nWrite a function that filters\
    \ strings by a regular expression. \nFor example, given the following input vector:\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg2gbaw26.jl:21\nin expression starting at\
    \ /tmp/tmpg2gbaw26.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    if prefix_length == 0\n\
    \        return strings\n    end\n    \n    strings = filter_by_prefix(strings,\
    \ prefix[1:prefix_length])\n    \n    if prefix_length == 0\n        return strings\n\
    \    end\n    \n    strings = filter_by_prefix(strings, prefix[prefix_length+1:end])\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abde\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdez\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdeza\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezab\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezabd\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabde\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezabdez\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezabdeza\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezab\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezabdezabd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezabde\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"b\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeyckx4fx.jl:25\nin expression starting at\
    \ /tmp/tmpeyckx4fx.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpfikam9ct.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpfikam9ct.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpfikam9ct.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfikam9ct.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfikam9ct.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp12wlok62.jl:21\nin expression starting at\
    \ /tmp/tmp12wlok62.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise: Write a function that filters an input vector of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n\
    \    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\", \"array\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb1v8xer7.jl:19\nin expression starting at\
    \ /tmp/tmpb1v8xer7.jl:19\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(x, prefix), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"de\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cde\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"b\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq8g05oto.jl:21\nin expression starting at\
    \ /tmp/tmpq8g05oto.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    i = 0\n    while i < length(strings)\n\
    \        if strings[i] == prefix\n            i += 1\n        else\n         \
    \   i += 1\n        end\n    end\n    \n    return strings[i+1:end]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmppf98n3b5.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmppf98n3b5.jl:28\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  BoundsError: attempt\
    \ to access 6-element Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmppf98n3b5.jl:13\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppf98n3b5.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppf98n3b5.jl:26\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 2: filter_by_prefix\nWrite\
    \ a function that filters an input vector of strings only for ones that start\
    \ with a given prefix.\nThis function should take as input a vector of strings\
    \ and a prefix string.\nThe function should return a new vector of strings that\
    \ only contains strings that start with the given prefix.\nFor example, given\
    \ the following input vector:\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc2gf2qpf.jl:21\nin expression starting at\
    \ /tmp/tmpc2gf2qpf.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[strings .starts_with(prefix)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_prefix\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"strings .\"\
    \ at /tmp/tmpk1lcp7p7.jl:8\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk1lcp7p7.jl:8\n\
    in expression starting at /tmp/tmpk1lcp7p7.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input vector of strings only for\
    \ ones that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\"\
    , \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"de\"\
    )\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bc\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw0q__oo7.jl:15\nin expression starting at\
    \ /tmp/tmpw0q__oo7.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter!(x -> startswith(x, prefix), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} - filter a\
    \ vector of strings only for the ones that start with a given prefix.\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} - filter a vector of strings only for the ones\
    \ that start with a given prefix.\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\
    \ - filter a vector of strings only for the ones that start with a given prefix.\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} - filter a\
    \ vector of strings only for the ones that start with a given prefix.\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} - filter a vector of strings only for the ones\
    \ that start with a given prefix.\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\
    \ - filter a vector of strings only for the ones that start with a given prefix.\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} - filter a\
    \ vector of strings only for the ones that start with a given prefix.\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} - filter a vector of strings only for the ones\
    \ that start with a given prefix.\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\
    \ - filter a vector of strings only for the ones that start with a given prefix.\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} - filter a\
    \ vector of strings only for the ones that start with a given prefix.\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} - filter a vector of strings only for the ones\
    \ that start with a given prefix.\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\
    \ - filter a vector of strings only for the ones that start with a given prefix.\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} - filter a\
    \ vector of strings only for the ones that start with a given prefix.\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} - filter a vector of strings only for the ones\
    \ that start with a given prefix.\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\
    \ \nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplamjrt6z.jl:10\nin expression starting at\
    \ /tmp/tmplamjrt6z.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkfj_3xni.jl:21\nin expression starting at\
    \ /tmp/tmpkfj_3xni.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    prefix_len = length(prefix)\n  \
    \  \n    for string in strings\n        if startswith(string, prefix)\n      \
    \      strings = filter!(x -> startswith(x, prefix), strings)\n        end\n \
    \   end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vector::Vector{String},\
    \ prefix::String)::Vector{String}\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpons7lynh.jl:21\nin expression starting at\
    \ /tmp/tmpons7lynh.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6zh1z4k9.jl:21\nin expression starting at\
    \ /tmp/tmp6zh1z4k9.jl:21\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    filter_by_prefix(\n        filter(x -> startswith(prefix, x), strings),\n\
    \        prefix\n    )\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input vector of strings only for\
    \ ones that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n  \
    \  []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpua542xpk.jl:19\nin expression starting at\
    \ /tmp/tmpua542xpk.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters strings by a prefix\
    \ and suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp953kytim.jl:21\nin expression starting at\
    \ /tmp/tmp953kytim.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(s,\
    \ prefix)\n            delete!(s, prefix)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw4hkn_li.jl:19\nin expression starting at\
    \ /tmp/tmpw4hkn_li.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(vector, prefix)\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9utm4_mc.jl:19\nin expression starting at\
    \ /tmp/tmp9utm4_mc.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5he6yb8t.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp5he6yb8t.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5he6yb8t.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5he6yb8t.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[start:end]\nend\n</cell>\n<text>\nExercise: Write a\
    \ function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn338z6g5.jl:10\nin expression starting at\
    \ /tmp/tmpn338z6g5.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(s,\
    \ prefix)\n            delete!(s, prefix)\n        end\n    end\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpcciy5j1v.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpcciy5j1v.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching delete!(::String, ::String)\n  Closest candidates are:\n    delete!(!Matched::IdDict{K},\
    \ ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \     @ Main /tmp/tmpcciy5j1v.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcciy5j1v.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcciy5j1v.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    strings\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that filters an input vector of\
    \ strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprzz7tcdf.jl:16\nin expression starting at\
    \ /tmp/tmprzz7tcdf.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that filters\
    \ strings by a regular expression. For example, given the following input vector:\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp93cy4y01.jl:21\nin expression starting at\
    \ /tmp/tmp93cy4y01.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(s,\
    \ prefix)\n            delete!(s, prefix)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that filters an\
    \ input vector of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abde\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdes\")\n[\"abc\"]\n>>> filter\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpheqyl695.jl:19\nin expression starting at\
    \ /tmp/tmpheqyl695.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5he6yb8t.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp5he6yb8t.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5he6yb8t.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5he6yb8t.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmptukfiic2.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmptukfiic2.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmptukfiic2.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmptukfiic2.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmptukfiic2.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5he6yb8t.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp5he6yb8t.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5he6yb8t.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5he6yb8t.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpw1ebjxbc.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpw1ebjxbc.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpw1ebjxbc.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1ebjxbc.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1ebjxbc.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter!(x -> startswith(prefix, x), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(vector, prefix)\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2_6026ln.jl:10\nin expression starting at\
    \ /tmp/tmp2_6026ln.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = filter(x ->\
    \ startswith(String(x), prefix), strings)\n    \n    if prefix_length == 0\n \
    \       strings\n    else\n        filter(x -> startswith(String(x), prefix),\
    \ strings)\n    end\nend\n</cell>\n<text>\nExercise 3: filter_by_prefix\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps8nn8kr0.jl:19\nin expression starting at\
    \ /tmp/tmps8nn8kr0.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmprqs43pqo.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmprqs43pqo.jl:27\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmprqs43pqo.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprqs43pqo.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprqs43pqo.jl:25\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    strings = filter(x->startswith(x, prefix), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input vector of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7vxgn6il.jl:12\nin expression starting at\
    \ /tmp/tmp7vxgn6il.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} - Filter a\
    \ vector of strings only for ones that start with a given prefix.\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} - Filter a vector of strings only for ones that\
    \ start with a given prefix.\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\
    \ - Filter a vector of strings only for ones that start with a given prefix.\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} - Filter a\
    \ vector of strings only for ones that start with a given prefix.\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} - Filter a vector of strings only for ones that\
    \ start with a given prefix.\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\
    \ - Filter a vector of strings only for ones that start with a given prefix.\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} - Filter a\
    \ vector of strings only for ones that start with a given prefix.\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} - Filter a vector of strings only for ones that\
    \ start with a given prefix.\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\
    \ - Filter a vector of strings only for ones that start with a given prefix.\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} - Filter a\
    \ vector of strings only for ones that start with a given prefix.\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} - Filter a vector of strings only for ones that\
    \ start with a given prefix.\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\
    \ - Filter a vector of strings only for ones that start with a given prefix.\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} - Filter a\
    \ vector of strings only for ones that start with a given prefix.\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} - Filter a vector of strings only for ones that\
    \ start with a given prefix.\nfilter_by_prefix(L::Vector{String}, prefix::String)::\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpisg3ohm_.jl:15\nin expression starting at\
    \ /tmp/tmpisg3ohm_.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 3: Filtering\
    \ by prefix\nWrite a function that filters an input vector of strings only for\
    \ ones that start with a given prefix.\nFor example, given the following input\
    \ vector:\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2h_rtayq.jl:19\nin expression starting at\
    \ /tmp/tmp2h_rtayq.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter((x) -> startswith(x, prefix), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input vector of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl0_m6w14.jl:11\nin expression starting at\
    \ /tmp/tmpl0_m6w14.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(s,\
    \ prefix)\n            delete!(s, prefix)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vector,\
    \ prefix)\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp91nbf85n.jl:19\nin expression starting at\
    \ /tmp/tmp91nbf85n.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 2: filter_by_prefix\n\
    Write a function that filters an input vector of strings only for ones that end\
    \ with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk2xp13i3.jl:19\nin expression starting at\
    \ /tmp/tmpk2xp13i3.jl:19\n"
  stdout: ''
