name: HumanEval_134_check_if_last_char_is_a_letter
language: jl
prompt: "\"\"\"\n    Create a function that returns true if the last character\n \
  \   of a given string is an alphabetical character and is not\n    a part of a word,\
  \ and false otherwise.\n    Note: \"word\" is a group of characters separated by\
  \ space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
  )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
  \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
  \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
  \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
  \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"\
  Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
  \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple\
  \ pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
completions: ["    \n    txt = txt.split(\" \")\n    txt = txt[end]\n    \n    if\
    \ txt == \"a\" or txt == \"e\" or txt == \"i\" or txt == \"o\" or txt == \"u\"\
    :\n        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.trim()\n    if txt.length == 0 \n     \
    \   false\n    elseif txt[txt.length - 1] == \" \" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"\\n\" \n        false\n    elseif txt[txt.length -\
    \ 1] == \"\\t\" \n        false\n    elseif txt[txt.length - 1] == \"\\r\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\v\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\f\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\e\" \n        false\n    elseif txt[txt.length - 1] == \"\\\"\"\
    \ \n        false\n    elseif txt[txt.length - 1] == \"\\'\" \n        false\n\
    \    elseif txt[txt.length - 1] == \"\\\\\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"%\" \n        false\n    elseif txt[txt.length - 1] == \"&\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"'\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"(\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \")\" \n        false\n    elseif txt[txt.length - 1] == \"*\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"+\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"-\" \n        false\n    elseif txt[txt.length - 1] == \"/\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \",\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \".\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"0\" \n        false\n    elseif txt[txt.length - 1] == \"1\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"2\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"3\" \n        false\n    elseif txt[txt.length - 1] == \"4\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"5\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"6\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"7\" \n        false\n    elseif txt[txt.length - 1] == \"8\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"9\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"a\" \n        false\n    elseif txt[txt.length - 1] == \"b\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"c\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"d\" \n        false\n    elseif txt[txt.length - 1]",
  "    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip(\" \")\n    txt", "    \n    if txt == \"\"\n        return false\n\
    \    \n    txt = txt.split(\" \")\n    \n    for word in txt\n        if word[length(word)-1]\
    \ == \" \"\n            return false\n    \n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Create a function that returns true if the\
    \ last character\n    of a given string is a digit and is not\n    a part of a\
    \ word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    \n    txt = txt.split(\" \")\n    \n    if txt[txt.length-1].isalpha()\
    \ == true \n        \n        return false\n    \n    return true\n    \nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is an alphabetical character\
    \ and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is\
    \ a group of characters separated by space.", "    \n    txt = txt.strip()\n \
    \   \n    if txt.ends_with(\"e\")\n        true\n    else\n        false\n   \
    \ end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Create a function\
    \ that returns true if the last character\n    of a given string is a number and\
    \ is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    if txt.length == 0 \n       \
    \ false\n    elseif txt[txt.length-1] == ' ' \n        false\n    else\n     \
    \   true\n    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Create\
    \ a function that returns true if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and false otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    if txt.isalpha()\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\
    \n    Create a function that returns true if the last character\n    of a given\
    \ string is a digit and is not\n    a part of a word, and false otherwise.\n \
    \   Note: \"word\" is a group of characters separated by space.", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt[txt.length - 1].isalpha()\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2: check_if_last_char_is_a_letter", "    txt = txt.strip()\n    if txt == \"\
    \"\n        false\n    else\n        txt[end-1] \u2208 letters \u2227 txt[end-1]\
    \ \u2209 word\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns true if the last character\n    of a given string is a digit and is\
    \ not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group\
    \ of characters separated by space.", "    txt = txt.trim()\n    if txt.length\
    \ == 0 \n        false\n    elseif txt.last == \" \" \n        false\n    elseif\
    \ txt.last == \" \" \n        false\n    elseif txt.last == \" \" \n        false\n\
    \    elseif txt.last == \" \" \n        false\n    elseif txt.last == \" \" \n\
    \        false\n    elseif txt.last == \" \" \n        false\n    elseif txt.last\
    \ == \" \" \n        false\n    elseif txt.last == \" \" \n        false\n   \
    \ elseif txt.last == \" \" \n        false\n    elseif txt.last == \" \" \n  \
    \      false\n    elseif txt.last == \" \" \n        false\n    elseif txt.last\
    \ == \" \" \n        false\n    elseif txt.last == \" \" \n        false\n   \
    \ elseif txt.last == \" \" \n        false\n    elseif txt.last == \" \" \n  \
    \      false\n    elseif txt.last == \" \" \n        false\n    elseif txt.last\
    \ == \" \" \n        false\n    elseif txt.last == \" \" \n        false\n   \
    \ elseif txt.last == \" \" \n        false\n    elseif txt.last == \" \" \n  \
    \      false\n    elseif txt.last == \" \" \n        false\n    elseif txt.last\
    \ == \" \" \n        false\n    elseif txt.last == \" \" \n        false\n   \
    \ elseif txt.last == \" \" \n        false\n    elseif txt.last == \" \" \n  \
    \      false\n    elseif txt.last == \" \" \n        false\n    elseif txt.last\
    \ == \" \" \n        false\n    elseif txt.last == \" \" \n        false\n   \
    \ elseif txt.last == \" \" \n        false\n    elseif txt.last == \" \" \n  \
    \      false\n    elseif txt.last == \" \" \n        false\n    elseif txt.last\
    \ == \" \" \n        false\n    elseif txt.last == \" \" \n        false\n   \
    \ elseif txt.last == \" \" \n        false\n    elseif txt.last == \" \" \n  \
    \      false\n    elseif txt.last == \" \" \n        false\n    elseif txt.last\
    \ == \" \" \n        false\n    elseif txt.last == \" \" \n        false\n   \
    \ elseif txt.last == \" \" \n        false\n    elseif txt.last == \" \" \n  \
    \      false\n    elseif txt.last == \" \" \n        false\n    elseif txt", " \
    \   txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n \
    \   txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    ", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n\
    \    else\n        if txt[txt.length - 1].isalpha()\n            true\n      \
    \  else\n            false\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1]\
    \ == ' ' \n        false\n    else\n        true\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Create a function that returns true if the\
    \ last character\n    of a given string is a digit and is not\n    a part of a\
    \ word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    if txt.length == 0 \n        false\n    elseif txt[txt.length-1]\
    \ == \" \" \n        false\n    elseif txt[txt.length-1] in string.ascii_letters\
    \ \n        false\n    else\n        true\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2: Write a function that returns true if the last character of a given string\
    \ is a digit and is not\n    a part of a word, and false otherwise.\n    Note:\
    \ \"word\" is a group of characters separated by space.", "    \n    if txt.size\
    \ == 0\n        return false\n    \n    txt = txt.split(\" \")\n    \n    if txt[txt.size\
    \ - 1] == \" \"\n        return false\n    \n    txt = txt[txt.size - 1]\n   \
    \ \n    if txt.isalpha()\n        return true\n    \n    return false\n    \n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.trim()\n    if txt.length == 0\n      \
    \  false\n    elseif txt.length == 1\n        txt.head == txt.last\n    else\n\
    \        txt.head == txt.last.head && txt.last.head != \" \" && txt.last.head\
    \ != \"\\n\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns true if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and false otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    if txt.length == 0\
    \ \n        false\n    else\n        txt[txt.length-1] == \" \" || txt[txt.length-1]\
    \ == \"\\n\" || txt[txt.length-1] == \"\\t\" || txt[txt.length-1] == \"\\r\" ||\
    \ txt[txt.length-1] == \"\\v\" || txt[txt.length-1] == \"\\f\" || txt[txt.length-1]\
    \ == \"\\e\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns true if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and false otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt[txt.length-1] == ' ' \n\
    \        false\n    elseif txt[txt.length-1] == '-' \n        false\n    elseif\
    \ txt[txt.length-1] == '.' \n        false\n    elseif txt[txt.length-1] == '!'\
    \ \n        false\n    elseif txt[txt.length-1] == '?' \n        false\n    elseif\
    \ txt[txt.length-1] == '\\'' \n        false\n    elseif txt[txt.length-1] ==\
    \ '\\\"' \n        false\n    elseif txt[txt.length-1] == '(' \n        false\n\
    \    elseif txt[txt.length-1] == ')' \n        false\n    elseif txt[txt.length-1]\
    \ == '[' \n        false\n    elseif txt[txt.length-1] == ']' \n        false\n\
    \    elseif txt[txt.length-1] == '{' \n        false\n    elseif txt[txt.length-1]\
    \ == '}' \n        false\n    elseif txt[txt.length-1] == '*' \n        false\n\
    \    elseif txt[txt.length-1] == '&' \n        false\n    elseif txt[txt.length-1]\
    \ == '%' \n        false\n    elseif txt[txt.length-1] == '$' \n        false\n\
    \    elseif txt[txt.length-1] == '#' \n        false\n    elseif txt[txt.length-1]\
    \ == '@' \n        false\n    elseif txt[txt.length-1] == '^' \n        false\n\
    \    elseif txt[txt.length-1] == '~' \n        false\n    elseif txt[txt.length-1]\
    \ == '_' \n        false\n    elseif txt[txt.length-1] == '+' \n        false\n\
    \    elseif txt[txt.length-1] == '-' \n        false\n    elseif txt[txt.length-1]\
    \ == '.' \n        false\n    elseif txt[txt.length-1] == '/' \n        false\n\
    \    elseif txt[txt.length-1] == ':' \n        false\n    elseif txt[txt.length-1]\
    \ == ';' \n        false\n    elseif txt[txt.length-1] == '<' \n        false\n\
    \    elseif txt[txt.length-1] == '>' \n        false\n    elseif txt[txt.length-1]\
    \ == '?' \n        false\n    elseif txt[txt.length-1] == '\\'' \n        false\n\
    \    elseif txt[txt.length-1] == '\\\"' \n        false\n    elseif txt[txt.length-1]\
    \ == '|' \n        false\n    elseif txt[txt.length-1] == '\\\\' \n        false\n\
    \    elseif txt[txt.length-1] == '", "    txt = txt.trim()\n    if txt.length\
    \ == 0 \n        false\n    else\n        txt[txt.length-1].isalpha()\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n    if txt.length ==\
    \ 0 \n        false\n    else\n        txt[txt.length-1] == \" \" || txt[txt.length-1]\
    \ == \".\" || txt[txt.length-1] == \",\" || txt[txt.length-1] == \"?\" || txt[txt.length-1]\
    \ == \"!\" || txt[txt.length-1] == \"-\" || txt[txt.length-1] == \"_\" || txt[txt.length-1]\
    \ == \"/\" || txt[txt.length-1] == \"\\\\\" || txt[txt.length-1] == \"@\" || txt[txt.length-1]\
    \ == \"#\" || txt[txt.length-1] == \"$\" || txt[txt.length-1] == \"%\" || txt[txt.length-1]\
    \ == \"^\" || txt[txt.length-1] == \"&\" || txt[txt.length-1] == \"*\" || txt[txt.length-1]\
    \ == \"(\" || txt[txt.length-1] == \")\" || txt[txt.length-1] == \"|\" || txt[txt.length-1]\
    \ == \"[\" || txt[txt.length-1] == \"]\" || txt[txt.length-1] == \"{\" || txt[txt.length-1]\
    \ == \"}\" || txt[txt.length-1] == \"~\" || txt[txt.length-1] == \"`\" || txt[txt.length-1]\
    \ == \"'\" || txt[txt.length-1] == \"<\" || txt[txt.length-1] == \">\" || txt[txt.length-1]\
    \ == \"=\" || txt[txt.length-1] == \"\\\"\" || txt[txt.length-1] == \"'\" || txt[txt.length-1]\
    \ == \"%\" || txt[txt.length-1] == \"$\" || txt[txt.length-1] == \"&\" || txt[txt.length-1]\
    \ == \"*\" || txt[txt.length-1] == \"(\"\n    end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=julia |>\n<code>", "    \n    if txt.length == 0\n        return\
    \ false\n    \n    txt = txt.split(\" \")\n    \n    for word in txt\n       \
    \ if word[word.length - 1].isalpha()\n            return false\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>", "    if txt.length == 0\n  \
    \      false\n    else\n        txt[txt.length-1] == ' ' || txt[txt.length-1]\
    \ == '\\t' || txt[txt.length-1] == '\\n'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.strip()\n    if txt.size == 0\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    if txt.size == 0\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    if txt.size == 0\n\
    \        return false\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    if txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[txt.size - 1]\n    if txt.size == 0\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    if txt.size == 0\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    if txt.size == 0\n\
    \        return false\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    if txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[txt.size - 1]\n    if txt.size == 0\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    if txt.size == 0\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    if txt.size == 0\n\
    \        return false\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    if txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[txt.size - 1]\n    if txt.size == 0\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    if txt.size == 0\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    if txt.size == 0\n\
    \        return false\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    if txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[txt.size - 1]\n    if txt.size == 0\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    if txt.size == 0\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    if txt.size == 0\n\
    \        return false\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    if txt.size == 0\n        return false\n    txt", "    \n    if txt.length\
    \ == 0 \n        false\n    else\n        txt[txt.length - 1] \u2209 \" abcdefghijklmnopqrstuvwxyz\"\
    \n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Create a function\
    \ that returns true if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    txt = txt.trim()\n    if txt.length\
    \ == 0 \n        false\n    elseif txt[txt.length - 1].isalpha()\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Create a function that returns true if the last character\n    of a\
    \ given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1].isalpha()\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    if txt.length == 0 \n        false\n    else\n  \
    \      if txt[txt.length - 1] == \" \" \n            false\n        else\n   \
    \         if txt[txt.length - 1].isalpha() \n                false\n         \
    \   else\n                true\n        end\n    end\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| c |>\nThis does not work if the last character is a space. Try `check_if_last_char_is_a_letter(\"\
    apple pi e \")`.\n<|/ c |>\n<| c |>\nThanks for the comment. I edited my answer\
    \ to include a check for a space at the end.\n<|/ c |>\n<| a tags=julia,string\
    \ |>\n<code>", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n\
    \    elseif txt[txt.length-1].isalpha()\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns true if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    if txt.length == 0 \n       \
    \ false\n    else\n        txt[txt.length - 1] == ' ' || txt[txt.length - 1] ==\
    \ '.' || txt[txt.length - 1] == '?' || txt[txt.length - 1] == '!' || txt[txt.length\
    \ - 1] == '-' || txt[txt.length - 1] == '_' || txt[txt.length - 1] == '*' || txt[txt.length\
    \ - 1] == '+' || txt[txt.length - 1] == '(' || txt[txt.length - 1] == ')' || txt[txt.length\
    \ - 1] == '[' || txt[txt.length - 1] == ']' || txt[txt.length - 1] == '{' || txt[txt.length\
    \ - 1] == '}' || txt[txt.length - 1] == ':' || txt[txt.length - 1] == ';' || txt[txt.length\
    \ - 1] == '\"' || txt[txt.length - 1] == '\\'' || txt[txt.length - 1] == '\\\\\
    '\n    end\nend\n</cell>\n<text>\nExercise 7\nWrite a function that returns true\
    \ if the last character of a given string is a digit, and false otherwise.", " \
    \   \n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1] ==\
    \ \" \" \n        false\n    elseif txt[txt.length-1] == \"\\n\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\t\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\r\" \n        false\n    elseif txt[txt.length-1] == \"\\v\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\f\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\e\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\\"\" \n        false\n    elseif txt[txt.length-1] == \"\\'\" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\\\\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"%\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"&\" \n        false\n    elseif txt[txt.length-1] == \"'\" \n        false\n\
    \    elseif txt[txt.length-1] == \"(\" \n        false\n    elseif txt[txt.length-1]\
    \ == \")\" \n        false\n    elseif txt[txt.length-1] == \",\" \n        false\n\
    \    elseif txt[txt.length-1] == \".\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"/\" \n        false\n    elseif txt[txt.length-1] == \"0\" \n        false\n\
    \    elseif txt[txt.length-1] == \"1\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"2\" \n        false\n    elseif txt[txt.length-1] == \"3\" \n        false\n\
    \    elseif txt[txt.length-1] == \"4\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"5\" \n        false\n    elseif txt[txt.length-1] == \"6\" \n        false\n\
    \    elseif txt[txt.length-1] == \"7\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"8\" \n        false\n    elseif txt[txt.length-1] == \"9\" \n        false\n\
    \    elseif txt[txt.length-1] == \"-\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"+\" \n        false\n    elseif txt[txt.length-1] == \"=\" \n        false\n\
    \    elseif txt[txt.length-1] == \"_\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"*\" \n        false\n    elseif txt[txt.length-1] == \"?\" \n        false\n\
    \    elseif txt[txt.length-1] == \"!\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"@\" \n        false\n", "    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n\
    \    if txt.length == 0\n        false\n    elseif txt.length == 1\n        txt.head\
    \ == txt.last\n    else\n        txt.head == txt.last.head && txt.last.tail !=\
    \ txt.last\n    end\nend\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=1 |>\n\
    The answer by is great, but I wanted to add that you can also use regular expressions\
    \ to do this.\n<code>\njulia> using Regexp", "    \n    if txt.length == 0 \n\
    \        false\n    else\n        txt[txt.length-1] == \" \" || txt[txt.length-1]\
    \ == \".\" || txt[txt.length-1] == \",\" || txt[txt.length-1] == \";\" || txt[txt.length-1]\
    \ == \"?\" || txt[txt.length-1] == \"!\" || txt[txt.length-1] == \"-\" || txt[txt.length-1]\
    \ == \"_\" || txt[txt.length-1] == \"'\" || txt[txt.length-1] == \"\\\"\" || txt[txt.length-1]\
    \ == \"$\" || txt[txt.length-1] == \"#\" || txt[txt.length-1] == \"@\" || txt[txt.length-1]\
    \ == \"$\" || txt[txt.length-1] == \"%\" || txt[txt.length-1] == \"^\" || txt[txt.length-1]\
    \ == \"&\" || txt[txt.length-1] == \"*\" || txt[txt.length-1] == \"(\" || txt[txt.length-1]\
    \ == \")\" || txt[txt.length-1] == \"[\" || txt[txt.length-1] == \"]\" || txt[txt.length-1]\
    \ == \"{\" || txt[txt.length-1] == \"}\" || txt[txt.length-1] == \"|\" || txt[txt.length-1]\
    \ == \"\\\\\" || txt[txt.length-1] == \"~\" || txt[txt.length-1] == \"`\" || txt[txt.length-1]\
    \ == \"~\" || txt[txt.length-1] == \"<\" || txt[txt.length-1] == \">\" || txt[txt.length-1]\
    \ == \"?\" || txt[txt.length-1] == \"!\" || txt[txt.length-1] == \"-\" || txt[txt.length-1]\
    \ == \"_\" || txt[txt.length-1] == \"'\" || txt[txt.length-1] == \"\\\"\" || txt[txt.length-1]\
    \ == \"$\" || txt[txt.length-1] == \"#\" || txt[txt.length-1] == \"@\" || txt[txt.length-1]\
    \ == \"$\" || txt[txt.length-1] == \"%\" || txt[txt.length-1] == \"^\" || txt[txt.length-1]\
    \ == \"&\" || txt[txt.length-1] == \"*\" || txt[txt.length-1] == \"(\" || txt[txt.length-1]\
    \ == \")\" || txt[txt.length-1] == \"[\" || txt[txt.length-1] == \"]\" || txt[txt.length-1]\
    \ == \"{\" || txt[txt.length-1] == \"}\" || txt[txt.length-1] == \"|\" || txt[txt.length-1]\
    \ == \"\\\\\" || txt[txt.length-1] == \"~\" || txt[txt.length-1] == \"`\" || txt[txt.length-1]\
    \ == \"~\" || txt[txt.length-1] == \"<\" || txt[txt.length-1] == \">\" || txt[txt.length-1]\
    \ == \"?\" || txt[txt.length-1] == \"!\" || txt[txt.length-1] == \"-\" || txt[txt.length-1]\
    \ == \"_\" || txt[", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n\
    \    elseif txt.last.isalpha()\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.trim()\n    if txt.length == 0 \n     \
    \   false\n    elseif txt[txt.length - 1].isalpha()\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ Create a function that returns true if the last character\n    of a given string\
    \ is a digit and is not\n    a part of a word, and false otherwise.\n    Note:\
    \ \"word\" is a group of characters separated by space.", "    \n    if txt.length\
    \ == 0 \n        false\n    elseif txt[txt.length-1] == \" \" \n        false\n\
    \    elseif txt[txt.length-1] in [\"a\", \"e\", \"i\", \"o\", \"u\"] \n      \
    \  true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    ", "    if txt.length == 0 \n        false\n    elseif txt[txt.length-1]\
    \ == \" \" \n        false\n    elseif txt[txt.length-1] == \"-\" \n        false\n\
    \    elseif txt[txt.length-1] == \"_\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"/\" \n        false\n    elseif txt[txt.length-1] == \"\\\\\" \n      \
    \  false\n    elseif txt[txt.length-1] == \"'\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"!\" \n        false\n    elseif txt[txt.length-1] == \"?\" \n        false\n\
    \    elseif txt[txt.length-1] == \"#\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"$\" \n        false\n    elseif txt[txt.length-1] == \"%\" \n        false\n\
    \    elseif txt[txt.length-1] == \"&\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"*\" \n        false\n    elseif txt[txt.length-1] == \"(\"\n        false\n\
    \    elseif txt[txt.length-1] == \")\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"-\" \n        false\n    elseif txt[txt.length-1] == \":\" \n        false\n\
    \    elseif txt[txt.length-1] == \"+\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"=\" \n        false\n    elseif txt[txt.length-1] == \"<\" \n        false\n\
    \    elseif txt[txt.length-1] == \">\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"?\" \n        false\n    elseif txt[txt.length-1] == \"/\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\\\\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"|\" \n        false\n    elseif txt[txt.length-1] == \"{\" \n        false\n\
    \    elseif txt[txt.length-1] == \"}\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"[\" \n        false\n    elseif txt[txt.length-1] == \"]\" \n        false\n\
    \    elseif txt[txt.length-1] == \"^\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"~\" \n        false\n    elseif txt[txt.length-1] == \"`\" \n        false\n\
    \    elseif txt[txt.length-1] == \"{\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"|\" \n        false\n    elseif txt[txt.length-1] == \"~\" \n        false\n\
    \    elseif txt[txt.length-1] == \"[\" \n        false\n    elseif txt", "   \
    \ txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \".\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \",\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"?\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"!\" \n        false\n    elseif txt[txt.length - 1] == \"'\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"_\" \n        false\n    elseif txt[txt.length - 1] == \":\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \";\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \",\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \".\" \n        false\n    elseif txt[txt.length - 1] == \",\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"?\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"!\" \n        false\n    elseif txt[txt.length - 1] == \"'\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"_\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \":\" \n        false\n    elseif txt[txt.length - 1] == \";\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \",\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \".\" \n        false\n    elseif txt[txt.length - 1] == \",\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"?\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"!\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"'\" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"_\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \":\" \n        false\n    elseif txt[txt.length - 1] == \";\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \",\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \".\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \",\" \n        false\n    elseif txt[txt.length - 1] == \"?\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"!\" \n        false\n    elseif txt[txt",
  "    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length - 1] ==\
    \ \" \" \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n        false\n\
    \    elseif txt[txt.length - 1] == \"\\t\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\r\" \n        false\n    elseif txt[txt.length - 1] == \"\\v\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\f\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\e\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\\"\" \n        false\n    elseif txt[txt.length - 1] == \"\\'\"\
    \ \n        false\n    elseif txt[txt.length - 1] == \"\\\\\" \n        false\n\
    \    elseif txt[txt.length - 1] == \"%\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"&\" \n        false\n    elseif txt[txt.length - 1] == \"*\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"+\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"-\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"/\" \n        false\n    elseif txt[txt.length - 1] == \"0\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"1\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"2\" \n        false\n    elseif txt[txt.length - 1] == \"3\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"4\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"5\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"6\" \n        false\n    elseif txt[txt.length - 1] == \"7\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"8\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"9\" \n        false\n    elseif txt[txt.length - 1] == \":\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \";\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"<\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"=\"\n        false\n    elseif txt[txt.length - 1] == \">\" \n        false\n\
    \    elseif txt[txt.length - 1] == \"?\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"@\" \n        false\n    elseif txt[txt.length - 1] == \"[\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"]\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"^\" \n        false\n", "    if txt.length == 0 \n\
    \        false\n    else\n        txt[txt.length - 1] \u2209 \" \" \u2227 txt[txt.length\
    \ - 1] \u2209 \"\\n\" \u2227 txt[txt.length - 1] \u2209 \"\\t\" \u2227 txt[txt.length\
    \ - 1] \u2209 \"\\r\" \u2227 txt[txt.length - 1] \u2209 \"\\v\" \u2227 txt[txt.length\
    \ - 1] \u2209 \"\\f\" \u2227 txt[txt.length - 1] \u2209 \"\\e\"\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    if txt.length == 0\n        false\n    elseif txt[txt.length\
    \ - 1] in string.ascii_letters\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<text>\nExercise 7: Write a function that returns true if the last\
    \ character\n    of a given string is a digit and is not\n    a part of a word,\
    \ and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    txt = txt.strip()\n    if txt.size == 0\n        false\n  \
    \  elseif txt.size == 1\n        txt.head == txt.last\n    else\n        txt.head\
    \ == txt.last.head && txt.last.head != \" \"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ if txt.length == 0 \n        false\n    elseif txt[txt.length - 1] == \" \"\
    \ \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n        false\n\
    \    elseif txt[txt.length - 1] == \"\\t\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\r\" \n        false\n    elseif txt[txt.length - 1] == \"\\v\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\f\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\e\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\\"\" \n        false\n    elseif txt[txt.length - 1] == \"\\'\"\
    \ \n        false\n    elseif txt[txt.length - 1] == \"\\\\\" \n        false\n\
    \    elseif txt[txt.length - 1] == \"%\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"&\" \n        false\n    elseif txt[txt.length - 1] == \"'\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"(\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \")\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \",\" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \".\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \":\" \n        false\n    elseif txt[txt.length - 1] == \"/\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"[\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"]\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"?\" \n        false\n    elseif txt[txt.length - 1] == \"{\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"}\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"|\" \n        false\n    elseif txt[txt.length - 1] == \"~\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"*\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"^\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"_\" \n        false\n    elseif txt[txt.length - 1] == \"`\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"'\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"<\" \n        false\n    elseif txt[txt.length - 1] == \">\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"=\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"+\" \n        ", "    txt = txt.strip()\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt =\
    \ txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\"\
    \ \")\n    txt = txt.lower()\n    if txt == \"a\" or txt == \"e\" or txt == \"\
    i\" or txt == \"o\" or txt == \"u\":\n        return true\n    return false\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a vowel, and false otherwise.\n\
    \    Note: \"vowel\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt.lastchar.isalpha()\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1] == ' ' \n        false\n    elseif txt[txt.length - 1] == '-' \n      \
    \  false\n    elseif txt[txt.length - 1] == '.' \n        false\n    elseif txt[txt.length\
    \ - 1] == ',' \n        false\n    elseif txt[txt.length - 1] == '?' \n      \
    \  false\n    elseif txt[txt.length - 1] == '!' \n        false\n    elseif txt[txt.length\
    \ - 1] == '-' \n        false\n    elseif txt[txt.length - 1] == '.' \n      \
    \  false\n    elseif txt[txt.length - 1] == ',' \n        false\n    elseif txt[txt.length\
    \ - 1] == '?' \n        false\n    elseif txt[txt.length - 1] == '!' \n      \
    \  false\n    elseif txt[txt.length - 1] == '-' \n        false\n    elseif txt[txt.length\
    \ - 1] == '.' \n        false\n    elseif txt[txt.length - 1] == ',' \n      \
    \  false\n    elseif txt[txt.length - 1] == '?' \n        false\n    elseif txt[txt.length\
    \ - 1] == '!' \n        false\n    elseif txt[txt.length - 1] == '-' \n      \
    \  false\n    elseif txt[txt.length - 1] == '.' \n        false\n    elseif txt[txt.length\
    \ - 1] == ',' \n        false\n    elseif txt[txt.length - 1] == '?' \n      \
    \  false\n    elseif txt[txt.length - 1] == '!' \n        false\n    elseif txt[txt.length\
    \ - 1] == '-' \n        false\n    elseif txt[txt.length - 1] == '.' \n      \
    \  false\n    elseif txt[txt.length - 1] == ',' \n        false\n    elseif txt[txt.length\
    \ - 1] == '?' \n        false\n    elseif txt[txt.length - 1] == '!' \n      \
    \  false\n    elseif txt[txt.length - 1] == '-' \n        false\n    elseif txt[txt.length\
    \ - 1] == '.' \n        false\n    elseif txt[txt.length - 1] == ',' \n      \
    \  false\n    elseif txt[txt.length - 1] == '?' \n        false\n    elseif txt[txt.length\
    \ - 1] == '!' \n        false\n    elseif txt[txt.length - 1] == '-' \n      \
    \  false\n    elseif txt[txt.length - 1] == '.' \n        false\n    elseif txt[txt.length\
    \ - 1] == ',' \n        false\n    elseif txt[txt.length - 1] == '?' \n      \
    \  false\n    elseif txt[txt.length - 1] == '!' \n", "    \n    if txt.length\
    \ == 0 \n        false\n    else\n        txt[txt.length - 1] == ' ' || txt[txt.length\
    \ - 1] == '\\t' || txt[txt.length - 1] == '\\n' || txt[txt.length - 1] == '\\\
    r' || txt[txt.length - 1] == '\\v' || txt[txt.length - 1] == '\\f' || txt[txt.length\
    \ - 1] == '\\a' || txt[txt.length - 1] == '\\e'\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"\n    Create a function that returns true if the\
    \ last character\n    of a given string is a digit and is not\n    a part of a\
    \ word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    txt = txt.strip()\n    if txt.size == 0\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt.last\n    txt = txt.chars\n    txt\
    \ = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n \
    \   txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt", "    txt\
    \ = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\r\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\t\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \"!\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"#\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"$\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"%\" \n        false\n    elseif txt[txt.length - 1] == \"&\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"'\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"(\"\n        false\n    elseif txt[txt.length - 1] == \")\" \n   \
    \     false\n    elseif txt[txt.length - 1] == \"*\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"+\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \",\" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"/\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \":\" \n        false\n    elseif txt[txt.length - 1] == \";\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"<\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"=\"\n        false\n    elseif txt[txt.length - 1]\
    \ == \">\" \n        false\n    elseif txt[txt.length - 1] == \"?\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"@\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"[\" \n        false\n    elseif txt[txt.length - 1] == \"]\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"^\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"_\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"`\" \n        false\n    elseif txt[txt.length - 1] == \"{\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"|\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"~\" \n        false\n    elseif txt[txt.length - 1] == \"\\\"\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"{\" \n        false\n    elseif\
    \ txt[txt.length - 1]", "    txt = txt.strip()\n    if txt.size == 0\n       \
    \ false\n    elseif txt[txt.size-1] == \" \"\n        false\n    else\n      \
    \  true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns true if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and false otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    txt = txt.strip()\n\
    \    if txt.size == 0\n        false\n    elseif txt.size == 1\n        txt.head\
    \ == txt.last\n    else\n        txt.head == txt.last.head && txt.last.head ==\
    \ txt.last.last\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Create a function that returns true if the last character\n    of a given string\
    \ is a digit and is not\n    a part of a word, and false otherwise.\n    Note:\
    \ \"word\" is a group of characters separated by space.", "    if txt == \"\"\n\
    \        false\n    else\n        txt[length(txt)-1] == \" \" || txt[length(txt)-1]\
    \ == \".\" || txt[length(txt)-1] == \",\"\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3: Write a function that returns true if the last character\n    of a given\
    \ string is a number and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip()\n    ", "    txt = txt.trim()\n    txt = txt.split(\" \")\n  \
    \  txt = txt[txt.size - 1]\n    return txt.isalpha()\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.strip()\n    if txt == \"\"\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    if txt == \"a\"\n        return false\n    if txt\
    \ == \"e\"\n        return false\n    if txt == \"i\"\n        return false\n\
    \    if txt == \"o\"\n        return false\n    if txt == \"u\"\n        return\
    \ false\n    return true\nend\n</cell>\n<text>\nExercise 2: Write a function that\
    \ returns true if the last character\n    of a given string is a digit, and false\
    \ otherwise.\n    Note: \"digit\" is a group of characters separated by space.",
  "    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length - 1] ==\
    \ \" \" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n\
    \    elseif txt[txt.length - 1] == \"_\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"/\" \n        false\n    elseif txt[txt.length - 1] == \".\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \",\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"?\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"!\" \n        false\n    elseif txt[txt.length - 1] == \"'\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"\\\"\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"$\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"%\" \n        false\n    elseif txt[txt.length - 1] == \"&\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"*\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"(\"\n        false\n    elseif txt[txt.length - 1] == \")\" \n   \
    \     false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"_\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"/\" \n        false\n    elseif txt[txt.length - 1] == \"[\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"]\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"{\" \n        false\n    elseif txt[txt.length - 1] == \"}\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"|\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"~\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"<\" \n        false\n    elseif txt[txt.length - 1] == \">\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"?\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"!\" \n        false\n    elseif txt[txt.length - 1] == \"'\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"\\\"\" \n        false\n   \
    \ elseif txt[txt.length - 1] == \"$\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"%\" \n        false\n    elseif txt[txt.length - 1] == \"&\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"*\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"(\" \n        false", "    \n    txt = txt.strip()\n\
    \    \n    if txt == \"\"\n        return false\n    \n    txt = txt.split(\"\
    \ \")\n    \n    txt = txt.last()\n    \n    if txt == \"\"\n        return false\n\
    \    \n    txt = txt.chars()\n    \n    txt = txt.last()\n    \n    if txt ==\
    \ \"\"\n        return false\n    \n    txt = txt.chars()\n    \n    txt = txt.last()\n\
    \    \n    if txt == \"\"\n        return false\n    \n    txt = txt.chars()\n\
    \    \n    txt = txt.last()\n    \n    if txt == \"\"\n        return false\n\
    \    \n    txt = txt.chars()\n    \n    txt = txt.last()\n    \n    if txt ==\
    \ \"\"\n        return false\n    \n    txt = txt.chars()\n    \n    txt = txt.last()\n\
    \    \n    if txt == \"\"\n        return false\n    \n    txt = txt.chars()\n\
    \    \n    txt = txt.last()\n    \n    if txt == \"\"\n        return false\n\
    \    \n    txt = txt.chars()\n    \n    txt = txt.last()\n    \n    if txt ==\
    \ \"\"\n        return false\n    \n    txt = txt.chars()\n    \n    txt = txt.last()\n\
    \    \n    if txt == \"\"\n        return false\n    \n    txt = txt.chars()\n\
    \    \n    txt = txt.last()\n    \n    if txt == \"\"\n        return false\n\
    \    \n    txt = txt.chars()\n    \n    txt = txt.last()\n    \n    if txt ==\
    \ \"\"\n        return false\n    \n    txt = txt.chars()\n    \n    txt = txt.last()\n\
    \    \n    if txt == \"\"\n        return false\n    \n    txt = txt.chars()\n\
    \    \n    txt = txt.last()\n    \n    if txt == \"\"\n        return false\n\
    \    \n    txt = txt.chars()\n    \n    txt = txt.last()\n    \n    if txt ==\
    \ \"\"\n        return false\n    \n    txt = txt.chars()\n    \n    txt = txt.last()\n\
    \    \n    if txt == \"\"\n        return false\n    \n    txt = txt.chars()\n\
    \    \n    txt = txt.last()\n    \n    if txt == \"\"\n        return false\n\
    \    \n    txt = txt.chars()\n    \n    txt", "    txt = txt.trim()\n    if txt.length\
    \ == 0 \n        false\n    else\n        if txt[txt.length-1].isalpha()\n   \
    \         true\n        else\n            false\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.strip()\n    if txt == \"\"\n        false\n\
    \    else\n        txt[length(txt)-1] == ' ' || txt[length(txt)-1] == '.' || txt[length(txt)-1]\
    \ == '?' || txt[length(txt)-1] == '!'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit, and false otherwise.\n    Note: \"word\" is a group\
    \ of characters separated by space.", "    \n    txt = txt.split(\" \")\n    \n\
    \    for word in txt\n        \n        if word[word.length - 1].isalpha()\n \
    \           \n            return false\n        end\n    end\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns true if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    txt = txt.strip()\n    if txt.ends_with(\"\
    e\")\n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    if txt.length\
    \ == 0 \n        false\n    else\n        txt[txt.length-1] == ' ' || txt[txt.length-1]\
    \ == '\\t' || txt[txt.length-1] == '\\n'\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    if txt\
    \ == \"\"\n        false\n    else\n        txt[end-1] == \" \" || txt[end-1]\
    \ == \"\\n\" || txt[end-1] == \"\\t\" || txt[end-1] == \"\\r\" || txt[end-1] ==\
    \ \"\\f\" || txt[end-1] == \"\\v\" || txt[end-1] == \"\\e\" || txt[end-1] == \"\
    \\U\" || txt[end-1] == \"\\L\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\\
    P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\"\
    \ || txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" ||\
    \ txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1]\
    \ == \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] ==\
    \ \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\
    \\P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\\
    p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\"\
    \ || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\" ||\
    \ txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1]\
    \ == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1] ==\
    \ \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\
    \\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\\
    P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\"\
    \ || txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" ||\
    \ txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1]\
    \ == \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] ==\
    \ \"\\p\" || txt[end-1] == \"\\P\" || txt[", "    if txt.length == 0 \n      \
    \  false\n    else\n        txt[txt.length-1] == \" \" || txt[txt.length-1] ==\
    \ \".\" || txt[txt.length-1] == \",\" || txt[txt.length-1] == \";\" || txt[txt.length-1]\
    \ == \":\" || txt[txt.length-1] == \"-\" || txt[txt.length-1] == \"_\" || txt[txt.length-1]\
    \ == \"/\" || txt[txt.length-1] == \"\\\\\" || txt[txt.length-1] == \"?\" || txt[txt.length-1]\
    \ == \"!\" || txt[txt.length-1] == \"@\" || txt[txt.length-1] == \"#\" || txt[txt.length-1]\
    \ == \"$\" || txt[txt.length-1] == \"%\" || txt[txt.length-1] == \"^\" || txt[txt.length-1]\
    \ == \"&\" || txt[txt.length-1] == \"*\" || txt[txt.length-1] == \"(\" || txt[txt.length-1]\
    \ == \")\" || txt[txt.length-1] == \"=\" || txt[txt.length-1] == \"+\" || txt[txt.length-1]\
    \ == \"-\" || txt[txt.length-1] == \"_\" || txt[txt.length-1] == \"|\" || txt[txt.length-1]\
    \ == \"[\" || txt[txt.length-1] == \"]\" || txt[txt.length-1] == \"{\" || txt[txt.length-1]\
    \ == \"}\" || txt[txt.length-1] == \"~\" || txt[txt.length-1] == \"`\" || txt[txt.length-1]\
    \ == \"'\" || txt[txt.length-1] == \"<\" || txt[txt.length-1] == \">\" || txt[txt.length-1]\
    \ == \"?\" || txt[txt.length-1] == \"!\" || txt[txt.length-1] == \"@\" || txt[txt.length-1]\
    \ == \"#\" || txt[txt.length-1] == \"$\" || txt[txt.length-1] == \"%\" || txt[txt.length-1]\
    \ == \"^\" || txt[txt.length-1] == \"&\" || txt[txt.length-1] == \"*\" || txt[txt.length-1]\
    \ == \"(\" || txt[txt.length-1] == \")\" || txt[txt.length-1] == \"=\" || txt[txt.length-1]\
    \ == \"+\" || txt[txt.length-1] == \"-\" || txt[txt.length-1] == \"_\" || txt[txt.length-1]\
    \ == \"|\" || txt[txt.length-1] == \"[\" || txt[txt.length-1] == \"]\" || txt[txt.length-1]\
    \ == \"{\" || txt[txt.length-1] == \"}\" || txt[txt.length-1] == \"~\" || txt[txt.length-1]\
    \ == \"`\" || txt[txt.length-1] == \"'\" || txt[txt.length-1] == \"<\" || txt[txt.length-1]\
    \ == \">\" || txt[txt.length-1] == \"?\" || txt[txt.length-1] == \"!\" || txt[txt.length-1]\
    \ == \"@\" || txt[txt.length", "    txt = txt.trim()\n    if txt.length == 0 \n\
    \        false\n    elseif txt[txt.length - 1] == \" \" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"\\n\" \n        false\n    elseif txt[txt.length -\
    \ 1] == \"\\r\" \n        false\n    elseif txt[txt.length - 1] == \"\\t\" \n\
    \        false\n    elseif txt[txt.length - 1] == \" \" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"-\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"_\" \n        false\n    elseif txt[txt.length - 1] == \"!\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"#\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"$\" \n        false\n    elseif txt[txt.length - 1] == \"%\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"&\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"'\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"(\"\n        false\n    elseif txt[txt.length - 1] == \")\" \n        false\n\
    \    elseif txt[txt.length - 1] == \"*\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"+\" \n        false\n    elseif txt[txt.length - 1] == \",\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"/\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"0\" \n        false\n    elseif txt[txt.length - 1] == \"1\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"2\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"3\" \n        false\n    elseif txt[txt.length - 1] == \"4\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"5\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"6\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"7\" \n        false\n    elseif txt[txt.length - 1] == \"8\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"9\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \":\" \n        false\n    elseif txt[txt.length - 1] == \";\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"<\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"=\"\n        false\n    elseif txt[txt.length - 1]\
    \ == \">\" \n        false\n    elseif txt[txt.length - 1] == \"?\" \n", "   \
    \ txt = txt.strip()\n    if txt == \"\"\n        false\n    else\n        txt[length(txt)-1]\
    \ == ' ' || txt[length(txt)-1] == '.' || txt[length(txt)-1] == '!' || txt[length(txt)-1]\
    \ == '?' || txt[length(txt)-1] == '-' || txt[length(txt)-1] == ','\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    if txt == \"\"\n        false\n    else\n       \
    \ txt[end-1] == \" \" || txt[end-1] == \"\\n\" || txt[end-1] == \"\\t\" || txt[end-1]\
    \ == \"\\r\" || txt[end-1] == \"\\v\" || txt[end-1] == \"\\f\" || txt[end-1] ==\
    \ \"\\a\" || txt[end-1] == \"\\e\" || txt[end-1] == \"\\U\" || txt[end-1] == \"\
    \\L\" || txt[end-1] == \"\\N\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\\
    P\" || txt[end-1] == \"\\c\" || txt[end-1] == \"\\C\" || txt[end-1] == \"\\e\"\
    \ || txt[end-1] == \"\\E\" || txt[end-1] == \"\\U\" || txt[end-1] == \"\\L\" ||\
    \ txt[end-1] == \"\\N\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1]\
    \ == \"\\c\" || txt[end-1] == \"\\C\" || txt[end-1] == \"\\e\" || txt[end-1] ==\
    \ \"\\E\" || txt[end-1] == \"\\U\" || txt[end-1] == \"\\L\" || txt[end-1] == \"\
    \\N\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\\
    c\" || txt[end-1] == \"\\C\" || txt[end-1] == \"\\e\" || txt[end-1] == \"\\E\"\
    \ || txt[end-1] == \"\\U\" || txt[end-1] == \"\\L\" || txt[end-1] == \"\\N\" ||\
    \ txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\c\" || txt[end-1]\
    \ == \"\\C\" || txt[end-1] == \"\\e\" || txt[end-1] == \"\\E\" || txt[end-1] ==\
    \ \"\\U\" || txt[end-1] == \"\\L\" || txt[end-1] == \"\\N\" || txt[end-1] == \"\
    \\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\c\" || txt[end-1] == \"\\\
    C\" || txt[end-1] == \"\\e\" || txt[end-1] == \"\\E\" || txt[end-1] == \"\\U\"\
    \ || txt[end-1] == \"\\L\" || txt[end-1] == \"\\N\" || txt[end-1] == \"\\p\" ||\
    \ txt[end-1] == \"\\P\" || txt[end-1] == \"\\c\" || txt[end-1] == \"\\C\" || txt[end-1]\
    \ == \"\\e\" || txt[end-1] == \"\\E\" || txt[end-1] == \"\\U\" || txt[", "   \
    \ if txt.length == 0 \n        false\n    elseif txt[txt.length-1] == \" \" \n\
    \        false\n    elseif txt[txt.length-1] in [\"a\", \"e\", \"i\", \"o\", \"\
    u\"] \n        true\n    else\n        false\n    end\nend\n</cell>\n<text>\n\
    Exercise 7: Write a function that returns true if the last character\n    of a\
    \ given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ if txt.length == 0 \n        false\n    elseif txt[txt.length-1] == \" \" \n\
    \        false\n    elseif txt[txt.length-1] == \"\\n\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\t\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\r\" \n        false\n    elseif txt[txt.length-1] == \"\\v\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\f\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\\"\" \n        false\n    elseif txt[txt.length-1] == \"\\'\" \n    \
    \    false\n    elseif txt[txt.length-1] == \"\\\\\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"%\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"&\" \n        false\n    elseif txt[txt.length-1] == \"*\" \n        false\n\
    \    elseif txt[txt.length-1] == \"+\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"-\" \n        false\n    elseif txt[txt.length-1] == \"/\" \n        false\n\
    \    elseif txt[txt.length-1] == \"0\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"1\" \n        false\n    elseif txt[txt.length-1] == \"2\" \n        false\n\
    \    elseif txt[txt.length-1] == \"3\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"4\" \n        false\n    elseif txt[txt.length-1] == \"5\" \n        false\n\
    \    elseif txt[txt.length-1] == \"6\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"7\" \n        false\n    elseif txt[txt.length-1] == \"8\" \n        false\n\
    \    elseif txt[txt.length-1] == \"9\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"a\" \n        false\n    elseif txt[txt.length-1] == \"b\" \n        false\n\
    \    elseif txt[txt.length-1] == \"c\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"d\" \n        false\n    elseif txt[txt.length-1] == \"e\" \n        false\n\
    \    elseif txt[txt.length-1] == \"f\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"g\" \n        false\n    elseif txt[txt.length-1] == \"h\" \n        false\n\
    \    elseif txt[txt.length-1] == \"i\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"j\" \n        false\n    elseif txt[txt.length-1] == \"k\" \n        false\n",
  "    if txt == \"\"\n        false\n    else\n        txt[length(txt)-1] == ' '\
    \ || txt[length(txt)-1] == '.' || txt[length(txt)-1] == '?' || txt[length(txt)-1]\
    \ == '!' || txt[length(txt)-1] == '-' || txt[length(txt)-1] == '_'\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ if txt.length == 0 \n        false\n    elseif txt[txt.length - 1] == \" \"\
    \ \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n        false\n\
    \    elseif txt[txt.length - 1] == \"\\t\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\r\" \n        false\n    elseif txt[txt.length - 1] == \"\\v\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\f\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\e\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\\"\" \n        false\n    elseif txt[txt.length - 1] == \"\\'\"\
    \ \n        false\n    elseif txt[txt.length - 1] == \"\\\\\" \n        false\n\
    \    elseif txt[txt.length - 1] == \"%\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"&\" \n        false\n    elseif txt[txt.length - 1] == \"'\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"(\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \")\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \",\" \n        false\n    elseif txt[txt.length - 1] == \".\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"/\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"0\" \n        false\n    elseif txt[txt.length - 1] == \"1\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"2\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"3\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"4\" \n        false\n    elseif txt[txt.length - 1] == \"5\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"6\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"7\" \n        false\n    elseif txt[txt.length - 1] == \"8\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"9\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"a\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"b\" \n        false\n    elseif txt[txt.length - 1] == \"c\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"d\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"e\" \n        false\n    elseif txt[txt.length - 1] == \"f\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"g\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"h\" \n        ", "    txt = txt.strip()\n    if txt.ends_with(\"\
    e\")\n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit, and false otherwise.\n    Note: \"word\" is a group\
    \ of characters separated by space.", "    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    \n    if txt.length\
    \ == 0\n        return false\n    \n    txt = txt.trim()\n    \n    if txt.length\
    \ == 1\n        return true\n    \n    if txt.last == \" \" || txt.last == \"\\\
    n\"\n        return false\n    \n    if txt.last == \" \"\n        return false\n\
    \    \n    if txt.last == \"\\n\"\n        return false\n    \n    if txt.last\
    \ == \" \" || txt.last == \"\\n\"\n        return false\n    \n    if txt.last\
    \ == \" \"\n        return false\n    \n    if txt.last == \"\\n\"\n        return\
    \ false\n    \n    if txt.last == \" \" || txt.last == \"\\n\"\n        return\
    \ false\n    \n    if txt.last == \" \"\n        return false\n    \n    if txt.last\
    \ == \"\\n\"\n        return false\n    \n    if txt.last == \" \" || txt.last\
    \ == \"\\n\"\n        return false\n    \n    if txt.last == \" \"\n        return\
    \ false\n    \n    if txt.last == \"\\n\"\n        return false\n    \n    if\
    \ txt.last == \" \" || txt.last == \"\\n\"\n        return false\n    \n    if\
    \ txt.last == \" \"\n        return false\n    \n    if txt.last == \"\\n\"\n\
    \        return false\n    \n    if txt.last == \" \" || txt.last == \"\\n\"\n\
    \        return false\n    \n    if txt.last == \" \"\n        return false\n\
    \    \n    if txt.last == \"\\n\"\n        return false\n    \n    if txt.last\
    \ == \" \" || txt.last == \"\\n\"\n        return false\n    \n    if txt.last\
    \ == \" \"\n        return false\n    \n    if txt.last == \"\\n\"\n        return\
    \ false\n    \n    if txt.last == \" \" || txt.last == \"\\n\"\n        return\
    \ false\n    \n    if txt.last == \" \"\n        return false\n    \n    if txt.last\
    \ == \"\\n\"\n        return false\n    \n    if txt.last == \" \" || txt.last\
    \ == \"\\n\"\n        return false\n    \n    if txt.last == \" \"\n        return\
    \ false\n    \n    if txt.last == \"\\n\"\n        return false\n    \n    if\
    \ txt.last == \" \" || txt.last == \"\\n\"\n        return false\n    \n    if\
    \ txt.last == \" \"\n        return false\n    \n    if txt.last == \"\\n\"\n\
    \        return false\n    \n    if txt.last == \" \" || txt.last == \"\\n\"\n\
    \        return false\n    \n    if txt.last == \" \"\n        return false\n\
    \    \n    if txt.last == \"\\n\"\n        return false\n    \n    if txt.last\
    \ == \" \" || txt.last == \"\\n\"\n        return false\n    \n", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt.head == txt.last\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<text>\nExercise 9:\
    \ Write a function that returns true if the last character\n    of a given string\
    \ is a digit and is not\n    a part of a word, and false otherwise.\n    Note:\
    \ \"word\" is a group of characters separated by space.", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    else\n        txt[txt.length - 1]\
    \ == \" \" || txt[txt.length - 1] == \"\\n\"\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    if txt.length\
    \ == 0 \n        false\n    else\n        txt[txt.length-1] == ' ' || txt[txt.length-1]\
    \ == '.' || txt[txt.length-1] == '?' || txt[txt.length-1] == '!' || txt[txt.length-1]\
    \ == '-' || txt[txt.length-1] == '_'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt.length ==\
    \ 1\n        txt.head == txt.last\n    else\n        txt.head == txt.last.head\
    \ && txt.last.head != txt.last.last\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    if txt.length == 0\n        false\n    elseif txt[txt.length\
    \ - 1] in string.ascii_letters\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is an alphabetical character\
    \ and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is\
    \ a group of characters separated by space.", "    txt = txt.strip()\n    if txt.size\
    \ == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt.size == 0\n        return false\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt.size\
    \ == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt.size == 0\n        return false\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt.size\
    \ == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt.size == 0\n        return false\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt.size\
    \ == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt.size == 0\n        return false\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt.size\
    \ == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt.size == 0\n        return false\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt.size\
    \ == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt.size == 0\n        return false\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt.size\
    \ == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt.size == 0\n        return false\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt.size\
    \ == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt.size == 0\n        return false\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt.size\
    \ == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n   \
    \ else\n        if txt[txt.length-1].isalpha()\n            true\n        else\n\
    \            false\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is an alphabetical character and is not\n    a part of a word,\
    \ and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n\
    \    elseif txt[txt.length - 1] == ' ' \n        false\n    elseif txt[txt.length\
    \ - 1] == '.' \n        false\n    elseif txt[txt.length - 1] == '?' \n      \
    \  false\n    elseif txt[txt.length - 1] == '!' \n        false\n    elseif txt[txt.length\
    \ - 1] == '-' \n        false\n    elseif txt[txt.length - 1] == '_' \n      \
    \  false\n    elseif txt[txt.length - 1] == '*' \n        false\n    elseif txt[txt.length\
    \ - 1] == '+' \n        false\n    elseif txt[txt.length - 1] == '%' \n      \
    \  false\n    elseif txt[txt.length - 1] == '&' \n        false\n    elseif txt[txt.length\
    \ - 1] == '('\n        false\n    elseif txt[txt.length - 1] == ')' \n       \
    \ false\n    elseif txt[txt.length - 1] == '[' \n        false\n    elseif txt[txt.length\
    \ - 1] == ']' \n        false\n    elseif txt[txt.length - 1] == '{' \n      \
    \  false\n    elseif txt[txt.length - 1] == '}' \n        false\n    elseif txt[txt.length\
    \ - 1] == '|' \n        false\n    elseif txt[txt.length - 1] == ':' \n      \
    \  false\n    elseif txt[txt.length - 1] == ';' \n        false\n    elseif txt[txt.length\
    \ - 1] == '<' \n        false\n    elseif txt[txt.length - 1] == '>' \n      \
    \  false\n    elseif txt[txt.length - 1] == '/' \n        false\n    elseif txt[txt.length\
    \ - 1] == '\\\\' \n        false\n    elseif txt[txt.length - 1] == '\"' \n  \
    \      false\n    elseif txt[txt.length - 1] == '?' \n        false\n    elseif\
    \ txt[txt.length - 1] == '!' \n        false\n    elseif txt[txt.length - 1] ==\
    \ '-' \n        false\n    elseif txt[txt.length - 1] == '_' \n        false\n\
    \    elseif txt[txt.length - 1] == '*' \n        false\n    elseif txt[txt.length\
    \ - 1] == '+' \n        false\n    elseif txt[txt.length - 1] == '%' \n      \
    \  false\n    elseif txt[txt.length - 1] == '&' \n        false\n    elseif txt[txt.length\
    \ - 1] == '('\n        false\n    elseif txt[txt.length - 1] == ')' \n       \
    \ false\n    elseif txt[txt.length - 1] == '[' \n        false\n    elseif txt[txt.length\
    \ - 1] == ']' ", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n\
    \    else\n        txt[txt.length-1] == \" \" || txt[txt.length-1] == \"\\n\"\
    \ || txt[txt.length-1] == \"\\t\" || txt[txt.length-1] == \"\\r\" || txt[txt.length-1]\
    \ == \"\\f\"\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Create\
    \ a function that returns true if the last character\n    of a given string is\
    \ a digit, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n\
    \    else\n        txt[txt.length-1] == \" \" || txt[txt.length-1] == \"\\t\"\
    \ || txt[txt.length-1] == \"\\n\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == ' ' || txt[txt.length-1] == '.' || txt[txt.length-1] == '?' || txt[txt.length-1]\
    \ == '!' || txt[txt.length-1] == '-' || txt[txt.length-1] == '_'\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a number and is not\n \
    \   a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.trim()\n    if txt.length == 0 \n     \
    \   false\n    elseif txt.last.isalpha() \n        true\n    else\n        false\n\
    \    end\nend\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "    txt = txt.strip()\n\
    \    if txt.ends_with(' '):\n        txt = txt.strip(\" \")\n    return txt[txt.length\
    \ - 1].isalpha()\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns true if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and false otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt.length == 1\n        true\n\
    \    elseif txt.lastChar.isLetter\n        false\n    else\n        true\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns true if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.strip()\n\
    \    if txt.ends_with(' '):\n        txt = txt.strip(\" \")\n    return txt.ends_with('\
    \ ') and txt[-1].isalpha()\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.", "    if\
    \ txt.length == 0 \n        false\n    else\n        txt[txt.length-1] == ' '\
    \ || txt[txt.length-1] == '\\t' || txt[txt.length-1] == '\\n'\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    if txt.length == 0 \n        false\n    else\n  \
    \      if txt[txt.length-1].isalpha() \n            true\n        else\n     \
    \       false\n        end\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == ' ' || txt[txt.length-1] == '\\t' || txt[txt.length-1] == '\\n'\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.trim()\n    if txt.length == 0 \n     \
    \   false\n    else\n        txt[txt.length-1].isalpha()\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.trim()\n    if txt.length == 0 \n     \
    \   false\n    elseif txt.length == 1\n        txt.head == txt.last\n    else\n\
    \        txt.head == txt.last.head && txt.last.head != \" \" && txt.last.head\
    \ != \"-\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns true if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and false otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    ", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n\
    \        txt.last() in string.ascii_letters\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ if txt.length == 0 \n        false\n    elseif txt.head == txt.tail\n      \
    \  true\n    else\n        txt.head == txt.tail[txt.head.length-1]\nend\n</cell>\n\
    <text>\nExercise 2: Write a function that checks if a word is palindrome\nWrite\
    \ a function that checks if a word is palindrome. Palindrome is a word that reads\
    \ the same forwards as backwards.", "    if txt.length == 0 \n        false\n\
    \    else\n        txt[txt.length-1] == \" \" || txt[txt.length-1] == \"\\n\"\
    \ || txt[txt.length-1] == \"\\t\" || txt[txt.length-1] == \"\\r\" || txt[txt.length-1]\
    \ == \"\\v\" || txt[txt.length-1] == \"\\f\" || txt[txt.length-1] == \"\\e\" ||\
    \ txt[txt.length-1] == \"\\a\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1]\
    \ == \"\\a\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\a\" ||\
    \ txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\a\" || txt[txt.length-1]\
    \ == \"\\e\" || txt[txt.length-1] == \"\\a\" || txt[txt.length-1] == \"\\e\" ||\
    \ txt[txt.length-1] == \"\\a\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1]\
    \ == \"\\a\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\a\" ||\
    \ txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\a\" || txt[txt.length-1]\
    \ == \"\\e\" || txt[txt.length-1] == \"\\a\" || txt[txt.length-1] == \"\\e\" ||\
    \ txt[txt.length-1] == \"\\a\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1]\
    \ == \"\\a\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\a\" ||\
    \ txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\a\" || txt[txt.length-1]\
    \ == \"\\e\" || txt[txt.length-1] == \"\\a\" || txt[txt.length-1] == \"\\e\" ||\
    \ txt[txt.length-1] == \"\\a\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1]\
    \ == \"\\a\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\a\" ||\
    \ txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\a\" || txt[txt.length-1]\
    \ == \"\\e\" || txt[txt.length-1] == \"\\a\" || txt[txt.length-1] == \"\\e\" ||\
    \ txt[txt.length-1] == \"\\a\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1]\
    \ == \"\\a\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\a\" ||\
    \ txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\a\" || txt[txt.length-1]\
    \ == \"\\e\" || txt[txt.length-1] == \"\\a\" || txt", "    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n",
  "    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n      \
    \  txt[txt.length - 1] == ' ' || txt[txt.length - 1] == '\\t' || txt[txt.length\
    \ - 1] == '\\n' || txt[txt.length - 1] == '\\r' || txt[txt.length - 1] == '\\\
    r'\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis does not provide an\
    \ answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/27815792)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to check\
    \ if the last character of a string is a letter, and I provided a solution that\
    \ does just that. He also asked how to check if the last character is a space\
    \ or tab or newline or carriage return, and I provided a solution that does just\
    \ that. He also asked how to check if the last character is a space or tab or\
    \ newline or carriage return, and I provided a solution that does just that. He\
    \ also asked how to check if the last character is a space or tab or newline or\
    \ carriage return, and I provided a solution that does just that. He also asked\
    \ how to check if the last character is a space or tab or newline or carriage\
    \ return, and I provided a solution that does just that. He also asked how to\
    \ check if the last character is a space or tab or newline or carriage return,\
    \ and I provided a solution that does just that. He also asked how to check if\
    \ the last character is a space or tab or newline or carriage return, and I provided\
    \ a solution that does just that.\n<|/ c |>\n<| c |>\nThis does not provide an\
    \ answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/27815792)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to check\
    \ if the last character of a string is a letter, and I provided a solution that\
    \ does just that. He also asked how to check if the last character is a space\
    \ or tab or newline or carriage return, and I provided a solution that does just\
    \ that. He also asked how to check if the last character is a space or tab or\
    \ newline or carriage return, and I provided a solution that does just that. He\
    \ also asked how to check if the last ", "    \n    if txt == \"\"\n        return\
    \ false\n    \n    txt = txt.split(\" \")\n    \n    for word in txt\n       \
    \ if word[word.length - 1] == \" \"\n            return false\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns true if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    \n    if txt.length == 0 \n \
    \       false\n    else\n        if txt[txt.length - 1] == \" \" \n          \
    \  false\n        else\n            if txt[txt.length - 1].isalpha() \n      \
    \          false\n            else\n                true\n        end\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.strip()\n    if txt == \"\"\n        false\n\
    \    else\n        txt[length(txt)-1] == \" \" || txt[length(txt)-1] == \"\\n\"\
    \ || txt[length(txt)-1] == \"\\t\" || txt[length(txt)-1] == \"\\r\" || txt[length(txt)-1]\
    \ == \"\\v\" || txt[length(txt)-1] == \"\\f\" || txt[length(txt)-1] == \"\\a\"\
    \ || txt[length(txt)-1] == \"\\e\" || txt[length(txt)-1] == \"\\U\" || txt[length(txt)-1]\
    \ == \"\\N\" || txt[length(txt)-1] == \"\\p\" || txt[length(txt)-1] == \"\\P\"\
    \ || txt[length(txt)-1] == \"\\N\" || txt[length(txt)-1] == \"\\o\" || txt[length(txt)-1]\
    \ == \"\\O\" || txt[length(txt)-1] == \"\\c\" || txt[length(txt)-1] == \"\\C\"\
    \ || txt[length(txt)-1] == \"\\e\" || txt[length(txt)-1] == \"\\E\" || txt[length(txt)-1]\
    \ == \"\\U\" || txt[length(txt)-1] == \"\\N\" || txt[length(txt)-1] == \"\\p\"\
    \ || txt[length(txt)-1] == \"\\P\" || txt[length(txt)-1] == \"\\N\" || txt[length(txt)-1]\
    \ == \"\\o\" || txt[length(txt)-1] == \"\\O\" || txt[length(txt)-1] == \"\\c\"\
    \ || txt[length(txt)-1] == \"\\C\" || txt[length(txt)-1] == \"\\e\" || txt[length(txt)-1]\
    \ == \"\\E\" || txt[length(txt)-1] == \"\\U\" || txt[length(txt)-1] == \"\\N\"\
    \ || txt[length(txt)-1] == \"\\p\" || txt[length(txt)-1] == \"\\P\" || txt[length(txt)-1]\
    \ == \"\\N\" || txt[length(txt)-1] == \"\\o\" || txt[length(txt)-1] == \"\\O\"\
    \ || txt[length(txt)-1] == \"\\c\" || txt[length(txt)-1] == \"\\C\" || txt[length(txt)-1]\
    \ == \"\\e\" || txt[length(txt)-1] == \"\\E\" || txt[length(txt)-1] == \"\\U\"\
    \ || txt[length(txt)-1] == \"\\N\" || txt[length(txt)-1] == \"\\p\" || txt[length(txt)-1]\
    \ == \"\\P\" || txt[length(txt)-1] == \"\\N\" || txt[length(txt)-1] == \"\\o\"\
    \ || txt[length(txt)-1] == \"\\O\" || txt[length(txt)-1] == \"\\c\" || txt[length(txt)-1]\
    \ == \"\\C", "    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == ' ' || txt[txt.length-1] == '.' || txt[txt.length-1] == '?' || txt[txt.length-1]\
    \ == '!' || txt[txt.length-1] == '-' || txt[txt.length-1] == '_'\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a number and is not\n \
    \   a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.strip()\n    if txt == \"\"\n        return\
    \ false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    return txt.isalpha()\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.trim()\n    if txt.length == 0 \n     \
    \   false\n    elseif txt[txt.length - 1] == \" \" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"-\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"_\" \n        false\n    elseif txt[txt.length - 1] == \".\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \",\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"?\" \n        false\n    elseif txt[txt.length - 1] == \"!\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"'\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"\\\"\" \n        false\n    elseif txt[txt.length -\
    \ 1] == \"(\" \n        false\n    elseif txt[txt.length - 1] == \")\" \n    \
    \    false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"/\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \":\" \n        false\n    elseif txt[txt.length - 1] == \";\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \",\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"-\" \n        false\n    elseif txt[txt.length - 1] == \"_\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"-\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"-\" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"-\" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"-\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"-\" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"-\" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"-\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"-\" \n        false\n    elseif txt[txt", "    if txt.length == 0 \n  \
    \      false\n    else\n        txt[txt.length-1] == \" \" || txt[txt.length-1]\
    \ == \".\" || txt[txt.length-1] == \",\" || txt[txt.length-1] == \";\" || txt[txt.length-1]\
    \ == \":\" || txt[txt.length-1] == \" \"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit, and false otherwise.\n    Note: \"word\" is a group\
    \ of characters separated by space.", "    txt = txt.strip()\n    if txt.length\
    \ == 0 \n        false\n    else\n        txt[txt.length-1] == \" \" || txt[txt.length-1]\
    \ == \"\\t\" || txt[txt.length-1] == \"\\n\"\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1] == ' ' \n        false\n    else\n        true\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    ", "    \n    if txt.length == 0 \n        false\n\
    \    else\n        txt[txt.length-1] == \" \" || txt[txt.length-1] == \"\\n\"\
    \ || txt[txt.length-1] == \"\\t\" || txt[txt.length-1] == \"\\r\" || txt[txt.length-1]\
    \ == \"\\f\" || txt[txt.length-1] == \"\\v\" || txt[txt.length-1] == \"\\e\" ||\
    \ txt[txt.length-1] == \"\\U\" || txt[txt.length-1] == \"\\L\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p", "    txt = txt.split(\" \")\n   \
    \ txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    return txt.isalpha()\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.strip()\n    if txt.size == 0\n       \
    \ return false\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    txt\
    \ = txt.strip()\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt =\
    \ txt[txt.size - 1]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[txt.size - 1]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n   \
    \ txt = txt[txt.size - 1]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n\
    \    txt = txt[txt.size - 1]\n    txt = txt.strip()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.size - 1]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt", "    \n    if txt.length == 0 \n        false\n    else\n   \
    \     txt[txt.length - 1] == \" \" || txt[txt.length - 1] == \"\\n\" || txt[txt.length\
    \ - 1] == \"\\t\" || txt[txt.length - 1] == \"\\r\" || txt[txt.length - 1] ==\
    \ \"\\v\" || txt[txt.length - 1] == \"\\f\" || txt[txt.length - 1] == \"\\a\"\
    \ || txt[txt.length - 1] == \"\\e\" || txt[txt.length - 1] == \"\\i\" || txt[txt.length\
    \ - 1] == \"\\o\" || txt[txt.length - 1] == \"\\u\"\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Create a function that returns true if the\
    \ last character\n    of a given string is a digit, and false otherwise.\n   \
    \ Note: \"word\" is a group of characters separated by space.", "    if txt.length\
    \ == 0 \n        false\n    else if txt[txt.length - 1] == \" \" \n        false\n\
    \    else if txt[txt.length - 1] == \".\" \n        false\n    else if txt[txt.length\
    \ - 1] == \",\" \n        false\n    else if txt[txt.length - 1] == \"?\" \n \
    \       false\n    else if txt[txt.length - 1] == \"!\" \n        false\n    else\
    \ if txt[txt.length - 1] == \"-\" \n        false\n    else if txt[txt.length\
    \ - 1] == \"_\" \n        false\n    else if txt[txt.length - 1] == \"/\" \n \
    \       false\n    else if txt[txt.length - 1] == \":\" \n        false\n    else\
    \ if txt[txt.length - 1] == \";\" \n        false\n    else if txt[txt.length\
    \ - 1] == \",\" \n        false\n    else if txt[txt.length - 1] == \"-\" \n \
    \       false\n    else if txt[txt.length - 1] == \"_\" \n        false\n    else\
    \ if txt[txt.length - 1] == \"/\" \n        false\n    else if txt[txt.length\
    \ - 1] == \":\" \n        false\n    else if txt[txt.length - 1] == \";\" \n \
    \       false\n    else if txt[txt.length - 1] == \",\" \n        false\n    else\
    \ if txt[txt.length - 1] == \"-\" \n        false\n    else if txt[txt.length\
    \ - 1] == \"_\" \n        false\n    else if txt[txt.length - 1] == \"/\" \n \
    \       false\n    else if txt[txt.length - 1] == \":\" \n        false\n    else\
    \ if txt[txt.length - 1] == \";\" \n        false\n    else if txt[txt.length\
    \ - 1] == \",\" \n        false\n    else if txt[txt.length - 1] == \"-\" \n \
    \       false\n    else if txt[txt.length - 1] == \"_\" \n        false\n    else\
    \ if txt[txt.length - 1] == \"/\" \n        false\n    else if txt[txt.length\
    \ - 1] == \":\" \n        false\n    else if txt[txt.length - 1] == \";\" \n \
    \       false\n    else if txt[txt.length - 1] == \",\" \n        false\n    else\
    \ if txt[txt.length - 1] == \"-\" \n        false\n    else if txt[txt.length\
    \ - 1] == \"_\" \n        false\n    else if txt[txt.length - 1] == \"/\" \n \
    \       false\n    else if txt[txt.length - 1] == \":\" \n        false\n    else\
    \ if txt[txt.length - 1]", "    \n    if txt.length == 0 \n        false\n   \
    \ elseif txt[txt.length-1] == \" \" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\n\" \n        false\n    elseif txt[txt.length-1] == \"\\t\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\r\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\v\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\f\" \n        false\n    elseif txt[txt.length-1] == \"\\\"\" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\'\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\\\\" \n        false\n    elseif txt[txt.length-1] == \"%\" \n      \
    \  false\n    elseif txt[txt.length-1] == \"&\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"'\" \n        false\n    elseif txt[txt.length-1] == \"(\" \n        false\n\
    \    elseif txt[txt.length-1] == \")\" \n        false\n    elseif txt[txt.length-1]\
    \ == \",\" \n        false\n    elseif txt[txt.length-1] == \".\" \n        false\n\
    \    elseif txt[txt.length-1] == \"/\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"0\" \n        false\n    elseif txt[txt.length-1] == \"1\" \n        false\n\
    \    elseif txt[txt.length-1] == \"2\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"3\" \n        false\n    elseif txt[txt.length-1] == \"4\" \n        false\n\
    \    elseif txt[txt.length-1] == \"5\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"6\" \n        false\n    elseif txt[txt.length-1] == \"7\" \n        false\n\
    \    elseif txt[txt.length-1] == \"8\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"9\" \n        false\n    elseif txt[txt.length-1] == \"a\" \n        false\n\
    \    elseif txt[txt.length-1] == \"b\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"c\" \n        false\n    elseif txt[txt.length-1] == \"d\" \n        false\n\
    \    elseif txt[txt.length-1] == \"e\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"f\" \n        false\n    elseif txt[txt.length-1] == \"g\" \n        false\n\
    \    elseif txt[txt.length-1] == \"h\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"i\" \n        false", "    \n    if txt.length == 0 \n        false\n \
    \   elseif txt[txt.length - 1] == \" \" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\n\" \n        false\n    elseif txt[txt.length - 1] == \"\\t\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\r\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\v\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\f\" \n        false\n    elseif txt[txt.length - 1] == \"\\e\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\\"\" \n        false\n \
    \   elseif txt[txt.length - 1] == \"\\'\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\\\\" \n        false\n    elseif txt[txt.length - 1] == \"%\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"&\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"*\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"(\"\n        false\n    elseif txt[txt.length - 1] == \")\"\n        false\n\
    \    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"_\" \n        false\n    elseif txt[txt.length - 1] == \"+\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"=\"\n        false\n    elseif\
    \ txt[txt.length - 1] == \".\"\n        false\n    elseif txt[txt.length - 1]\
    \ == \",\"\n        false\n    elseif txt[txt.length - 1] == \";\"\n        false\n\
    \    elseif txt[txt.length - 1] == \":\"\n        false\n    elseif txt[txt.length\
    \ - 1] == \"<\"\n        false\n    elseif txt[txt.length - 1] == \">\"\n    \
    \    false\n    elseif txt[txt.length - 1] == \"?\"\n        false\n    elseif\
    \ txt[txt.length - 1] == \"@\"\n        false\n    elseif txt[txt.length - 1]\
    \ == \"[\"\n        false\n    elseif txt[txt.length - 1] == \"]\"\n        false\n\
    \    elseif txt[txt.length - 1] == \"^\"\n        false\n    elseif txt[txt.length\
    \ - 1] == \"`\"\n        false\n    elseif txt[txt.length - 1] == \"{\"\n    \
    \    false\n    elseif txt[txt.length - 1] == \"|\"\n        false\n    elseif\
    \ txt[txt.length - 1] == \"}\"\n        false\n    elseif txt[txt.length - 1]\
    \ == \"~\"\n        false\n    elseif txt[txt.length - 1] == \"\\\"\"\n      \
    \  false\n    elseif txt[txt.length - 1]", "    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt[txt.length-1] == \" \"\
    \ \n        false\n    elseif txt[txt.length-1].isalpha() \n        false\n  \
    \  else\n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Create a function that returns true if the last character\n    of a given\
    \ string is a digit and is not\n    a part of a word, and false otherwise.\n \
    \   Note: \"word\" is a group of characters separated by space.", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    if txt.length\
    \ == 0 \n        false\n    elseif txt[txt.length - 1] == ' ' \n        false\n\
    \    elseif txt[txt.length - 1] == '-' \n        false\n    elseif txt[txt.length\
    \ - 1] == '.' \n        false\n    elseif txt[txt.length - 1] == '!' \n      \
    \  false\n    elseif txt[txt.length - 1] == '?' \n        false\n    elseif txt[txt.length\
    \ - 1] == '\\'' \n        false\n    elseif txt[txt.length - 1] == '\\\"' \n \
    \       false\n    elseif txt[txt.length - 1] == '(' \n        false\n    elseif\
    \ txt[txt.length - 1] == ')' \n        false\n    elseif txt[txt.length - 1] ==\
    \ '[' \n        false\n    elseif txt[txt.length - 1] == ']' \n        false\n\
    \    elseif txt[txt.length - 1] == '{' \n        false\n    elseif txt[txt.length\
    \ - 1] == '}' \n        false\n    elseif txt[txt.length - 1] == '*' \n      \
    \  false\n    elseif txt[txt.length - 1] == '+' \n        false\n    elseif txt[txt.length\
    \ - 1] == ',' \n        false\n    elseif txt[txt.length - 1] == '-' \n      \
    \  false\n    elseif txt[txt.length - 1] == '.' \n        false\n    elseif txt[txt.length\
    \ - 1] == '!' \n        false\n    elseif txt[txt.length - 1] == '?' \n      \
    \  false\n    elseif txt[txt.length - 1] == '\\'' \n        false\n    elseif\
    \ txt[txt.length - 1] == '\\\"' \n        false\n    elseif txt[txt.length - 1]\
    \ == '(' \n        false\n    elseif txt[txt.length - 1] == ')' \n        false\n\
    \    elseif txt[txt.length - 1] == '[' \n        false\n    elseif txt[txt.length\
    \ - 1] == ']' \n        false\n    elseif txt[txt.length - 1] == '{' \n      \
    \  false\n    elseif txt[txt.length - 1] == '}' \n        false\n    elseif txt[txt.length\
    \ - 1] == '*' \n        false\n    elseif txt[txt.length - 1] == '+' \n      \
    \  false\n    elseif txt[txt.length - 1] == ',' \n        false\n    elseif txt[txt.length\
    \ - 1] == '-' \n        false\n    elseif txt[txt.length - 1] == '.' \n      \
    \  false\n    elseif txt[txt.length - 1] == '!' \n        false\n    elseif txt[txt.length\
    \ - 1] == '?' \n        false\n    elseif txt[txt.length - 1] == '\\'' \n    \
    \    false\n    elseif txt[txt", "    txt = txt.trim()\n    if txt.length == 0\
    \ \n        false\n    else\n        txt[txt.length - 1] == \" \" || txt[txt.length\
    \ - 1] == \"\\n\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Create a function that returns true if the last character\n    of a given\
    \ string is a digit and is not\n    a part of a word, and false otherwise.\n \
    \   Note: \"word\" is a group of characters separated by space.", "    if txt.length\
    \ == 0 \n        false\n    else\n        if txt[txt.length-1] == ' ' \n     \
    \       false\n        else\n            if txt[txt.length-1] >= 'a' && txt[txt.length-1]\
    \ <= 'z' \n                true\n            else\n                false\n   \
    \     end\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your\
    \ answer. I am still trying to understand how this works. I understand that `txt[txt.length-1]\
    \ == ' '` checks if the last character is a space. How does this work if the last\
    \ character is a letter? Also, what does `txt[txt.length-1] >= 'a' && txt[txt.length-1]\
    \ <= 'z'` do?\n<|/ c |>\n<| c |>\n`txt[txt.length-1]` returns the last character\
    \ of the string. `txt[txt.length-1] >= 'a' && txt[txt.length-1] <= 'z'` checks\
    \ if the last character is between `a` and `z`.\n<|/ c |>\n<| c |>\nThanks. I\
    \ understand that `txt[txt.length-1]` returns the last character of the string.\
    \ `txt[txt.length-1] >= 'a' && txt[txt.length-1] <= 'z'` checks if the last character\
    \ is between `a` and `z`. But how does this work if the last character is a letter?\
    \ Also, what does `txt[txt.length-1] >= 'a' && txt[txt.length-1] <= 'z'` do?\n\
    <|/ c |>\n<| c |>\n`txt[txt.length-1] >= 'a' && txt[txt.length-1] <= 'z'` checks\
    \ if the last character is between `a` and `z`. `txt[txt.length-1] >= 'a' && txt[txt.length-1]\
    \ <= 'z'` checks if the last character is between `a` and `z`. `txt[txt.length-1]\
    \ >= 'a' && txt[txt.length-1] <= 'z'` checks if the last character is between\
    \ `a` and `z`.\n<|/ c |>\n<| c |>\nThanks. I understand that `txt[txt.length-1]`\
    \ returns the last character of the string. `txt[txt.length-1] >= 'a' && txt[txt.length-1]\
    \ <= 'z'` checks if the last character is between `a` and `z`. But how does this\
    \ work if the last character is a letter? Also, what does `txt[txt.length-1] >=\
    \ 'a' && txt[txt.length-1] <= 'z'` do?\n<|/ c |>\n<| a tags=julia,string |>\n\
    <code>", "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    ", "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    ", "    txt = txt.strip()\n    if txt == \"\"\n        false\n    else\n\
    \        txt[length(txt)-1] == ' ' || txt[length(txt)-1] == '.' || txt[length(txt)-1]\
    \ == '?' || txt[length(txt)-1] == '!'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit, and false otherwise.\n    Note: \"word\" is a group\
    \ of characters separated by space.", "    txt = txt.strip()\n    if txt.size\
    \ == 0\n        return false\n    else\n        txt = txt.split(\" \")\n     \
    \   txt = txt.last()\n        txt = txt.strip()\n        if txt == \"\"\n    \
    \        return false\n        else\n            if txt.chars().all{|x| x == txt.chars().last}\n\
    \                return true\n            else\n                return false\n\
    \            end\n        end\n    end\nend\n</code>\n<|/ a tags=julia |>\n<|\
    \ c |>\nI like your answer, but I think it would be better to use a regex to check\
    \ for letters instead of splitting and checking the last character. Something\
    \ like `if txt =~ /^[a-zA-Z]+$/` would be more efficient.\n<|/ c |>\n<| c |>\n\
    Yes, I agree with you. I just wanted to show a way to solve the problem with minimal\
    \ changes to the original code. Of course, your suggestion is much more efficient.\n\
    <|/ c |>\n<| a |>\nThe function below will return a boolean indicating whether\
    \ the last character is a letter:\n<code>", "    \n    if txt.size == 0\n    \
    \    return false\n    \n    txt = txt.split(\" \")\n    \n    for word in txt\n\
    \        if word[word.length - 1] == \" \"\n            return false\n    \n \
    \   return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a\
    \ function that returns true if the last character\n    of a given string is a\
    \ digit and is not\n    a part of a word, and false otherwise.\n    Note: \"word\"\
    \ is a group of characters separated by space.", "    txt = txt.trim()\n    if\
    \ txt.length == 0 \n        false\n    else\n        txt.last() in string.ascii_letters\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Create a function\
    \ that returns true if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    \n    if txt.length == 0 \n \
    \       false\n    elseif txt[txt.length - 1] == \" \" \n        false\n    else\n\
    \        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns true if the last character\n    of a given string is\
    \ a digit, and false otherwise.\n    Note: \"digit\" is a group of characters\
    \ separated by space.", "    txt = txt.strip()\n    txt = txt.split(\" \")\n \
    \   txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt\
    \ = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\"\
    \ \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n   \
    \ txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n   \
    \ txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt =\
    \ txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt[txt.length - 1] == \"\
    \ \" \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n        false\n\
    \    elseif txt[txt.length - 1] == \"\\t\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\r\" \n        false\n    elseif txt[txt.length - 1] == \" \" \n\
    \        false\n    elseif txt[txt.length - 1] == \"!\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"#\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"$\" \n        false\n    elseif txt[txt.length - 1] == \"%\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"&\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"'\" \n        false\n    elseif txt[txt.length - 1] == \"(\"\n   \
    \     false\n    elseif txt[txt.length - 1] == \")\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"*\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"+\" \n        false\n    elseif txt[txt.length - 1] == \",\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"/\" \n        false\n    elseif txt[txt.length - 1] == \"0\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"1\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"2\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"3\" \n        false\n    elseif txt[txt.length - 1] == \"4\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"5\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"6\" \n        false\n    elseif txt[txt.length - 1] == \"7\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"8\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"9\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \":\" \n        false\n    elseif txt[txt.length - 1] == \";\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"<\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"=\"\n        false\n    elseif txt[txt.length - 1] == \">\" \n   \
    \     false\n    elseif txt[txt.length - 1] == \"?\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"@\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"[\" ", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n\
    \    elseif txt.lastchar.isalpha()\n        true\n    else\n        false\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns true if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.chars\n    txt = txt.filter(x->!is_alphabetic(x))\n\
    \    txt = txt.filter(x->!is_word(x))\n    txt = txt.filter(x->!is_space(x))\n\
    \    txt = txt.filter(x->!is_digit(x))\n    txt = txt.filter(x->!is_symbol(x))\n\
    \    txt = txt.filter(x->!is_punctuation(x))\n    txt = txt.filter(x->!is_space(x))\n\
    \    txt = txt.filter(x->!is_digit(x))\n    txt = txt.filter(x->!is_symbol(x))\n\
    \    txt = txt.filter(x->!is_punctuation(x))\n    txt = txt.filter(x->!is_space(x))\n\
    \    txt = txt.filter(x->!is_digit(x))\n    txt = txt.filter(x->!is_symbol(x))\n\
    \    txt = txt.filter(x->!is_punctuation(x))\n    txt = txt.filter(x->!is_space(x))\n\
    \    txt = txt.filter(x->!is_digit(x))\n    txt = txt.filter(x->!is_symbol(x))\n\
    \    txt = txt.filter(x->!is_punctuation(x))\n    txt = txt.filter(x->!is_space(x))\n\
    \    txt = txt.filter(x->!is_digit(x))\n    txt = txt.filter(x->!is_symbol(x))\n\
    \    txt = txt.filter(x->!is_punctuation(x))\n    txt = txt.filter(x->!is_space(x))\n\
    \    txt = txt.filter(x->!is_digit(x))\n    txt = txt.filter(x->!is_symbol(x))\n\
    \    txt = txt.filter(x->!is_punctuation(x))\n    txt = txt.filter(x->!is_space(x))\n\
    \    txt = txt.filter(x->!is_digit(x))\n    txt = txt.filter(x->!is_symbol(x))\n\
    \    txt = txt.filter(x->!is_punctuation(x))\n    txt = txt.filter(x->!is_space(x))\n\
    \    txt = txt.filter(x->!is_digit(x))\n    txt = txt.filter(x->!is_symbol(x))\n\
    \    txt = txt.filter(x->!is_punctuation(x))\n    txt = txt.filter(x->!is_space(x))\n\
    \    txt = txt.filter(x->!is_digit(x))\n    txt = txt.filter(x->!is_symbol(x))",
  "    if txt.length == 0 \n        false\n    elseif txt[txt.length - 1] == ' ' \n\
    \        false\n    elseif txt[txt.length - 1] == '.' \n        false\n    elseif\
    \ txt[txt.length - 1] == '?' \n        false\n    elseif txt[txt.length - 1] ==\
    \ '!' \n        false\n    elseif txt[txt.length - 1] == '-' \n        false\n\
    \    elseif txt[txt.length - 1] == '_' \n        false\n    elseif txt[txt.length\
    \ - 1] == '/' \n        false\n    elseif txt[txt.length - 1] == '\\\\' \n   \
    \     false\n    elseif txt[txt.length - 1] == '$' \n        false\n    elseif\
    \ txt[txt.length - 1] == '%' \n        false\n    elseif txt[txt.length - 1] ==\
    \ '&' \n        false\n    elseif txt[txt.length - 1] == '*' \n        false\n\
    \    elseif txt[txt.length - 1] == '('\n        false\n    elseif txt[txt.length\
    \ - 1] == ')'\n        false\n    elseif txt[txt.length - 1] == '+' \n       \
    \ false\n    elseif txt[txt.length - 1] == '-' \n        false\n    elseif txt[txt.length\
    \ - 1] == '.' \n        false\n    elseif txt[txt.length - 1] == '?' \n      \
    \  false\n    elseif txt[txt.length - 1] == '!' \n        false\n    elseif txt[txt.length\
    \ - 1] == '-' \n        false\n    elseif txt[txt.length - 1] == '_' \n      \
    \  false\n    elseif txt[txt.length - 1] == '/' \n        false\n    elseif txt[txt.length\
    \ - 1] == '\\\\' \n        false\n    elseif txt[txt.length - 1] == '$' \n   \
    \     false\n    elseif txt[txt.length - 1] == '%' \n        false\n    elseif\
    \ txt[txt.length - 1] == '&' \n        false\n    elseif txt[txt.length - 1] ==\
    \ '*' \n        false\n    elseif txt[txt.length - 1] == '('\n        false\n\
    \    elseif txt[txt.length - 1] == ')'\n        false\n    elseif txt[txt.length\
    \ - 1] == '+' \n        false\n    elseif txt[txt.length - 1] == '-' \n      \
    \  false\n    elseif txt[txt.length - 1] == '.' \n        false\n    elseif txt[txt.length\
    \ - 1] == '?' \n        false\n    elseif txt[txt.length - 1] == '!' \n      \
    \  false\n    elseif txt[txt.length - 1] == '-' \n        false\n    elseif txt[txt.length\
    \ - 1] == '_' \n        false\n    elseif txt", "    \n    if txt.length == 0\
    \ \n        false\n    elseif txt[txt.length-1] == \" \" \n        false\n   \
    \ elseif txt[txt.length-1] == \"-\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"_\" \n        false\n    elseif txt[txt.length-1] == \"/\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\\\\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"'\" \n        false\n    elseif txt[txt.length-1] == \"!\" \n        false\n\
    \    elseif txt[txt.length-1] == \"?\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"(\" \n        false\n    elseif txt[txt.length-1] == \")\" \n        false\n\
    \    elseif txt[txt.length-1] == \",\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"-\" \n        false\n    elseif txt[txt.length-1] == \"/\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\\\\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"'\" \n        false\n    elseif txt[txt.length-1] == \"!\" \n        false\n\
    \    elseif txt[txt.length-1] == \"?\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"(\" \n        false\n    elseif txt[txt.length-1] == \")\" \n        false\n\
    \    elseif txt[txt.length-1] == \",\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"-\" \n        false\n    elseif txt[txt.length-1] == \"/\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\\\\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"'\" \n        false\n    elseif txt[txt.length-1] == \"!\" \n        false\n\
    \    elseif txt[txt.length-1] == \"?\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"(\" \n        false\n    elseif txt[txt.length-1] == \")\" \n        false\n\
    \    elseif txt[txt.length-1] == \",\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"-\" \n        false\n    elseif txt[txt.length-1] == \"/\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\\\\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"'\" \n        false\n    elseif txt[txt.length-1] == \"!\" \n        false\n\
    \    elseif txt[txt.length-1] == \"?\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"(\" \n", "    \n    if txt.length == 0 \n        false\n    elseif txt.head\
    \ == txt.last\n        true\n    else\n        false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.strip()\n    if txt.ends_with(\"e\")\n        true\n    else\n        false\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    if txt.length == 0 \n        false\n    else\n  \
    \      txt[txt.length-1] == ' ' || txt[txt.length-1] == '.' || txt[txt.length-1]\
    \ == ',' || txt[txt.length-1] == '?' || txt[txt.length-1] == '!' || txt[txt.length-1]\
    \ == ';' || txt[txt.length-1] == ':' || txt[txt.length-1] == '-' || txt[txt.length-1]\
    \ == '_' || txt[txt.length-1] == '/' || txt[txt.length-1] == '\\\\' || txt[txt.length-1]\
    \ == '$' || txt[txt.length-1] == '%' || txt[txt.length-1] == '&' || txt[txt.length-1]\
    \ == '*' || txt[txt.length-1] == '(' || txt[txt.length-1] == ')' || txt[txt.length-1]\
    \ == '[' || txt[txt.length-1] == ']' || txt[txt.length-1] == '{' || txt[txt.length-1]\
    \ == '}' || txt[txt.length-1] == '|' || txt[txt.length-1] == '<' || txt[txt.length-1]\
    \ == '>' || txt[txt.length-1] == '?' || txt[txt.length-1] == '!' || txt[txt.length-1]\
    \ == '@' || txt[txt.length-1] == '#' || txt[txt.length-1] == '$' || txt[txt.length-1]\
    \ == '%' || txt[txt.length-1] == '^' || txt[txt.length-1] == '&' || txt[txt.length-1]\
    \ == '*' || txt[txt.length-1] == '+' || txt[txt.length-1] == '-' || txt[txt.length-1]\
    \ == '=' || txt[txt.length-1] == '|' || txt[txt.length-1] == '~' || txt[txt.length-1]\
    \ == '`' || txt[txt.length-1] == '{' || txt[txt.length-1] == '}' || txt[txt.length-1]\
    \ == '|' || txt[txt.length-1] == '<' || txt[txt.length-1] == '>' || txt[txt.length-1]\
    \ == '?' || txt[txt.length-1] == '!' || txt[txt.length-1] == '@' || txt[txt.length-1]\
    \ == '#' || txt[txt.length-1] == '$' || txt[txt.length-1] == '%' || txt[txt.length-1]\
    \ == '^' || txt[txt.length-1] == '&' || txt[txt.length-1] == '*' || txt[txt.length-1]\
    \ == '+' || txt[txt.length-1] == '-' || txt[txt.length-1] == '=' || txt[txt.length-1]\
    \ == '|' || txt[txt.length-1] == '~' || txt[txt.length-1] == '`' || txt[txt.length-1]\
    \ == '{' || txt[txt.length-1] == '}' || txt[txt.length-1] == '|' || txt[txt.length",
  "    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n      \
    \  txt[txt.length-1] == ' ' || txt[txt.length-1] == '\\t' || txt[txt.length-1]\
    \ == '\\n' || txt[txt.length-1] == '\\r' || txt[txt.length-1] == '\\r'\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    \n    if txt.length == 0 \n        false\n    elseif\
    \ txt[txt.length-1] == \" \" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\n\" \n        false\n    elseif txt[txt.length-1] == \"\\t\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\r\" \n        false\n    elseif txt[txt.length-1]\
    \ == \" \" \n        false\n    elseif txt[txt.length-1] == \"!\" \n        false\n\
    \    elseif txt[txt.length-1] == \"#\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"$\" \n        false\n    elseif txt[txt.length-1] == \"%\" \n        false\n\
    \    elseif txt[txt.length-1] == \"&\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"'\" \n        false\n    elseif txt[txt.length-1] == \"(\" \n        false\n\
    \    elseif txt[txt.length-1] == \")\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"*\" \n        false\n    elseif txt[txt.length-1] == \"+\" \n        false\n\
    \    elseif txt[txt.length-1] == \",\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"-\" \n        false\n    elseif txt[txt.length-1] == \"/\" \n        false\n\
    \    elseif txt[txt.length-1] == \"0\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"1\" \n        false\n    elseif txt[txt.length-1] == \"2\" \n        false\n\
    \    elseif txt[txt.length-1] == \"3\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"4\" \n        false\n    elseif txt[txt.length-1] == \"5\" \n        false\n\
    \    elseif txt[txt.length-1] == \"6\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"7\" \n        false\n    elseif txt[txt.length-1] == \"8\" \n        false\n\
    \    elseif txt[txt.length-1] == \"9\" \n        false\n    elseif txt[txt.length-1]\
    \ == \":\" \n        false\n    elseif txt[txt.length-1] == \";\" \n        false\n\
    \    elseif txt[txt.length-1] == \"<\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"=\"\n        false\n    elseif txt[txt.length-1] == \">\" \n        false\n\
    \    elseif txt[txt.length-1] == \"?\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"@\" \n        false\n    elseif txt[txt.length-1] == \"[\" \n        false\n\
    \    else", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n  \
    \  elseif txt[txt.length - 1].isalpha()\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Create a function\
    \ that returns true if the last character\n    of a given string is an alphabetical\
    \ character and is not\n    a part of a word, and false otherwise.\n    Note:\
    \ \"word\" is a group of characters separated by space.", "    txt = txt.strip()\n\
    \    if txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if\
    \ txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt == \"\"\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n       \
    \ return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n\
    \    if txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if\
    \ txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt == \"\"\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n       \
    \ return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n\
    \    if txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if\
    \ txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt == \"\"\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n       \
    \ return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n\
    \    if txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if\
    \ txt == \"\"\n        return false\n    txt = txt", "    txt = txt.strip()\n\
    \    if txt == \"\"\n        false\n    else\n        txt[end-1] \u2208 letters\
    \ || txt[end-1] \u2208 spaces\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    if txt.length\
    \ == 0 \n        false\n    elseif txt[txt.length-1] == \" \" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\n\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\r\" \n        false\n    elseif txt[txt.length-1] == \"\\t\" \n     \
    \   false\n    elseif txt[txt.length-1] == \" \" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\n\" \n        false\n    elseif txt[txt.length-1] == \"\\r\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\t\" \n        false\n    elseif\
    \ txt[txt.length-1] == \" \" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\n\" \n        false\n    elseif txt[txt.length-1] == \"\\r\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\t\" \n        false\n    elseif txt[txt.length-1]\
    \ == \" \" \n        false\n    elseif txt[txt.length-1] == \"\\n\" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\r\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\t\" \n        false\n    elseif txt[txt.length-1] == \" \" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\n\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\r\" \n        false\n    elseif txt[txt.length-1] == \"\\t\" \n     \
    \   false\n    elseif txt[txt.length-1] == \" \" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\n\" \n        false\n    elseif txt[txt.length-1] == \"\\r\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\t\" \n        false\n    elseif\
    \ txt[txt.length-1] == \" \" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\n\" \n        false\n    elseif txt[txt.length-1] == \"\\r\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\t\" \n        false\n    elseif txt[txt.length-1]\
    \ == \" \" \n        false\n    elseif txt[txt.length-1] == \"\\n\" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\r\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\t\" \n        false\n    elseif txt[txt.length-1] == \" \" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\n\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\r\" \n        false\n    elseif txt[txt.length-1] == \"\\t\" \n     \
    \   false", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n  \
    \  elseif txt[txt.length - 1].isalpha() \n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns true if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    \n    if txt == \"\"\n      \
    \  return false\n    \n    txt = txt.split(\" \")\n    \n    txt = txt[end]\n\
    \    \n    if txt == \"a\"\n        return true\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    \n    txt = txt.split(\" \")\n    \n    if txt[txt.length\
    \ - 1] == txt[txt.length - 1].upcase()\n        \n        return true\n    else\n\
    \        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns true if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and false otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    \n    if txt.size ==\
    \ 0\n        return false\n    \n    if txt.size == 1\n        return true\n \
    \   \n    if txt.size == 2\n        return txt[end-1] == \" \"\n    \n    if txt.size\
    \ > 2\n        return txt[end-1] == \" \" && txt[end-2] == \" \"\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns true if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    \n    txt = txt.strip()\n   \
    \ if txt.size == 0\n        return false\n    \n    txt = txt.split(\" \")\n \
    \   txt = txt[txt.size - 1]\n    \n    txt = txt.strip()\n    \n    if txt.size\
    \ == 0\n        return false\n    \n    txt = txt.split(\" \")\n    \n    txt\
    \ = txt[txt.size - 1]\n    \n    txt = txt.strip()\n    \n    if txt.size == 0\n\
    \        return false\n    \n    txt = txt.split(\" \")\n    \n    txt = txt[txt.size\
    \ - 1]\n    \n    txt = txt.strip()\n    \n    if txt.size == 0\n        return\
    \ false\n    \n    txt = txt.split(\" \")\n    \n    txt = txt[txt.size - 1]\n\
    \    \n    txt = txt.strip()\n    \n    if txt.size == 0\n        return false\n\
    \    \n    txt = txt.split(\" \")\n    \n    txt = txt[txt.size - 1]\n    \n \
    \   txt = txt.strip()\n    \n    if txt.size == 0\n        return false\n    \n\
    \    txt = txt.split(\" \")\n    \n    txt = txt[txt.size - 1]\n    \n    txt\
    \ = txt.strip()\n    \n    if txt.size == 0\n        return false\n    \n    txt\
    \ = txt.split(\" \")\n    \n    txt = txt[txt.size - 1]\n    \n    txt = txt.strip()\n\
    \    \n    if txt.size == 0\n        return false\n    \n    txt = txt.split(\"\
    \ \")\n    \n    txt = txt[txt.size - 1]\n    \n    txt = txt.strip()\n    \n\
    \    if txt.size == 0\n        return false\n    \n    txt = txt.split(\" \")\n\
    \    \n    txt = txt[txt.size - 1]\n    \n    txt = txt.strip()\n    \n    if\
    \ txt.size == 0\n        return false\n    \n    txt = txt.split(\" \")\n    \n\
    \    txt = txt[txt.size - 1]\n    \n    txt = txt.strip()\n    \n    if txt.size\
    \ == 0\n        return false\n    \n    txt = txt.split(\" \")\n    \n    txt\
    \ = txt[txt.size - 1]\n    \n    txt = txt.strip()\n    \n    if txt.size == 0\n\
    \        return false\n    \n    txt = txt.split(\" \")\n    \n    txt = txt[txt.size\
    \ - 1]\n    \n    txt = txt.strip()\n    \n    if txt.size == 0\n        return\
    \ false\n    \n    txt", "    if txt == \"\"\n        false\n    else\n      \
    \  txt[length(txt)-1] == ' ' || txt[length(txt)-1] == '.' || txt[length(txt)-1]\
    \ == '?' || txt[length(txt)-1] == '!' || txt[length(txt)-1] == '-' || txt[length(txt)-1]\
    \ == '_' || txt[length(txt)-1] == '&' || txt[length(txt)-1] == '(' || txt[length(txt)-1]\
    \ == ')' || txt[length(txt)-1] == '[' || txt[length(txt)-1] == ']' || txt[length(txt)-1]\
    \ == '{' || txt[length(txt)-1] == '}' || txt[length(txt)-1] == '|' || txt[length(txt)-1]\
    \ == '\\\\' || txt[length(txt)-1] == '^' || txt[length(txt)-1] == '~' || txt[length(txt)-1]\
    \ == '*' || txt[length(txt)-1] == '?' || txt[length(txt)-1] == '!' || txt[length(txt)-1]\
    \ == '-' || txt[length(txt)-1] == '_' || txt[length(txt)-1] == '&' || txt[length(txt)-1]\
    \ == '(' || txt[length(txt)-1] == ')' || txt[length(txt)-1] == '[' || txt[length(txt)-1]\
    \ == ']' || txt[length(txt)-1] == '{' || txt[length(txt)-1] == '}' || txt[length(txt)-1]\
    \ == '|' || txt[length(txt)-1] == '\\\\' || txt[length(txt)-1] == '^' || txt[length(txt)-1]\
    \ == '~' || txt[length(txt)-1] == '*' || txt[length(txt)-1] == '?' || txt[length(txt)-1]\
    \ == '!' || txt[length(txt)-1] == '-' || txt[length(txt)-1] == '_' || txt[length(txt)-1]\
    \ == '&' || txt[length(txt)-1] == '(' || txt[length(txt)-1] == ')' || txt[length(txt)-1]\
    \ == '[' || txt[length(txt)-1] == ']' || txt[length(txt)-1] == '{' || txt[length(txt)-1]\
    \ == '}' || txt[length(txt)-1] == '|' || txt[length(txt)-1] == '\\\\' || txt[length(txt)-1]\
    \ == '^' || txt[length(txt)-1] == '~' || txt[length(txt)-1] == '*' || txt[length(txt)-1]\
    \ == '?' || txt[length(txt)-1] == '!' || txt[length(txt)-1] == '-' || txt[length(txt)-1]\
    \ == '_' || txt[length(txt)-1] == '&' || txt[length(txt)-1]", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1] ==\
    \ \" \" || txt[txt.length-1] == \"\\n\" || txt[txt.length-1] == \"\\t\" || txt[txt.length-1]\
    \ == \"\\r\" || txt[txt.length-1] == \"\\f\" || txt[txt.length-1] == \"\\v\" ||\
    \ txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\U\" || txt[txt.length-1]\
    \ == \"\\L\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    \n    txt =\
    \ txt.split(\" \")\n    \n    for i in txt\n        if i[-1].isalpha()\n     \
    \       return false\n    return true\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\ndef last_char_is_a_letter(txt):\n    txt = txt.split(\" \")\n  \
    \  for i in txt:\n        if i[-1].isalpha():\n            return False\n    return\
    \ True\n</code>\n<|/ a tags=python,string,python-3.x |>\n<| a tags=python,string,python-3.x\
    \ |>\n<code>\ndef last_char_is_a_letter(txt):\n    txt = txt.split(\" \")\n  \
    \  for i in txt:\n        if i[-1].isalpha():\n            return False\n    return\
    \ True\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef last_char_is_a_letter(txt):\n\
    \    txt = txt.split(\" \")\n    for i in txt:\n        if i[-1].isalpha():\n\
    \            return False\n    return True\n</code>\n<|/ a tags=python,string,python-3.x\
    \ |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation\
    \ what your code does and how it solves the problem of the question. Answers with\
    \ an explanation are usually more helpful and of better quality, and are more\
    \ likely to attract upvotes.\n<|/ c |>\n<| a tags=python,string,python-3.x |>\n\
    <code>\ndef last_char_is_a_letter(txt):\n    txt = txt.split(\" \")\n    for i\
    \ in txt:\n        if i[-1].isalpha():\n            return False\n    return True\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=python,string,python-3.x |>\n<code>\ndef\
    \ last_char_is_a_letter(txt):\n    txt = txt.split(\" \")\n    for i in txt:\n\
    \        if i[-1].isalpha():\n            return False\n    return True\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=python,string,python-3.x |>\n<code>\ndef last_char_is_a_letter(txt):\n\
    \    txt = txt.split(\" \")\n    for i in txt:\n        if i[-1].isalpha():\n\
    \            return False\n    return True\n</code>\n<|/ a dscore=0 |>\n<| a tags=python,string,python-3.x\
    \ |>\n<code>\ndef last_char_is_a_letter(txt):\n    txt = txt.split(\" \")\n  \
    \  for i in txt:\n        if i[-1].isalpha():\n            return False\n    return\
    \ True\n</code>\n<|/ a dscore=0 |>\n<| a tags=python,string,python-3.x |>\n<code>\n\
    def last_char_is_a_letter(txt", "    if txt.length == 0 \n        false\n    else\n\
    \        txt[txt.length-1] == \" \" || txt[txt.length-1] == \"\\n\" || txt[txt.length-1]\
    \ == \"\\t\" || txt[txt.length-1] == \"\\r\" || txt[txt.length-1] == \"\\v\" ||\
    \ txt[txt.length-1] == \"\\f\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1]\
    \ == \"\\\"\" \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ Create a function that returns true if the last character\n    of a given string\
    \ is a digit and is not\n    a part of a word, and false otherwise.\n    Note:\
    \ \"word\" is a group of characters separated by space.", "    if txt.length ==\
    \ 0 \n        false\n    else\n        txt[txt.length-1] == ' ' || txt[txt.length-1]\
    \ == '.' || txt[txt.length-1] == '?' || txt[txt.length-1] == '!' || txt[txt.length-1]\
    \ == '-' || txt[txt.length-1] == '_' || txt[txt.length-1] == '/' || txt[txt.length-1]\
    \ == '\\\\' || txt[txt.length-1] == '(' || txt[txt.length-1] == ')' || txt[txt.length-1]\
    \ == '[' || txt[txt.length-1] == ']' || txt[txt.length-1] == '{' || txt[txt.length-1]\
    \ == '}' || txt[txt.length-1] == '|' || txt[txt.length-1] == '\"' || txt[txt.length-1]\
    \ == '\\'' || txt[txt.length-1] == '<' || txt[txt.length-1] == '>' || txt[txt.length-1]\
    \ == '~' || txt[txt.length-1] == '@' || txt[txt.length-1] == '#' || txt[txt.length-1]\
    \ == '$' || txt[txt.length-1] == '%' || txt[txt.length-1] == '^' || txt[txt.length-1]\
    \ == '&' || txt[txt.length-1] == '*' || txt[txt.length-1] == '(' || txt[txt.length-1]\
    \ == ')' || txt[txt.length-1] == '+' || txt[txt.length-1] == '-' || txt[txt.length-1]\
    \ == '=' || txt[txt.length-1] == '|' || txt[txt.length-1] == '\"' || txt[txt.length-1]\
    \ == '\\'' || txt[txt.length-1] == '<' || txt[txt.length-1] == '>' || txt[txt.length-1]\
    \ == '~' || txt[txt.length-1] == '@' || txt[txt.length-1] == '#' || txt[txt.length-1]\
    \ == '$' || txt[txt.length-1] == '%' || txt[txt.length-1] == '^' || txt[txt.length-1]\
    \ == '&' || txt[txt.length-1] == '*' || txt[txt.length-1] == '(' || txt[txt.length-1]\
    \ == ')' || txt[txt.length-1] == '+' || txt[txt.length-1] == '-' || txt[txt.length-1]\
    \ == '=' || txt[txt.length-1] == '|' || txt[txt.length-1] == '\"' || txt[txt.length-1]\
    \ == '\\'' || txt[txt.length-1] == '<' || txt[txt.length-1] == '>' || txt[txt.length-1]\
    \ == '~' || txt[txt.length-1] == '@' || txt[txt.length-1] == '#' || txt[txt.length-1]\
    \ == '$' || txt[txt.length-1] == '%' || txt[txt.length-1] == '^' || txt[txt.length-1]\
    \ == '&' || txt[txt.length", "    \n    if txt.length == 0 \n        false\n \
    \   else\n        txt[txt.length-1] == ' ' || txt[txt.length-1] == '.' || txt[txt.length-1]\
    \ == '?' || txt[txt.length-1] == '!'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit, and false otherwise.\n    Note: \"word\" is a group\
    \ of characters separated by space.", "    txt = txt.strip()\n    if txt.empty?\n\
    \        false\n    else\n        txt.chars().last() in \"abcdefghijklmnopqrstuvwxyz\"\
    \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns true if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    txt = txt.trim()\n    if txt.length\
    \ == 0 \n        false\n    elseif txt.length == 1\n        true\n    elseif txt[txt.length-1]\
    \ == \" \"\n        false\n    else\n        true\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    txt = txt.trim()\n    if txt.length == 0 \n     \
    \   false\n    else\n        txt[txt.length-1] == \" \" || txt[txt.length-1] ==\
    \ \"\\n\" || txt[txt.length-1] == \"\\t\" || txt[txt.length-1] == \"\\r\" || txt[txt.length-1]\
    \ == \"\\v\" || txt[txt.length-1] == \"\\f\" || txt[txt.length-1] == \"\\e\"\n\
    \    end\nend\n</cell>\n<text>\nExercise 5\nWrite a function that takes a string\
    \ and returns the number of words in the string.", "    txt = txt.strip()\n  \
    \  if txt.ends_with(' '):\n        txt = txt.strip(\" \")\n    return txt.ends_with('\
    \ ') or txt.ends_with('.')", "    txt = txt.strip()\n    if txt == \"\"\n    \
    \    false\n    else\n        txt.last() in string.ascii_letters\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.trim()\n    if txt.length == 0 \n     \
    \   false\n    elseif txt[txt.length - 1] == \" \" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"\\n\" \n        false\n    elseif txt[txt.length -\
    \ 1] == \"\\r\" \n        false\n    elseif txt[txt.length - 1] == \"\\t\" \n\
    \        false\n    elseif txt[txt.length - 1] == \" \" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"\\n\" \n        false\n    elseif txt[txt.length -\
    \ 1] == \"\\r\" \n        false\n    elseif txt[txt.length - 1] == \"\\t\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\n\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\r\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\t\" \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\r\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\t\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\n\" \n        false\n    elseif txt[txt.length - 1] == \"\\r\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\t\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\n\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\r\" \n        false\n    elseif txt[txt.length - 1] == \"\\t\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\n\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\r\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\t\" \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\r\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\t\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\n\" \n        false\n    elseif txt[txt.length - 1] == \"\\r\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\t\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\n\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\r\" \n        false\n    elseif txt[txt.length - 1] == \"\\t\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\n\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\r\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\t\" \n        false\n    elseif txt[txt", "    if txt.length ==\
    \ 0 \n        false\n    elseif txt[txt.length-1] == ' ' \n        false\n   \
    \ elseif txt[txt.length-1] == '-' \n        false\n    elseif txt[txt.length-1]\
    \ == '.' \n        false\n    elseif txt[txt.length-1] == '!' \n        false\n\
    \    elseif txt[txt.length-1] == '?' \n        false\n    elseif txt[txt.length-1]\
    \ == '\\'' \n        false\n    elseif txt[txt.length-1] == '\"' \n        false\n\
    \    elseif txt[txt.length-1] == '(' \n        false\n    elseif txt[txt.length-1]\
    \ == ')' \n        false\n    elseif txt[txt.length-1] == '*' \n        false\n\
    \    elseif txt[txt.length-1] == '+' \n        false\n    elseif txt[txt.length-1]\
    \ == '-' \n        false\n    elseif txt[txt.length-1] == '/' \n        false\n\
    \    elseif txt[txt.length-1] == ':' \n        false\n    elseif txt[txt.length-1]\
    \ == ';' \n        false\n    elseif txt[txt.length-1] == '<' \n        false\n\
    \    elseif txt[txt.length-1] == '=' \n        false\n    elseif txt[txt.length-1]\
    \ == '>' \n        false\n    elseif txt[txt.length-1] == '?' \n        false\n\
    \    elseif txt[txt.length-1] == '@' \n        false\n    elseif txt[txt.length-1]\
    \ == '[' \n        false\n    elseif txt[txt.length-1] == ']' \n        false\n\
    \    elseif txt[txt.length-1] == '^' \n        false\n    elseif txt[txt.length-1]\
    \ == '_' \n        false\n    elseif txt[txt.length-1] == '`' \n        false\n\
    \    elseif txt[txt.length-1] == '{' \n        false\n    elseif txt[txt.length-1]\
    \ == '|' \n        false\n    elseif txt[txt.length-1] == '}' \n        false\n\
    \    elseif txt[txt.length-1] == '~' \n        false\n    elseif txt[txt.length-1]\
    \ == '%' \n        false\n    elseif txt[txt.length-1] == '&' \n        false\n\
    \    elseif txt[txt.length-1] == '*' \n        false\n    elseif txt[txt.length-1]\
    \ == '+' \n        false\n    elseif txt[txt.length-1] == '-' \n        false\n\
    \    elseif txt[txt.length-1] == '.' \n        false\n    elseif txt[txt.length-1]\
    \ == '/' \n        false\n    elseif txt", "    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.strip()\n\
    \    if txt.size == 0\n        false\n    else\n        txt[txt.size - 1] == \"\
    \ \" || txt[txt.size - 1] == \".\" || txt[txt.size - 1] == \",\"\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    \n    if txt.length == 0 \n        false\n    else\n\
    \        txt[txt.length-1] == ' ' || txt[txt.length-1] == '.' || txt[txt.length-1]\
    \ == '!' || txt[txt.length-1] == '?' || txt[txt.length-1] == '-' || txt[txt.length-1]\
    \ == '_' || txt[txt.length-1] == '*' || txt[txt.length-1] == '+' || txt[txt.length-1]\
    \ == '(' || txt[txt.length-1] == ')' || txt[txt.length-1] == '[' || txt[txt.length-1]\
    \ == ']' || txt[txt.length-1] == '{' || txt[txt.length-1] == '}' || txt[txt.length-1]\
    \ == '\\\\' || txt[txt.length-1] == '^' || txt[txt.length-1] == '$' || txt[txt.length-1]\
    \ == '|' || txt[txt.length-1] == '~' || txt[txt.length-1] == '`' || txt[txt.length-1]\
    \ == '\"' || txt[txt.length-1] == '<' || txt[txt.length-1] == '>' || txt[txt.length-1]\
    \ == '?' || txt[txt.length-1] == '!' || txt[txt.length-1] == '.' || txt[txt.length-1]\
    \ == '?' || txt[txt.length-1] == '-' || txt[txt.length-1] == '_' || txt[txt.length-1]\
    \ == '*' || txt[txt.length-1] == '+' || txt[txt.length-1] == '(' || txt[txt.length-1]\
    \ == ')' || txt[txt.length-1] == '[' || txt[txt.length-1] == ']' || txt[txt.length-1]\
    \ == '{' || txt[txt.length-1] == '}' || txt[txt.length-1] == '\\\\' || txt[txt.length-1]\
    \ == '^' || txt[txt.length-1] == '$' || txt[txt.length-1] == '|' || txt[txt.length-1]\
    \ == '~' || txt[txt.length-1] == '`' || txt[txt.length-1] == '\"' || txt[txt.length-1]\
    \ == '<' || txt[txt.length-1] == '>' || txt[txt.length-1] == '?' || txt[txt.length-1]\
    \ == '!' || txt[txt.length-1] == '.' || txt[txt.length-1] == '?' || txt[txt.length-1]\
    \ == '-' || txt[txt.length-1] == '_' || txt[txt.length-1] == '*' || txt[txt.length-1]\
    \ == '+' || txt[txt.length-1] == '(' || txt[txt.length-1] == ')' || txt[txt.length-1]\
    \ == '[' || txt[txt.length-1] == ']' || txt[txt.length-1] == '{' || txt[txt.length-1]\
    \ == '}' || txt[txt.length-1] == '\\\\' || txt[txt.length-1] == '^' || txt[",
  "    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1].isalpha()\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    if txt.length == 0 \n        false\n    else if txt[txt.length-1]\
    \ == ' ' \n        false\n    else if txt[txt.length-1] == '-' \n        false\n\
    \    else if txt[txt.length-1] == '.' \n        false\n    else if txt[txt.length-1]\
    \ == '?' \n        false\n    else if txt[txt.length-1] == '!' \n        false\n\
    \    else if txt[txt.length-1] == '-' \n        false\n    else if txt[txt.length-1]\
    \ == '_' \n        false\n    else if txt[txt.length-1] == '*' \n        false\n\
    \    else if txt[txt.length-1] == '&' \n        false\n    else if txt[txt.length-1]\
    \ == '%' \n        false\n    else if txt[txt.length-1] == '$' \n        false\n\
    \    else if txt[txt.length-1] == '#' \n        false\n    else if txt[txt.length-1]\
    \ == '^' \n        false\n    else if txt[txt.length-1] == '&' \n        false\n\
    \    else if txt[txt.length-1] == '*' \n        false\n    else if txt[txt.length-1]\
    \ == '-' \n        false\n    else if txt[txt.length-1] == '+' \n        false\n\
    \    else if txt[txt.length-1] == '=' \n        false\n    else if txt[txt.length-1]\
    \ == '<' \n        false\n    else if txt[txt.length-1] == '>' \n        false\n\
    \    else if txt[txt.length-1] == '?' \n        false\n    else if txt[txt.length-1]\
    \ == '!' \n        false\n    else if txt[txt.length-1] == '/' \n        false\n\
    \    else if txt[txt.length-1] == '\\\\' \n        false\n    else if txt[txt.length-1]\
    \ == '|' \n        false\n    else if txt[txt.length-1] == '{' \n        false\n\
    \    else if txt[txt.length-1] == '}' \n        false\n    else if txt[txt.length-1]\
    \ == '[' \n        false\n    else if txt[txt.length-1] == ']' \n        false\n\
    \    else if txt[txt.length-1] == '\"' \n        false\n    else if txt[txt.length-1]\
    \ == '\\'' \n        false\n    else if txt[txt.length-1] == ';' \n        false\n\
    \    else if txt[txt.length-1] == '.' \n        false\n    else if txt[txt.length-1]\
    \ == '", "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    ", "    txt = txt.strip()\n    if txt == \"\"\n        false\n    else\n\
    \        txt.ends_with?(\" \") && txt.ends_with?(\"a\")\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    if txt.length\
    \ == 0 \n        false\n    elseif txt[txt.length - 1] == \" \" \n        false\n\
    \    elseif txt[txt.length - 1] == \"\\n\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\r\" \n        false\n    elseif txt[txt.length - 1] == \"\\t\" \n\
    \        false\n    elseif txt[txt.length - 1] == \" \" \n        false\n    elseif\
    \ txt[txt.length - 1] == \".\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \",\" \n        false\n    elseif txt[txt.length - 1] == \"!\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"?\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \":\" \n        false\n    elseif txt[txt.length - 1] == \";\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"_\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"/\" \n        false\n    elseif txt[txt.length - 1] == \"[\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"]\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"{\" \n        false\n    elseif txt[txt.length - 1] == \"}\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"|\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"\\\\\" \n        false\n    elseif txt[txt.length -\
    \ 1] == \"^\" \n        false\n    elseif txt[txt.length - 1] == \"~\" \n    \
    \    false\n    elseif txt[txt.length - 1] == \"*\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"&\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"<\" \n        false\n    elseif txt[txt.length - 1] == \">\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"=\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"+\" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"|\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"{\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"}\" \n        false\n    elseif txt[txt.length - 1] == \"[\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"]\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"/\" \n        false\n    elseif txt[txt.length - 1] == \"_\" \n  \
    \      false\n    elseif txt", "    if txt.length == 0 \n        false\n    else\n\
    \        if txt[txt.length-1] == \" \" \n            false\n        else\n   \
    \         if txt[txt.length-1] in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n      \
    \          true\n            else\n                false\n        end\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    if txt.length == 0 \n        false\n    else\n  \
    \      txt[txt.length-1] == \" \" || txt[txt.length-1] == \"\\n\" || txt[txt.length-1]\
    \ == \"\\t\" || txt[txt.length-1] == \"\\r\" || txt[txt.length-1] == \"\\f\" ||\
    \ txt[txt.length-1] == \"\\v\" || txt[txt.length-1] == \"\\u00A0\" || txt[txt.length-1]\
    \ == \"\\u00AD\" || txt[txt.length-1] == \"\\u00AD\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.trim()\n    if txt.length == 0 \n     \
    \   false\n    elseif txt[txt.length - 1] == \" \" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"\\n\" \n        false\n    elseif txt[txt.length -\
    \ 1] == \"\\t\" \n        false\n    elseif txt[txt.length - 1] == \"\\r\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\v\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\f\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\e\" \n        false\n    elseif txt[txt.length - 1] == \"\\\"\"\
    \ \n        false\n    elseif txt[txt.length - 1] == \"\\'\" \n        false\n\
    \    elseif txt[txt.length - 1] == \"\\\\\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"%\" \n        false\n    elseif txt[txt.length - 1] == \"&\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"*\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"(\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \")\" \n        false\n    elseif txt[txt.length - 1] == \",\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \".\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"/\" \n        false\n    elseif txt[txt.length - 1] == \"0\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"1\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"2\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"3\" \n        false\n    elseif txt[txt.length - 1] == \"4\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"5\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"6\" \n        false\n    elseif txt[txt.length - 1] == \"7\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"8\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"9\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"-\" \n        false\n    elseif txt[txt.length - 1] == \"+\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"=\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"?\" \n        false\n    elseif txt[txt.length - 1] == \"!\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"@\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"{\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"", "    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1]\
    \ == \" \" \n        false\n    else\n        true\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    Create a function that returns true if the\
    \ last character\n    of a given string is a digit and is not\n    a part of a\
    \ word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    txt = txt.strip()\n    if txt == \"\"\n        return false\n\
    \    else\n        return txt[txt.length - 1].isalpha()\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    if txt.length\
    \ == 0 \n        false\n    else\n        txt[txt.length-1] == ' ' || txt[txt.length-1]\
    \ == '.' || txt[txt.length-1] == '?' || txt[txt.length-1] == '!' || txt[txt.length-1]\
    \ == '-' || txt[txt.length-1] == '_' || txt[txt.length-1] == '/' || txt[txt.length-1]\
    \ == '\\\\' || txt[txt.length-1] == '^' || txt[txt.length-1] == '&' || txt[txt.length-1]\
    \ == '*' || txt[txt.length-1] == '(' || txt[txt.length-1] == ')' || txt[txt.length-1]\
    \ == '[' || txt[txt.length-1] == ']' || txt[txt.length-1] == '{' || txt[txt.length-1]\
    \ == '}' || txt[txt.length-1] == '|' || txt[txt.length-1] == '~' || txt[txt.length-1]\
    \ == '`' || txt[txt.length-1] == '<' || txt[txt.length-1] == '>' || txt[txt.length-1]\
    \ == '?' || txt[txt.length-1] == '!' || txt[txt.length-1] == '-' || txt[txt.length-1]\
    \ == '_' || txt[txt.length-1] == '/' || txt[txt.length-1] == '\\\\' || txt[txt.length-1]\
    \ == '^' || txt[txt.length-1] == '&' || txt[txt.length-1] == '*' || txt[txt.length-1]\
    \ == '(' || txt[txt.length-1] == ')' || txt[txt.length-1] == '[' || txt[txt.length-1]\
    \ == ']' || txt[txt.length-1] == '{' || txt[txt.length-1] == '}' || txt[txt.length-1]\
    \ == '|' || txt[txt.length-1] == '~' || txt[txt.length-1] == '`' || txt[txt.length-1]\
    \ == '<' || txt[txt.length-1] == '>' || txt[txt.length-1] == '?' || txt[txt.length-1]\
    \ == '!' || txt[txt.length-1] == '-' || txt[txt.length-1] == '_' || txt[txt.length-1]\
    \ == '/' || txt[txt.length-1] == '\\\\' || txt[txt.length-1] == '^' || txt[txt.length-1]\
    \ == '&' || txt[txt.length-1] == '*' || txt[txt.length-1] == '(' || txt[txt.length-1]\
    \ == ')' || txt[txt.length-1] == '[' || txt[txt.length-1] == ']' || txt[txt.length-1]\
    \ == '{' || txt[txt.length-1] == '}' || txt[txt.length-1] == '|' || txt[txt.length-1]\
    \ == '~' || txt[txt.length-1] == '`' || txt[txt.length-1] == '<' || txt[txt.length-1]\
    \ == '>' || txt[txt.length", "    txt = txt.trim()\n    if txt.length == 0 \n\
    \        false\n    else\n        txt[txt.length-1] == \" \" || txt[txt.length-1]\
    \ == \".\" || txt[txt.length-1] == \",\" || txt[txt.length-1] == \"?\" || txt[txt.length-1]\
    \ == \"!\" || txt[txt.length-1] == \"-\" || txt[txt.length-1] == \"_\" || txt[txt.length-1]\
    \ == \"/\" || txt[txt.length-1] == \"\\\\\" || txt[txt.length-1] == \"[\" || txt[txt.length-1]\
    \ == \"]\" || txt[txt.length-1] == \"{\" || txt[txt.length-1] == \"}\" || txt[txt.length-1]\
    \ == \"|\" || txt[txt.length-1] == \"~\" || txt[txt.length-1] == \"@\" || txt[txt.length-1]\
    \ == \"#\" || txt[txt.length-1] == \"$\" || txt[txt.length-1] == \"%\" || txt[txt.length-1]\
    \ == \"^\" || txt[txt.length-1] == \"&\" || txt[txt.length-1] == \"*\" || txt[txt.length-1]\
    \ == \"(\"\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Create\
    \ a function that returns true if the last character\n    of a given string is\
    \ a digit, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n\
    \    else\n        txt[txt.length-1] == txt[txt.length-1].to_lowercase()\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns true if the last character\n    of a given string is a number and\
    \ is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    txt = txt.trim()\n    if txt.length\
    \ == 0\n        false\n    else\n        txt[txt.length - 1] == ' ' || txt[txt.length\
    \ - 1] == '.' || txt[txt.length - 1] == ',' || txt[txt.length - 1] == '?' || txt[txt.length\
    \ - 1] == '!' || txt[txt.length - 1] == '-' || txt[txt.length - 1] == '_' || txt[txt.length\
    \ - 1] == '/' || txt[txt.length - 1] == '\\\\' || txt[txt.length - 1] == '(' ||\
    \ txt[txt.length - 1] == ')' || txt[txt.length - 1] == '[' || txt[txt.length -\
    \ 1] == ']' || txt[txt.length - 1] == '{' || txt[txt.length - 1] == '}' || txt[txt.length\
    \ - 1] == '*' || txt[txt.length - 1] == '+' || txt[txt.length - 1] == ','\n  \
    \  end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Create a function\
    \ that returns true if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    txt = txt.trim()\n    if txt.length\
    \ == 0 \n        false\n    else\n        txt[txt.length-1] == \" \" || txt[txt.length-1]\
    \ == \".\" || txt[txt.length-1] == \",\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    ", "    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == \" \" || txt[txt.length-1] == \".\" || txt[txt.length-1] == \",\"\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.strip()\n    if txt.size == 0\n       \
    \ false\n    else\n        txt[end-1] \u2208 ['A'..'Z']\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    \n    if txt.length == 0 \n        false\n    else\n\
    \        txt[txt.length - 1] == ' ' || txt[txt.length - 1] == '.' || txt[txt.length\
    \ - 1] == '?' || txt[txt.length - 1] == '!' || txt[txt.length - 1] == '-' || txt[txt.length\
    \ - 1] == '_' || txt[txt.length - 1] == '*' || txt[txt.length - 1] == '+' || txt[txt.length\
    \ - 1] == '(' || txt[txt.length - 1] == ')' || txt[txt.length - 1] == '[' || txt[txt.length\
    \ - 1] == ']' || txt[txt.length - 1] == '{' || txt[txt.length - 1] == '}' || txt[txt.length\
    \ - 1] == '|' || txt[txt.length - 1] == '\\\\' || txt[txt.length - 1] == '^' ||\
    \ txt[txt.length - 1] == '$' || txt[txt.length - 1] == '&' || txt[txt.length -\
    \ 1] == '*' || txt[txt.length - 1] == '+' || txt[txt.length - 1] == '-' || txt[txt.length\
    \ - 1] == '=' || txt[txt.length - 1] == '<' || txt[txt.length - 1] == '>' || txt[txt.length\
    \ - 1] == '/' || txt[txt.length - 1] == '?' || txt[txt.length - 1] == '!' || txt[txt.length\
    \ - 1] == '.' || txt[txt.length - 1] == '-' || txt[txt.length - 1] == '_' || txt[txt.length\
    \ - 1] == '*' || txt[txt.length - 1] == '+' || txt[txt.length - 1] == '(' || txt[txt.length\
    \ - 1] == ')' || txt[txt.length - 1] == '[' || txt[txt.length - 1] == ']' || txt[txt.length\
    \ - 1] == '{' || txt[txt.length - 1] == '}' || txt[txt.length - 1] == '|' || txt[txt.length\
    \ - 1] == '\\\\' || txt[txt.length - 1] == '^' || txt[txt.length - 1] == '$' ||\
    \ txt[txt.length - 1] == '&' || txt[txt.length - 1] == '*' || txt[txt.length -\
    \ 1] == '+' || txt[txt.length - 1] == '-' || txt[txt.length - 1] == '=' || txt[txt.length\
    \ - 1] == '<' || txt[txt.length - 1] == '>' || txt[txt.length - 1] == '/' || txt[txt.length\
    \ - 1] == '?' || txt[txt.length - 1] == '!' || txt[txt.length - 1] == '.' || txt[txt.length\
    \ - 1] == '-' || txt[txt.length - 1] == '_' || txt[txt.length - 1] == '*' || txt[txt.length\
    \ - 1] == '+' || txt[txt.length - 1] == '(' || txt[txt.length - 1] == ')' || txt[txt.length\
    \ - 1] == '[' || txt[txt.length - 1] == ']' || txt[", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt[txt.length - 1].isalpha()\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
