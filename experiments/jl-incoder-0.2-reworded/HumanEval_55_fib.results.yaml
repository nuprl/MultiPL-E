language: jl
name: HumanEval_55_fib
results:
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n    else \n        return fib(n-2) +\
    \ fib(n-1)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise\nWrite a recursive function named fib_r(n::Int64) that returns\
    \ the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfa340w6d.jl:11\nin expression starting at /tmp/tmpfa340w6d.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else if n == 1\n        1\n    else\n      \
    \  fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ answer the question of how to write this in Julia. Also, the question is about\
    \ Fibonacci numbers, not Fibonacci sequences.\n<|/ c |>\n<| c |>\nI agree, this\
    \ is an answer to the question of how to write this in Julia. Fibonacci numbers\
    \ are a special case of Fibonacci sequences.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, but I thought it would be useful to show how to write this in Julia. Also,\
    \ Julia has `fib` function which does exactly this.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, but I thought it would be useful to show how to write this in Julia.\
    \ Also, Julia has `fib` function which does exactly this.\n<|/ c |>\n<| c |>\n\
    I agree with you, but I thought it would be useful to show how to write this in\
    \ Julia. Also, Julia has `fib` function which does exactly this.\n<|/ c |>\n<|\
    \ a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t\
    @test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) ==\
    \ 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_wczvx5c.jl:12\nin expression starting at\
    \ /tmp/tmp_wczvx5c.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n    else \n        return fib(n-2) +\
    \ fib(n-1)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise: Write a recursive function fib_rec(n::Int64)::Int64 that returns\
    \ the n-th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp58w49lvi.jl:11\nin expression starting at /tmp/tmp58w49lvi.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else if n == 1 \n        1\n    else \n   \
    \     fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n@code_native\
    \ fib(10)\n</cell>\n<text>\nExercise 3\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprjuv1pl5.jl:12\nin expression starting at\
    \ /tmp/tmprjuv1pl5.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise: Write a function that computes the n-th Fibonacci number using memoization.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjhxpux5p.jl:11\nin expression starting at /tmp/tmpjhxpux5p.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbp1sebxg.jl:11\nin expression starting at /tmp/tmpbp1sebxg.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| a tags=julia,fibonacci |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvuly3s7a.jl:15\nin expression starting at\
    \ /tmp/tmpvuly3s7a.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    elseif n == 1\n        1\n    else\n       \
    \ fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a |>\n<| c |>\nThis code does not\
    \ work. `fib(1)` returns `1`, not `0`.\n<|/ c |>\n<| c |>\nThe code works, just\
    \ tested it. The problem was the missing `else` clause.\n<|/ c |>\n<| c |>\nThe\
    \ code works, just tested it. The problem was the missing `else` clause.\n<|/\
    \ c |>\n<| c |>\nThe code works, just tested it. The problem was the missing `else`\
    \ clause.\n<|/ c |>\n<| c |>\nThe code works, just tested it. The problem was\
    \ the missing `else` clause.\n<|/ c |>\n<| a dscore=5 |>\nThe Fibonacci sequence\
    \ is defined as:\n<code>\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610, 987, 1597\n</code>\nThe first two numbers are 0 and 1, and each subsequent\
    \ number is the sum of the two preceding ones:\n<code>\n0, 1, 1, 2, 3, 5, 8, 13,\
    \ 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597\n</code>\nThe first two numbers\
    \ are 0 and 1, and each subsequent number is the sum of the two preceding ones:\n\
    <code>\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597\n\
    </code>\nThe first two numbers are 0 and 1, and each subsequent number is the\
    \ sum of the two preceding ones:\n<code>\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55,\
    \ 89, 144, 233, 377, 610, 987, 1597\n</code>\nThe first two numbers are 0 and\
    \ 1, and each subsequent number is the sum of the two preceding ones:\n<code>\n\
    0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597\n</code>\n\
    The first two numbers are 0 and 1, and each subsequent number is the sum of the\
    \ two preceding ones:\n<code>\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233,\
    \ 377, 610, 987, 1597\n</code>\nThe first two numbers are 0 and 1, and each subsequent\
    \ number is the sum of the two preceding ones:\n<code>\n0, 1, 1, 2, 3, 5, 8, 13,\
    \ 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597\n</code>\nThe first two numbers\
    \ are 0 and 1, and \nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfuyh1z0x.jl:17\nin expression starting at\
    \ /tmp/tmpfuyh1z0x.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    elseif n == 1\n        1\n    else\n       \
    \ fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a |>\n<| c |>\nThis is not an answer\
    \ to the question. He is asking how to implement the Fibonacci sequence in Julia.\n\
    <|/ c |>\n<| c |>\nThe question was how to implement the Fibonacci sequence in\
    \ Julia. He is asking how to implement the Fibonacci sequence in Julia.\n<|/ c\
    \ |>\n<| c |>\nThe question was how to implement the Fibonacci sequence in Julia.\
    \ He is asking how to implement the Fibonacci sequence in Julia.\n<|/ c |>\n<|\
    \ c |>\nThe question was how to implement the Fibonacci sequence in Julia. He\
    \ is asking how to implement the Fibonacci sequence in Julia.\n<|/ c |>\n<| c\
    \ |>\nThe question was how to implement the Fibonacci sequence in Julia. He is\
    \ asking how to implement the Fibonacci sequence in Julia.\n<|/ c |>\n<| a tags=julia,fibonacci\
    \ |>\nThe Fibonacci sequence is defined as:\n<code>\nF(n) = F(n-1) + F(n-2)\n\
    </code>\nwhere F(0) = 0 and F(1) = 1. \nIn Julia, you can implement this as:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsjukwb7p.jl:17\nin expression starting at\
    \ /tmp/tmpsjukwb7p.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n<2 then return n\n    else return fib(n-1)+fib(n-2)\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=julia,fibonacci |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiwdz46y8.jl:10\nin expression starting at /tmp/tmpiwdz46y8.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1 \n        then 1 \n        else fib(n-1) + fib(n-2) \nend\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4tcd7iem.jl:11\nin expression starting at /tmp/tmp4tcd7iem.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1 \n        then 1\n        else fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that computes the n-th Fibonacci number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvdekr06m.jl:11\nin expression starting at /tmp/tmpvdekr06m.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n<2 then return n\n    else return fib(n-1)+fib(n-2)\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a recursive function named fib_r(n::Int64) that returns\
    \ the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphddfrdv5.jl:10\nin expression starting at /tmp/tmphddfrdv5.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    elseif n == 1\n        1\n    else\n       \
    \ fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a |>\n<| c |>\nI like your solution,\
    \ but I wonder why you use an `Int64` instead of `Int`?\n<|/ c |>\n<| c |>\n`Int64`\
    \ is more efficient than `Int` because `Int` uses `Int64` internally and `Int64`\
    \ uses `Int` internally. `Int64` is also more efficient than `Int` because `Int`\
    \ uses `Int64` internally and `Int64` uses `Int` internally.\n<|/ c |>\n<| c |>\n\
    `Int64` is more efficient than `Int` because `Int` uses `Int64` internally and\
    \ `Int64` uses `Int` internally. `Int64` is also more efficient than `Int` because\
    \ `Int` uses `Int64` internally and `Int64` uses `Int` internally.\n<|/ c |>\n\
    <| c |>\n`Int64` is more efficient than `Int` because `Int` uses `Int64` internally\
    \ and `Int64` uses `Int` internally. `Int64` is also more efficient than `Int`\
    \ because `Int` uses `Int64` internally and `Int64` uses `Int` internally.\n<|/\
    \ c |>\n<| c |>\n`Int64` is more efficient than `Int` because `Int` uses `Int64`\
    \ internally and `Int64` uses `Int` internally. `Int64` is also more efficient\
    \ than `Int` because `Int` uses `Int64` internally and `Int64` uses `Int` internally.\n\
    <|/ c |>\n<| a dscore=5 |>\nThe most efficient way to compute Fibonacci numbers\
    \ is to store them in a data structure that supports efficient lookup. For example,\
    \ a hash table (a hash map) can provide O(1) lookup.\n<code>\nfibs = Dict{Int,\
    \ Int}()\nfibs[1] = 1\nfibs[2] = 1\nfibs[n] = fibs[n-1] + fibs[n-2] for n in 1:n\n\
    </code>\n<|/ a tags=fibonacci,julia |>\n<| c |>\nThis is very inefficient, since\
    \ it requires O(n) space to store the numbers. A better solution would be to store\
    \ the numbers in a `Vector` and then use binary search to find the correct index\
    \ to use.\n<|/ c |>\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx82hfjat.jl:17\nin expression starting at\
    \ /tmp/tmpx82hfjat.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else if n == 1 \n        1\n    else \n   \
    \     fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI like\
    \ this solution, but I wonder if there is a way to do this without recursion?\n\
    <|/ c |>\n<| c |>\nI guess you could use a while loop, but I wouldn't recommend\
    \ it for performance reasons.\n<|/ c |>\n<| c |>\nI guess you could use a while\
    \ loop, but I wouldn't recommend it for performance reasons.\n<|/ c |>\n<| c |>\n\
    I guess you could use a while loop, but I wouldn't recommend it for performance\
    \ reasons.\n<|/ c |>\n<| c |>\nI guess you could use a while loop, but I wouldn't\
    \ recommend it for performance reasons.\n<|/ c |>\n<| a tags=julia,fibonacci,recursion\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpus75qa7g.jl:12\nin expression starting at\
    \ /tmp/tmpus75qa7g.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else if n == 1\n        1\n    else\n      \
    \  fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<text>\nExercise\nWrite a function that calculates the n-th Fibonacci\
    \ number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t\
    @test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) ==\
    \ 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51mo_tw6.jl:12\nin expression starting at\
    \ /tmp/tmp51mo_tw6.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1 \n        then 1\n        else fib(n-1) + fib(n-2)\n    end\n\
    end\n</code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\nThis doesn't work. `fib`\
    \ returns `Int64` but `fib(n-1)` returns `Int`.\n<|/ c |>\n<| c |>\nI fixed the\
    \ code. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) ==\
    \ 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo12rh87f.jl:11\nin expression starting at /tmp/tmpo12rh87f.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise\nWrite a function that calculates the n-th Fibonacci number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplf8xqbov.jl:11\nin expression starting at /tmp/tmplf8xqbov.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1\n        1\n    else\n        fib(n-1) + fib(n-2)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the n-th Fibonacci number using recursion.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) ==\
    \ 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe1hc7ckx.jl:16\nin expression starting at\
    \ /tmp/tmpe1hc7ckx.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<text>\n\
    Exercise: Write a recursive function fib_r(n::Int64)::Int64 that returns the nth\
    \ Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyu1kvugf.jl:11\nin expression starting at /tmp/tmpyu1kvugf.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 1\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that computes the n-th Fibonacci number using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxa55nojp.jl:11\nin expression starting at /tmp/tmpxa55nojp.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a function\
    \ that calculates the n-th Fibonacci number using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsamhx9um.jl:15\nin expression starting at\
    \ /tmp/tmpsamhx9um.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a recursive function named fib_r(n::Int64) that returns\
    \ the n-th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaoug3o4s.jl:15\nin expression starting at\
    \ /tmp/tmpaoug3o4s.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 1\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec(n::Int64)::Int64\
    \ which returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5buc7qty.jl:11\nin expression starting at /tmp/tmp5buc7qty.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise: Write a recursive function named fib_r(n::Int64) that returns\
    \ the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2l7fz4m2.jl:11\nin expression starting at /tmp/tmp2l7fz4m2.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else if n == 1 \n        1\n    else \n   \
    \     fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<|\
    \ c |>\nThis code doesn't work. `fib` returns `Int64` but `fib` expects `Int`.\
    \ `fib` should be `fib(::Int64)`.\n<|/ c |>\n<| c |>\nThe code works, I just tested\
    \ it. The problem was that I used `fib` instead of `fib(::Int64)` in the last\
    \ line of the function.\n<|/ c |>\n<| c |>\nYes, I tested it too. `fib` returns\
    \ `Int64` but `fib` expects `Int`. `fib` should be `fib(::Int64)`.\n<|/ c |>\n\
    <| c |>\nI edited the answer to fix the problem you mentioned.\n<|/ c |>\n<| c\
    \ |>\nThe code still doesn't work. `fib` returns `Int64` but `fib` expects `Int`.\
    \ `fib` should be `fib(::Int64)`.\n<|/ c |>\n<| a dscore=3 |>\nThe accepted answer\
    \ does not work for me. \n<code>\njulia> fib(10)\nERROR: MethodError: no method\
    \ matching fib(::Int64)\nClosest candidates are:\n  fib(::Int) at REPL[11]:1\n\
    Stacktrace:\n [1] top-level scope at none:0\n</code>\nI changed it to:\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3y6ro6lg.jl:12\nin expression starting at\
    \ /tmp/tmp3y6ro6lg.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 1\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp19ccb7qd.jl:11\nin expression starting at /tmp/tmp19ccb7qd.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1\n        1\n    else\n        fib(n-1) + fib(n-2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the n-th Fibonacci number using a while loop.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphc58gnry.jl:16\nin expression starting at\
    \ /tmp/tmphc58gnry.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return 1\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the n-th Fibonacci number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3f1lkyoe.jl:11\nin expression starting at /tmp/tmp3f1lkyoe.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that computes the n-th\
    \ Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp17jflzpv.jl:11\nin expression starting at /tmp/tmp17jflzpv.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n    then return 1\n    else return fib(n-1) + fib(n-2)\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=julia,fibonacci |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmqxxds8e.jl:11\nin expression starting at /tmp/tmpmqxxds8e.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n<2 \n        then return n\n        else return fib(n-1)+fib(n-2)\n\
    \    end\nend\n</code>\n<|/ a |>\n<| c |>\nI like your solution, however it would\
    \ be better to use a recursive function instead of a loop. Recursive functions\
    \ are more efficient than loops.\n<|/ c |>\n<| c |>\nI agree with you, however\
    \ I wanted to keep it simple and clear.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ however I wanted to keep it simple and clear.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, however I wanted to keep it simple and clear.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, however I wanted to keep it simple and clear.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl6v4j2kt.jl:11\nin expression starting at /tmp/tmpl6v4j2kt.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that returns the n-th\
    \ Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2uz2923v.jl:11\nin expression starting at /tmp/tmp2uz2923v.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n@code_warntype fib(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the n-th Fibonacci number modulo 1000000007\
    \ (the remainder after dividing by 1000000007).\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn9sroawn.jl:16\nin expression starting at\
    \ /tmp/tmpn9sroawn.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    The @time macro tells Julia to execute the code in the cell and time how long\
    \ it takes to run. Here we see that fib(10) takes about 1.2 seconds to run. Let's\
    \ try it again with @time fib(10) and @time fib(100).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp71zm_0nw.jl:11\nin expression starting at /tmp/tmp71zm_0nw.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n\
    <text>\nExercise: Write a function that returns the n-th Fibonacci number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz8obqljm.jl:11\nin expression starting at /tmp/tmpz8obqljm.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=julia,fibonacci,recursion |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiufebk0t.jl:11\nin expression starting at /tmp/tmpiufebk0t.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_0xjm3tx.jl:11\nin expression starting at /tmp/tmp_0xjm3tx.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1 \n        then 1\n        else fib(n-1) + fib(n-2)\n    end\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp75dcxmwt.jl:11\nin expression starting at /tmp/tmp75dcxmwt.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    elseif n == 1\n        1\n    else\n       \
    \ fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\n\
    This is not the fastest solution. `fib(n)` can be computed as `fib(n-1) + fib(n-2)`\
    \ without recursion.\n<|/ c |>\n<| c |>\nI agree, this is much faster than the\
    \ recursive solution. However I wanted to show how to implement the recursive\
    \ solution in Julia.\n<|/ c |>\n<| c |>\nI agree, this is much faster than the\
    \ recursive solution. However I wanted to show how to implement the recursive\
    \ solution in Julia.\n<|/ c |>\n<| c |>\nI agree, this is much faster than the\
    \ recursive solution. However I wanted to show how to implement the recursive\
    \ solution in Julia.\n<|/ c |>\n<| c |>\nI agree, this is much faster than the\
    \ recursive solution. However I wanted to show how to implement the recursive\
    \ solution in Julia.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2w0m8w06.jl:17\nin expression starting at\
    \ /tmp/tmp2w0m8w06.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n    else \n        return fib(n-1) +\
    \ fib(n-2)\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n\
    <text>\nExercise: Write a recursive function fib_rec that computes the nth Fibonacci\
    \ number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t\
    @test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) ==\
    \ 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphhjx5jgc.jl:11\nin expression starting at /tmp/tmphhjx5jgc.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec(n::Int64)\
    \ that returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptj8u_k3t.jl:15\nin expression starting at\
    \ /tmp/tmptj8u_k3t.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-2) + fib(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return n-th Fibonacci\
    \ number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n  \
    \  21\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsucrvbsq.jl:11\nin expression starting at /tmp/tmpsucrvbsq.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=fibonacci,julia,recursion\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2potceon.jl:11\nin expression starting at /tmp/tmp2potceon.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else if n == 1\n        1\n    else\n      \
    \  fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ fib(10)\n</cell>\n<text>\nExercise: Write a function that calculates the n-th\
    \ Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyshbky3u.jl:12\nin expression starting at\
    \ /tmp/tmpyshbky3u.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n    else \n        return fib(n-1) +\
    \ fib(n-2)\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpruwom00z.jl:11\nin expression starting at /tmp/tmpruwom00z.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| c |>\nThe `fib` function can be written more concisely as `fib(n) = n\
    \ < 2 ? n : fib(n-1) + fib(n-2)`\n<|/ c |>\n<| a tags=julia,fibonacci |>\nI wrote\
    \ a Julia package for Fibonacci numbers, called Fibonacci.jl. It has the following\
    \ features:\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo4yyk8df.jl:11\nin expression starting at /tmp/tmpo4yyk8df.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a recursive\
    \ function fib_rec(n::Int64)::Int64 that returns the n-th Fibonacci number.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9r6arr1r.jl:15\nin expression starting at\
    \ /tmp/tmp9r6arr1r.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1 \n        then 1\n        else fib(n-1) + fib(n-2)\n    end\n\
    end\n</code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\nThanks for your answer!\
    \ I really appreciate it!\n<|/ c |>\n<| c |>\nThis doesn't work for me. `fib`\
    \ returns `ERROR: LoadError: UndefVarError: fib not defined`\n<|/ c |>\n<| c |>\n\
    I guess you forgot to `include` the file containing the `fib` function.\n<|/ c\
    \ |>\n<| c |>\nI did forget to `include` the file containing the `fib` function.\
    \ I just tried it again and it worked. Thanks again!\n<|/ c |>\n<| a |>\nA recursive\
    \ solution:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpglre_mpx.jl:11\nin expression starting at /tmp/tmpglre_mpx.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise\nWrite a function that calculates the n-th Fibonacci number using\
    \ memoization.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjnsqpynm.jl:15\nin expression starting at\
    \ /tmp/tmpjnsqpynm.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=juli\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8m137als.jl:11\nin expression starting at /tmp/tmp8m137als.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 0 \n        error(\"fib: n must be non-negative\")\n    else if\
    \ n == 0 \n        1\n    else if n == 1 \n        1\n    else \n        fib(n\
    \ - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n\
    </cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the nth Fibonacci number modulo some modulus.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41agp_dz.jl:12\nin expression starting at\
    \ /tmp/tmp41agp_dz.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a recursive function named fib_r(n::Int64) that returns the nth Fibonacci\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw5xmer89.jl:16\nin expression starting at\
    \ /tmp/tmpw5xmer89.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.4>\n@time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ recursive function fib_r(n::Int64)::Int64 that returns the n-th Fibonacci number.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj6l8a44q.jl:15\nin expression starting at\
    \ /tmp/tmpj6l8a44q.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1 \n        then 1\n        else fib(n-1) + fib(n-2)\n    end\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not the Fibonacci sequence.\
    \ Fibonacci numbers start at 0 and 1, not 1 and 1.\n<|/ c |>\n<| c |>\nI know,\
    \ I wrote it that way because I wanted to show that you can do recursion in Julia\
    \ without having to use loops. I guess I should have used the word \"sequence\"\
    \ instead of \"number\"\n<|/ c |>\n<| c |>\nI guess I should have used the word\
    \ \"sequence\" instead of \"number\"\n<|/ c |>\n<| c |>\nI guess I should have\
    \ used the word \"sequence\" instead of \"number\"\n<|/ c |>\n<| c |>\nI guess\
    \ I should have used the word \"sequence\" instead of \"number\"\n<|/ c |>\n<|\
    \ a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7hbkjomw.jl:11\nin expression starting at /tmp/tmp7hbkjomw.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return 1\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the n-th Fibonacci number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3f1lkyoe.jl:11\nin expression starting at /tmp/tmp3f1lkyoe.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function named fibonacci\
    \ that returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp46fk0iyi.jl:11\nin expression starting at /tmp/tmp46fk0iyi.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n<2 \n        then return 1\n        else return fib(n-1)+fib(n-2)\n\
    \    end\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\nThis is not the\
    \ most efficient solution. `fib(n)` will call `fib(n-1)` and `fib(n-2)` each time.\
    \ Instead, `fib(n)` should call `fib(n-1)` and `fib(n-2)` only once, store the\
    \ results, and return them each time `fib(n)` is called.\n<|/ c |>\n<| c |>\n\
    The question was about Julia, not Python.\n<|/ c |>\n<| c |>\nThe question was\
    \ about Julia, not Python.\n<|/ c |>\n<| c |>\nThe question was about Julia, not\
    \ Python.\n<|/ c |>\n<| a tags=julia,fibonacci |>\nThe Julia language is designed\
    \ for concise and efficient code. \nThe code below is more efficient than other\
    \ solutions posted here. It uses memoization to speed up the calculation. \n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx284zn4k.jl:11\nin expression starting at /tmp/tmpx284zn4k.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else if n == 1 \n        1\n    else \n   \
    \     fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise: Write a function that computes the n-th\
    \ Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr1ltingi.jl:12\nin expression starting at\
    \ /tmp/tmpr1ltingi.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\n@code_native fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib(1)\n</cell>\n<code language=julia-1.5>\n@code_native fib(8)\n\
    </cell>\n<text>\nExercise 3\nWrite a recursive function fib_rec(n::Int64) which\
    \ returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt02s1rbd.jl:15\nin expression starting at\
    \ /tmp/tmpt02s1rbd.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise\
    \ 1\nWrite a function that returns the n-th Fibonacci number in Julia.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) ==\
    \ 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3s6_zg4e.jl:16\nin expression starting at\
    \ /tmp/tmp3s6_zg4e.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbp1sebxg.jl:11\nin expression starting at /tmp/tmpbp1sebxg.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1 \n        then 1\n        else fib(n-1) + fib(n-2)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a recursive function fib_rec that computes the n-th Fibonacci number.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6jyjjw5c.jl:11\nin expression starting at /tmp/tmp6jyjjw5c.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 0 \n        error(\"fib expects non-negative integer\")\n    else\
    \ if n == 0 \n        1\n    else if n == 1 \n        1\n    else \n        fib(n\
    \ - 1) + fib(n - 2)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that computes\
    \ the factorial of a number. \nThe factorial of a number $n$ is defined as\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) ==\
    \ 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbjgsq63g.jl:12\nin expression starting at\
    \ /tmp/tmpbjgsq63g.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else if n == 1\n        1\n    else\n      \
    \  fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a |>\n<| c |>\nThis is not the Fibonacci\
    \ sequence. Fibonacci numbers grow exponentially and are calculated using the\
    \ formula F(n) = F(n-1) + F(n-2) where F(0) = F(1) = 1 and F(1) = 1. Your code\
    \ does not do this.\n<|/ c |>\n<| c |>\nThe code does exactly what it says it\
    \ does. If you want a Fibonacci sequence then you need to use an exponential growth\
    \ formula. Your code does not do this.\n<|/ c |>\n<| c |>\nThe code does exactly\
    \ what it says it does. If you want a Fibonacci sequence then you need to use\
    \ an exponential growth formula. Your code does not do this.\n<|/ c |>\n<| c |>\n\
    The code does exactly what it says it does. If you want a Fibonacci sequence then\
    \ you need to use an exponential growth formula. Your code does not do this.\n\
    <|/ c |>\n<| c |>\nThe code does exactly what it says it does. If you want a Fibonacci\
    \ sequence then you need to use an exponential growth formula. Your code does\
    \ not do this.\n<|/ c |>\n<| a tags=fibonacci,julia,recursion |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) ==\
    \ 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk_mbqcav.jl:12\nin expression starting at\
    \ /tmp/tmpk_mbqcav.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise: Write a function that computes the n-th Fibonacci number using memoization.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm935oqn6.jl:11\nin expression starting at /tmp/tmpm935oqn6.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to work\
    \ for me. `fib(1)` returns `1` instead of `0`.\n<|/ c |>\n<| c |>\nI tested it\
    \ on Julia 0.6.2 and it works. What Julia version are you using?\n<|/ c |>\n<|\
    \ c |>\nI'm using 0.6.2. I tried it on 0.6.2 and it didn't work. I'm on 0.6.2\
    \ as well. I'm on 0.6.2 on Windows. I wonder if it's a bug in 0.6.2.\n<|/ c |>\n\
    <| c |>\nI tested it on 0.6.2 and it works. What Julia version are you using?\n\
    <|/ c |>\n<| c |>\nI'm using 0.6.2. I tried it on 0.6.2 and it didn't work. I'm\
    \ on 0.6.2 as well. I'm on 0.6.2 on Windows. I wonder if it's a bug in 0.6.2.\n\
    <|/ c |>\n<| a tags=julia |>\nThe accepted answer doesn't work for me. Here's\
    \ a version that does:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps1l_t5jq.jl:11\nin expression starting at /tmp/tmps1l_t5jq.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        fib(n\
    \ - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the n-th Fibonacci\
    \ number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t\
    @test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) ==\
    \ 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptala44y0.jl:11\nin expression starting at /tmp/tmptala44y0.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1\n        1\n    else\n        fib(n-1) + fib(n-2)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a recursive function fib_rec that computes the nth Fibonacci number recursively.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt_n_0tu_.jl:16\nin expression starting at\
    \ /tmp/tmpt_n_0tu_.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<text>\nThe\
    \ Fibonacci sequence is defined by the recurrence relation:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfhcxs8po.jl:11\nin expression starting at /tmp/tmpfhcxs8po.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 then return 1\n    if n == 1 then return 1\n    return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8pc124ma.jl:10\nin expression starting at /tmp/tmp8pc124ma.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\nThis is not the\
    \ most efficient solution, since it calls fib twice for each iteration. An alternative\
    \ would be to store the results in a vector and return the last element of the\
    \ vector.\n<|/ c |>\n<| c |>\nI agree, this is an inefficient solution. However,\
    \ the OP asked for \"a solution that does not use recursion\". My answer was meant\
    \ to be a solution that does not use recursion.\n<|/ c |>\n<| c |>\nI agree, this\
    \ is an inefficient solution. However, the OP asked for \"a solution that does\
    \ not use recursion\". My answer was meant to be a solution that does not use\
    \ recursion.\n<|/ c |>\n<| c |>\nThe OP asked for a solution that does not use\
    \ recursion. My answer was meant to be a solution that does not use recursion.\n\
    <|/ c |>\n<| c |>\nI agree, this is an inefficient solution. However, the OP asked\
    \ for \"a solution that does not use recursion\". My answer was meant to be a\
    \ solution that does not use recursion.\n<|/ c |>\n<| a dscore=5 |>\nA simple\
    \ recursive function would be:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjth87xlt.jl:11\nin expression starting at /tmp/tmpjth87xlt.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1uyhfpps.jl:11\nin expression starting at /tmp/tmp1uyhfpps.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_f2jtm4_.jl:11\nin expression starting at /tmp/tmp_f2jtm4_.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| a tags=julia,fibonacci |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb_ql9h5i.jl:11\nin expression starting at /tmp/tmpb_ql9h5i.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 1\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp19ccb7qd.jl:11\nin expression starting at /tmp/tmp19ccb7qd.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n    then 1\n    else fib(n-2) + fib(n-1)\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/19674544)\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question. He asked how to implement a Fibonacci\
    \ function and I provided a solution. He also asked how to use recursion to implement\
    \ a Fibonacci function. I provided a solution as well as some explanation as to\
    \ how it works. I believe this to be a good answer.\n<|/ c |>\n<| c |>\nI believe\
    \ this does answer the question. He asked how to implement a Fibonacci function\
    \ and I provided a solution. He also asked how to use recursion to implement a\
    \ Fibonacci function. I provided a solution as well as some explanation as to\
    \ how it works. I believe this to be a good answer.\n<|/ c |>\n<| c |>\nI believe\
    \ this does answer the question. He asked how to implement a Fibonacci function\
    \ and I provided a solution. He also asked how to use recursion to implement a\
    \ Fibonacci function. I provided a solution as well as some explanation as to\
    \ how it works. I believe this to be a good answer.\n<|/ c |>\n<| c |>\nI believe\
    \ this does answer the question. He asked how to implement a Fibonacci function\
    \ and I provided a solution. He also asked how to use recursion to implement a\
    \ Fibonacci function. I provided a solution as well as some explanation as to\
    \ how it works. I believe this to be a good answer.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfei7ii9t.jl:11\nin expression starting at /tmp/tmpfei7ii9t.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that computes the n-th Fibonacci number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl0q1awz7.jl:15\nin expression starting at\
    \ /tmp/tmpl0q1awz7.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.4>\n@time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the n-th Fibonacci number using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgopuro1s.jl:11\nin expression starting at /tmp/tmpgopuro1s.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise 2\nWrite a recursive function named fib_r(n::Int64)\
    \ which returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpblotpjes.jl:11\nin expression starting at /tmp/tmpblotpjes.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 0 \n        error(\"Fibonacci number does not exist\")\n    else\
    \ if n == 0 \n        1\n    else if n == 1 \n        1\n    else \n        fib(n\
    \ - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<text>\nExercise\nWrite a function that computes the n-th Fibonacci number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbxzz3m0l.jl:12\nin expression starting at\
    \ /tmp/tmpbxzz3m0l.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else if n == 1 \n        1\n    else \n   \
    \     fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<|\
    \ c |>\nThis is not the fastest solution, since it calls fib(N) twice for each\
    \ recursive call. Also, Julia has tail recursion optimization, so this can be\
    \ done in one pass.\n<|/ c |>\n<| c |>\nI agree, this is slower than the other\
    \ solutions. I guess it depends on how you define \"fastest\".\n<|/ c |>\n<| c\
    \ |>\nI guess it depends on how you define \"fastest\". Fastest in terms of execution\
    \ time, not memory usage.\n<|/ c |>\n<| c |>\nI guess it depends on how you define\
    \ \"fastest\". Fastest in terms of execution time, not memory usage.\n<|/ c |>\n\
    <| c |>\nI guess it depends on how you define \"fastest\". Fastest in terms of\
    \ execution time, not memory usage.\n<|/ c |>\n<| a tags=julia,fibonacci |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq5sdez1i.jl:12\nin expression starting at\
    \ /tmp/tmpq5sdez1i.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return 1\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the nth Fibonacci number in a given\
    \ range.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkmi0ihu7.jl:11\nin expression starting at /tmp/tmpkmi0ihu7.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the n-th Fibonacci number in Julia\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) ==\
    \ 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwc_j9s8_.jl:11\nin expression starting at /tmp/tmpwc_j9s8_.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the n-th Fibonacci number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpunrj0j_o.jl:11\nin expression starting at /tmp/tmpunrj0j_o.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else if n == 1 \n        1\n    else \n   \
    \     fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the n-th Fibonacci number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ue2zpah.jl:12\nin expression starting at\
    \ /tmp/tmp_ue2zpah.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<text>\nThe function fib(n::Int64) is a recursive function which calls\
    \ itself twice in each call. \nThe first call fib(n-1) will take O(n) time because\
    \ of the recursive call. \nThe second call fib(n-2) will take O(n) time because\
    \ of the recursive call. \nThe third call fib(n-3) will take O(n) time because\
    \ of the recursive call. \nThe fourth call fib(n-4) will take O(n) time because\
    \ of the recursive call. \nThe fifth call fib(n-5) will take O(n) time because\
    \ of the recursive call. \nThe sixth call fib(n-6) will take O(n) time because\
    \ of the recursive call. \nThe seventh call fib(n-7) will take O(n) time because\
    \ of the recursive call. \nThe eighth call fib(n-8) will take O(n) time because\
    \ of the recursive call. \nThe ninth call fib(n-9) will take O(n) time because\
    \ of the recursive call. \nThe tenth call fib(n-10) will take O(n) time because\
    \ of the recursive call. \nThe eleventh call fib(n-11) will take O(n) time because\
    \ of the recursive call. \nThe twelfth call fib(n-12) will take O(n) time because\
    \ of the recursive call. \nThe thirteenth call fib(n-13) will take O(n) time because\
    \ of the recursive call. \nThe fourteenth call fib(n-14) will take O(n) time because\
    \ of the recursive call. \nThe fifteenth call fib(n-15) will take O(n) time because\
    \ of the recursive call. \nThe sixteenth call fib(n-16) will take O(n) time because\
    \ of the recursive call. \nThe seventeenth call fib(n-17) will take O(n) time\
    \ because of the recursive call. \nThe eighteenth call fib(n-18) will take O(n)\
    \ time because of the recursive call. \nThe nineteenth call fib(n-19) will take\
    \ O(n) time because of the recursive call. \nThe twentieth call fib(n-20) will\
    \ take O(n) time because of the recursive call. \nThe twenty-first call fib(n-21)\
    \ will take O(n) time because of the recursive call. \nThe twenty-second call\
    \ fib\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6zaxszya.jl:11\nin expression starting at /tmp/tmp6zaxszya.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 0 \n        error(\"Fibonacci number must be positive\")\n    else\
    \ if n == 0 \n        0\n    else if n == 1 \n        1\n    else \n        fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n\
    <text>\nExercise\nWrite a function that computes the n-th Fibonacci number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplobw3qmi.jl:12\nin expression starting at\
    \ /tmp/tmplobw3qmi.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n    else \n        return fib(n-1) +\
    \ fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the n-th Fibonacci number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5nxfpqxt.jl:11\nin expression starting at /tmp/tmp5nxfpqxt.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    The @time macro will give you a rough idea of how long each function call takes.\
    \ In this case, fib(10) took about 1.2 seconds to run. Let's see what happens\
    \ when we call fib with an argument that's too large:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprjxs0fm0.jl:11\nin expression starting at /tmp/tmprjxs0fm0.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 then return 1\n    else if n == 1 then return 1\n    else return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpismtaska.jl:10\nin expression starting at /tmp/tmpismtaska.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,fibonacci,recursion\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3clcj9zr.jl:11\nin expression starting at /tmp/tmp3clcj9zr.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that calculates the\
    \ n-th Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8k0xlxe9.jl:11\nin expression starting at /tmp/tmp8k0xlxe9.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| a dscore=3 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvre68uzg.jl:15\nin expression starting at\
    \ /tmp/tmpvre68uzg.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n<2 then return n\n    else return fib(n-1)+fib(n-2)\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia,fibonacci |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt85v5ebz.jl:10\nin expression starting at /tmp/tmpt85v5ebz.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ n-th Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2k2g3tw5.jl:11\nin expression starting at /tmp/tmp2k2g3tw5.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\nend\n</cell>\n\
    <code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a function\
    \ that calculates the n-th Fibonacci number using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd1dkfpsa.jl:15\nin expression starting at\
    \ /tmp/tmpd1dkfpsa.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return 1\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ n-th Fibonacci number in a list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdtzeydal.jl:11\nin expression starting at /tmp/tmpdtzeydal.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else if n == 1 \n        1\n    else \n   \
    \     fib(n - 1) + fib(n - 2)\nend\n</cell>\n<text>\nFibonacci numbers are a special\
    \ case of factorial numbers. A factorial number $n!$ is defined as the product\
    \ of all positive integers less than or equal to $n$:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpup55v_hj.jl:12\nin expression starting at\
    \ /tmp/tmpup55v_hj.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) ==\
    \ 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppn3_qx1j.jl:15\nin expression starting at\
    \ /tmp/tmppn3_qx1j.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ n-th Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_nu1s118.jl:11\nin expression starting at /tmp/tmp_nu1s118.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe recursive solution\
    \ is very elegant, but it is also very inefficient. Try it on a big enough input,\
    \ and you'll see that it's very slow.\n<|/ c |>\n<| c |>\nI agree with you. But\
    \ the recursive solution is also very elegant and efficient. :)\n<|/ c |>\n<|\
    \ c |>\nI agree, it is very elegant, but it is also very inefficient. Try it on\
    \ a big enough input, and you'll see that it's very slow.\n<|/ c |>\n<| c |>\n\
    I agree with you. But the recursive solution is also very elegant and efficient.\
    \ :)\n<|/ c |>\n<| c |>\nI agree with you. But the recursive solution is also\
    \ very elegant and efficient. :)\n<|/ c |>\n<| a |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkikf7j0m.jl:11\nin expression starting at /tmp/tmpkikf7j0m.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return 1\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise\nWrite a function that computes the n-th Fibonacci number using memoization.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvn2v86q3.jl:11\nin expression starting at /tmp/tmpvn2v86q3.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n\
    </cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \nThe factorial\
    \ of a number $n$ is defined as\n$$\nn! = n  (n-1)  (n-2)  ...  2  1\n$$\nFor\
    \ example, for $n=5$, the factorial is $5! = 5 x 4 x 3 x 2 x 1 = 120$.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) ==\
    \ 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2dj2ss8v.jl:11\nin expression starting at /tmp/tmp2dj2ss8v.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxlq6kmvt.jl:15\nin expression starting at\
    \ /tmp/tmpxlq6kmvt.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fi\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmu7fnk85.jl:11\nin expression starting at /tmp/tmpmu7fnk85.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else if n == 1 \n        1\n    else \n   \
    \     fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<|\
    \ c |>\nThis does not answer the question. OP asked for a solution in Julia, not\
    \ Python.\n<|/ c |>\n<| c |>\nThis answer does not answer the question. OP asked\
    \ for a solution in Julia, not Python.\n<|/ c |>\n<| a tags=julia,fibonacci |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpum9gfuta.jl:12\nin expression starting at\
    \ /tmp/tmpum9gfuta.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n    else \n        return fib(n-1) +\
    \ fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\nThis is not\
    \ the fastest solution. `fib(n)` can be calculated using only `O(1)` memory and\
    \ `O(1)` time.\n<|/ c |>\n<| c |>\nThe fastest solution is `fib(n)` can be calculated\
    \ using only `O(1)` memory and `O(1)` time.\n<|/ c |>\n<| c |>\nThe fastest solution\
    \ is `fib(n)` can be calculated using only `O(1)` memory and `O(1)` time.\n<|/\
    \ c |>\n<| c |>\nThe fastest solution is `fib(n)` can be calculated using only\
    \ `O(1)` memory and `O(1)` time.\n<|/ c |>\n<| c |>\nThe fastest solution is `fib(n)`\
    \ can be calculated using only `O(1)` memory and `O(1)` time.\n<|/ c |>\n<| a\
    \ tags=julia,fibonacci |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpojprcoe7.jl:11\nin expression starting at /tmp/tmpojprcoe7.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the n-th\
    \ Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptqviztqn.jl:11\nin expression starting at /tmp/tmptqviztqn.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        fib(n - 1) + fib(n - 2)\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not an answer to the question. He\
    \ is asking how to implement the Fibonacci sequence in Julia.\n<|/ c |>\n<| c\
    \ |>\nThe question was how to implement the Fibonacci sequence in Julia. He was\
    \ asking how to implement the Fibonacci sequence in Julia.\n<|/ c |>\n<| c |>\n\
    The question was how to implement the Fibonacci sequence in Julia. He was asking\
    \ how to implement the Fibonacci sequence in Julia.\n<|/ c |>\n<| c |>\nThe question\
    \ was how to implement the Fibonacci sequence in Julia. He was asking how to implement\
    \ the Fibonacci sequence in Julia.\n<|/ c |>\n<| c |>\nThe question was how to\
    \ implement the Fibonacci sequence in Julia. He was asking how to implement the\
    \ Fibonacci sequence in Julia.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnmwjk2c8.jl:15\nin expression starting at\
    \ /tmp/tmpnmwjk2c8.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxf88jfzz.jl:11\nin expression starting at /tmp/tmpxf88jfzz.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe Fibonacci sequence is defined by the recurrence\
    \ relation:\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpogv60d88.jl:11\nin expression starting at /tmp/tmpogv60d88.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the\
    \ n-th Fibonacci number using the following formula:\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpexhte68r.jl:11\nin expression starting at /tmp/tmpexhte68r.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    elseif n == 1\n        1\n    else\n       \
    \ fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a tags=julia,fibonacci,recursion\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about how to write recursive\
    \ functions in Julia.\n<|/ c |>\n<| c |>\nThe question was about how to write\
    \ recursive functions in Julia. Your answer doesn't do that. Your answer doesn't\
    \ even use recursion.\n<|/ c |>\n<| c |>\nThe question was about how to write\
    \ recursive functions in Julia. Your answer doesn't do that. Your answer doesn't\
    \ even use recursion.\n<|/ c |>\n<| c |>\nThe question was about how to write\
    \ recursive functions in Julia. Your answer doesn't do that. Your answer doesn't\
    \ even use recursion.\n<|/ c |>\n<| c |>\nThe question was about how to write\
    \ recursive functions in Julia. Your answer doesn't do that. Your answer doesn't\
    \ even use recursion.\n<|/ c |>\n<| a tags=julia,fibonacci,recursion |>\nThe recursive\
    \ solution is very similar to the iterative solution:\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc8fu5dd1.jl:17\nin expression starting at\
    \ /tmp/tmpc8fu5dd1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.0>\n@code_native fib(10)\n\
    </cell>\n<code language=julia-1.0>\n@code_native fib(1)\n</cell>\n<code language=julia-1.0>\n\
    @code_native fib(8)\n</cell>\n<text>\nExercise 3\nWrite a recursive function which\
    \ returns the n-th Fibonacci number using memoization.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd1pfto_3.jl:11\nin expression starting at /tmp/tmpd1pfto_3.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=julia,fibonacci |>\nIn Julia 1.1 you can use the\
    \ Fibonacci function from the Base package:\n<code>\njulia> Base.Fibonacci(10)\n\
    55\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphk2gq9j_.jl:15\nin expression starting at\
    \ /tmp/tmphk2gq9j_.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nThe accepted answer uses recursion and is\
    \ therefore not tail recursive. \nA tail recursive solution is one that does not\
    \ use recursion and is therefore more efficient. \nThe accepted answer uses recursion\
    \ and is therefore not tail recursive. \nA tail recursive solution is one that\
    \ does not use recursion and is therefore more efficient. \nThe accepted answer\
    \ uses recursion and is therefore not tail recursive. \nA tail recursive solution\
    \ is one that does not use recursion and is therefore more efficient. \nThe accepted\
    \ answer uses recursion and is therefore not tail recursive. \nA tail recursive\
    \ solution is one that does not use recursion and is therefore more efficient.\
    \ \nThe accepted answer uses recursion and is therefore not tail recursive. \n\
    A tail recursive solution is one that does not use recursion and is therefore\
    \ more efficient. \nThe accepted answer uses recursion and is therefore not tail\
    \ recursive. \nA tail recursive solution is one that does not use recursion and\
    \ is therefore more efficient. \nThe accepted answer uses recursion and is therefore\
    \ not tail recursive. \nA tail recursive solution is one that does not use recursion\
    \ and is therefore more efficient. \nThe accepted answer uses recursion and is\
    \ therefore not tail recursive. \nA tail recursive solution is one that does not\
    \ use recursion and is therefore more efficient. \nThe accepted answer uses recursion\
    \ and is therefore not tail recursive. \nA tail recursive solution is one that\
    \ does not use recursion and is therefore more efficient. \nThe accepted answer\
    \ uses recursion and is therefore not tail recursive. \nA tail recursive solution\
    \ is one that does not use recursion and is therefore more efficient. \nThe accepted\
    \ answer uses recursion and is therefore not tail recursive. \nA tail recursive\
    \ solution is one that does not use recursion and is therefore more efficient.\
    \ \nThe accepted answer uses recursion and is therefore not tail recursive. \n\
    A tail recursive solution is one that does not use recursion and is therefore\
    \ more efficient. \nThe accepted answer uses recursion and is therefore not tail\
    \ recursive. \nA tail recursive solution is one that does not use recursion and\
    \ is therefore more efficient. \nThe accepted answer uses recursion and is therefore\
    \ not tail recursive. \nA tail recursive solution is one that does not use recursion\
    \ and is therefore more efficient. \nThe accepted answer uses recursion and is\
    \ therefore not tail\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg71cz5zx.jl:15\nin expression starting at\
    \ /tmp/tmpg71cz5zx.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n==0 || n==1 \n        return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) ==\
    \ 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfef7jkh3.jl:15\nin expression starting at\
    \ /tmp/tmpfef7jkh3.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n    else \n        return fib(n-1) +\
    \ fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a recursive function named fib_r(n::Int64) that returns\
    \ the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpho853ih3.jl:11\nin expression starting at /tmp/tmpho853ih3.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        fib(n\
    \ - 1) + fib(n - 2)\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwr9ldomm.jl:11\nin expression starting at /tmp/tmpwr9ldomm.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return n-th\
    \ Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n\
    \    21\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps6iikava.jl:11\nin expression starting at /tmp/tmps6iikava.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 0 \n        error(\"n must be positive\")\n    else if n == 0 \n\
    \        1\n    else if n == 1 \n        1\n    else \n        fib(n-1) + fib(n-2)\n\
    end\n</code>\n<|/ a tags=julia,fibonacci,performance |>\n<| a dscore=3 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpam1hgkqa.jl:12\nin expression starting at\
    \ /tmp/tmpam1hgkqa.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return 1\n    else \n        return fib(n-2) +\
    \ fib(n-1)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise 3\nWrite a Julia function named fib_iter that returns the nth\
    \ Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbi292t4s.jl:11\nin expression starting at /tmp/tmpbi292t4s.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe Fibonacci sequence is defined by the recurrence\
    \ relation:\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpogv60d88.jl:11\nin expression starting at /tmp/tmpogv60d88.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=juli\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8m137als.jl:11\nin expression starting at /tmp/tmp8m137als.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n    then return 1\n    else return fib(n-1) + fib(n-2)\nend\n\
    </code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\nThis does not answer the question.\
    \ OP asked for Julia, not Python.\n<|/ c |>\n<| c |>\nThis is not an answer to\
    \ OP's question. OP asked for Julia, not Python.\n<|/ c |>\n<| c |>\nThe question\
    \ was about Julia, not Python. Julia is very similar to Python.\n<|/ c |>\n<|\
    \ c |>\nThe question was about Julia, not Python. Julia is very similar to Python.\n\
    <|/ c |>\n<| c |>\nThe question was about Julia, not Python. Julia is very similar\
    \ to Python.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbaeytvz4.jl:11\nin expression starting at /tmp/tmpbaeytvz4.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ nth Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqxwijw0a.jl:11\nin expression starting at /tmp/tmpqxwijw0a.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 0 \n        error(\"fib: n must be non-negative\")\n    else if\
    \ n == 0 \n        1\n    else if n == 1 \n        1\n    else \n        fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return n-th Fibonacci\
    \ number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n  \
    \  21\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcfq55ise.jl:12\nin expression starting at\
    \ /tmp/tmpcfq55ise.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 0 \n        error(\"n must be >= 0\")\n    else if n == 0 \n  \
    \      1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fi\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmbvy0jfu.jl:12\nin expression starting at\
    \ /tmp/tmpmbvy0jfu.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 then return 0\n    if n == 1 then return 1\n    return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=juli\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1ul72ta_.jl:10\nin expression starting at /tmp/tmp1ul72ta_.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv7rzqakh.jl:11\nin expression starting at /tmp/tmpv7rzqakh.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t\
    @test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) ==\
    \ 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt9yxghal.jl:15\nin expression starting at\
    \ /tmp/tmpt9yxghal.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprjia8ud_.jl:15\nin expression starting at\
    \ /tmp/tmprjia8ud_.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    elseif n == 1\n        1\n    else\n       \
    \ fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is not\
    \ an answer to the question. An answer should explain what was wrong in the original\
    \ code and how you fixed it.\n<|/ c |>\n<| c |>\nI agree with you, but I believe\
    \ that my answer will help the OP understand why his code doesn't work. He will\
    \ learn something new and will help him to understand why his code doesn't work.\
    \ He will learn something new and will help him to understand why his code doesn't\
    \ work. He will learn something new and will help him to understand why his code\
    \ doesn't work. He will learn something new and will help him to understand why\
    \ his code doesn't work. He will learn something new and will help him to understand\
    \ why his code doesn't work. He will learn something new and will help him to\
    \ understand why his code doesn't work. He will learn something new and will help\
    \ him to understand why his code doesn't work. He will learn something new and\
    \ will help him to understand why his code doesn't work. He will learn something\
    \ new and will help him to understand why his code doesn't work. He will learn\
    \ something new and will help him to understand why his code doesn't work. He\
    \ will learn something new and will help him to understand why his code doesn't\
    \ work. He will learn something new and will help him to understand why his code\
    \ doesn't work. He will learn something new and will help him to understand why\
    \ his code doesn't work. He will learn something new and will help him to understand\
    \ why his code doesn't work. He will learn something new and will help him to\
    \ understand why his code doesn't work. He will learn something new and will help\
    \ him to understand why his code doesn't work. He will learn something new and\
    \ will help him to understand why his code doesn't work. He will learn something\
    \ new and will help him to understand why his code doesn't work. He will learn\
    \ something new and will help him to understand why his code doesn't work. He\
    \ will learn something new and will help him to understand why his code doesn't\
    \ work. He will learn something new and will help him to understand why his code\
    \ doesn't work. He will learn something new and will help him to understand \n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa2826n2u.jl:17\nin expression starting at\
    \ /tmp/tmpa2826n2u.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n    else \n        return fib(n-1) +\
    \ fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n\
    </cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a recursive function fib_rec(n::Int64)::Int64 that returns the n-th Fibonacci\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpag1is5jg.jl:11\nin expression starting at /tmp/tmpag1is5jg.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzpkzn5mp.jl:11\nin expression starting at /tmp/tmpzpkzn5mp.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else if n == 1 \n        1\n    else \n   \
    \     fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.0>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise: Write a function that computes the n-th\
    \ Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpupnreyey.jl:12\nin expression starting at\
    \ /tmp/tmpupnreyey.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n\
    </cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=juli\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiobhgjnd.jl:11\nin expression starting at /tmp/tmpiobhgjnd.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\n\
    I like this solution, but I wonder if there is a way to avoid the recursion. For\
    \ example, `fib(n) = (n <= 2) ? n : fib(n-1) + fib(n-2)` would avoid the recursion.\n\
    <|/ c |>\n<| c |>\nYes, that would work. Although it would be more efficient to\
    \ just use a loop. `fib(n) = (n <= 2) ? n : fib(n-1) + fib(n-2)` would avoid the\
    \ recursion.\n<|/ c |>\n<| c |>\nI agree, that would be more efficient. I was\
    \ just wondering if there was a way to avoid the recursion.\n<|/ c |>\n<| c |>\n\
    I added a recursive solution that avoids the recursion.\n<|/ c |>\n<| a |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp64ovn91j.jl:11\nin expression starting at /tmp/tmp64ovn91j.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n    then return 1\n    else return fib(n-2) + fib(n-1)\nend\n\
    </code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\nThis is not the most efficient\
    \ solution. Recursion is expensive.\n<|/ c |>\n<| c |>\nI agree, this is just\
    \ an example to show how it can be done.\n<|/ c |>\n<| c |>\nI agree, this is\
    \ just an example to show how it can be done.\n<|/ c |>\n<| a dscore=4 |>\nIn\
    \ Julia 1.1 you can use the Fibonacci function from the Base package:\n<code>\n\
    julia> Base.Fibonacci(10)\n55\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a tags=julia,fibonacci\
    \ |>\nIn Julia 1.1 you can use the Fibonacci function from the Base package:\n\
    <code>\njulia> Base.Fibonacci(10)\n55\n</code>\n<|/ a dscore=4 |>\n<| a tags=julia,fibonacci\
    \ |>\nIn Julia 1.1 you can use the Fibonacci function from the Base package:\n\
    <code>\njulia> Base.Fibonacci(10)\n55\n</code>\n<|/ a dscore=4 |>\n<| a tags=julia,fibonacci\
    \ |>\nIn Julia 1.1 you can use the Fibonacci function from the Base package:\n\
    <code>\njulia> Base.Fibonacci(10)\n55\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3\
    \ |>\nIn Julia 1.1 you can use the Fibonacci function from the Base package:\n\
    <code>\njulia> Base.Fibonacci(10)\n55\n</code>\n<|/ a tags=julia,fibonacci |>\n\
    <| a tags=julia,fibonacci |>\nIn Julia 1.1 you can use the Fibonacci function\
    \ from the Base package:\n<code>\njulia> Base.Fibonacci(10)\n55\n</code>\n<|/\
    \ a dscore=3 |>\n<| a tags=julia,fibonacci |>\nIn Julia 1.1 you can use the Fibonacci\
    \ function from the Base package:\n<code>\njulia> Base.Fibonacci(10)\n55\n</code>\n\
    <|/ a dscore=3 |>\n<| a tags=julia,fibonac\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp827dm00o.jl:11\nin expression starting at /tmp/tmp827dm00o.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n    else \n        return fib(n-1) +\
    \ fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the sum of all even Fibonacci\
    \ numbers up to $n$:\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6x59wj69.jl:11\nin expression starting at /tmp/tmp6x59wj69.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n    then return 1\n    else return fib(n-2) + fib(n-1)\nend\n\
    </code>\n<|/ a tags=julia,fibonacci |>\n<| a dscore=2 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp22qk1rge.jl:11\nin expression starting at /tmp/tmp22qk1rge.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 0 \n        error(\"n must be positive\")\n    else if n == 0 \n\
    \        1\n    else if n == 1 \n        1\n    else \n        fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the n-th Fibonacci number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpry21oqsd.jl:12\nin expression starting at\
    \ /tmp/tmpry21oqsd.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a tags=julia |>\n<| a dscore=3 |>\nThe Fibonacci sequence is defined as:\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpker7poe_.jl:15\nin expression starting at\
    \ /tmp/tmpker7poe_.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return n-th Fibonacci\
    \ number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n  \
    \  21\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe56oce3j.jl:11\nin expression starting at /tmp/tmpe56oce3j.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ n-th Fibonacci number using memoization.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj666pl9i.jl:11\nin expression starting at /tmp/tmpj666pl9i.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not an\
    \ answer to the question. He is asking about a recursive solution. Your answer\
    \ does not show how to do that.\n<|/ c |>\n<| c |>\nI added a recursive solution\n\
    <|/ c |>\n<| c |>\nThis is not an answer to the question. He is asking about a\
    \ recursive solution. Your answer does not show how to do that.\n<|/ c |>\n<|\
    \ c |>\nI added a recursive solution\n<|/ c |>\n<| c |>\nThis is not an answer\
    \ to the question. He is asking about a recursive solution. Your answer does not\
    \ show how to do that.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpevj70sd8.jl:11\nin expression starting at /tmp/tmpevj70sd8.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-2) + fib(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the n-th Fibonacci number using a\
    \ while loop.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr2_0owa4.jl:11\nin expression starting at /tmp/tmpr2_0owa4.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1 \n        then 1\n        else fib(n-1) + fib(n-2)\n    end\n\
    end\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a tags=julia,fibonacci |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi0xr9bu6.jl:11\nin expression starting at /tmp/tmpi0xr9bu6.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return n-th\
    \ Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n\
    \    21\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps6iikava.jl:11\nin expression starting at /tmp/tmps6iikava.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\n    end\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nThe recursive solution is very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also very\
    \ elegant, but it is also very inefficient. \nThe iterative solution is also \n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsmpoavp4.jl:16\nin expression starting at\
    \ /tmp/tmpsmpoavp4.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1\n        1\n    else\n        fib(n-2) + fib(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that calculates the n-th Fibonacci number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0r0n5mb4.jl:15\nin expression starting at\
    \ /tmp/tmp0r0n5mb4.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n    then return 1\n    else return fib(n-1) + fib(n-2)\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"Return n-th Fibonacci number.\n    >>>\
    \ fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpthummqdw.jl:11\nin expression starting at /tmp/tmpthummqdw.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n    then return n\n    else return fib(n-2) + fib(n-1)\nend\n\
    </cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\nExercise\n\
    Write a function that calculates the n-th Fibonacci number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo2q09lub.jl:11\nin expression starting at /tmp/tmpo2q09lub.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not an answer\
    \ to the question. He is asking for a recursive solution. He is also asking for\
    \ a solution that is faster than the naive recursive solution. Your answer does\
    \ not provide any solution that is faster than the naive recursive solution. He\
    \ is also asking for a solution that is faster than the naive recursive solution.\
    \ Your answer does not provide any solution that is faster than the naive recursive\
    \ solution.\n<|/ c |>\n<| c |>\nThe question was about how to implement a recursive\
    \ solution. He asked for a recursive solution and I provided one. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution. He also asked\
    \ for a solution that is faster than the naive recursive solution\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6k3_bb3d.jl:11\nin expression starting at /tmp/tmp6k3_bb3d.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| c |>\nThis is not an efficient solution. `fib(n)`\
    \ will call `fib(n-1)` and `fib(n-2)` each time it calls itself. This can be avoided\
    \ by storing the results in a `Vector{Int64}`.\n<|/ c |>\n<| c |>\nI agree with\
    \ you. But the question was about how to implement the algorithm, not about efficiency.\
    \ Anyway, I added a more efficient solution.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, but I thought it would be nice to have both solutions available for people\
    \ who want to implement the algorithm themselves.\n<|/ c |>\n<| c |>\nI added\
    \ a more efficient solution that does not call `fib(n-1)` and `fib(n-2)` each\
    \ time it calls itself.\n<|/ c |>\n<| c |>\nI added a more efficient solution\
    \ that does not call `fib(n-1)` and `fib(n-2)` each time it calls itself.\n<|/\
    \ c |>\n<| a tags=julia,fibonacci |>\nThe most efficient way is to use memoization:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyn1ei6ca.jl:15\nin expression starting at\
    \ /tmp/tmpyn1ei6ca.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else if n == 1\n        1\n    else\n      \
    \  fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.0>\n@code_native\
    \ fib(10)\n</cell>\n<code language=julia-1.0>\n@code_native fib(1)\n</cell>\n\
    <code language=julia-1.0>\n@code_native fib(8)\n</cell>\n<text>\nExercise 3\n\
    Write a function that computes the n-th Fibonacci number using recursion.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) ==\
    \ 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppal7xla3.jl:12\nin expression starting at\
    \ /tmp/tmppal7xla3.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n\
    </cell>\n<text>\nExercise\nWrite a function that calculates the n-th Fibonacci\
    \ number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t\
    @test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) ==\
    \ 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsfq8_p5e.jl:11\nin expression starting at /tmp/tmpsfq8_p5e.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| c |>\nThis code does not work. `fib` returns\
    \ `Int64` but `fib(n-1) + fib(n-2)` returns `Int`.\n<|/ c |>\n<| c |>\nThanks,\
    \ I fixed the code. Now it works.\n<|/ c |>\n<| a dscore=3 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpne3z7ovp.jl:15\nin expression starting at\
    \ /tmp/tmpne3z7ovp.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise: Write a recursive function fib_rec(n::Int64)::Int64 that returns the\
    \ nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t\
    @test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) ==\
    \ 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8cyfguwj.jl:11\nin expression starting at /tmp/tmp8cyfguwj.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a recursive function named fib_r(n::Int64) that returns the nth Fibonacci\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkhiifs7m.jl:16\nin expression starting at\
    \ /tmp/tmpkhiifs7m.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n    else \n        return fib(n-2) +\
    \ fib(n-1)\nend\n</cell>\n<code language=julia-1.1>\n@time fib(10)\n</cell>\n\
    <text>\nExercise: Write a recursive function fib_rec(n::Int64)::Int64 that returns\
    \ the n-th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfd36jg7d.jl:11\nin expression starting at /tmp/tmpfd36jg7d.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the n-th Fibonacci number using the recursive\
    \ formula.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4abz8_t1.jl:11\nin expression starting at /tmp/tmp4abz8_t1.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise 3\nWrite a recursive function named fib_r(n::Int64) that returns\
    \ the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps8oqt_69.jl:15\nin expression starting at\
    \ /tmp/tmps8oqt_69.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\nend\n</cell>\n\
    <code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a recursive\
    \ function fib_rec that computes the n-th Fibonacci number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprwn5ulkm.jl:15\nin expression starting at\
    \ /tmp/tmprwn5ulkm.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        fib(n - 1) + fib(n - 2)\nend\n\
    </cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a function that calculates the n-th Fibonacci number using memoization.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbfcvz0vt.jl:15\nin expression starting at\
    \ /tmp/tmpbfcvz0vt.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n<2 \n        then return n\n        else return fib(n-1)+fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6l8eg52a.jl:11\nin expression starting at /tmp/tmp6l8eg52a.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    elseif n == 1\n        1\n    else\n       \
    \ fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Return\
    \ n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n   \
    \ >>> fib(8)\n    21\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj2tnacg0.jl:17\nin expression starting at\
    \ /tmp/tmpj2tnacg0.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n    else \n        return fib(n-2) +\
    \ fib(n-1)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a Julia function that computes the Fibonacci series\
    \ up to $n$. \nThe function should take $n$ as an argument. \nThe function should\
    \ return the $n$th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu250gjww.jl:11\nin expression starting at /tmp/tmpu250gjww.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n    then 1\n    else fib(n-2) + fib(n-1)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a recursive\
    \ function fib_r(n::Int64)::Int64 that returns the nth Fibonacci number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmszuvwkg.jl:11\nin expression starting at /tmp/tmpmszuvwkg.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the n-th Fibonacci number using memoization.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0chv7n5m.jl:11\nin expression starting at /tmp/tmp0chv7n5m.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t\
    @test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) ==\
    \ 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7uwcidz5.jl:15\nin expression starting at\
    \ /tmp/tmp7uwcidz5.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n\
    <code language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphsvftl39.jl:11\nin expression starting at /tmp/tmphsvftl39.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| a dscore=3 |>\nThe Fibonacci sequence is defined as:\n<code>\nF(n) =\
    \ F(n-1) + F(n-2)\n</code>\nIn Julia, this can be written as:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdzshzsio.jl:11\nin expression starting at /tmp/tmpdzshzsio.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) ==\
    \ 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbccgfrsx.jl:11\nin expression starting at /tmp/tmpbccgfrsx.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise\nWrite a function that calculates the n-th Fibonacci number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk3l74viw.jl:11\nin expression starting at /tmp/tmpk3l74viw.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<text>\nThe Fibonacci sequence is defined by the recurrence\
    \ relation:\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp95i2ldxb.jl:11\nin expression starting at /tmp/tmp95i2ldxb.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) ==\
    \ 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppn3_qx1j.jl:15\nin expression starting at\
    \ /tmp/tmppn3_qx1j.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 then return 1\n    if n == 1 then return 1\n    return fib(n\
    \ - 1) + fib(n - 2)\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,fibonacci\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk0q2yli6.jl:10\nin expression starting at /tmp/tmpk0q2yli6.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the n-th Fibonacci number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplu4r8kpu.jl:11\nin expression starting at /tmp/tmplu4r8kpu.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 0 \n        error(\"fib expects non-negative integer\")\n    else\
    \ if n == 0 \n        1\n    else \n        fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert fib(10) == 55\n@assert fib(0) == 1\n@assert\
    \ fib(8) == 21\n</cell>\n<text>\nExercise: Write a function that returns the n-th\
    \ Fibonacci number modulo m.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphqdj4ojs.jl:12\nin expression starting at\
    \ /tmp/tmphqdj4ojs.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<text>\nExercise\nWrite a recursive function named fib_r(n::Int64) that\
    \ returns the n-th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxk8w3wrc.jl:11\nin expression starting at /tmp/tmpxk8w3wrc.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| a tags=julia,fibonacci |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvuly3s7a.jl:15\nin expression starting at\
    \ /tmp/tmpvuly3s7a.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n<2\n    then return 1\n    else return fib(n-1)+fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the n-th Fibonacci number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxc9p6n4l.jl:11\nin expression starting at /tmp/tmpxc9p6n4l.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ Fibonacci number of the given number $n$, starting from $0$.\nusing Test\n\n\
    @testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt1bcmaz5.jl:11\nin expression starting at /tmp/tmpt1bcmaz5.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\n    end\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not the most efficient solution,\
    \ since it requires O(n) space to store the results. A more efficient solution\
    \ would use an array. Also, `fib(n-1) + fib(n-2)` can be replaced with `fib(n-1)\
    \ + fib(n-2)`.\n<|/ c |>\n<| c |>\nThe question was about how to implement the\
    \ Fibonacci function in Julia. Your solution does not use any arrays. Also, your\
    \ solution does not use recursion.\n<|/ c |>\n<| c |>\nThe question was about\
    \ how to implement the Fibonacci function in Julia. Your solution does not use\
    \ any arrays. Also, your solution does not use recursion.\n<|/ c |>\n<| c |>\n\
    The question was about how to implement the Fibonacci function in Julia. Your\
    \ solution does not use any arrays. Also, your solution does not use recursion.\n\
    <|/ c |>\n<| c |>\nThe question was about how to implement the Fibonacci function\
    \ in Julia. Your solution does not use any arrays. Also, your solution does not\
    \ use recursion.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9xfs78ds.jl:16\nin expression starting at\
    \ /tmp/tmp9xfs78ds.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n<2 then return n\n    else return fib(n-1)+fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that calculates the\
    \ n-th Fibonacci number using memoization.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv32ww8o_.jl:10\nin expression starting at /tmp/tmpv32ww8o_.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=julia,fibonacci |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdbv5do34.jl:15\nin expression starting at\
    \ /tmp/tmpdbv5do34.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-2) + fib(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise: Write a recursive function fib_rec that returns the n-th Fibonacci number.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvx53d5i9.jl:11\nin expression starting at /tmp/tmpvx53d5i9.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\nExercise 3\nWrite a recursive\
    \ function named fib_r(n::Int64) that returns the nth Fibonacci number.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) ==\
    \ 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk9hs5a8p.jl:11\nin expression starting at /tmp/tmpk9hs5a8p.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| c |>\nThis is not the most efficient solution.\
    \ `fib(n)` can be calculated with `fib(n-1)` and `fib(n-2)` only once.\n<|/ c\
    \ |>\n<| c |>\nI agree, this is just an example to show how to implement the Fibonacci\
    \ function with recursion.\n<|/ c |>\n<| c |>\nI agree, this is just an example\
    \ to show how to implement the Fibonacci function with recursion.\n<|/ c |>\n\
    <| a dscore=3 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t\
    @test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) ==\
    \ 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuuw4qqny.jl:15\nin expression starting at\
    \ /tmp/tmpuuw4qqny.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise: Write a recursive function fib_rec(n::Int64)::Int64 that returns the\
    \ n-th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t\
    @test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) ==\
    \ 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfy34vp55.jl:11\nin expression starting at /tmp/tmpfy34vp55.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=fibonacci,julia |>\nI wrote\
    \ a package for Fibonacci numbers in Julia. \n<code>\nusing Fibonacci\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp43c06o8q.jl:11\nin expression starting at /tmp/tmp43c06o8q.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n    else \n        return fib(n-1) +\
    \ fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) ==\
    \ 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_xmjsta4.jl:11\nin expression starting at /tmp/tmp_xmjsta4.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a recursive\
    \ function fib_r(n::Int64) that returns the nth Fibonacci number.\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv5k4gw8l.jl:11\nin expression starting at /tmp/tmpv5k4gw8l.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| c |>\nThis is not the most efficient way to\
    \ calculate Fibonacci numbers. It is O(n^2) in complexity. Here is a better way:\
    \ https://stackoverflow.com/a/46634829/12695027\n<|/ c |>\n<| a tags=julia,fibonacci\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj6yqbr9i.jl:15\nin expression starting at\
    \ /tmp/tmpj6yqbr9i.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<text>\nThe Fibonacci sequence is defined\
    \ by the recurrence relation:\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvx9yg9xg.jl:11\nin expression starting at /tmp/tmpvx9yg9xg.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n    else \n        return fib(n-2) +\
    \ fib(n-1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpplf4fs4r.jl:11\nin expression starting at /tmp/tmpplf4fs4r.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n    then return 1\n    else return fib(n-2) + fib(n-1)\nend\n\
    </code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\nThis does not answer the question.\
    \ The question is asking how to implement the Fibonacci function using recursion.\n\
    <|/ c |>\n<| c |>\nThe question was how to implement the Fibonacci function using\
    \ recursion. My answer does exactly that. Did you read the question?\n<|/ c |>\n\
    <| c |>\nThe question is asking how to implement the Fibonacci function using\
    \ recursion. Your answer does not do that. Your answer does not use recursion.\n\
    <|/ c |>\n<| c |>\nThe question was how to implement the Fibonacci function using\
    \ recursion. My answer does exactly that. Did you read the question?\n<|/ c |>\n\
    <| c |>\nThe question was how to implement the Fibonacci function using recursion.\
    \ My answer does exactly that. Did you read the question?\n<|/ c |>\n<| a tags=julia,fibonacci\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfotktw7j.jl:11\nin expression starting at /tmp/tmpfotktw7j.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1 \n        then 1 \n        else fib(n-1) + fib(n-2) \nend\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nIn Julia 1.1, you can use the Fibonacci\
    \ function from the Itertools package:\n<code>\nusing Itertools\nfibonacci(10)\n\
    </code>\n<|/ a tags=julia,fibonacci |>\n<| a tags=julia,fibonacci |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphwfi156z.jl:11\nin expression starting at /tmp/tmphwfi156z.jl:11\n"
  stdout: ''
