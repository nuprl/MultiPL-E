language: jl
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return Vector{String}()\n\
    \    \n    words = Vector{String}()\n    \n    for word in split(s)\n        if\
    \ length(word) == n\n            push!(words, word)\n        end\n    end\n  \
    \  \n    return words\nend\n</cell>\n<code language=julia-1.5>\nselect_words(\"\
    Mary had a little lamb\", 4)\n</cell>\n<code language=julia-1.5>\nselect_words(\"\
    Mary had a little lamb\", 3)\n</cell>\n<code language=julia-1.5>\nselect_words(\"\
    simple white space\", 2)\n</cell>\n<code language=julia-1.5>\nselect_words(\"\
    Hello world\", 4)\n</cell>\n<code language=julia-1.5>\nselect_words(\"Uncle sam\"\
    , 3)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of words\
    \ and returns the same vector, except with all the words reversed.\nExamples:\n\
    >>> reverse([\"hello\", \"world\"])\n[\"olleh\", \"dlrow\"]\n>>> reverse([\"hello\"\
    , \"world\"])\n[\"dlrow\", \"olleh\"]\n>>> reverse([\"hello\", \"world\"])\n[\"\
    dlrow\", \"olleh\"]\n>>> reverse([\"hello\", \"world\"])\n[\"dlrow\", \"olleh\"\
    ]\n>>> reverse([\"hello\", \"world\"])\n[\"dlrow\", \"olleh\"]\n>>> reverse([\"\
    hello\", \"world\"])\n[\"dlrow\", \"olleh\"]\n>>> reverse([\"hello\", \"world\"\
    ])\n[\"dlrow\", \"olleh\"]\n>>> reverse([\"hello\", \"world\"])\n[\"dlrow\", \"\
    olleh\"]\n>>> reverse([\"hello\", \"world\"])\n[\"dlrow\", \"olleh\"]\n>>> reverse([\"\
    hello\", \"world\"])\n[\"dlrow\", \"olleh\"]\n>>> reverse([\"hello\", \"world\"\
    ])\n[\"dlrow\", \"olleh\"]\n>>> reverse([\"hello\", \"world\"])\n[\"dlrow\", \"\
    olleh\"]\n>>> reverse([\"hello\", \"world\"])\n[\"dlrow\", \"olleh\"]\n>>> reverse([\"\
    hello\", \"world\"])\n[\"dlrow\", \"olleh\"]\n>>> reverse([\"hello\", \"world\"\
    ])\n[\"dlrow\", \"olleh\"]\n>>> reverse([\"hello\", \"world\"])\n[\"dlrow\", \"\
    olleh\"]\n>>> reverse([\"hello\", \"world\"])\n[\"dlrow\", \"olleh\"]\n>>> reverse([\"\
    hello\", \"world\"])\n[\"dlrow\", \"olleh\"]\n>>> reverse([\"hello\", \"world\"\
    ])\n[\"dlrow\", \"olleh\"]\n>>> reverse([\"hello\", \"world\"])\n\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpatah4sku.jl:32\nin expression starting at\
    \ /tmp/tmpatah4sku.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return Vector{String}()\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9folzusw.jl:1\nin expression starting at /tmp/tmp9folzusw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return Vector{String}()\n\
    \    \n    letters = Vector{String}([])\n    \n    for letter in s\n        if\
    \ letter in \"aeiou\"\n            push!(letters, letter)\n        end\n    end\n\
    \    \n    letters = letters[2:end]\n    \n    letters = letters[findall(x ->\
    \ x in letters, letters)]\n    \n    letters = letters[findall(x -> x in letters,\
    \ letters)]\n    \n    letters = letters[findall(x -> x in letters, letters)]\n\
    \    \n    letters = letters[findall(x -> x in letters, letters)]\n    \n    letters\
    \ = letters[findall(x -> x in letters, letters)]\n    \n    letters = letters[findall(x\
    \ -> x in letters, letters)]\n    \n    letters = letters[findall(x -> x in letters,\
    \ letters)]\n    \n    letters = letters[findall(x -> x in letters, letters)]\n\
    \    \n    letters = letters[findall(x -> x in letters, letters)]\n    \n    letters\
    \ = letters[findall(x -> x in letters, letters)]\n    \n    letters = letters[findall(x\
    \ -> x in letters, letters)]\n    \n    letters = letters[findall(x -> x in letters,\
    \ letters)]\n    \n    letters = letters[findall(x -> x in letters, letters)]\n\
    \    \n    letters = letters[findall(x -> x in letters, letters)]\n    \n    letters\
    \ = letters[findall(x -> x in letters, letters)]\n    \n    letters = letters[findall(x\
    \ -> x in letters, letters)]\n    \n    letters = letters[findall(x -> x in letters,\
    \ letters)]\n    \n    letters = letters[findall(x -> x in letters, letters)]\n\
    \    \n    letters = letters[findall(x -> x in letters, letters)]\n    \n    letters\
    \ = letters[findall(x -> x in letters, letters)]\n    \n    letters = letters[findall(x\
    \ -> x in letters, letters)]\n    \n    letters = letters[findall(x -> x in letters,\
    \ letters)]\n    \n    letters = letters[findall(x -> x in letters, letters)]\n\
    \    \n    letters = letters[findall(x -> x in letters, letters)]\n    \n    letters\
    \ = letters[findall(x -> x in letters, letters)]\n    \n    letters = letters[findall(x\
    \ -> x in letters, letters)]\n    \n    letters = letters[findall(x -> x in letters,\
    \ letters)]\n    \n    letters = letters[findall(x -> x in letters, letters)]\n\
    \    \n    letters = \nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zrgf37q.jl:1\nin expression starting at /tmp/tmp0zrgf37q.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return Vector{String}()\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9folzusw.jl:1\nin expression starting at /tmp/tmp9folzusw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return Vector{String}()\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9folzusw.jl:1\nin expression starting at /tmp/tmp9folzusw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return Vector{String}()\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9folzusw.jl:1\nin expression starting at /tmp/tmp9folzusw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return Vector{String}()\n\
    \    \n    words = split(s)\n    \n    counts = Dict{String, Int64}()\n    for\
    \ word in words\n        counts[word] = get(counts, word, 0) + 1\n    end\n  \
    \  \n    selected = Vector{String}()\n    for word, count in counts\n        if\
    \ count == n\n            push!(selected, word)\n        end\n    end\n    \n\
    \    return selected\nend\n</cell>\n<text>\nProblem 3\nImplement the function\
    \ count_vowels(s) that takes in a string s and returns the number of vowels in\
    \ s.\nExamples:\n>>> count_vowels(\"Hello world\")\n2\n>>> count_vowels(\"Hello\
    \ world!\")\n0\n>>> count_vowels(\"Mary had a little lamb\")\n3\n>>> count_vowels(\"\
    Mary had a little lamb\")\n3\n>>> count_vowels(\"simple white space\")\n0\n>>>\
    \ count_vowels(\"Hello world\")\n2\n>>> count_vowels(\"Uncle sam\")\n1\n>>> count_vowels(\"\
    Uncle sam\")\n1\n>>> count_vowels(\"Uncle sam\")\n1\n>>> count_vowels(\"Uncle\
    \ sam\")\n1\n>>> count_vowels(\"Uncle sam\")\n1\n>>> count_vowels(\"Uncle sam\"\
    )\n1\n>>> count_vowels(\"Uncle sam\")\n1\n>>> count_vowels(\"Uncle sam\")\n1\n\
    >>> count_vowels(\"Uncle sam\")\n1\n>>> count_vowels(\"Uncle sam\")\n1\n>>> count_vowels(\"\
    Uncle sam\")\n1\n>>> count_vowels(\"Uncle sam\")\n1\n>>> count_vowels(\"Uncle\
    \ sam\")\n1\n>>> count_vowels(\"Uncle sam\")\n1\n>>> count_vowels(\"Uncle sam\"\
    )\n1\n>>> count_vowels(\"Uncle sam\")\n1\n>>> count_vowels(\"Uncle sam\")\n1\n\
    >>> count_vowels(\"Uncle sam\")\n1\n>>> count_vowels(\"Uncle sam\")\n1\n>>> count_vowels(\"\
    Uncle sam\")\n1\n>>> count_vowels(\"Uncle sam\")\n1\n>>> count_vowels(\"Uncle\
    \ sam\")\n1\n>>> count_vowels(\"Uncle sam\")\n1\n>>> count_vowels(\"Uncle sam\"\
    )\n1\n>>> count_vowels(\"Uncle sam\")\n1\n>>> count_vowels(\"Uncle sam\")\n1\n\
    >>> count_vowels(\"Uncle sam\")\n1\n>>> count_vowels(\"Uncle sam\")\n1\n>>> count_vowels(\"\
    Uncle sam\")\n1\n>>> count_vowels(\"Uncle sam\")\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr1btxu9q.jl:30\nin expression starting at\
    \ /tmp/tmpr1btxu9q.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return Vector{String}()\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9folzusw.jl:1\nin expression starting at /tmp/tmp9folzusw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return Vector{String}()\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9folzusw.jl:1\nin expression starting at /tmp/tmp9folzusw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return Vector{String}()\n\
    \    \n    letters = split(s)\n    \n    letters = letters[2:end]\n    \n    letters\
    \ = letters[letters..]\n    \n    letters = letters[letters..]\n    \n    letters\
    \ = letters[letters..]\n    \n    letters = letters[letters..]\n    \n    letters\
    \ = letters[letters..]\n    \n    letters = letters[letters..]\n    \n    letters\
    \ = letters[letters..]\n    \n    letters = letters[letters..]\n    \n    letters\
    \ = letters[letters..]\n    \n    letters = letters[letters..]\n    \n    letters\
    \ = letters[letters..]\n    \n    letters = letters[letters..]\n    \n    letters\
    \ = letters[letters..]\n    \n    letters = letters[letters..]\n    \n    letters\
    \ = letters[letters..]\n    \n    letters = letters[letters..]\n    \n    letters\
    \ = letters[letters..]\n    \n    letters = letters[letters..]\n    \n    letters\
    \ = letters[letters..]\n    \n    letters = letters[letters..]\n    \n    letters\
    \ = letters[letters..]\n    \n    letters = letters[letters..]\n    \n    letters\
    \ = letters[letters..]\n    \n    letters = letters[letters..]\n    \n    letters\
    \ = letters[letters..]\n    \n    letters = letters[letters..]\n    \n    letters\
    \ = letters[letters..]\n    \n    letters = letters[letters..]\n    \n    letters\
    \ = letters[letters..]\n    \n    letters = letters[letters..]\n    \n    letters\
    \ = letters[letters..]\n    \n    letters = letters[letters..]\n    \n    letters\
    \ = letters[letters..]\n    \n    letters = letters[letters..]\n    \n    letters\
    \ = letters[letters..]\n    \n    letters = letters[letters..]\n    \n    letters\
    \ = letters[letters..]\n    \n    letters = letters[letters..]\n    \n    letters\
    \ = letters[letters..]\n    \n    letters = letters[letters..]\n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp81cxa74w.jl:26\nin expression starting at /tmp/tmp81cxa74w.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return Vector{String}()\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9folzusw.jl:1\nin expression starting at /tmp/tmp9folzusw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return Vector{String}()\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9folzusw.jl:1\nin expression starting at /tmp/tmp9folzusw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return Vector{String}()\n\
    \    \n    words = Vector{String}()\n    \n    for w in words\n        if length(findall(w\
    \ == consonants(w), s)) == n\n            push!(words, w)\n        end\n    end\n\
    \    \n    return words\nend\n</cell>\n<text>\nProblem 7\nImplement the function\
    \ count_vowels(s) that returns the number of vowels \n    in s.\n    Examples:\n\
    \    >>> count_vowels(\"Hello world\")\n    2\n    >>> count_vowels(\"Mary had\
    \ a little lamb\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5j_21975.jl:32\nin expression starting at\
    \ /tmp/tmp5j_21975.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return Vector{String}()\n\
    \    \n    words = split(s)\n    \n    word_counts = Dict{String, Int64}()\n \
    \   for word in words\n        word_counts[word] = get(word_counts, word, 0) +\
    \ 1\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=x->x)\n    \n    selected_words = Vector{String}()\n    \n    for word_count\
    \ in sorted_word_counts\n        if word_count == n\n            push!(selected_words,\
    \ word)\n        end\n    end\n    \n    return selected_words\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels contained in the string.\nExamples:\n>>> count_vowels(\"Hello world\"\
    )\n2\n>>> count_vowels(\"Mary had a little lamb\")\n2\n>>> count_vowels(\"Hello\
    \ world\")\n2\n>>> count_vowels(\"Uncle sam\")\n1\n>>> count_vowels(\"\")\n0\n\
    >>> count_vowels(\"Mary had a little lamb\")\n2\n>>> count_vowels(\"Hello world\"\
    )\n2\n>>> count_vowels(\"Uncle sam\")\n1\n>>> count_vowels(\"\")\n0\n>>> count_vowels(\"\
    Mary had a little lamb\")\n2\n>>> count_vowels(\"Hello world\")\n2\n>>> count_vowels(\"\
    Uncle sam\")\n1\n>>> count_vowels(\"\")\n0\n>>> count_vowels(\"Mary had a little\
    \ lamb\")\n2\n>>> count_vowels(\"Hello world\")\n2\n>>> count_vowels(\"Uncle sam\"\
    )\n1\n>>> count_vowels(\"\")\n0\n>>> count_vowels(\"Mary had a little lamb\")\n\
    2\n>>> count_vowels(\"Hello world\")\n2\n>>> count_vowels(\"Uncle sam\")\n1\n\
    >>> count_vowels(\"\")\n0\n>>> count_vowels(\"Mary had a little lamb\")\n2\n>>>\
    \ count_vowels(\"Hello world\")\n2\n>>> count_vowels(\"Uncle sam\")\n1\n>>> count_vowels(\"\
    \")\n0\n>>> count_vowels(\"Mary had a little lamb\")\n2\n>>> count_vowels(\"Hello\
    \ world\")\n2\n>>> count_vowels(\"Uncle sam\")\n1\n>>> count_vowels(\"\")\n0\n\
    >>> count_vowels(\"Mary had a little lamb\")\n2\n>>> count_vowels(\"Hello world\"\
    )\n2\n>>> count_vowels(\"Uncle sam\")\n1\n>>> count_vowels(\"\")\n0\n>>> count_vowels(\"\
    Mary had a little lamb\")\n2\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwvag3w6k.jl:41\nin expression starting at\
    \ /tmp/tmpwvag3w6k.jl:41\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return Vector{String}()\n\
    \    \n    words = Vector{String}()\n    \n    for w in words\n        if length(findall(w,s))\
    \ == n\n            push!(words,w)\n        end\n    end\n    \n    return words\n\
    end\n</cell>\n<code language=julia-1.5>\nselect_words(\"Mary had a little lamb\"\
    , 4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and a natural number n and returns a vector of strings that contains exactly\
    \ n vowels.\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq0af1igc.jl:32\nin expression starting at\
    \ /tmp/tmpq0af1igc.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return Vector{String}()\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9folzusw.jl:1\nin expression starting at /tmp/tmp9folzusw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return Vector{String}()\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9folzusw.jl:1\nin expression starting at /tmp/tmp9folzusw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return Vector{String}()\n\
    \    \n    vowels = \"AEIOUaeiou\"\n    \n    words = []\n    \n    for i in 1:length(s)\n\
    \        if vowels.contains(s[i])\n            words.append(s[i])\n        end\n\
    \    end\n    \n    \n    \n    \n    return words\nend\n</cell>\n<text>\nQuestion\
    \ 4\nImplement the function count_vowels(s) that takes in a string and returns\
    \ the number of vowels \n    in s.\n    Note: You may assume the string contains\
    \ only letters and spaces.\n    Examples:\n    >>> count_vowels(\"Mary had a little\
    \ lamb\")\n    2\n    >>> count_vowels(\"Hello world\")\n    0\n    >>> count_vowels(\"\
    Uncle sam\")\n    2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkixat0ip.jl:37\nin expression starting at\
    \ /tmp/tmpkixat0ip.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return Vector{String}()\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9folzusw.jl:1\nin expression starting at /tmp/tmp9folzusw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return Vector{String}()\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9folzusw.jl:1\nin expression starting at /tmp/tmp9folzusw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return Vector{String}()\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9folzusw.jl:1\nin expression starting at /tmp/tmp9folzusw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzzkbzt6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzzkbzt6.jl:1\n\
    in expression starting at /tmp/tmpjzzkbzt6.jl:1\n"
  stdout: ''
