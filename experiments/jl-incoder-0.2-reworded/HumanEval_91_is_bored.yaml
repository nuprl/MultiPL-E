name: HumanEval_91_is_bored
language: jl
prompt: "\"\"\"\n    You'll be given a string of words, and your task is to count\
  \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
  \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
  \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The\
  \ sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
  Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
  I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
  \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
  You and I are going for a walk\") == 0)\nend\n"
completions: ["    if is_bored(S,0)==1 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.3>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    \n    boredoms = 0 \n    \n    for word in S.split(\" \"):\n\
    \        if word.startswith(\"I\"):\n            boredoms += 1\n    \n    return\
    \ boredoms\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ is_bored_string(S::String) which takes in a string and returns the number of\
    \ boredoms in the string.", "    if is_bored(S) == 0 \n        error(\"is_bored\
    \ expects a string\")\n    end\n    \n    boredom = false\n    for word in split(S,\
    \ \" \")\n        if word == \"I\"\n            boredom = true\n        end\n\
    \    end\n    return boredom ? 1 : 0\nend\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\n\
    Write a function that counts the number of times each word appears in a string.",
  "    if is_bored(S,0)==1\n    else \n        if is_bored(S,1)==1\n        else \n\
    \            if is_bored(S,2)==1\n            else \n                if is_bored(S,3)==1\n\
    \                else \n                    if is_bored(S,4)==1\n            \
    \        else \n                        if is_bored(S,5)==1\n                \
    \        else \n                            if is_bored(S,6)==1\n            \
    \                else \n                                if is_bored(S,7)==1\n\
    \                                else \n                                    if\
    \ is_bored(S,8)==1\n                                    else \n              \
    \                          if is_bored(S,9)==1\n                             \
    \           else \n                                            if is_bored(S,10)==1\n\
    \                                            else \n                         \
    \                       if is_bored(S,11)==1\n                               \
    \                 else \n                                                    if\
    \ is_bored(S,12)==1\n                                                    else\
    \ \n                                                        if is_bored(S,13)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,14)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,15)==1\n      \
    \                                                          else \n           \
    \                                                         if is_bored(S,16)==1\n\
    \                                                                    else \n \
    \                                                       if is_bored(S,17)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,18)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,19)==1\n      \
    \                                                          else \n           \
    \                                                         if is_bored(S,20)==1\n\
    \                                                                    else \n \
    \                                                       if is_bored(S,21)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,22)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,23)==1\n      \
    \                                                          else \n           \
    \                                                         if is_bored(S,24)==1\n\
    \                                                                    else \n \
    \                                                       if is_bored(S,25)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,26)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,27)==1\n      \
    \                                                          else \n           \
    \                                                         if is_bored(S,28)==1\n\
    \                                                                    else \n \
    \                                                       if is_bored(S,29)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,30)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,31)==1\n      \
    \                                                          else \n           \
    \                                                         if is_bored(S,32)==1\n\
    \                                                                    else \n \
    \                                                       if is_bored(S,33)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,34)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,35)==1\n      \
    \                                                          else \n           \
    \                                                         if is_", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S, 0)==0\
    \ \n    else \n        return is_bored(S, 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    if is_bored(S,0)==0 \n    then return 0 \n    else return 1 \n\
    \    end \nend \n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in it.", "    if is_bored(S,0,0)\
    \ == 0 \n    else \n        return is_bored(S,0,0) - 1\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.4>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of boredoms \n    in the string.", "    \n    boredoms = sum(map(is_bored, S.split(\"\
    .\")))\n    boredoms += sum(map(is_bored, S.split(\"!\")))\n    boredoms += sum(map(is_bored,\
    \ S.split(\"?\")))\n    \n    return boredoms\nend\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that counts the number of boredoms in a string.", "    if is_bored(S)\
    \ == 0 then \n        return 0 \n    else \n        return 1 \nend \n\"\"\"\n\
    \    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0\n\
    \    else \n        boredoms(S,0)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ is_bored(S,0)==0 \n    else \n        boredom(S,0)\n    end\nend\n\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S,\
    \ 0)\n    else \n        boredom(S, 0)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function is_bored(S::String, N::Int64) which returns True if and\
    \ only if N boredoms exist in S.", "    \n    \n\"\"\"\n    You'll be given a\
    \ list of words, and your task is to count the number\n    of boredoms. A boredom\
    \ is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored([\"Hello\", \"\
    world\"])\n    0\n    >>> is_bored([\"The\", \"sky\", \"is\", \"blue\", \"The\"\
    , \"sun\", \"is\", \"shining\", \"I\", \"love\", \"this\", \"weather\"])\n   \
    \ 1\n    \"\"\"", "    if is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise: Write a function that counts\
    \ the number of boredoms in a string.\n    \n    Your function should take a string\
    \ as its only argument, and return a number.\n    \n    Your function should only\
    \ count boredoms, not non-boredoms.\n    \n    Your function should ignore capitalization.\n\
    \    \n    Your function should ignore punctuation.\n    \n    Your function should\
    \ ignore periods.\n    \n    Your function should ignore question marks.\n   \
    \ \n    Your function should ignore exclamation marks.\n    \n    Your function\
    \ should ignore multiple spaces.\n    \n    Your function should ignore multiple\
    \ periods.\n    \n    Your function should ignore multiple question marks.\n \
    \   \n    Your function should ignore multiple exclamation marks.\n    \n    Your\
    \ function should ignore multiple capitalization.\n    \n    Your function should\
    \ ignore multiple punctuation.\n    \n    Your function should ignore multiple\
    \ periods.\n    \n    Your function should ignore multiple question marks.\n \
    \   \n    Your function should ignore multiple exclamation marks.\n    \n    Your\
    \ function should ignore multiple capitalization.\n    \n    Your function should\
    \ ignore multiple punctuation.\n    \n    Your function should ignore multiple\
    \ periods.\n    \n    Your function should ignore multiple question marks.\n \
    \   \n    Your function should ignore multiple exclamation marks.\n    \n    Your\
    \ function should ignore multiple capitalization.\n    \n    Your function should\
    \ ignore multiple punctuation.\n    \n    Your function should ignore multiple\
    \ periods.\n    \n    Your function should ignore multiple question marks.\n \
    \   \n    Your function should ignore multiple exclamation marks.\n    \n    Your\
    \ function should ignore multiple capitalization.\n    \n    Your function should\
    \ ignore multiple punctuation.\n    \n    Your function should ignore multiple\
    \ periods.\n    \n    Your function should ignore multiple question marks.\n \
    \   \n    Your function should ignore multiple exclamation marks.\n    \n    Your\
    \ function should ignore multiple capitalization.\n    \n    Your function should\
    \ ignore multiple punctuation.\n    \n    Your function should ignore multiple\
    \ periods.\n    ", "    if is_bored(S,0,0)==0 \n    else \n        return 0 \n\
    \    end\nend\n\"\"\"\n    You'll be given a string of words, and your task is\
    \ to count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"", "\"\"\
    \"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S,\
    \ 0)\n    else \n        boredom(S, 0)\nend\n</cell>\n<code language=julia-0.4>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-0.4>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that counts the number of boredoms in a given string.", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    boredoms\
    \ = Dict{String,Int64}()\n    \n    for word in split(S,\".\")\n        boredoms[word]\
    \ = get(boredoms, word, 0) + 1\n    end\n    \n    return get(boredoms, \"I\"\
    , 0)\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise: Write a function that splits a string\
    \ into sentences.\nThe function should take a string as input, and return a vector\
    \ of strings,\nwhere each element of the vector is a sentence in the input string.\n\
    The sentences are delimited by '.', '?' or '!'.\nThe function should ignore capitalization.\n\
    The function should ignore punctuation.\nThe function should ignore numbers and\
    \ symbols.\nThe function should ignore the empty string.\nThe function should\
    \ ignore the empty vector.\nThe function should ignore the empty dictionary.\n\
    The function should ignore the empty array.\nThe function should ignore the empty\
    \ set.\nThe function should ignore the empty tuple.\nThe function should ignore\
    \ the empty matrix.\nThe function should ignore the empty range.\nThe function\
    \ should ignore the empty range.\nThe function should ignore the empty range.\n\
    The function should ignore the empty range.\nThe function should ignore the empty\
    \ range.\nThe function should ignore the empty range.\nThe function should ignore\
    \ the empty range.\nThe function should ignore the empty range.\nThe function\
    \ should ignore the empty range.\nThe function should ignore the empty range.\n\
    The function should ignore the empty range.\nThe function should ignore the empty\
    \ range.\nThe function should ignore the empty range.\nThe function should ignore\
    \ the empty range.\nThe function should ignore the empty range.\nThe function\
    \ should ignore the empty range.\nThe function should ignore the empty range.\n\
    The function should ignore the empty range.\nThe function should ignore the empty\
    \ range.\nThe function should ignore the empty range.\nThe function should ignore\
    \ the empty range.\nThe function should ignore the empty range.\nThe function\
    \ should ignore the empty range.\nThe function should ignore the empty range.\n\
    The function should ignore the empty range.\nThe function should ignore the empty\
    \ range.\nThe function should ignore the empty range.\nThe function should ignore\
    \ the empty range.\nThe function should ignore the empty range.\nThe function\
    \ should ignore the empty range.\nThe function should ignore the empty range.\n\
    The function should ignore the empty range.\nThe function should ignore the empty\
    \ range.\nThe function should ignore the empty range.\n", "    if is_bored(S,0)==0\n\
    \    else \n        return is_bored(S,1)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that counts the number of boredoms in a given string.\n\
    The function should take a string as input and return a number.", "    if is_bored(S,0)==0\
    \ \n    then return 0 \n    else return 1 \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that counts the number of boredoms in a string.\nThe function\
    \ should take a string as input and return a number.", "    if is_bored(S,0)==0\n\
    \    else \n        return is_bored(S,1)\n    end\nend\n\"\"\"\n    You'll be\
    \ given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if is_bored(S) == 0 \n        return 0 \n    else \n\
    \        return 1 \n    end\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    For example, \n    count_words(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\nshould return 8.", "    if is_bored(S,0)==0 \n        error(\"is_bored\
    \ failed\") \n    end\n    return 1\nend\n</cell>\n<code language=julia-0.6>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-0.6>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in it.",
  "    \n\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0\n\
    \    else \n        return is_bored(S,1)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.4>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\n\
    Write a function that counts the number of boredoms in a given string.", "   \
    \ if is_bored(S,0)==0 \n    else \n        return is_bored(S,1)\n    end\nend\n\
    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "\"\"\"\n    You'll\
    \ be given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0 \n    then return\
    \ 0 \n    else return 1 \n    end \nend \n\"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"", "    if is_bored(S,0)==0 \n        error(\"is_bored expects\
    \ a string\")\n    end\nend", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ is_bored(S,0)==0 \n    else \n        error(\"is_bored has failed\")\n    end\n\
    end", "    if is_bored(S,0)==0 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.4>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.4>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nPart\
    \ 2: Counting boredom", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if is_bored(S,0)==0 \n        error(\"is_bored failed: empty string\")\n  \
    \  end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise\nWrite a function that counts the\
    \ number of boredoms in a given string.", "    \n\"\"\"\n    You'll be given a\
    \ list of words, and your task is to count the number\n    of boredoms. A boredom\
    \ is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored([\"Hello\", \"\
    world\"])\n    0\n    >>> is_bored([\"The\", \"sky\", \"is\", \"blue\", \".\"\
    , \"The\", \"sun\", \"is\", \"shining\", \"I\", \"love\", \"this\", \"weather\"\
    ])\n    1\n    \"\"\"", "    \n    S = S.split(\" \")\n    \n    boredoms = 0\n\
    \    \n    for word in S\n        if word[0] == \"I\"\n            boredoms +=\
    \ 1\n    end\n    return boredoms\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write\
    \ a function that counts the number of times a word appears in a string.\n   \
    \ \n    For example:\n    >>> count_words(\"Hello world\")\n    3\n    >>> count_words(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    3\n    \"\"\"",
  "    if is_bored(S) == 0 \n        return 0 \n    else \n        return 1 \nend\
    \ \n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of words in the string.", "    if is_bored(S) == 0 \n\
    \        boredoms = 0\n        for word in split(S) \n            if word == \"\
    I\" \n                boredoms += 1\n        return boredoms\n    end\n    return\
    \ 0\nend\n</cell>\n<code language=julia-1.3>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.3>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise: Write a function that counts the\
    \ number of times a substring appears in a string.", "    if is_bored(S,0)==0\
    \ then 1 else 0 end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write a function\
    \ that counts the number of boredoms in a given string.", "    if is_bored(S)\
    \ == 0 then \n        error(\"is_bored expects a string\")\n    end\n    \n  \
    \  boredoms = findall(S, startswith, \"I\")\n    \n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nHint: Use split(), startswith(), and length().", "    if is_bored(S,0)==0\
    \ \n    else \n    end \nend \n</cell>\n<code language=julia-0.6>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-0.6>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of words in the string.",
  "    \n    \n\"\"\"\n    You'll be given a list of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored([\"Hello\", \"world\"])\n    0\n    >>> is_bored([\"The\", \"\
    sky\", \"is\", \"blue\", \".\", \"The\", \"sun\", \"is\", \"shining\", \"I\",\
    \ \"love\", \"this\", \"weather\"])\n    1\n    \"\"\"", "    if is_bored(S, 0)\n\
    \    else \n        boredom(S, 0)\nend\n</cell>\n<code language=julia-1.1>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.1>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function is_bored(S::String, i::Int64) which returns true if the ith boredom\
    \ is found in S.", "    if is_bored(S,0)==0\n    else \n        boredoms(S,0)\n\
    \    end\nend", "    if is_bored(S, 0)==0 then 1 else 0 end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of words in the string.", "    if is_bored(S,0)==0\n    else \n        \n  \
    \  end=length(S)\n    boredoms=0\n    \n    for i=1:end\n        if S[i]==\"I\"\
    \n            boredoms+=1\n        end\n    end\n    return boredoms\nend\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of words in the string.", "    \n\"\"\"\n    You'll be given a string of words,\
    \ and your task is to count the number\n    of boredoms. A boredom is a sentence\
    \ that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or\
    \ '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n   \
    \ 1\n    \"\"\"", "    if is_bored(S,0,0)==0 \n    else \n        boredom(S,0,0)\n\
    \    end\nend\n\"\"\"\n    You'll be given a string of words, and your task is\
    \ to count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"", " \
    \   if is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.", "    if is_bored(S,0)==0\
    \ then 1 else 0 end\nend\n</cell>\n<code language=julia-1.3>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write a function\
    \ that counts the number of boredoms in a string.", "\"\"\"\n    You'll be given\
    \ a string of words, and your task is to count the number\n    of boredoms. A\
    \ boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\"\
    )\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0\n    else \n      \
    \  return is_bored(S,1)\n    end\nend\n</cell>\n<code language=julia-1.3>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string.",
  "    if is_bored(S,0)==0 \n    else \n        return is_bored(S,1)\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 3\nWrite a function that counts the\
    \ number of boredoms in a given string.\n    \n    Your function should take a\
    \ string as input, and return a number.\n    \n    For example:\n    >>> count_borems(\"\
    Hello world\")\n    0\n    >>> count_borems(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0\n    else\
    \ \n        boredoms=0\n        for word in split(S,\".\")\n            if word==\"\
    I\"\n                boredoms+=1\n        return boredoms\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that splits a string into a list of words.\
    \ A word is defined as a sequence of letters, digits, and punctuation marks.",
  "    if is_bored(S, 0)==0 \n    else \n        boredoms = count_boredoms(S)\n  \
    \      boredoms = boredoms - 1\n        return boredoms\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.", "    if is_bored(S) == 0 \n        error(\"is_bored\
    \ expects a string\")\n    end\n    \n    boredoms = findall(S, startswith(\"\
    I\"))\n    \n    return length(boredoms)\nend", "    if is_bored(S,0)==0 \n  \
    \      error(\"is_bored failed\") \n    end\n    return 1\nend\n</cell>\n<code\
    \ language=julia-0.6>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-0.6>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if is_bored(S) == 0 \n        error(\"is_bored expects a string\"\
    )\n    end\n    boredoms = findall(S, startswith, \"I\")\n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.", "    \n    boredoms\
    \ = Dict{String,Int64}()\n    \n    for word in split(S)\n        if word==\"\
    I\"\n            boredoms[word] = 1\n        end\n    end\n    \n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise: Write a function that counts the\
    \ number of boredoms in a string.", "    if is_bored(S, 0)\n    else \n      \
    \  boredoms = count_boredoms(S)\n        boredoms = boredoms - 1\n        return\
    \ boredoms\n    end\nend", "    if is_bored(S,0)==0 then return 0 else return\
    \ 1\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather.\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather.\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather.\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather.\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather.\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"", "    \n\"\"\"\n    You'll be given a\
    \ list of words, and your task is to count the number\n    of boredoms. A boredom\
    \ is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored([\"Hello\", \"\
    world\"])\n    0\n    >>> is_bored([\"The\", \"sky\", \"is\", \"blue\", \".\"\
    , \"The\", \"sun\", \"is\", \"shining\", \"I\", \"love\", \"this\", \"weather\"\
    ])\n    1\n    \"\"\"", "\"\"\"\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    if is_bored(S,0)==0 \n    then return 0 \n    else return 1 \n    end \nend\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"", "    \n    count\
    \ = 0\n    for word in S.split(\" \")\n        if word[0] == \"I\"\n         \
    \   count += 1\n    return count\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns the number of words in the string\
    \ that start with \"I\".", "    if is_bored(S) == 0 \n        error(\"The string\
    \ is not bored\")\n    end\n    \n    boredoms = findall(S, startswith(\"I\"))\n\
    \    \n    return length(boredoms)\nend\n</cell>\n<code language=julia-1.4>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.4>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that counts the number of boredoms in a string.", "    if is_bored(S,\
    \ 0)==0 \n        error(\"is_bored: empty string\")\n    end\n    return 1\nend",
  "    if is_bored(S,0)==1 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.4>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.4>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    S = S.lower()\n    boredoms = findall(S, boredom)\n    return\
    \ length(boredoms)\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write a function\
    \ that counts the number of \"I\"s in a string.", "    \n    \"\"\"\n    Your\
    \ task is to implement the function is_bored(S::String)::Int64\n    which returns\
    \ 1 if S is a bored sentence, 0 otherwise.\n    \n    Some examples:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    \n    boredoms\
    \ = findall(S, \"^I.*\")\n    \n    return length(boredoms)\nend\n</cell>\n<code\
    \ language=julia-1.4>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.4>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e' and are followed by 'y'.\nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'\
    \ and are followed by 'y' and are followed by 'o'.", "    \n\"\"\"\n    You'll\
    \ be given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    if is_bored(S) == 0 \n        return\
    \ 0 \n    else \n        return 1 \n    end \nend \n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise\nWrite a function that counts the number of boredoms in a given\
    \ string.", "    \n    boredoms = 0 \n    \n    for word in split(S) do \n   \
    \     if word == \"I\" then \n            boredoms += 1 \n        end \n    end\
    \ \n    return boredoms \nend \n</cell>\n<code language=julia-1.5>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes a string and returns the number of words in that string\
    \ that start with the letter 'a'.", "    \n    \"\"\"\n    Your task is to implement\
    \ the function is_bored(S::String)::Int64\n    that takes as input a string of\
    \ words and returns the number of boredoms.\n    \n    Boredoms are sentences\
    \ that start with the word \"I\".\n    Sentences are delimited by '.', '?' or\
    \ '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n   \
    \ >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n\
    \    1\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    boredoms\
    \ = 0 \n    \n    for word in split(S) do \n        if word == \"I\" then \n \
    \           boredoms += 1 \n        end \n    end \n    \n    return boredoms\
    \ \nend \n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.", "    if is_bored(S,0)==0\n\
    \    else \n        boredoms=0\n        for word in split(S,\".?!\")\n       \
    \     if word==\"I\"\n                boredoms+=1\n        return boredoms\n \
    \   end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string and returns the number of words in that string that start with the\
    \ letter 'A'.", "    if is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n\
    \    end\nend\n\"\"\"\n    You'll be given a string of words, and your task is\
    \ to count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"", " \
    \   if is_bored(S,0)==0 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that counts the number of boredoms in a given string.\n\
    The function should take a string as input, and return a number.", "    if is_bored(S,0)==0\n\
    \    else \n        \n    end=length(S)\n    boredom=0\n    \n    for i=1:end\n\
    \        if S[i]==\"I\"\n            boredom=boredom+1\n        end\n    end\n\
    \    return boredom\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that counts the number of boredoms in a given string.\nThe function should take\
    \ a string as input, and return a number.", "    if is_bored(S, 0)\n    else \n\
    \        boredom(S, 0)\n    end\nend", "    if is_bored(S,0,0)==0 \n    then return\
    \ 0 \n    else return 1 \n    end \nend \n\"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    S = S.lower()\n    boredoms = findall(S, \"^I\")\n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.0>\n@time is_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\n@time is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise: Write a function that counts\
    \ the number of boredoms in a string.\nHint: Use findall! to find all the boredoms.",
  "    \n    boredoms = findall(S, \"^I.*\")\n    \n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.0>\n@time is_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\n@time is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise: Write a function that counts\
    \ the number of boredoms in a string.", "    if is_bored(S,0,0)==0 \n    else\
    \ \n        return 1 \n    end\nend\n\"\"\"\n    You'll be given a string of words,\
    \ and your task is to count the number\n    of boredoms. A boredom is a sentence\
    \ that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or\
    \ '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n   \
    \ 1\n    \"\"\"", "    if is_bored(S,0)==0\n    else \n        boredoms=0\n  \
    \      for word in split(S,\".\")\n            if is_bored(word,boredoms)==1\n\
    \            boredoms+=1\n        end\n    end\nend\n\"\"\"\n    You'll be given\
    \ a string of words, and your task is to count the number\n    of boredoms. A\
    \ boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\"\
    )\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0\n    else \n      \
    \  return is_bored(S,1)\n    end\nend", "    \n    boredoms = findall(S, \"^I\"\
    )\n    \n    return length(boredoms)\nend\n</cell>\n<code language=julia-1.0>\n\
    @time is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n@time is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\n\
    Exercise: Write a function that counts the number of boredoms in a string.\nThe\
    \ function should take a string as its argument, and return a number.", "    if\
    \ is_bored(S,0)==0 then return 0 \n    if is_bored(S,1)==1 then return 1 \n  \
    \  if is_bored(S,2)==1 then return 1 \n    if is_bored(S,3)==1 then return 1 \n\
    \    if is_bored(S,4)==1 then return 1 \n    if is_bored(S,5)==1 then return 1\
    \ \n    if is_bored(S,6)==1 then return 1 \n    if is_bored(S,7)==1 then return\
    \ 1 \n    if is_bored(S,8)==1 then return 1 \n    if is_bored(S,9)==1 then return\
    \ 1 \n    if is_bored(S,10)==1 then return 1 \n    if is_bored(S,11)==1 then return\
    \ 1 \n    if is_bored(S,12)==1 then return 1 \n    if is_bored(S,13)==1 then return\
    \ 1 \n    if is_bored(S,14)==1 then return 1 \n    if is_bored(S,15)==1 then return\
    \ 1 \n    if is_bored(S,16)==1 then return 1 \n    if is_bored(S,17)==1 then return\
    \ 1 \n    if is_bored(S,18)==1 then return 1 \n    if is_bored(S,19)==1 then return\
    \ 1 \n    if is_bored(S,20)==1 then return 1 \n    if is_bored(S,21)==1 then return\
    \ 1 \n    if is_bored(S,22)==1 then return 1 \n    if is_bored(S,23)==1 then return\
    \ 1 \n    if is_bored(S,24)==1 then return 1 \n    if is_bored(S,25)==1 then return\
    \ 1 \n    if is_bored(S,26)==1 then return 1 \n    if is_bored(S,27)==1 then return\
    \ 1 \n    if is_bored(S,28)==1 then return 1 \n    if is_bored(S,29)==1 then return\
    \ 1 \n    if is_bored(S,30)==1 then return 1 \n    if is_bored(S,31)==1 then return\
    \ 1 \n    if is_bored(S,32)==1 then return 1 \n    if is_bored(S,33)==1 then return\
    \ 1 \n    if is_bored(S,34)==1 then return 1 \n    if is_bored(S,35)==1 then return\
    \ 1 \n    if is_bored(S,36)==1 then return 1 \n    if is_bored(S,37)==1 then return\
    \ 1 \n    if is_bored(S,38)==1 then return 1 \n    if is_bored(S,39)==1 then return\
    \ 1 \n    if is_bored(S,40)==1 then return 1 \n    if is_bored(S,4", "    \n\"\
    \"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    \n\"\"\"\n    You'll\
    \ be given a list of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored([\"Hello\"\
    , \"world\"])\n    0\n    >>> is_bored([\"The\", \"sky\", \"is\", \"blue\", \"\
    .\", \"The\", \"sun\", \"is\", \"shining\", \"I\", \"love\", \"this\", \"weather\"\
    ])\n    1\n    \"\"\"", "    if is_bored(S,0)==0 \n        error(\"is_bored failed\"\
    ) \n    end\nend\n</cell>\n<code language=julia-1.4>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.4>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ is_bored(S::String, i::Int64) which returns 1 if S[i] is a boredom and 0 otherwise.\
    \ Test it on all of your examples. How does it work?", "    if is_bored(S, 0)\n\
    \    else \n        boredoms(S, 0)\n    end\nend", "    if is_bored(S,0)==0 \n\
    \    else \n        return is_bored(S,1)\n    end\nend\n\"\"\"\n    You'll be\
    \ given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    \n\"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S,\
    \ 0) != 0\n    else \n        error(\"is_bored failed: invalid input\")\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in it.", "    if is_bored(S,0,0)==0\n    else \n       \
    \ return 1\n    end\nend\n\"\"\"\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    \n\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S,0)==0\n    else\
    \ \n        return is_bored(S,1)\n    end\nend\n\"\"\"\n    You'll be given a\
    \ string of words, and your task is to count the number\n    of boredoms. A boredom\
    \ is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\"\
    )\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0 \n    else \n    \n\
    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S,0,0)==0\n\
    \    else \n        return is_bored(S,0,0)\n    end\nend\n\"\"\"\n    You'll be\
    \ given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    if is_bored(S, 0)\n    else \n   \
    \     boredoms(S, 0)\nend", "    if is_bored(S, 0)\n    else \n        boredom(S,\
    \ 0)\n    end\nend", "    if is_bored(S,0)==0 \n    else \n        return 1 \n\
    \    end\nend\n</cell>\n<code language=julia-0.6>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-0.6>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise: Write a function that counts\
    \ the number of boredoms in a string.", "    if is_bored(S,0)==0 then 1 else 0\
    \ end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise: Write a function that counts the\
    \ number of boredoms in a string.\n    \n    Your function should take a string\
    \ as its only argument, and return a number.\n    \n    Your function should count\
    \ the number of boredoms in the string S by counting\n    the number of times\
    \ \"I\" appears in S.\n    \n    For example, if the string S is \"The sky is\
    \ blue. The sun is shining. I love this weather.\",\n    then your function should\
    \ return 3.\n    \n    Your function should ignore capitalization and punctuation.\n\
    \    \n    For example, if the string S is \"The sky is blue. The sun is shining.\
    \ I love this weather.\",\n    then your function should return 3.\n    \n   \
    \ Your function should ignore the case of the letters \"I\" and \"i\".\n    \n\
    \    For example, if the string S is \"The sky is blue. The sun is shining. I\
    \ love this weather.\",\n    then your function should return 3.\n    \n    Your\
    \ function should ignore the case of the letters \"I\" and \"i\".\n    \n    For\
    \ example, if the string S is \"The sky is blue. The sun is shining. I love this\
    \ weather.\",\n    then your function should return 3.\n    \n    Your function\
    \ should ignore the case of the letters \"I\" and \"i\".\n    \n    For example,\
    \ if the string S is \"The sky is blue. The sun is shining. I love this weather.\"\
    ,\n    then your function should return 3.\n    \n    Your function should ignore\
    \ the case of the letters \"I\" and \"i\".\n    \n    For example, if the string\
    \ S is \"The sky is blue. The sun is shining. I love this weather.\",\n    then\
    \ your function should return 3.\n    \n    Your function should ignore the case\
    \ of the letters \"I\" and \"i\".\n    \n    For example, if the string S is \"\
    The sky is blue. The sun is shining. I love this weather.\",\n    then your function\
    \ should return 3.\n    \n    Your function should ignore the case of the letters\
    \ \"I\" and \"i\".\n    \n    For example, if the string S is \"The sky is blue.\
    \ The sun is shining. I love this weather.\",\n    then your function should ",
  "    if is_bored(S, 0)==1 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    if is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.3>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string and returns the number of times the word \"the\" appears in the string.",
  "    \n    boredoms = 0 \n    \n    for word in split(S) do \n        if starts_with(word,\
    \ \"I\") then \n            boredoms += 1 \n        end\n    end\n    \n    return\
    \ boredoms\nend\n</cell>\n<code language=julia-1.3>\n# Test your code\n@test is_bored(\"\
    Hello world\") == 0\n@test is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather.\") == 1\n</cell>\n<text>\nPart 3: Extracting boredom sentences\n\
    Now that you've written a function to extract boredom sentences from a string,\n\
    it's time to test it! Since you're new to Julia, you can use the @test", "   \
    \ if is_bored(S,0)==0 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.4>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.4>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    if is_bored(S,0)==0\n    else \n        boredoms(S,0)\n    end\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S,0)==0\
    \ \n    else \n        boredoms(S,0)\n    end\nend", "    if is_bored(S,0)==0\
    \ \n    else \n        return is_bored(S,1)\n    end\nend\n\"\"\"\n    You'll\
    \ be given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    if is_bored(S, 0)==0 \n        error(\"\
    is_bored failed\") \n    end\n    return 1\nend\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.\")\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather.?\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.!?\")\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.!?\")\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather.!?\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.!?\")\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.!?\")\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather.!?\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.!?\")\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.!?\")\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather.!?\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.!?\")\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.!?\")\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining. I love ",
  "    \n\"\"\"\n    You'll be given a list of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored([\"Hello\", \"world\"])\n    0\n    >>> is_bored([\"The\", \"\
    sky\", \"is\", \"blue\", \".\", \"The\", \"sun\", \"is\", \"shining\", \"I\",\
    \ \"love\", \"this\", \"weather\"])\n    1\n    \"\"\"", "\"\"\"\n    You'll be\
    \ given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    if is_bored(S) == 0 \n        boredoms\
    \ = count_boredoms(S)\n        return boredoms\n    else\n        return 0\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string and returns the number of words in it.", "    if is_bored(S,0)==0 \n\
    \        error(\"is_bored failed\") \n    end\n    return 1\nend\n</cell>\n<code\
    \ language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string. \nThe function should ignore all punctuation except\
    \ for periods and question marks.\nThe function should ignore all numbers and\
    \ symbols.\nThe function should ignore all capital letters.\nThe function should\
    \ ignore all lowercase letters.\nThe function should ignore all words that are\
    \ only one character long.\nThe function should ignore all words that are only\
    \ one character long.\nThe function should ignore all words that are only one\
    \ character long.\nThe function should ignore all words that are only one character\
    \ long.\nThe function should ignore all words that are only one character long.\n\
    The function should ignore all words that are only one character long.\nThe function\
    \ should ignore all words that are only one character long.\nThe function should\
    \ ignore all words that are only one character long.\nThe function should ignore\
    \ all words that are only one character long.\nThe function should ignore all\
    \ words that are only one character long.\nThe function should ignore all words\
    \ that are only one character long.\nThe function should ignore all words that\
    \ are only one character long.\nThe function should ignore all words that are\
    \ only one character long.\nThe function should ignore all words that are only\
    \ one character long.\nThe function should ignore all words that are only one\
    \ character long.\nThe function should ignore all words that are only one character\
    \ long.\nThe function should ignore all words that are only one character long.\n\
    The function should ignore all words that are only one character long.\nThe function\
    \ should ignore all words that are only one character long.\nThe function should\
    \ ignore all words that are only one character long.\nThe function should ignore\
    \ all words that are only one character long.\nThe function should ignore all\
    \ words that are only one character long.\nThe function should ignore all words\
    \ that are only one character long.\nThe function should ignore all words that\
    \ are only one character long.\nThe function should ignore all words that are\
    \ only one character long.\nThe function should ignore all words that are only\
    \ one character long.\nThe function should ignore all words that are only one\
    \ character long.\nThe function should ignore all words that are only one character\
    \ long.\nThe function should ignore all words that are only one character long.\n\
    The function should ignore all words that are only one character long.\nThe function\
    \ should ignore all words that are only one character long.\n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n\"\"\"\n    You'll be given\
    \ a list of words, and your task is to count the number\n    of boredoms. A boredom\
    \ is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored([\"Hello\", \"\
    world\"])\n    0\n    >>> is_bored([\"The\", \"sky\", \"is\", \"blue\", \".\"\
    , \"The\", \"sun\", \"is\", \"shining\", \"I\", \"love\", \"this\", \"weather\"\
    ])\n    1\n    \"\"\"", "    \n\"\"\"\n    You'll be given a list of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored([\"Hello\", \"world\"])\n    0\n    >>>\
    \ is_bored([\"The\", \"sky\", \"is\", \"blue\", \".\", \"The\", \"sun\", \"is\"\
    , \"shining\", \"I\", \"love\", \"this\", \"weather\"])\n    1\n    \"\"\"", " \
    \   if is_bored(S,0)==0 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\n\
    Write a function that counts the number of boredoms in a string.", "\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S,\
    \ 0)==0 \n    else \n        error(\"is_bored expects a string\")\n    end\nend",
  "    if is_bored(S,0)==0 \n    else \n        return is_bored(S,1)\n    end\nend",
  "    \n    \"\"\"\n    Your code here\n    \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  \n\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S)\
    \ == 0 \n        boredoms = 0 \n        for w in S.split(\" \") \n           \
    \ if w == \"I\" \n                boredoms += 1 \n        return boredoms \n \
    \   else \n        return 0 \nend \n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in it.", "  \
    \  if is_bored(S, 0)==0 \n    else \n        return is_bored(S, 1)\n    end\n\
    end", "    \n    boredoms = findall(S, \"^I.*\")\n    \n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'a'.",
  "    if is_bored(S,0)==0 then 1 else 0 end\nend", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if is_bored(S,0)==1 then 1 else 0 end\nend",
  "    if is_bored(S,0)==0\n    else \n        boredoms=0\n        for word in split(S,\"\
    .\")\n            if is_bored(word,boredoms)==1\n            boredoms+=1\n   \
    \     end\n    end\nend\n\"\"\"\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    if is_bored(S,0)==1\n    else \n        boredoms=0\n        for word in split(S,\"\
    .\",\"?\",\"!\")\n            if word==\"I\"\n                boredoms+=1\n  \
    \      return boredoms\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function is_bored(S::String) which returns 1 if the string S starts with \"\
    I\", and 0 otherwise. \nWrite a test function test_is_bored(S::String) which tests\
    \ your function is_bored(S::String).", "    \n    \"\"\"\n    Your task is to\
    \ implement the function is_bored(S::String)::Int64\n    which takes in a string\
    \ S and returns 1 if S starts with the word \"I\"\n    and 0 otherwise. \n   \
    \ \n    You can assume that S is a valid non-empty string.\n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function is_bored(S::String)::Int64\n\
    \    which takes in a string S and returns 1 if S starts with the word \"I\"\n\
    \    and 0 otherwise. \n    \n    You can assume that S is a valid non-empty string.\n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    Your task is to implement the function\
    \ is_bored(S::String)::Int64\n    which takes in a string S and returns 1 if S\
    \ starts with the word \"I\"\n    and 0 otherwise. \n    \n    You can assume\
    \ that S is a valid non-empty string.\n    \"\"\"\n    \n    \n    \n    \"\"\"\
    \n    Your task is to implement the function is_bored(S::String)::Int64\n    which\
    \ takes in a string S and returns 1 if S starts with the word \"I\"\n    and 0\
    \ otherwise. \n    \n    You can assume that S is a valid non-empty string.\n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    Your task is to implement the function\
    \ is_bored(S::String)::Int64\n    which takes in a string S and returns 1 if S\
    \ starts with the word \"I\"\n    and 0 otherwise. \n    \n    You can assume\
    \ that S is a valid non-empty string.\n    \"\"\"\n    \n    \n    \n    \"\"\"\
    \n    Your task is to implement the function is_bored(S::String)::Int64\n    which\
    \ takes in a string S and returns 1 if S starts with the word \"I\"\n    and 0\
    \ otherwise. \n    \n    You can assume that S is a valid non-empty string.\n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    Your task is to implement the function\
    \ is_bored(S::String)::Int64\n    which takes in a string S and returns 1 if S\
    \ starts with the word \"I\"\n    and 0 otherwise. \n    \n    You can assume\
    \ that S is a valid non-empty string.\n    \"\"\"\n    \n    \n    \n    \"\"\"\
    \n    Your task is to implement the function is_bored(S::String)::Int64\n    which\
    \ takes in a string S and returns 1 if S starts with the word \"I\"\n    and 0\
    \ otherwise. \n    \n    You can assume that S is a valid non-empty string.\n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    Your task is to implement the function\
    \ is_bored(S", "\"\"\"\n    You'll be given a string of words, and your task is\
    \ to count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"", " \
    \   \n\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0\
    \ \n    then return 0 \n    else return 1 \n    end \nend \n\"\"\"\n    You'll\
    \ be given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "\"\"\"\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    \n\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"", "    \n    boredoms\
    \ = 0 \n    \n    for word in split(S) do \n        if word[1] == \"I\" then \n\
    \            boredoms += 1 \n        end\n    end\n    \n    return boredoms\n\
    end\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise\nWrite a function is_bored_2(S::String)::Bool\
    \ that returns true if the string S contains at least one boredom, and false otherwise.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S,0)==0\n\
    \    else \n        boredoms=0\n        for w in S.words\n            if w==\"\
    I\"\n            boredoms+=1\n        end\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that counts the number of boredoms in a string.\nThe function\
    \ should take a string as its only argument.", "    if is_bored(S) == 0 \n   \
    \     boredoms = count_boredoms(S) \n        return boredoms \n    else \n   \
    \     return 0 \nend\n</cell>\n<code language=julia-1.4>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.4>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string and returns the number of words in the string.", "    if\
    \ is_bored(S,0)==0\n    else \n        boredoms=0\n        for word in split(S,\"\
    .?!\") \n            if word==\"I\"\n            boredoms+=1\n        return boredoms\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise\nWrite a function that counts\
    \ the number of times a given word appears in a given string.", "    if is_bored(S,\
    \ 0)==0 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of words in it,\nexcluding\
    \ any punctuation marks. \nFor example \"Hello, world!\" returns 5.", "    if\
    \ is_bored(S,0)==0 \n        return 0 \n    else \n        return 1 \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.\nThe function should ignore\
    \ punctuation and only count the words. \nThe function should ignore capitalization.\n\
    The function should ignore the case of the initial letter.", "    if is_bored(S,0)==1\
    \ then 1 else 0 end\nend\n\"\"\"\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    \n    boredoms = findall(S, \"^I.*\")\n    return length(boredoms)\nend\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of words in it.", "    \n    \"\"\"\n    Your task is to implement the function\
    \ is_bored(S::String)::Int64.\n    It should return the number of boredoms in\
    \ S. \n    \n    boredoms are sentences that start with the word \"I\".\n    Sentences\
    \ are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"\
    Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S, 0)\n    else\
    \ \n        boredoms = count_boredoms(S)\n        boredoms = boredoms - 1\n  \
    \      return boredoms\n    end\nend\n</cell>\n<code language=julia-1.0>\n@assert\
    \ is_bored(\"Hello world\") == 0\n@assert is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather.\") == 1\n</cell>\n<text>\nExercise: Write a\
    \ function that counts the number of boredoms in a string.\nThe function should\
    \ take a string as its only argument.", "    S = S.lower()\n    boredoms = 0\n\
    \    for word in S.split(\" \")\n        if word[0] == \"i\"\n            boredoms\
    \ += 1\n    return boredoms\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write\
    \ a function that counts the number of boredoms in a string.\n    \n    Your function\
    \ should take a string as input, and return a number.\n    \n    For example,\
    \ \n    >>> count_borems(\"Hello world\")\n    0\n    >>> count_borems(\"The sky\
    \ is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"", " \
    \   if is_bored(S, 0) < 0\n        error(\"is_bored failed: invalid input\")\n\
    \    end\n    return 0\nend", "    if is_bored(S,0)==0 then return 0 else return\
    \ 1\nend", "    if is_bored(S,0)==0 then return 0 \n    else return 1 \nend \n\
    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0\
    \ then 1 else 0 end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string and returns the number of words in the string.",
  "    \n\"\"\"\n    You'll be given a list of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored([\"Hello\", \"world\"])\n    0\n    >>> is_bored([\"The\", \"\
    sky\", \"is\", \"blue\", \"The\", \"sun\", \"is\", \"shining\", \"I\", \"love\"\
    , \"this\", \"weather\"])\n    1\n    \"\"\"", "    if is_bored(S,0,0) == 0 \n\
    \        error(\"The sentence does not start with the word 'I'.\")\n    end\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "\"\"\"\n    You'll\
    \ be given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    if is_bored(S, 0)==0 \n    else \n\
    \        return is_bored(S, 1)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string and returns the number of boredoms \nin the\
    \ string.", "    if is_bored(S,0)==0 \n        return 0 \n    else \n        return\
    \ 1 \n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.", "    if\
    \ is_bored(S) == 0 \n    then \n        return 0 \n    else \n        return 1\
    \ \n    end \nend \n</cell>\n<code language=julia-1.4>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.4>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nWrite a\
    \ function that takes a string and returns the number of sentences in the string.\n\
    Write a function that takes a string and returns the number of boredoms in the\
    \ string.", "    if is_bored(S,0)==0\n    else \n        boredoms=0\n        for\
    \ word in split(S,\".?!\")\n            if word==\"I\"\n                boredoms+=1\n\
    \        return boredoms\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S)\
    \ == 0 then \n        return 0 \n    else \n        return 1 \nend \n</cell>\n\
    <code language=julia-1.3>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of words in the string.", "\"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    if is_bored(S,0)==1\n    else \n        boredom(S,0)\n    end\nend", "    \n\
    \    boredoms = 0 \n    \n    for word in split(S) do \n        if word == \"\
    I\" then \n            boredoms += 1 \n        end \n    end \n    \n    return\
    \ boredoms \nend \n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.", "\"\"\"\
    \n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if is_bored(S,0)==0 \n    else \n\
    \        return is_bored(S,1)\n    end\nend\n\"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"", "    if is_bored(S,0,0) == 0 \n    else \n        return\
    \ 1 \n    end\nend\n\"\"\"\n    You'll be given a string of words, and your task\
    \ is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "\"\"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    \n    \"\"\"\n\
    \    Your task is to implement the function is_bored(S::String)::Int64\n    that\
    \ takes as input a string of words and returns the number of boredoms.\n    \n\
    \    Boredoms are sentences that start with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    \n    boredoms = 0 \n    \n    for\
    \ word in S.split(\" \") \n        if word.starts_with(\"I\") \n            boredoms\
    \ += 1 \n    return boredoms \nend \n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns the number of words that are longer\
    \ than 3 letters.", "    if is_bored(S,0)==0\n    else \n        boredoms=0\n\
    \        for w in split(S,\".\")\n            if is_bored(w,1)==1\n          \
    \  else boredoms+=1\n    end\nend\n</cell>\n<code language=julia-1.3>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that splits a string into a list of words. Use a period ('.') as\
    \ a delimiter.\nWrite a function that counts the number of boredoms in a string.\n\
    Write a function that counts the number of boredoms in a string using your previous\
    \ function.", "    if is_bored(S,0)==0 \n        error(\"is_bored failed\") \n\
    \    end\n    return 1\nend\n</cell>\n<code language=julia-1.3>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string and returns the number of words in the string.",
  "    \n    boredoms = 0 \n    \n    for word in S.split(\" \") \n        if word.startswith(\"\
    I\") \n            boredoms += 1 \n    \n    return boredoms \nend\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise: Write a function that counts the number of \"I\" boredoms in\
    \ a string.", "    if is_bored(S, 0)\n    else \n        boredoms = count_boredoms(S)\n\
    \        boredoms += is_bored(S, boredoms)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert is_bored(\"Hello world\") == 0\n@assert is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather.\") == 1\n</cell>\n<text>\nPart II: Palindrome\
    \ check\nThe Palindrome check is a very important part of NLP. We'll be using\
    \ it a lot during this week's assignments.", "    if is_bored(S, 0)\n    else\
    \ \n        boredom(S, 0)\n    end\nend", "    if is_bored(S,0)==1\n    else \n\
    \        0\n    end\nend\n\"\"\"\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    \n    boredoms = sum(map(is_bored, split(S, \".\")))\n    boredoms += sum(map(is_bored,\
    \ split(S, \"?\")))\n    boredoms += sum(map(is_bored, split(S, \"!\")))\n   \
    \ return boredoms\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nPart 3: Finding patterns\n\
    Now that we have defined a function that counts the number of boredoms in a given\
    \ string, let's use it to find the number of boredoms in a given string.", " \
    \   if is_bored(S,0)==0 \n    else \n        return is_bored(S,1)\n    end\nend\n\
    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S)\
    \ == 0 \n        error(\"is_bored failed\") \n    end\n    return 1\nend\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of words in the string.", "    if is_bored(S,0)==0\n    else \n        boredoms=0\n\
    \        for word in split(S,\".,?!\")\n            if word==\"I\"\n         \
    \       boredoms+=1\n        return boredoms\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    \n    count = 0\n    for word in S.split(\" \")\n        if word[0]\
    \ == \"I\"\n            count += 1\n    return count\nend\n</cell>\n<code language=julia-1.4>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.4>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that counts the number of times a word appears in a string.\n\
    \    \n    For example:\n    >>> count_words(\"The sky is blue. The sun is shining.\
    \ I love this weather.\")\n    3\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
