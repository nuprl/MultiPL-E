name: HumanEval_54_same_chars
language: jl
prompt: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
  eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
  dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
  \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
  abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
  )\n    false\n    \"\"\"\nfunction same_chars(s0::String, s1::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
  eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
  ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
  eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
  ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
  \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
completions: ["    if length(s0) != length(s1) \n        then false\n    else if length(s0)\
    \ == 0 \n        then true\n    else if length(s0) == 1 \n        then s0 == s1\n\
    \    else if length(s0) == 2 \n        then s0 == s1 || s0 == s1[end-1]\n    else\
    \ if length(s0) == 3 \n        then s0 == s1 || s0 == s1[end-1] || s0 == s1[end-2]\n\
    \    else if length(s0) == 4 \n        then s0 == s1 || s0 == s1[end-1] || s0\
    \ == s1[end-2] || s0 == s1[end-3]\n    else if length(s0) == 5 \n        then\
    \ s0 == s1 || s0 == s1[end-1] || s0 == s1[end-2] || s0 == s1[end-3] || s0 == s1[end-4]\n\
    \    else if length(s0) == 6 \n        then s0 == s1 || s0 == s1[end-1] || s0\
    \ == s1[end-2] || s0 == s1[end-3] || s0 == s1[end-4] || s0 == s1[end-5]\n    else\
    \ if length(s0) == 7 \n        then s0 == s1 || s0 == s1[end-1] || s0 == s1[end-2]\
    \ || s0 == s1[end-3] || s0 == s1[end-4] || s0 == s1[end-5] || s0 == s1[end-6]\n\
    \    else if length(s0) == 8 \n        then s0 == s1 || s0 == s1[end-1] || s0\
    \ == s1[end-2] || s0 == s1[end-3] || s0 == s1[end-4] || s0 == s1[end-5] || s0\
    \ == s1[end-6] || s0 == s1[end-7]\n    else if length(s0) == 9 \n        then\
    \ s0 == s1 || s0 == s1[end-1] || s0 == s1[end-2] || s0 == s1[end-3] || s0 == s1[end-4]\
    \ || s0 == s1[end-5] || s0 == s1[end-6] || s0 == s1[end-7] || s0 == s1[end-8]\n\
    \    else if length(s0) == 10 \n        then s0 == s1 || s0 == s1[end-1] || s0\
    \ == s1[end-2] || s0 == s1[end-3] || s0 == s1[end-4] || s0 == s1[end-5] || s0\
    \ == s1[end-6] || s0 == s1[end-7] || s0 == s1[end-8] || s0 == s1[end-9]\n    else\
    \ if length(s0) == 11 \n        then s0 == s", "    same_chars = true\n    for\
    \ c in s0:\n        if c not in s1:\n            same_chars = false\n        \
    \    break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\"\
    \"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    len = length(s0)\n    if len != length(s1)\n \
    \       return false\n    \n    i = 0\n    while i < len\n        if s0[i] !=\
    \ s1[i]\n            return false\n        i += 1\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    same_chars(s0,\
    \ s1, 0)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that checks if two\
    \ words are anagrams of each other.\nThe function should take two strings as arguments\
    \ and return true if the two words are anagrams of each other. \nIf the two words\
    \ are not anagrams of each other, the function should return false.\nThe function\
    \ should ignore case when comparing characters.\nThe function should ignore case\
    \ when comparing lengths.\nThe function should ignore case when comparing words.\n\
    The function should ignore case when comparing individual letters.\nThe function\
    \ should ignore case when comparing individual letters.\nThe function should ignore\
    \ case when comparing individual letters.\nThe function should ignore case when\
    \ comparing individual letters.\nThe function should ignore case when comparing\
    \ individual letters.\nThe function should ignore case when comparing individual\
    \ letters.\nThe function should ignore case when comparing individual letters.\n\
    The function should ignore case when comparing individual letters.\nThe function\
    \ should ignore case when comparing individual letters.\nThe function should ignore\
    \ case when comparing individual letters.\nThe function should ignore case when\
    \ comparing individual letters.\nThe function should ignore case when comparing\
    \ individual letters.\nThe function should ignore case when comparing individual\
    \ letters.\nThe function should ignore case when comparing individual letters.\n\
    The function should ignore case when comparing individual letters.\nThe function\
    \ should ignore case when comparing individual letters.\nThe function should ignore\
    \ case when comparing individual letters.\nThe function should ignore case when\
    \ comparing individual letters.\nThe function should ignore case when comparing\
    \ individual letters.\nThe function should ignore case when comparing individual\
    \ letters.\nThe function should ignore case when comparing individual letters.\n\
    The function should ignore case when comparing individual letters.\nThe function\
    \ should ignore case when comparing individual letters.\nThe function should ignore\
    \ case when comparing individual letters.\nThe function should ignore case when\
    \ comparing individual letters.\nThe function should ignore case when comparing\
    \ individual letters.\nThe function should ignore case when comparing individual\
    \ letters.\nThe function should ignore case when comparing individual letters.\n\
    The function should ignore case when comparing individual letters.\nThe function\
    \ should ignore case when comparing individual letters.\nThe function should ignore\
    \ case when comparing individual letters.\nThe function should ignore case when\
    \ comparing individual letters.\nThe function should ignore case when comparing\
    \ individual letters.\nThe function should ignore case when comparing individual\
    \ letters.\nThe function should ignore ", "    same_chars(s0, s1) = s1==s0\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nTest it on some examples:", "    len0\
    \ = length(s0)\n    len1 = length(s1)\n    if len0 != len1\n        return false\n\
    \    \n    i = 0\n    while i < len0\n        if s0[i] != s1[i]\n            return\
    \ false\n        i += 1\n    return true\nend", "    same_chars = true\n    for\
    \ c in s0:\n        if c not in s1:\n            same_chars = false\n        \
    \    break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars(s0, s1) = 0\n    same_chars(s0, s1)\
    \ = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_", "    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend", "    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0) == char(s1) for char in s0)\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    len = length(s0)\n\
    \    len1 = length(s1)\n    if len == len1\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words\
    \ have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) = length(s0) == length(s1) && all(char(c) == char(s0[c])\
    \ for c in s0)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that checks\
    \ if a word is a palindrome.\nThe word is a palindrome if it reads the same backward\
    \ as forward.\nThe word is a palindrome if it reads the same forward as backward.\n\
    The word is not a palindrome if it reads the same backward as forward or forward.\n\
    The word is not a palindrome if it reads the same forward as backward or backward.\n\
    The word is not a palindrome if it reads the same backward as forward or backward.\n\
    The word is not a palindrome if it reads the same forward as backward or forward.\n\
    The word is not a palindrome if it reads the same backward as forward or backward.\n\
    The word is not a palindrome if it reads the same forward as backward or forward.\n\
    The word is not a palindrome if it reads the same backward as forward or backward.\n\
    The word is not a palindrome if it reads the same forward as backward or forward.\n\
    The word is not a palindrome if it reads the same backward as forward or backward.\n\
    The word is not a palindrome if it reads the same forward as backward or forward.\n\
    The word is not a palindrome if it reads the same backward as forward or backward.\n\
    The word is not a palindrome if it reads the same forward as backward or forward.\n\
    The word is not a palindrome if it reads the same backward as forward or backward.\n\
    The word is not a palindrome if it reads the same forward as backward or forward.\n\
    The word is not a palindrome if it reads the same backward as forward or backward.\n\
    The word is not a palindrome if it reads the same forward as backward or forward.\n\
    The word is not a palindrome if it reads the same backward as forward or backward.\n\
    The word is not a palindrome if it reads the same forward as backward or forward.\n\
    The word is not a palindrome if it reads the same backward as forward or backward.\n\
    The word is not a palindrome if it reads the same forward as backward or forward.\n\
    The word is not a palindrome if it reads the same backward as forward or backward.\n\
    The word is not a palindrome if it reads the same forward as backward or forward.\n\
    The word is not a palindrome if it reads the same backward as forward or backward.\n\
    The word is not a palindrome if it reads the same forward as backward or forward.\n\
    The word is not a palindrome if it reads the same backward as forward or backward.\n\
    The ", "    same_chars(s0, s1) || same_chars(s1, s0)\nend", "    len1 = length(s1)\n\
    \    len2 = length(s0)\n    if len1 == len2\n        for (c1, s1) in zip(achars(s1),\
    \ achars(s0))\n            if c1 != c1\n                return false\n    end\n\
    \    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of characters in the string.\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nWrite a\
    \ function that takes a string and returns the number of sentences in the string.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are not letters.\nWrite a function that takes a string and returns\
    \ the number of words in the string that are not letters.\nWrite a function that\
    \ takes a string and returns the number of sentences in the string that are not\
    \ letters.\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not letters.\nWrite a function that takes a string and\
    \ returns the number of words in the string that are not letters.\nWrite a function\
    \ that takes a string and returns the number of sentences in the string that are\
    \ not letters.\nWrite a function that takes a string and returns the number of\
    \ characters in the string that are not letters.\nWrite a function that takes\
    \ a string and returns the number of words in the string that are not letters.\n\
    Write a function that takes a string and returns the number of sentences in the\
    \ string that are not letters.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are not letters.\nWrite a function\
    \ that takes a string and returns the number of words in the string that are not\
    \ letters.\nWrite a function that takes a string and returns the number of sentences\
    \ in the string that are not letters.", "    same_chars(s0, s1) || same_chars(s1,\
    \ s0)\nend", "    same_chars = true\n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    return same_chars\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a word is palindrome\
    \ or not.\nThe word is palindrome if its first and last characters are the same.\n\
    The word is not palindrome if its first and last characters are not the same.\n\
    The word is not palindrome if its first and last characters are different.\nThe\
    \ word is not palindrome if its first and last characters are different and they\
    \ are both lowercase.\nThe word is not palindrome if its first and last characters\
    \ are different and they are both uppercase.\nThe word is not palindrome if its\
    \ first and last characters are different and they are both digits.\nThe word\
    \ is not palindrome if its first and last characters are different and they are\
    \ both punctuation.\nThe word is not palindrome if its first and last characters\
    \ are different and they are both symbols.\nThe word is not palindrome if its\
    \ first and last characters are different and they are both whitespace.\nThe word\
    \ is not palindrome if its first and last characters are different and they are\
    \ both non-alphabetic characters.\nThe word is not palindrome if its first and\
    \ last characters are different and they are both non-alphanumeric characters.\n\
    The word is not palindrome if its first and last characters are different and\
    \ they are both non-alphanumeric characters and they are both lowercase.\nThe\
    \ word is not palindrome if its first and last characters are different and they\
    \ are both uppercase.\nThe word is not palindrome if its first and last characters\
    \ are different and they are both digits.\nThe word is not palindrome if its first\
    \ and last characters are different and they are both punctuation.\nThe word is\
    \ not palindrome if its first and last characters are different and they are both\
    \ symbols.\nThe word is not palindrome if its first and last characters are different\
    \ and they are both whitespace.\nThe word is not palindrome if its first and last\
    \ characters are different and they are both non-alphabetic characters.\nThe word\
    \ is not palindrome if its first and last characters are different and they are\
    \ both non-alphanumeric characters and they are both uppercase.\nThe word is not\
    \ palindrome if its first and last characters are different and they are both\
    \ digits.\nThe word is not palindrome if its first and last characters are different\
    \ and they are both punctuation.\nThe word is not palin", "    if s0 == s1 then\
    \ true else false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n\
    \    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    same_chars = true\n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    return same_chars\nend\n\
    </cell>\n<code language=julia-1.5>", "    same_chars = true\n    for c in s0:\n\
    \        if c not in s1:\n            same_chars = false\n            break\n\
    \    return same_chars\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a word is palindrome or not.\nThe word is a palindrome if it reads\
    \ the same backward as forward.\nThe word is not palindrome if it reads the same\
    \ forward as backward.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe word is not palindrome if it reads backward and forward\
    \ in different order.\nThe ", "    same_chars(s0, s1) || same_chars(s1, s0)\n\
    end", "    same_chars = true\n    for c in s0:\n        if c not in s1:\n    \
    \        same_chars = false\n            break\n    return same_chars\nend", " \
    \   same_chars(s0, s1) || same_chars(s1, s0)\nend", "    same_chars = true\n \
    \   for c in s0:\n        if c not in s1:\n            same_chars = false\n  \
    \          break\n    return same_chars\nend", "    len0 = length(s0)\n    len1\
    \ = length(s1)\n    if len0 != len1\n        return false\n    else\n        chars\
    \ = chars(s0)\n        chars = chars[0..len0]\n        chars = chars[0..len1]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[0..len0]\n        chars = chars[1..len1]\n        chars = chars[0..len0]\n\
    \        chars = chars[1..len1]\n        chars = chars[0..len0]\n        chars\
    \ = chars[1..len1]\n        chars = chars[0..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[0..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[0..len0]\n        chars = chars[1..len1]\n        chars = chars[0..len0]\n\
    \        chars = chars[1..len1]\n        chars = chars[0..len0]\n        chars\
    \ = chars[1..len1]\n        chars = chars[0..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[0..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[0..len0]\n        chars = chars[1..len1]\n        chars = chars[0..len0]\n\
    \        chars = chars[1..len1]\n        chars = chars[0..len0]\n        chars\
    \ = chars[1..len1]\n        chars = chars[0..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[0..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[0..len0]\n        chars = chars[1..len1]\n        chars = chars[0..len0]\n\
    \        chars = chars[1..len1]\n        chars = chars[0..len0]\n        chars\
    \ = chars[1..len1]\n        chars = chars[0..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[0..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[0..len0]\n        chars = chars[1..len1]\n        chars = chars[0..len0]\n\
    \        chars = chars[1..len", "    \n    if s0 == \"\" and s1 == \"\" then return\
    \ true\n    if s0 == \"\" and s1 != \"\" then return false\n    if s1 == \"\"\
    \ and s0 != \"\" then return false\n    \n    len0 = length(s0)\n    len1 = length(s1)\n\
    \    \n    if len0 > len1 then return false\n    if len0 < len1 then return true\n\
    \    \n    i = 0\n    j = 0\n    \n    while i < len0 and j < len1 do\n      \
    \  if s0[i] != s1[j] then return false\n        i = i + 1\n        j = j + 1\n\
    \    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Check if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    \n    if s0 == s1 \n        then return true\n    else if s0\
    \ == \"\"\n        then return true\n    else if s1 == \"\"\n        then return\
    \ true\n    else if s0 == \"\"\n        then return true\n    else if s1 == \"\
    \"\n        then return true\n    else if s0 == \"\"\n        then return true\n\
    \    else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n  \
    \      then return true\n    else if s1 == \"\"\n        then return true\n  \
    \  else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n    \
    \    then return true\n    else if s0 == \"\"\n        then return true\n    else\
    \ if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n        then\
    \ return true\n    else if s1 == \"\"\n        then return true\n    else if s0\
    \ == \"\"\n        then return true\n    else if s1 == \"\"\n        then return\
    \ true\n    else if s0 == \"\"\n        then return true\n    else if s1 == \"\
    \"\n        then return true\n    else if s0 == \"\"\n        then return true\n\
    \    else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n  \
    \      then return true\n    else if s1 == \"\"\n        then return true\n  \
    \  else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n    \
    \    then return true\n    else if s0 == \"\"\n        then return true\n    else\
    \ if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n        then\
    \ return true\n    else if s1 == \"\"\n        then return true\n    else if s0\
    \ == \"\"\n        then return true\n    else if s1 == \"\"\n        then return\
    \ true\n    else if s0 == \"\"\n        then return true\n    else if s1 == \"\
    \"\n        then return true\n    else if s0 == \"\"\n        then return true\n\
    \    else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n  \
    \      then return true\n    else if s1 == \"\"\n        then return true\n  \
    \  else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n    \
    \    then return true\n    else if s0 == \"\"\n        then return true\n    else\
    \ if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n        then\
    \ return true\n    else if s1 == \"\"\n", "    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_", "    same_chars(s0, s1) = 0\n\
    \    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1)\
    \ = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend", "    same_chars = true\n\
    \    for c in s0:\n        if c not in s1:\n            same_chars = false\n \
    \           break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>",
  "    len0 = length(s0)\n    len1 = length(s1)\n    if len0 != len1\n        return\
    \ false\n    elseif len0 == 0\n        return true\n    elseif len1 == 0\n   \
    \     return true\n    else\n        chars = chars(s0)\n        chars1 = chars(s1)\n\
    \        len2 = length(chars)\n        if len2 != len1\n            return false\n\
    \        elseif len2 == 0\n            return true\n        else\n           \
    \ chars = chars[2:]\n            chars1 = chars1[2:]\n            len2 = length(chars)\n\
    \            if len2 != len1\n                return false\n            elseif\
    \ len2 == 0\n                return true\n            else\n                chars\
    \ = chars[2:]\n                chars1 = chars1[2:]\n                len2 = length(chars)\n\
    \                if len2 != len1\n                    return false\n         \
    \       elseif len2 == 0\n                    return true\n                else\n\
    \                    chars = chars[2:]\n                    chars1 = chars1[2:]\n\
    \                    len2 = length(chars)\n                    if len2 != len1\n\
    \                        return false\n                    elseif len2 == 0\n\
    \                        return true\n                    else\n             \
    \           chars = chars[2:]\n                        chars1 = chars1[2:]\n \
    \                       len2 = length(chars)\n                        if len2\
    \ != len1\n                            return false\n                        elseif\
    \ len2 == 0\n                            return true\n                       \
    \ else\n                            chars = chars[2:]\n                      \
    \      chars1 = chars1[2:]\n                            len2 = length(chars)\n\
    \                            if len2 != len1\n                               \
    \ return false\n                            elseif len2 == 0\n               \
    \                 return true\n                            else\n            \
    \                    return false\n    end\nend\n\"\"\"\n    Check if two words\
    \ have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars = true\n    for c in s0:\n        if c not in s1:\n           \
    \ same_chars = false\n            break\n    return same_chars\nend\n</cell>\n\
    <code language=julia-1.5>", "    same_chars(s0, s1) = length(s0) == length(s1)\
    \ && all(char(s0) == char(s1) for char in s0)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars(s0, s1) || same_chars(s1, s0)\nend",
  "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(s0[i]) == char(s1[i])\
    \ | same_chars(s0[i..], s1[i..]) | i == length(s0) - 1 for i in 1:length(s0))\n\
    end\n</cell>\n<text>\nExercise 9\nWrite a function that takes a string and returns\
    \ the number of characters in the string. \nWrite a function that takes a string\
    \ and returns the number of words in the string. \nWrite a function that takes\
    \ a string and returns the number of sentences in the string. \nWrite a function\
    \ that takes a string and returns the number of paragraphs in the string. \nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not letters. \nWrite a function that takes a string and returns the\
    \ number of words in the string that are not letters. \nWrite a function that\
    \ takes a string and returns the number of sentences in the string that are not\
    \ letters. \nWrite a function that takes a string and returns the number of paragraphs\
    \ in the string that are not letters. \nWrite a function that takes a string and\
    \ returns the number of characters in the string that are not letters. \nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that are not letters. \nWrite a function that takes a string and returns the\
    \ number of sentences in the string that are not letters. \nWrite a function that\
    \ takes a string and returns the number of paragraphs in the string that are not\
    \ letters. \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not letters. \nWrite a function that takes a string and\
    \ returns the number of words in the string that are not letters. \nWrite a function\
    \ that takes a string and returns the number of sentences in the string that are\
    \ not letters. \nWrite a function that takes a string and returns the number of\
    \ paragraphs in the string that are not letters. \nWrite a function that takes\
    \ a string and returns the number of characters in the string that are not letters.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that are not letters. \nWrite a function that takes a string and returns\
    \ the number of sentences in the string that are not letters. \nWrite a function\
    \ that takes a string and returns the number of paragraphs in the string that\
    \ are not letters. \nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not letters. \nWrite a function that takes\
    \ a string and returns the number of words in the string that are not letters.\
    \ \nWrite a function that takes a string and returns the number of sentences in\
    \ the string that are not letters. \nWrite a function that takes a string and\
    \ returns the number of paragraphs in the string that are not letters. \nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not letters. \nWrite a function that takes a string and returns the\
    \ number of words in the string that are not letters. \nWrite a function that\
    \ takes a string and returns the number of sentences in the string that are not\
    \ letters. \nWrite a function that takes a string and returns the number of paragraphs\
    \ in the string that are not letters. \nWrite a function that takes a string and\
    \ returns the number of characters in the string that ", "    same_chars(s0, s1,\
    \ 0)\nend", "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(s0)\
    \ == char(s1) for char in s0)\nend", "    len0 = length(s0)\n    len1 = length(s1)\n\
    \    if len0 > len1\n        len0, len1 = len1, len0\n    for i0 in 0..len0\n\
    \        for i1 in 0..len1\n            if s0[i0] != s1[i1]\n                return\
    \ false\n    return true\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n  \
    \  Check if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    \n    if s0 == \"\" || s1 == \"\"\n        return true\n  \
    \  \n    len0 = length(s0)\n    len1 = length(s1)\n    \n    if len0 != len1\n\
    \        return false\n    \n    i = 0\n    while i < len0\n        if s0[i] !=\
    \ s1[i]\n            return false\n        i += 1\n    \n    return true\nend",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if two words are anagrams of each other.\nThe\
    \ function should return true if and only if both words are anagrams of each other.\n\
    The function should return false if and only if either word is not an anagram\
    \ of each other.\nThe function should return false if and only if both words are\
    \ of the same length.\nThe function should return false if and only if one word\
    \ is longer than the other.\nThe function should return false if and only if one\
    \ word is shorter than the other.\nThe function should return false if and only\
    \ if one word is empty (length 0).\nThe function should return false if and only\
    \ if one word is null (length 0).\nThe function should return false if and only\
    \ if one word is undefined (length 0).\nThe function should return false if and\
    \ only if one word is NaN (length 0).\nThe function should return false if and\
    \ only if one word is infinity (length 0).\nThe function should return false if\
    \ and only if one word is negative (length 0).\nThe function should return false\
    \ if and only if one word is zero (length 0).\nThe function should return false\
    \ if and only if one word is positive (length 0).\nThe function should return\
    \ false if and only if one word is very long (length 10).\nThe function should\
    \ return false if and only if one word is very short (length 1).\nThe function\
    \ should return false if and only if one word is very short (length 0).\nThe function\
    \ should return false if and only if one word is very short (length -1).\nThe\
    \ function should return false if and only if one word is very short (length 10).\n\
    The function should return false if and only if one word is very short (length\
    \ -1).\nThe function should return false if and only if one word is very short\
    \ (length 10).\nThe function should return false if and only if one word is very\
    \ short (length -1).\nThe function should return false if and only if one word\
    \ is very short (length 10).\nThe function should return false if and only if\
    \ one word is very short (length -1).\nThe function should return false if and\
    \ only if one word is very short (length 10).\nThe function should return false\
    \ if and only if one word is very short (length -1).\nThe function should return\
    \ false if and only if one word is very short (length 10).\nThe function should\
    \ return false if and only if one word is very short (length -1).\nThe function\
    \ should return false if ", "    same_chars = true\n    for c in s0:\n       \
    \ if c not in s1:\n            same_chars = false\n            break\n    return\
    \ same_chars\nend\n</cell>\n<code language=julia-1.5>", "    same_chars(s0, s1)\
    \ = length(s0) == length(s1) && all(char == s0_char for (char, s0_char) in zip(s0,\
    \ s1))\nend", "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(c)\
    \ == char(s0[c]) for c in s0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Check if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    same_chars = true\n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    return same_chars\nend\n\
    </cell>\n<code language=julia-1.1>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n   \
    \ true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   \n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"\n    \n    if s0 == s1:\n        return True\n    \n\
    \    len0 = length(s0)\n    len1 = length(s1)\n    \n    if len0 > len1:\n   \
    \     return False\n    \n    if len0 == len1:\n        \n        chars0 = split(s0)\n\
    \        chars1 = split(s1)\n        \n        for c in chars0:\n            if\
    \ c not in chars1:\n                return False\n            \n        return\
    \ True\n    \n    return False\n    \n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n\
    \    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars_chars_idx::Vector{Int} = Vector{Int}()\n\
    \    same_chars_chars_idx = [i for (i, c) in enumerate(s0) if c == s1[i]]\n  \
    \  return length(same_chars_chars_idx) == 0\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    len = length(s0)\n    len1 = length(s1)\n    if\
    \ len == len1\n        for (i1,c1) in enumerate(cat(s0))\n            for (i2,c2)\
    \ in enumerate(cat(s1))\n                if c1 == c2\n                    true\n\
    \                else\n                    false\n    else\n        false\n  \
    \  end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Check if two words\
    \ have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   len0 = length(s0)\n    len1 = length(s1)\n    if len0 != len1\n        return\
    \ false\n    elseif len0 == 0\n        return true\n    elseif len1 == 0\n   \
    \     return true\n    else\n        char0 = s0[1..len0]\n        char1 = s1[1..len1]\n\
    \        return char0 == char1\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Check if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n    if\
    \ len0 != len1\n        return false\n    end\n    \n    i = 0\n    while i <\
    \ len0\n        if s0[i] != s1[i]\n            return false\n        i += 1\n\
    \    end\n    \n    return true\nend\n</cell>\n<text>\nExercise 5\nWrite a function\
    \ that checks if a word is palindrome.\nThe word is a palindrome if it reads the\
    \ same backward as forward.\nThe word is palindrome if every character is the\
    \ same and in the same order.\nThe word is palindrome if every character is the\
    \ same and in the same order.\nThe word is not palindrome if there are any characters\
    \ that are not the same or in the same order.\nThe word is not palindrome if there\
    \ are any characters that are not the same or in the same order.\nThe word is\
    \ not palindrome if there are any characters that are not the same or in the same\
    \ order.\nThe word is not palindrome if there are any characters that are not\
    \ the same or in the same order.\nThe word is not palindrome if there are any\
    \ characters that are not the same or in the same order.\nThe word is not palindrome\
    \ if there are any characters that are not the same or in the same order.\nThe\
    \ word is not palindrome if there are any characters that are not the same or\
    \ in the same order.\nThe word is not palindrome if there are any characters that\
    \ are not the same or in the same order.\nThe word is not palindrome if there\
    \ are any characters that are not the same or in the same order.\nThe word is\
    \ not palindrome if there are any characters that are not the same or in the same\
    \ order.\nThe word is not palindrome if there are any characters that are not\
    \ the same or in the same order.\nThe word is not palindrome if there are any\
    \ characters that are not the same or in the same order.\nThe word is not palindrome\
    \ if there are any characters that are not the same or in the same order.\nThe\
    \ word is not palindrome if there are any characters that are not the same or\
    \ in the same order.\nThe word is not palindrome if there are any characters that\
    \ are not the same or in the same order.\nThe word is not palindrome if there\
    \ are any characters that are not the same or in the same order.\nThe word is\
    \ not palindrome if there are any characters that are not the same or in the same\
    \ order.\nThe word is not palindrome if there are any characters that are not\
    \ the same or in the same order.\nThe word is not palindrome if there are any\
    \ characters that are not the same or in the same order.\nThe word is not palindrome\
    \ if there are any characters that are not the same or in the same order.\nThe\
    \ word is not palindrome if there are any characters that are not the same or\
    \ in the same order.\nThe word ", "    same_chars = true\n    for c in s0:\n \
    \       if c not in s1:\n            same_chars = false\n            break\n \
    \   return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n\
    \    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_", "    same_chars = true\n    for c in s0:\n        if c\
    \ not in s1:\n            same_chars = false\n            break\n    return same_chars\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n\
    \    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) || same_chars(s1, s0)\nend", "    same_chars(s0, s1, 0)\n\
    end", "    same_chars = true\n    for c in s0:\n        if c not in s1:\n    \
    \        same_chars = false\n            break\n    return same_chars\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    \n    same_chars\
    \ = true\n    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n    if len0\
    \ != len1\n        same_chars = false\n    end\n    \n    for i \u2208 1:len0\n\
    \        if s0[i] != s1[i]\n            same_chars = false\n            break\n\
    \    end\n    \n    return same_chars\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of times a substring appears in a string.",
  "    same_chars(s0, s1) || same_chars(s1, s0)\nend", "    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    \n    if length(s0) != length(s1)\n        return\
    \ false\n    \n    i = 0\n    while i < length(s0)\n        if s0[i] != s1[i]\n\
    \            return false\n        i += 1\n    return true\nend", "    if s0 ==\
    \ s1 then return true else return false end\n    \n    local i::Int64 = 1\n  \
    \  local j::Int64 = 1\n    local k::Int64 = 1\n    local l::Int64 = 1\n    local\
    \ m::Int64 = 1\n    local n::Int64 = 1\n    local o::Int64 = 1\n    local p::Int64\
    \ = 1\n    local q::Int64 = 1\n    local r::Int64 = 1\n    local s::Int64 = 1\n\
    \    local t::Int64 = 1\n    local u::Int64 = 1\n    local v::Int64 = 1\n    local\
    \ w::Int64 = 1\n    local x::Int64 = 1\n    local y::Int64 = 1\n    local z::Int64\
    \ = 1\n    local a::Int64 = 1\n    local b::Int64 = 1\n    local c::Int64 = 1\n\
    \    local d::Int64 = 1\n    local e::Int64 = 1\n    local f::Int64 = 1\n    local\
    \ g::Int64 = 1\n    local h::Int64 = 1\n    local i::Int64 = 1\n    local j::Int64\
    \ = 1\n    local k::Int64 = 1\n    local l::Int64 = 1\n    local m::Int64 = 1\n\
    \    local n::Int64 = 1\n    local o::Int64 = 1\n    local p::Int64 = 1\n    local\
    \ q::Int64 = 1\n    local r::Int64 = 1\n    local s::Int64 = 1\n    local t::Int64\
    \ = 1\n    local u::Int64 = 1\n    local v::Int64 = 1\n    local w::Int64 = 1\n\
    \    local x::Int64 = 1\n    local y::Int64 = 1\n    local z::Int64 = 1\n    local\
    \ a::Int64 = 1\n    local b::Int64 = 1\n    local c::Int64 = 1\n    local d::Int64\
    \ = 1\n    local e::Int64 = 1\n    local f::Int64 = 1\n    local g::Int64 = 1\n\
    \    local h::Int64 = 1\n    local i::Int64 = 1\n    local j::Int64 = 1\n    local\
    \ k::Int64 = 1\n    local l::Int64 = 1\n    local m::Int64 = 1\n    local n::Int64\
    \ = 1\n    local o::Int64 = 1\n    local p::Int64 = 1\n    local q::Int64 = 1\n\
    \    local r::Int64 = 1\n    local s::Int64", "    same_chars(s0, s1) || same_chars(s1,\
    \ s0)\nend", "    same_chars = true\n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    return same_chars\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n   \
    \ true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) || same_chars(s1, s0)\nend", "    same_chars = true\n \
    \   for c in s0:\n        if c not in s1:\n            same_chars = false\n  \
    \          break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars_chars_ = same_chars_chars_(s0, s1)\n\
    \    if same_chars_chars_ == true\n        same_chars_chars_ = same_chars_chars_(s1,\
    \ s0)\n    end\n    return same_chars_chars_\nend\n</cell>\n<code language=julia-1.4>",
  "    same_chars(s0, s1) || same_chars(s1, s0)\nend", "    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(c) == char(s0[end-1]) for c in s0)\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    same_chars(s0,\
    \ s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n\
    \    Check if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    same_chars(s0, s1) = length(s0) == length(s1)\n    for (i0,\
    \ s0) in zip([0..], s0)\n        for (i1, s1) in zip([0..], s1)\n            if\
    \ s0[i0] == s1[i1]\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a substring appears in a string.", "    len1\
    \ = length(s0)\n    len2 = length(s1)\n    if len1 == len2\n        for (i, c)\
    \ in zip(s0, s1)\n            if i != c\n                return false\n      \
    \  return true\n    else\n        return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars(s0, s1) || same_chars(s1, s0)\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n   \
    \ true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) = length(s0) == length(s1) && all(char(c) == char(s0[i\
    \ .. i + 1]) for i \u2208 0..length(s0) - 1) \nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    \n    same_chars(s0, s1) = length(s0) == length(s1)\
    \ && all(char(s0[i]) == char(s1[i]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_char",
  "    same_chars(s0, s1, 0)\nend", "    same_chars = true\n    for c in s0:\n   \
    \     if c not in s1:\n            same_chars = false\n            break\n   \
    \ return same_chars\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n\
    \    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    len0 = length(s0)\n    len1 = length(s1)\n    if len0 != len1\n\
    \        return false\n    \n    i = 0\n    while i < len0\n        if s0[i] !=\
    \ s1[i]\n            return false\n        i += 1\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    if s0 == s1\
    \ \n        then true\n        else false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars = true\n    for c in s0:\n        if\
    \ c not in s1:\n            same_chars = false\n            break\n    return\
    \ same_chars\nend", "    len = length(s0)\n    if len != length(s1)\n        return\
    \ false\n    for (i1,c1) in enumerate((s0,s1))\n        for (i2,c2) in enumerate((s0,s1))\n\
    \            if i1 != i2\n                && c1 == c2\n            else\n    \
    \            return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    len = length(s0)\n    if len != length(s1)\n \
    \       return false\n    \n    i = 0\n    while i < len\n        if s0[i] !=\
    \ s1[i]\n            return false\n        i += 1\n    return true\nend", "  \
    \  same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    len0 = length(s0)\n    len1 = length(s1)\n   \
    \ if len0 != len1\n        return false\n    else\n        chars = \"\"\n    \
    \    for c in s0:\n            if c != s1\n                chars = chars + c\n\
    \        return chars == \"\"\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string. \nWrite a function that takes a string and returns the number of sentences\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of lines in the string. \nWrite a function that takes a string and returns the\
    \ number of characters in the string that are not spaces. \nWrite a function that\
    \ takes a string and returns the number of words in the string that are not spaces.\
    \ \nWrite a function that takes a string and returns the number of sentences in\
    \ the string that are not spaces. \nWrite a function that takes a string and returns\
    \ the number of lines in the string that are not spaces. \nWrite a function that\
    \ takes a string and returns the number of characters in the string that are not\
    \ spaces and words. \nWrite a function that takes a string and returns the number\
    \ of words in the string that are not spaces and words. \nWrite a function that\
    \ takes a string and returns the number of sentences in the string that are not\
    \ spaces and words. \nWrite a function that takes a string and returns the number\
    \ of lines in the string that are not spaces and words. \nWrite a function that\
    \ takes a string and returns the number of characters in the string that are not\
    \ spaces and words and sentences. \nWrite a function that takes a string and returns\
    \ the number of words in the string that are not spaces and words and sentences.\
    \ \nWrite a function that takes a string and returns the number of sentences in\
    \ the string that are not spaces and words and sentences. \nWrite a function that\
    \ takes a string and returns the number of lines in the string that are not spaces\
    \ and words and sentences. \nWrite a function that takes a string and returns\
    \ the number of characters in the string that are not spaces and words and sentences\
    \ and lines. \nWrite a function that takes a string and returns the number of\
    \ words in the string that are not spaces and words and sentences and lines. \n\
    Write a function that takes a string and returns the number of sentences in the\
    \ string that are not spaces and words and sentences and lines. \nWrite a function\
    \ that takes a string and returns the number of lines in the string that are not\
    \ spaces and words and sentences and lines. \nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not spaces and words\
    \ and sentences and lines and characters. \nWrite a function that takes a string\
    \ and returns the number of words in the string that are not spaces and words\
    \ and sentences and lines and characters. \nWrite a function that takes a string\
    \ and returns the number of sentences in the string that are not spaces and words\
    \ and sentences and lines and characters. \nWrite a function that takes a string\
    \ and returns the number of lines in the string that are not spaces and words\
    \ and ", "    same_chars_chars_idx::Array{Int,1} = Array{Int,1}(undef, length(s0))\n\
    \    for idx in 1:length(s0)\n        same_chars_chars_idx[idx] = find(s0[idx]\
    \ == s1[idx])\n    end\n    same_chars_chars_idx == [length(s0)]\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    same_chars_chars_\
    \ = same_chars_chars_(s0, s1)\n    if same_chars_chars_ == true\n        same_chars_chars_\
    \ = same_chars_chars_(s1, s0)\n    end\n    return same_chars_chars_\nend\n</cell>\n\
    <code language=julia-1.5>", "    same_chars(s0, s1) = length(s0) == length(s1)\
    \ && all(char(c) == char(c) for c in s0)\nend", "    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0) == char(s1) for char in s0)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nThe function should ignore non-alphabetic characters and count\
    \ the alphabetic characters.\nThe function should ignore duplicate characters.\n\
    The function should ignore case. \nThe function should ignore punctuation.\nThe\
    \ function should ignore non-alphabetic characters and count the alphabetic characters.\n\
    The function should ignore duplicate characters.\nThe function should ignore case.\
    \ \nThe function should ignore punctuation.\nThe function should ignore non-alphabetic\
    \ characters and count the alphabetic characters.\nThe function should ignore\
    \ duplicate characters.\nThe function should ignore case. \nThe function should\
    \ ignore punctuation.\nThe function should ignore non-alphabetic characters and\
    \ count the alphabetic characters.\nThe function should ignore duplicate characters.\n\
    The function should ignore case. \nThe function should ignore punctuation.\nThe\
    \ function should ignore non-alphabetic characters and count the alphabetic characters.\n\
    The function should ignore duplicate characters.\nThe function should ignore case.\
    \ \nThe function should ignore punctuation.\nThe function should ignore non-alphabetic\
    \ characters and count the alphabetic characters.\nThe function should ignore\
    \ duplicate characters.\nThe function should ignore case. \nThe function should\
    \ ignore punctuation.\nThe function should ignore non-alphabetic characters and\
    \ count the alphabetic characters.\nThe function should ignore duplicate characters.\n\
    The function should ignore case. \nThe function should ignore punctuation.\nThe\
    \ function should ignore non-alphabetic characters and count the alphabetic characters.\n\
    The function should ignore duplicate characters.\nThe function should ignore case.\
    \ \nThe function should ignore punctuation.\nThe function should ignore non-alphabetic\
    \ characters and count the alphabetic characters.\nThe function should ignore\
    \ duplicate characters.\nThe function should ignore case. \nThe function should\
    \ ignore punctuation.\nThe function should ignore non-alphabetic characters and\
    \ count the alphabetic characters.\nThe function should ignore duplicate characters.\n\
    The function should ignore case. \nThe function should ignore punctuation.\nThe\
    \ function should ignore non-alphabetic characters and count the alphabetic characters.\n\
    The function should ignore duplicate characters.\nThe function should ignore case.\
    \ \nThe function should ignore punctuation.\nThe function should ignore non-alphabetic\
    \ characters and count the alphabetic characters.\nThe function should ignore\
    \ duplicate characters.\nThe function should ignore case. \nThe function should\
    \ ignore punctuation.\nThe function ", "    same_chars(s0, s1) || same_chars(s1,\
    \ s0)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Check if two words\
    \ have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   \n    if length(s0) == length(s1) \n        then true\n        else false\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Check if two words\
    \ have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars(s0, s1) = 0\n    same_chars(s0, s1)\
    \ = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_", "    same_chars_chars_ = same_chars_chars_(s0,\
    \ s1)\n    if same_chars_chars_\n        same_chars_chars_ = same_chars_chars_\n\
    \    else\n        same_chars_chars_ = same_chars_chars_(s1, s0)\n    end\n  \
    \  return same_chars_chars_\nend\n</cell>\n<code language=julia-1.5>", "    len1\
    \ = length(s1)\n    len2 = length(s2)\n    if len1 != len2\n        return false\n\
    \    \n    i = 0\n    while i < len1\n        if s1[i] != s2[i]\n            return\
    \ false\n        i += 1\n    return true\nend\n</cell>\n<text>\nExercise 7\nWrite\
    \ a function that returns the number of characters in a string.", "    same_chars\
    \ = true\n    for c in s0:\n        if c not in s1:\n            same_chars =\
    \ false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars = true\n    for c in s0:\n        if\
    \ c not in s1:\n            same_chars = false\n            break\n    return\
    \ same_chars\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Check if two\
    \ words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) || same_chars(s1, s0)\nend", "    same_chars = true\n \
    \   for c in s0:\n        if c not in s1:\n            same_chars = false\n  \
    \          break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars = true\n    for c in s0:\n        if\
    \ c not in s1:\n            same_chars = false\n            break\n    return\
    \ same_chars\nend", "    if s0 == s1 \n        then true\n        else false\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of characters in the string.\nThe function should ignore\
    \ non-alphabetic characters and count the alphabetic characters.\nThe function\
    \ should ignore duplicate characters.\nThe function should ignore case when comparing\
    \ characters.\nThe function should ignore case when comparing strings.\nThe function\
    \ should ignore case when comparing strings.\nThe function should ignore case\
    \ when comparing strings.\nThe function should ignore case when comparing strings.\n\
    The function should ignore case when comparing strings.\nThe function should ignore\
    \ case when comparing strings.\nThe function should ignore case when comparing\
    \ strings.\nThe function should ignore case when comparing strings.\nThe function\
    \ should ignore case when comparing strings.\nThe function should ignore case\
    \ when comparing strings.\nThe function should ignore case when comparing strings.\n\
    The function should ignore case when comparing strings.\nThe function should ignore\
    \ case when comparing strings.\nThe function should ignore case when comparing\
    \ strings.\nThe function should ignore case when comparing strings.\nThe function\
    \ should ignore case when comparing strings.\nThe function should ignore case\
    \ when comparing strings.\nThe function should ignore case when comparing strings.\n\
    The function should ignore case when comparing strings.\nThe function should ignore\
    \ case when comparing strings.\nThe function should ignore case when comparing\
    \ strings.\nThe function should ignore case when comparing strings.\nThe function\
    \ should ignore case when comparing strings.\nThe function should ignore case\
    \ when comparing strings.\nThe function should ignore case when comparing strings.\n\
    The function should ignore case when comparing strings.\nThe function should ignore\
    \ case when comparing strings.\nThe function should ignore case when comparing\
    \ strings.\nThe function should ignore case when comparing strings.\nThe function\
    \ should ignore case when comparing strings.\nThe function should ignore case\
    \ when comparing strings.\nThe function should ignore case when comparing strings.\n\
    The function should ignore case when comparing strings.\nThe function should ignore\
    \ case when comparing strings.\nThe function should ignore case when comparing\
    \ strings.\nThe function should ignore case when comparing strings.\nThe function\
    \ should ignore case when comparing strings.\nThe function should ignore case\
    \ when comparing strings.\nThe function should ignore case when comparing strings.\n\
    The function should ignore case when comparing strings.\nThe function should ignore\
    \ case when comparing strings.\nThe function should ignore case when comparing\
    \ strings.\nThe function should ignore case when comparing strings.\nThe function\
    \ should ignore case when comparing strings.", "    same_chars = true\n    for\
    \ c in s0:\n        if c not in s1:\n            same_chars = false\n        \
    \    break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\"\
    \"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    len0 = length(s0)\n    len1 = length(s1)\n   \
    \ if len0 != len1\n        return false\n    \n    i = 0\n    while i < len0\n\
    \        if s0[i] != s1[i]\n            return false\n        i += 1\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Check if two words\
    \ have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if\
    \ s1 == \"\" then return false\n    \n    i = 0\n    j = 0\n    while i < s0.length\
    \ and j < s1.length\n        if s0[i] == s1[j] then \n            i += 1\n   \
    \         j += 1\n        else \n            if s0[i] > s1[j] then return false\n\
    \            i += 1\n            j += 1\n    return i == s0.length\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    len0 = length(s0)\n\
    \    len1 = length(s1)\n    if len0 == len1\n        true\n    elseif len0 < len1\n\
    \        false\n    else\n        same_chars(s1[len1..], s0[len0..])\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n\
    \    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars = true\n    for c in s0:\n        if c not in s1:\n           \
    \ same_chars = false\n            break\n    return same_chars\nend", "    same_chars(s0,\
    \ s1) || (s1 == s0)\nend", "    same_chars(s0, s1) = length(s0) == length(s1)\
    \ && all(char(c) == char(s0[c]) for c = 0:length(s0) - 1)\nend\n</cell>\n<text>\n\
    Exercise 7: Write a function that checks if two words are anagrams of each other.\
    \ Hint: Use same_chars to compare the two words. Hint: Use a set for efficiency.",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars(s0, s1, 0)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars(s0, s1) || same_chars(s1, s0)\nend\n\
    </cell>\n<code language=julia-1.5>", "    len0 = length(s0)\n    len1 = length(s1)\n\
    \    if len0 != len1\n        return false\n    \n    i = 0\n    while i < len0\n\
    \        if s0[i] != s1[i]\n            return false\n        i += 1\n    return\
    \ true\nend", "    same_chars = true\n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    return same_chars\nend",
  "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(c) == char(s0[c])\
    \ for c = 0:length(s0) - 1) \nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that checks if two words are anagrams of each other.", "    same_chars = true\n\
    \    for c in s0:\n        if c not in s1:\n            same_chars = false\n \
    \           break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    if s0 == s1 then return true\n    else if s0 ==\
    \ \"\" then return true\n    else if s1 == \"\" then return true\n    else if\
    \ s0 == s1 then return true\n    else if s0 == \"\" then return true\n    else\
    \ if s1 == \"\" then return true\n    else if s0 == s1 then return true\n    else\
    \ if s0 == \"\" then return true\n    else if s1 == \"\" then return true\n  \
    \  else if s0 == s1 then return true\n    else if s0 == \"\" then return true\n\
    \    else if s1 == \"\" then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then return true\n    else if s1 == \"\" then return true\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" then return true\n\
    \    else if s1 == \"\" then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then return true\n    else if s1 == \"\" then return true\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" then return true\n\
    \    else if s1 == \"\" then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then return true\n    else if s1 == \"\" then return true\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" then return true\n\
    \    else if s1 == \"\" then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then return true\n    else if s1 == \"\" then return true\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" then return true\n\
    \    else if s1 == \"\" then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then return true\n    else if s1 == \"\" then return true\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" then return true\n\
    \    else if s1 == \"\" then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then return true\n    else if s1 == \"\" then return true\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" then return true\n\
    \    else if s1 == \"\" then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then ", "    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = same_chars(s0, s1) + same_chars(s1, s0)\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n\
    \    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) || same_chars(s1, s0)\nend", "    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend", "    same_chars(s0, s1) || same_chars(s1, s0)\nend",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that checks if a word is palindrome or not.\nA palindrome\
    \ is a word, phrase, or other sequence of characters which reads the same backward\
    \ as forward.\nFor example, \u201Cradar\u201D is a palindrome while \u201Cracecar\u201D\
    \ is not.\nWrite a function that takes a string and checks if it is a palindrome.\n\
    If the string is a palindrome, return true. Otherwise, return false.\nFor this\
    \ exercise, use the same_chars function you wrote earlier.\nFor this exercise,\
    \ use the same_chars function you wrote earlier.", "    len = length(s0)\n   \
    \ len1 = length(s1)\n    if len != len1 \n        return false\n    \n    i =\
    \ 0\n    while i < len\n        if s0[i] != s1[i]\n            return false\n\
    \        i += 1\n    return true\nend", "    same_chars(s0, s1) || same_chars(s1,\
    \ s0)\nend", "    len0 = length(s0)\n    len1 = length(s1)\n    if len0 != len1\n\
    \        return false\n    else\n        for i in 0..len0\n            if s0[i]\
    \ != s1[i]\n                return false\n        return true\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n   \
    \ true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   if s0 == s1 \n        then true\n        else false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    len0 = length(s0)\n\
    \    len1 = length(s1)\n    if len0 != len1\n        return false\n    \n    i\
    \ = 0\n    while i < len0\n        if s0[i] != s1[i]\n            return false\n\
    \        i += 1\n    return true\nend\n</cell>\n<code language=julia-1.5>", " \
    \   same_chars_chars_idx::Array{Int,1} = Array{Int,1}(undef,0)\n    same_chars_chars_idx[1]\
    \ = 1\n    same_chars_chars_idx[2] = 2\n    same_chars_chars_idx[3] = 4\n    same_chars_chars_idx[4]\
    \ = 5\n    same_chars_chars_idx[5] = 6\n    same_chars_chars_idx[6] = 7\n    same_chars_chars_idx[7]\
    \ = 8\n    same_chars_chars_idx[8] = 9\n    same_chars_chars_idx[9] = 10\n   \
    \ same_chars_chars_idx[10] = 11\n    same_chars_chars_idx[11] = 12\n    same_chars_chars_idx[12]\
    \ = 13\n    same_chars_chars_idx[13] = 14\n    same_chars_chars_idx[14] = 15\n\
    \    same_chars_chars_idx[15] = 16\n    same_chars_chars_idx[16] = 17\n    same_chars_chars_idx[17]\
    \ = 18\n    same_chars_chars_idx[18] = 19\n    same_chars_chars_idx[19] = 20\n\
    \    same_chars_chars_idx[20] = 21\n    same_chars_chars_idx[21] = 22\n    same_chars_chars_idx[22]\
    \ = 23\n    same_chars_chars_idx[23] = 24\n    same_chars_chars_idx[24] = 25\n\
    \    same_chars_chars_idx[25] = 26\n    same_chars_chars_idx[26] = 27\n    same_chars_chars_idx[27]\
    \ = 28\n    same_chars_chars_idx[28] = 29\n    same_chars_chars_idx[29] = 30\n\
    \    same_chars_chars_idx[30] = 31\n    same_chars_chars_idx[31] = 32\n    same_chars_chars_idx[32]\
    \ = 33\n    same_chars_chars_idx[33] = 34\n    same_chars_chars_idx[34] = 35\n\
    \    same_chars_chars_idx[35] = 36\n    same_chars_chars_idx[36] = 37\n    same_chars_chars_idx[37]\
    \ = 38\n    same_chars_chars_idx[38] = 39\n    same_chars_chars_idx[39] = 40\n\
    \    same_chars_chars_idx[40] = 42\n    same_chars_chars_idx[42] = 43\n    same_chars_chars_idx[43]\
    \ = 44\n    same_chars_chars_idx[44] = 45\n    same_chars_chars_idx[45] = 46\n\
    \    same_chars_chars_idx[46] = 47\n    same_chars_chars_idx[47] = 48\n    same_chars_chars_idx[48]\
    \ = 49\n    same_chars_chars_idx[49] = 50\n    same_chars_chars_idx[50] = 51\n\
    \    same_chars_chars_idx[51] = 52\n    same_chars_chars_idx[", "    same_chars\
    \ = true\n    for c in s0:\n        if c not in s1:\n            same_chars =\
    \ false\n            break\n    return same_chars\nend", "    same_chars(s0, s1,\
    \ 0)\nend", "    if s0 == s1 then return true\n    else if s0 == \"\" then return\
    \ true\n    else if s1 == \"\" then return true\n    else if s0 == s1[1..] then\
    \ return true\n    else if s1 == s1[1..] then return true\n    else return false\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n\
    \    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars = true\n    for c in s0:\n        if c not in s1:\n           \
    \ same_chars = false\n            break\n    return same_chars\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    if s0 == s1\
    \ \n        then true\n        else false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars = true\n    for c in s0:\n        if\
    \ c not in s1:\n            same_chars = false\n            break\n    return\
    \ same_chars\nend", "    len = length(s0)\n    if len == length(s1)\n        for\
    \ (i, c) in zip(s0, s1)\n            if i != c\n                return false\n\
    \        return true\n    else\n        return false\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    len0 = length(s0)\n    len1 = length(s1)\n   \
    \ if len0 != len1\n        return false\n    \n    i = 0\n    while i < len0\n\
    \        if s0[i] != s1[i]\n            return false\n        i += 1\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words\
    \ have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars = true\n    for c in s0:\n        if c not in s1:\n           \
    \ same_chars = false\n            break\n    return same_chars\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of times a substring\
    \ appears in a string.", "    same_chars(s0, s1) || same_chars(s1, s0)\nend",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars = true\n    for c in s0:\n        if\
    \ c not in s1:\n            same_chars = false\n            break\n    return\
    \ same_chars\nend\n</cell>\n<code language=julia-1.0>", "    same_chars = true\n\
    \    for c in s0:\n        if c not in s1:\n            same_chars = false\n \
    \           break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars = true\n    for c in s0:\n        if\
    \ c not in s1:\n            same_chars = false\n            break\n    return\
    \ same_chars\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two\
    \ words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   len = length(s0)\n    if len != length(s1)\n        return false\n    for\
    \ (i1,c1) in enumerate(cat(s0))\n        for (i2,c2) in enumerate(cat(s1))\n \
    \           if c1 == c2\n                continue \n            if i1 == i2 \n\
    \                return false\n    return true\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    same_chars(s0, s1)\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    same_chars =\
    \ true\n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>",
  "    same_chars(s0, s1, 0)\nend\n</cell>\n<code language=julia-1.5>", "    same_chars\
    \ = true\n    for c in s0:\n        if c not in s1:\n            same_chars =\
    \ false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars = true\n    for c in s0:\n        if\
    \ c not in s1:\n            same_chars = false\n            break\n    return\
    \ same_chars\nend", "    same_chars = true\n    for c in s0:\n        if c not\
    \ in s1:\n            same_chars = false\n            break\n    return same_chars\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n\
    \    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars = true\n    for c in s0:\n        if c not in s1:\n           \
    \ same_chars = false\n            break\n    return same_chars\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    \n    \"\"\"\
    \n    Check if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    len = length(s0)\n    if len != length(s1)\n\
    \        return false\n    \n    i = 0\n    while i < len\n        if s0[i] !=\
    \ s1[i]\n            return false\n        i += 1\n    return true\nend", "  \
    \  same_chars(s0, s1) || same_chars(s1, s0)\nend", "    if s0 == s1 then return\
    \ true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n\
    \    if s0 == s1[1..] then return true\n    if s1 == s1[1..] then return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n\
    \    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(c)\
    \ == char(c0) for (c, c0) in zip(s0, s1))\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    len = length(s0)\n    if len == length(s1)\n \
    \       for (i, c) in zip(s0, s1)\n            if i != c\n                return\
    \ false\n        return true\n    return false\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars = true\n    for c in s0:\n        if\
    \ c not in s1:\n            same_chars = false\n            break\n    return\
    \ same_chars\nend", "    len = length(s0)\n    if len != length(s1)\n        return\
    \ false\n    for (i0, i1) in zip(xrange(len), xrange(len))\n        if s0[i0]\
    \ != s1[i1]\n            return false\n    return true\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars(s0, s1, 0)\nend", "    if s0 == s1\
    \ then true else false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n\
    \    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(c)\
    \ == char(s0[c]) for c in s0)\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\
    \n    Check if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    same_chars(s0, s1)\nend", "    len0 = length(s0)\n    len1\
    \ = length(s1)\n    if len0 != len1\n        return false\n    \n    i = 0\n \
    \   while i < len0\n        if s0[i] != s1[i]\n            return false\n    \
    \    i += 1\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Check if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    \n    \"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"\n    \n    if s0 ==\
    \ s1:\n        return True\n    \n    len0 = length(s0)\n    len1 = length(s1)\n\
    \    \n    if len0 != len1:\n        return False\n    \n    i = 0\n    while\
    \ i < len0 and i < len1:\n        if s0[i] != s1[i]:\n            return False\n\
    \        i += 1\n    \n    return True\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars(s0, s1) || same_chars(s1, s0)\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n   \
    \ true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1, 0)\nend", "    same_chars(s0, s1) = length(s0) == length(s1)\
    \ && all(char(c) == char(s0[c]) for c in s0)\nend", "    same_chars(s0, s1) =\
    \ length(s0) == length(s1) && all(char(s0) == char(s1) for char in s0)\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n   \
    \ true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars_chars_ = same_chars_chars_(s0, s1)\n    if same_chars_chars_ ==\
    \ true\n        same_chars_chars_ = same_chars_chars_(s1, s0)\n    end\n    return\
    \ same_chars_chars_\nend\n</cell>\n<code language=julia-1.5>", "    same_chars\
    \ = true\n    for c in s0:\n        if c not in s1:\n            same_chars =\
    \ false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars(s0, s1) = length(s0) == length(s1)\
    \ && all(char(c) == char(s0[c]) for c in s0)\nend", "    len = length(s0)\n  \
    \  len1 = length(s1)\n    if len == len1\n        for (i, c) in zip(1:len, s0)\n\
    \            if c != s1[i]\n                return false\n        return true\n\
    \    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    if s0 == s1 then return true\n    else if s0 ==\
    \ \"\" then return true\n    else if s1 == \"\" then return true\n    else if\
    \ s0 == s1 then return true\n    else if s0 == \"\" then return true\n    else\
    \ if s1 == \"\" then return true\n    else if s0 == s1 then return true\n    else\
    \ if s0 == \"\" then return true\n    else if s1 == \"\" then return true\n  \
    \  else if s0 == s1 then return true\n    else if s0 == \"\" then return true\n\
    \    else if s1 == \"\" then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then return true\n    else if s1 == \"\" then return true\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" then return true\n\
    \    else if s1 == \"\" then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then return true\n    else if s1 == \"\" then return true\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" then return true\n\
    \    else if s1 == \"\" then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then return true\n    else if s1 == \"\" then return true\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" then return true\n\
    \    else if s1 == \"\" then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then return true\n    else if s1 == \"\" then return true\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" then return true\n\
    \    else if s1 == \"\" then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then return true\n    else if s1 == \"\" then return true\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" then return true\n\
    \    else if s1 == \"\" then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then return true\n    else if s1 == \"\" then return true\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" then return true\n\
    \    else if s1 == \"\" then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then ", "    if s0 == s1 then true else false\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    same_chars =\
    \ true\n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    return same_chars\nend", "    len0 = length(s0)\n    len1\
    \ = length(s1)\n    if len0 != len1\n        return false\n    else\n        for\
    \ i in 0..len0\n            if s0[i] != s1[i]\n                return false\n\
    \        return true\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\
    \n    Check if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    same_chars = true\n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    return same_chars\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n   \
    \ true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   len = length(s0)\n    if len == length(s1)\n        for (i, c) in zip(1:len,\
    \ s0)\n            if c != s1[i]\n                return false\n        return\
    \ true\n    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    if s0 == s1 then true else false\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    same_chars =\
    \ true\n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars = true\n    for c in s0:\n        if\
    \ c not in s1:\n            same_chars = false\n            break\n    return\
    \ same_chars\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two\
    \ words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1, 0)\nend\n</cell>\n<text>\nExercise 7: Write a function\
    \ that counts the number of times a character appears in a string.\nThe function\
    \ should take two strings as arguments and return an integer that represents the\
    \ number of times the character appears in the first string.", "    same_chars(s0,\
    \ s1) = length(s0) == length(s1) && all(char(c) == char(s0[c]) for c = 0:length(s0)\
    \ - 1)\nend", "    same_chars = true\n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    return same_chars\nend",
  "    len0 = length(s0)\n    len1 = length(s1)\n    if len0 != len1\n        return\
    \ false\n    else\n        for (i0, i1) in zip(xrange(len0), xrange(len1))\n \
    \           if s0[i0] != s1[i1]\n                return false\n    return true\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n\
    \    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) = length(s0) == length(s1)\n    for c in s0:\n        if\
    \ c not in s1:\n            return false\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    same_chars =\
    \ true\n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars_chars_ = same_chars_chars_(s0, s1)\n\
    \    if same_chars_chars_ == true\n        same_chars_chars_ = same_chars_chars_(s1,\
    \ s0)\n    end\n    return same_chars_chars_\nend\n</cell>\n<code language=julia-1.5>",
  "    same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    same_chars = true\n    \n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    \n    return same_chars\n\
    end", "    same_chars(s0, s1) = length(s0) == length(s1) && all(char == s0_char\
    \ for (char, s0_char) in zip(s0, s1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars(s0, s1) || same_chars(s1, s0)\nend",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars = true\n    for c in s0:\n        if\
    \ c not in s1:\n            same_chars = false\n            break\n    return\
    \ same_chars\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Check if two\
    \ words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars = true\n    for c in s0:\n        if c not in s1:\n           \
    \ same_chars = false\n            break\n    return same_chars\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    same_chars(s0,\
    \ s1) || same_chars(s1, s0)\nend", "    same_chars(s0, s1) || same_chars(s1, s0)\n\
    end\n</cell>\n<code language=julia-1.3>", "    \n    if length(s0) != length(s1)\n\
    \        return false\n    \n    i = 0\n    j = length(s0) - 1\n    while i <\
    \ j\n        if s0[i] != s1[j]\n            return false\n        i += 1\n   \
    \     j -= 1\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Check if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    same_chars =\
    \ true\n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars = true\n    for c in s0:\n        if\
    \ c not in s1:\n            same_chars = false\n            break\n    return\
    \ same_chars\nend\n</cell>\n<code language=julia-1.5>", "    same_chars = true\n\
    \    for c in s0:\n        if c not in s1:\n            same_chars = false\n \
    \           break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>",
  "    same_chars(s0, s1, 0)\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
