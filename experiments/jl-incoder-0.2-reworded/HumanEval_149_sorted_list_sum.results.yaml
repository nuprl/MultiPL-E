language: jl
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = Vector{String}()\n    for\
    \ word in sorted_list\n        if length(word) % 2 != 0\n            push!(sorted_list_sum,\
    \ word)\n        end\n    end\n    return sorted_list_sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy7gmytgh.jl:27\nin expression starting at\
    \ /tmp/tmpy7gmytgh.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = []\n    for word in sorted_list\n\
    \        if length(word) % 2 == 1\n            sorted_list_sum .= word\n     \
    \   end\n    end\n    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeddyjekj.jl:27\nin expression starting at\
    \ /tmp/tmpeddyjekj.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst)\n    \n\
    \    sum = 0\n    for i in sorted_list\n        sum += length(i)\n    end\n  \
    \  \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst)\n    \n\
    \    sum = 0\n    for i in sorted_list\n        sum += length(i)\n    end\n  \
    \  \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst)\n    \n\
    \    sum = 0\n    for i in sorted_list\n        sum += length(i)\n    end\n  \
    \  \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst)\n    \n\
    \    sum = 0\n    for i in sorted_list\n        sum += length(i)\n    end\n  \
    \  \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst)\n    \n\
    \    sum = 0\n    for i in sorted_list\n        sum += length(i)\n    end\n  \
    \  \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst)\n    \n\
    \    sum = 0\n    for i in sorted_list\n        sum += length(i)\n    end\n  \
    \  \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst)\n    \n\
    \    sum = 0\n    for i in sorted_list\n        sum += length(i)\n    end\n  \
    \  \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst)\n    \n\
    \    sum = 0\n    for i in sorted_list\n        sum += length(i)\n    end\n  \
    \  \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst)\n    \n\
    \    sum = 0\n    for i in sorted_list\n        sum += length(i)\n    end\n  \
    \  \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst)\n    \n\
    \    sum = 0\n    for i in sorted_list\n        \nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpxjeu2ac8.jl:154\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxjeu2ac8.jl:1\n\
    in expression starting at /tmp/tmpxjeu2ac8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = Vector{String}()\n    for\
    \ word in sorted_list\n        if length(word) % 2 != 0\n            push!(sorted_list_sum,\
    \ word)\n        end\n    end\n    return sorted_list_sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy7gmytgh.jl:27\nin expression starting at\
    \ /tmp/tmpy7gmytgh.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(lst,\
    \ by=sum)\n    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1oycec74.jl:31\nin expression starting at\
    \ /tmp/tmp1oycec74.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        \n        if length(word) % 2 != 0\n   \
    \         \n            push!(sorted_list_sum, word)\n            \n        end\n\
    \    end\n    \n    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"aa\", \"a\", \"aaa\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\"])\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\",\
    \ \"ab\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\",\
    \ \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"\
    ab\", \"ab\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\",\
    \ \"ab\", \"ab\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\",\
    \ \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptn3cy1_m.jl:34\nin expression starting at\
    \ /tmp/tmptn3cy1_m.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list\n    \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppp3_ob2v.jl:36\nin expression starting at\
    \ /tmp/tmppp3_ob2v.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = []\n    for word in sorted_list\n\
    \        if length(word) == length(sorted_list[1])\n            sorted_list_sum\
    \ .= word\n        else\n            sorted_list_sum .= word\n        end\n  \
    \  end\n    return sorted_list_sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3fepprbq.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp3fepprbq.jl:34\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: String[] == [\"aa\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3fepprbq.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3fepprbq.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3fepprbq.jl:35\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: String[]\
    \ == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3fepprbq.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3fepprbq.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3fepprbq.jl:37\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: String[] == [\"abcd\"\
    , \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3fepprbq.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3fepprbq.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3fepprbq.jl:38\n  Expression: candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"]\n   Evaluated: String[] == [\"AI\", \"ai\"\
    , \"au\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3fepprbq.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3fepprbq.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3fepprbq.jl:40\n  Exp"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        if length(word) == length(sorted_list[1])\n\
    \            sorted_list_sum .= word\n        else\n            sorted_list_sum\
    \ .= word\n        end\n    end\n    \n    return sorted_list_sum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfarcnjra.jl:33\nin expression starting at\
    \ /tmp/tmpfarcnjra.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by=length)\
    \ \n    \n    for i in sorted_list\n        sum += length(i)\n    end\n    \n\
    \    sorted_list = sort(lst, by=length) \n    \n    for i in sorted_list\n   \
    \     sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by=length)\
    \ \n    \n    for i in sorted_list\n        sum += length(i)\n    end\n    \n\
    \    sorted_list = sort(lst, by=length) \n    \n    for i in sorted_list\n   \
    \     sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by=length)\
    \ \n    \n    for i in sorted_list\n        sum += length(i)\n    end\n    \n\
    \    sorted_list = sort(lst, by=length) \n    \n    for i in sorted_list\n   \
    \     sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by=length)\
    \ \n    \n    for i in sorted_list\n        sum += length(i)\n    end\n    \n\
    \    sorted_list = sort(lst, by=length) \n    \n    for i in sorted_list\n   \
    \     sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by=length)\
    \ \n    \n    for i in sorted_list\n        sum += length(i)\n    end\n    \n\
    \    sorted_list = sort(lst, by=length) \n    \n    for i in sorted_list\n   \
    \     sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by=length)\
    \ \n    \n    for i in sorted_list\n        sum += length(i)\n    end\n    \n\
    \    sorted_list = sort(lst, by=length) \n    \n    for i in sorted_list\n   \
    \     sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by=length)\
    \ \n    \n    for i in sorted_list\n        sum += length(i)\n    end\n    \n\
    \    sorted_list = sort(lst, by=length) \n    \n    for i in sorted_list\n   \
    \     sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by=length)\
    \ \n    \n    for i in sorted_list\n        sum += length(i)\n    end\n    \n\
    \    sorted_list = sort(lst, by=length) \n    \n    for i in sorted_list\n   \
    \     sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by=length)\
    \ \n    \n    for i in sorted_list\n        sum += length(i)\n    end\n    \n\
    \    sorted_list = sort(lst, by=length) \n    \n    for i in sorted_list\n   \
    \     sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by=length)\
    \ \n    \n    for i in sorted_list\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmptskmvq0j.jl:136\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptskmvq0j.jl:1\n\
    in expression starting at /tmp/tmptskmvq0j.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list = remove!(sorted_list, x -> length(x)\
    \ % 2 == 1)\n    sorted_list = remove!(sorted_list, x -> length(x) == 0)\n   \
    \ return sorted_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0bnofo5c.jl:23\nin expression starting at\
    \ /tmp/tmp0bnofo5c.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = []\n    for word in sorted_list\n\
    \        if length(word) % 2 == 1\n            push!(sorted_list_sum, word)\n\
    \        end\n    end\n    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8aa3j3kb.jl:27\nin expression starting at\
    \ /tmp/tmp8aa3j3kb.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sum = 0\n    for i in sorted_list\n     \
    \   sum += length(i)\n    end\n    sorted_list\nend\n\"\"\"Write a function that\
    \ accepts a vector of strings as a parameter,\n    deletes the strings that have\
    \ odd lengths from it,\n    and returns the resulted vector with a sorted order,\n\
    \    The vector is always a vector of strings and never a vector of numbers,\n\
    \    and it may contain duplicates.\n    The order of the vector should be ascending\
    \ by length of each word, and you\n    should return the vector sorted by that\
    \ rule.\n    If two words have the same length, sort the vector alphabetically.\n\
    \    The function should return a vector of strings in sorted order.\n    You\
    \ may assume that all words will have the same length.\n    For example:\n   \
    \ >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>> list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp480z6i91.jl:25\nin expression starting at /tmp/tmp480z6i91.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sum = 0\n    for i in sorted_list\n     \
    \   sum += length(i)\n    end\n    sorted_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp77dmtxew.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp77dmtxew.jl:30\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp77dmtxew.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp77dmtxew.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp77dmtxew.jl:31\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp77dmtxew.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp77dmtxew.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp77dmtxew.jl:32\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp77dmtxew.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp77dmtxew.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp77dmtxew.jl:33\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp77dmtxew.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp77dmtxew.jl:29\n"
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        \n        if length(word) == length(sorted_list[1])\n\
    \            \n            sorted_list_sum = [word]\n            \n        else\n\
    \            \n            sorted_list_sum = sorted_list_sum + word\n        end\n\
    \    end\n    \n    return sorted_list_sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpa1gc35jc.jl:42\n  Test threw
    exception\n  Expression: candidate(["aa", "a", "aaa"]) == ["aa"]\n  MethodError:
    no method matching +(::Vector{String}, ::String)\n  Closest candidates are:\n    +(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(::Array,
    !Matched::Array...) at /shared/centos7/julia/1.7.3/share/julia/base/arraymath.jl:43\n    +(::Array,
    !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1775\n    ...\n  Stacktrace:\n   [1]
    sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpa1gc35jc.jl:31\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa1gc35jc.jl:42 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa1gc35jc.jl:41\n'''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by = x ->\
    \ length(x))\n    \n    for i in sorted_list\n        sum += length(i)\n    end\n\
    \    \n    sorted_list = sort(lst, by = x -> x)\n    \n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    return sorted_list\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc3ky16pa.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmpc3ky16pa.jl:45\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc3ky16pa.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc3ky16pa.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpc3ky16pa.jl:46\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc3ky16pa.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc3ky16pa.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpc3ky16pa.jl:47\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc3ky16pa.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc3ky16pa.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpc3ky16pa.jl:48\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc3ky16pa.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc3ky16pa.jl:44\n"
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        \n        if length(word) == length(sorted_list[1])\n\
    \            \n            sorted_list_sum = [word]\n            \n        else\n\
    \            \n            sorted_list_sum = sorted_list_sum + word\n        \
    \    \n        end\n        \n    end\n    \n    return sorted_list_sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpwviel_uo.jl:44\n  Test threw
    exception\n  Expression: candidate(["aa", "a", "aaa"]) == ["aa"]\n  MethodError:
    no method matching +(::Vector{String}, ::String)\n  Closest candidates are:\n    +(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(::Array,
    !Matched::Array...) at /shared/centos7/julia/1.7.3/share/julia/base/arraymath.jl:43\n    +(::Array,
    !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1775\n    ...\n  Stacktrace:\n   [1]
    sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpwviel_uo.jl:31\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwviel_uo.jl:44 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwviel_uo.jl:43\n'''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n   \
    \ \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n   \
    \ sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list\
    \ = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n\
    \    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n\
    \    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list\
    \ = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n\
    \    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n\
    \    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list\
    \ = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n\
    \    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n\
    \    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list\
    \ = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n\
    \    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n\
    \    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list\
    \ = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n\
    \    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n\
    \    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list\
    \ = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n\
    \    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n\
    \    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list\
    \ = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n\
    \    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n\
    \    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list\
    \ = sort(lst)\n    \n    sorted_list = sort(lst)\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp14qwgdso.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp14qwgdso.jl:1\n\
    in expression starting at /tmp/tmp14qwgdso.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list = sort(sorted_list)\n    return\
    \ sorted_list\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq5h6odef.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpq5h6odef.jl:27\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq5h6odef.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq5h6odef.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpq5h6odef.jl:28\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq5h6odef.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq5h6odef.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpq5h6odef.jl:29\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq5h6odef.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq5h6odef.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpq5h6odef.jl:30\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq5h6odef.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq5h6odef.jl:26\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(lst,\
    \ by = x -> length(x))\n    \n    for word in sorted_list\n        sum += length(word)\n\
    \    end\n    \n    sorted_list = sort(lst, by = x -> x)\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    return sorted_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0t9k54tw.jl:41\nin expression starting at\
    \ /tmp/tmp0t9k54tw.jl:41\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = Vector{String}()\n    for\
    \ word in sorted_list\n        push!(sorted_list_sum, word)\n    end\n    return\
    \ sorted_list_sum\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl4s170z4.jl:25\nin expression starting at\
    \ /tmp/tmpl4s170z4.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(lst)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(lst)\n    \n    for word in sorted_list\n        sum\
    \ += length(word)\n    end\n    \n    sorted_list = sort(lst)\n    \n    for word\
    \ in sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list\
    \ = sort(lst)\n    \n    for word in sorted_list\n        sum += length(word)\n\
    \    end\n    \n    sorted_list = sort(lst)\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(lst)\n   \
    \ \n    for word in sorted_list\n        sum += length(word)\n    end\n    \n\
    \    sorted_list = sort(lst)\n    \n    for word in sorted_list\n        sum +=\
    \ length(word)\n    end\n    \n    sorted_list = sort(lst)\n    \n    for word\
    \ in sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list\
    \ = sort(lst)\n    \n    for word in sorted_list\n        sum += length(word)\n\
    \    end\n    \n    sorted_list = sort(lst)\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(lst)\n   \
    \ \n    for word in sorted_list\n        sum += length(word)\n    end\n    \n\
    \    sorted_list = sort(lst)\n    \n    for word in sorted_list\n        sum +=\
    \ length(word)\n    end\n    \n    sorted_list = sort(lst)\n    \n    for word\
    \ in sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list\
    \ = sort(lst)\n    \n    for word in sorted_list\n        sum += length(word)\n\
    \    end\n    \n    sorted_list = sort(lst)\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(lst)\n   \
    \ \n    for word in sorted_list\n        sum += length(word)\n    end\n    \n\
    \    sorted_list = sort(lst)\n    \n    for word in sorted_list\n        sum +=\
    \ length(word)\n    end\n    \n    sorted_list = sort(lst)\n    \n    for word\
    \ in sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list\
    \ = sort(lst)\n    \n    for word in sorted_list\n        sum += length(word)\n\
    \    end\n    \n    sorted_list = sort(lst)\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(lst)\n   \
    \ \n    for word in sorted_list\n        sum += length(word)\n    end\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqj4mftqu.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqj4mftqu.jl:1\n\
    in expression starting at /tmp/tmpqj4mftqu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(lst,\
    \ by=sum)\n    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1oycec74.jl:31\nin expression starting at\
    \ /tmp/tmp1oycec74.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        if length(word) == length(sorted_list[1])\n\
    \            sorted_list_sum .= word\n        end\n    end\n    \n    return sorted_list_sum\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpodse8eqm.jl:31\nin expression starting at\
    \ /tmp/tmpodse8eqm.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = Vector{String}()\n    \n    for word in lst\n    \
    \    push!(sorted_list, word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    return sorted_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphh422n_p.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmphh422n_p.jl:34\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphh422n_p.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphh422n_p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmphh422n_p.jl:35\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphh422n_p.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphh422n_p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmphh422n_p.jl:36\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphh422n_p.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphh422n_p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmphh422n_p.jl:37\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphh422n_p.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphh422n_p.jl:33\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list_sum = []\n    for word in lst\n        push!(sorted_list_sum,\
    \ word)\n    end\n    return sorted_list_sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmws0xz2a.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpmws0xz2a.jl:29\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmws0xz2a.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmws0xz2a.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmws0xz2a.jl:30\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"AI\", \"asdf\", \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmws0xz2a.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmws0xz2a.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmws0xz2a.jl:31\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmws0xz2a.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmws0xz2a.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmws0xz2a.jl:32\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"\
    abcd\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmws0xz2a.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmws0xz2a.jl:28\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = Vector{String}()\n    for\
    \ word in sorted_list\n        if length(word) % 2 != 0\n            push!(sorted_list_sum,\
    \ word)\n        end\n    end\n    return sorted_list_sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy7gmytgh.jl:27\nin expression starting at\
    \ /tmp/tmpy7gmytgh.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = Vector{String}()\n    for\
    \ word in sorted_list\n        if length(word) % 2 != 0\n            push!(sorted_list_sum,\
    \ word)\n        end\n    end\n    return sorted_list_sum\nend\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP wants to know how\
    \ to sort a vector of strings by length and alphabetically. Your answer doesn't\
    \ do that.\n<|/ c |>\n<| c |>\nThe question was how to sort a vector of strings\
    \ by length and alphabetically. My answer does that. Did you read the question?\n\
    <|/ c |>\n<| c |>\nI read the question, but your answer doesn't do that. Your\
    \ answer sorts the strings by length and alphabetically, but doesn't answer the\
    \ question. OP wants to know how to sort a vector of strings by length and alphabetically.\
    \ Your answer doesn't do that.\n<|/ c |>\n<| c |>\nI read the question, and I\
    \ answered it correctly. My answer sorts the strings by length and alphabetically.\
    \ OP wants to know how to sort a vector of strings by length and alphabetically.\
    \ My answer does that. Did you read the question?\n<|/ c |>\n<| c |>\nI read the\
    \ question, and I answered it correctly. My answer sorts the strings by length\
    \ and alphabetically. OP wants to know how to sort a vector of strings by length\
    \ and alphabetically. My answer does that. Did you read the question?\n<|/ c |>\n\
    <| a tags=sorting,julia |>\nI believe this does what you want:\n<code>\njulia>\
    \ function list_sort(lst::Vector{String})\n           sorted_list = sort(lst)\n\
    \           sorted_list_sum = Vector{String}()\n           for word in sorted_list\n\
    \               push!(sorted_list_sum, word)\n           end\n           return\
    \ sorted_list_sum\n       end\nlist_sort (generic function with 1 method)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk6u45qvy.jl:27\nin expression starting at\
    \ /tmp/tmpk6u45qvy.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(lst,\
    \ by=sum)\n    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1oycec74.jl:31\nin expression starting at\
    \ /tmp/tmp1oycec74.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by = x ->\
    \ length(x))\n    \n    for i in sorted_list\n        sum += length(i)\n    end\n\
    \    \n    sorted_list = sort(lst, by = x -> x)\n    \n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    return sorted_list\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc3ky16pa.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmpc3ky16pa.jl:45\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc3ky16pa.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc3ky16pa.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpc3ky16pa.jl:46\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc3ky16pa.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc3ky16pa.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpc3ky16pa.jl:47\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc3ky16pa.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc3ky16pa.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpc3ky16pa.jl:48\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc3ky16pa.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc3ky16pa.jl:44\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sum = 0\n    for word in sorted_list\n  \
    \      sum += length(word)\n    end\n    return sorted_list[sum:end]\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo90xh0w6.jl:25\nin expression starting at\
    \ /tmp/tmpo90xh0w6.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(lst,\
    \ by=sum)\n    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1oycec74.jl:31\nin expression starting at\
    \ /tmp/tmp1oycec74.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        if length(word) == length(sorted_list[1])\n\
    \            sorted_list_sum .= word\n        else\n            sorted_list_sum\
    \ .= word\n        end\n    end\n    \n    return sorted_list_sum\nend\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"aa\", \"a\", \"aaa\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\"])\n\
    </cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\"\
    , \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\"\
    , \"aaa\", \"cd\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"\
    f\", \"g\", \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\",\
    \ \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\",\
    \ \"n\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\"])\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsj9atksd.jl:33\nin expression starting at\
    \ /tmp/tmpsj9atksd.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        if length(word) == length(sorted_list[1])\n\
    \            sorted_list_sum = [word]\n        else\n            sorted_list_sum\
    \ = sorted_list_sum + word\n        end\n    end\n    \n    return sorted_list_sum\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5h4vvmfe.jl:33\nin expression starting at\
    \ /tmp/tmp5h4vvmfe.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list_sum=Vector{String}()\n    for word in lst\n        if length(word)%2==1\n\
    \            sorted_list_sum=[word]\n        else\n            sorted_list_sum=[word,sorted_list_sum[end-1]]\n\
    \        end\n    end\n    return sorted_list_sum\nend\n\"\"\"\nWrite a function\
    \ that accepts a vector of strings as a parameter,\n    deletes the strings that\
    \ have even lengths from it,\n    and returns the resulted vector with a sorted\
    \ order,\n    The vector is always a vector of strings and never a vector of numbers,\n\
    \    and it may contain duplicates.\n    The order of the vector should be ascending\
    \ by length of each word, and you\n    should return the vector sorted by that\
    \ rule.\n    If two words have the same length, sort the vector alphabetically.\n\
    \    The function should return a vector of strings in sorted order.\n    You\
    \ may assume that all words will have the same length.\n    For example:\n   \
    \ >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>> list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpl9ur7ftz.jl:28\nin expression starting at /tmp/tmpl9ur7ftz.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = Vector{String}()\n    for\
    \ word in sorted_list\n        if length(word) % 2 == 1\n            sorted_list_sum\
    \ .= word\n        end\n    end\n    return sorted_list_sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy29uiqwk.jl:27\nin expression starting at\
    \ /tmp/tmpy29uiqwk.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list_sum = []\n    \n    for word in lst\n        push!(sorted_list_sum,\
    \ word)\n    end\n    \n    return sorted_list_sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppzagczjk.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmppzagczjk.jl:32\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppzagczjk.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzagczjk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppzagczjk.jl:33\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"AI\", \"asdf\", \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppzagczjk.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzagczjk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppzagczjk.jl:34\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppzagczjk.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzagczjk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppzagczjk.jl:35\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"\
    abcd\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppzagczjk.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzagczjk.jl:31\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = Vector{String}()\n    for\
    \ word in sorted_list\n        push!(sorted_list_sum, word)\n    end\n    return\
    \ sorted_list_sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that accepts\
    \ a vector of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted vector with a sorted order,\n    The\
    \ vector is always a vector of strings and never a vector of numbers,\n    and\
    \ it may contain duplicates.\n    The order of the vector should be ascending\
    \ by length of each word, and you\n    should return the vector sorted by that\
    \ rule.\n    If two words have the same length, sort the vector alphabetically.\n\
    \    The function should return a vector of strings in sorted order.\n    You\
    \ may assume that all words will have the same length.\n    For example:\n   \
    \ >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>> list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsapobqe7.jl:25\nin expression starting at\
    \ /tmp/tmpsapobqe7.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = []\n    for word in sorted_list\n\
    \        push!(sorted_list_sum, word)\n    end\n    return sorted_list_sum\nend\n\
    \"\"\"Write a function that accepts a vector of strings as a parameter,\n    deletes\
    \ the strings that have even lengths from it,\n    and returns the resulted vector\
    \ with a sorted order,\n    The vector is always a vector of strings and never\
    \ a vector of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ vector should be ascending by length of each word, and you\n    should return\
    \ the vector sorted by that rule.\n    If two words have the same length, sort\
    \ the vector alphabetically.\n    The function should return a vector of strings\
    \ in sorted order.\n    You may assume that all words will have the same length.\n\
    \    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n\
    \    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n \
    \   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpzpkwue05.jl:25\nin expression starting at /tmp/tmpzpkwue05.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(lst,\
    \ by=sum)\n    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"aa\", \"a\", \"aaa\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\"])\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\",\
    \ \"ab\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\",\
    \ \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"\
    ab\", \"ab\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\",\
    \ \"ab\", \"ab\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\",\
    \ \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_wzizrdh.jl:31\nin expression starting at\
    \ /tmp/tmp_wzizrdh.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sum = 0\n    for i in sorted_list\n     \
    \   sum += length(i)\n    end\n    return sorted_list[sum:end]\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe6h9c4fh.jl:25\nin expression starting at\
    \ /tmp/tmpe6h9c4fh.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        \n        if length(word) == length(sorted_list[1])\n\
    \            \n            push!(sorted_list_sum, word)\n            \n      \
    \  end\n    end\n    \n    return sorted_list_sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr1smveze.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpr1smveze.jl:39\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\"] == [\"aa\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr1smveze.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr1smveze.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr1smveze.jl:40\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\"]\
    \ == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr1smveze.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr1smveze.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr1smveze.jl:41\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr1smveze.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr1smveze.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr1smveze.jl:42\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"d\"] == [\"\
    abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr1smveze.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr1smveze.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr1smveze.jl:44\n  Ex"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(lst,\
    \ by=sum)\n    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1oycec74.jl:31\nin expression starting at\
    \ /tmp/tmp1oycec74.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list_sum = []\n    \n    for word in lst\n        if length(word)\
    \ % 2 != 0\n            push!(sorted_list_sum, word)\n        end\n    end\n \
    \   \n    return sorted_list_sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3j_og4gu.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp3j_og4gu.jl:34\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3j_og4gu.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3j_og4gu.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3j_og4gu.jl:35\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\"] ==\
    \ [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3j_og4gu.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3j_og4gu.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3j_og4gu.jl:36\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3j_og4gu.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3j_og4gu.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3j_og4gu.jl:37\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"a\"] == [\"\
    abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3j_og4gu.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3j_og4gu.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3j_og4gu.jl:3"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for i in sorted_list\n        if length(i) == sum\n            push!(sorted_list,\
    \ i)\n        end\n    end\n    \n    return sorted_list\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8z34jw9f.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp8z34jw9f.jl:41\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8z34jw9f.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8z34jw9f.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp8z34jw9f.jl:42\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8z34jw9f.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8z34jw9f.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp8z34jw9f.jl:43\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8z34jw9f.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8z34jw9f.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp8z34jw9f.jl:44\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8z34jw9f.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8z34jw9f.jl:40\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        \n        if length(word) == length(sorted_list[1])\n\
    \            \n            sorted_list_sum = [word]\n            \n        else\n\
    \            \n            sorted_list_sum = [word + sorted_list_sum[1]]\n   \
    \     end\n    end\n    \n    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg0whhdsy.jl:37\nin expression starting at\
    \ /tmp/tmpg0whhdsy.jl:37\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sum = 0\n    for word in sorted_list\n  \
    \      sum += length(word)\n    end\n    sorted_list = sort(lst, by=sum)\n   \
    \ return sorted_list\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmppzdo4pkl.jl:31\n  Test threw
    exception\n  Expression: candidate(["aa", "a", "aaa"]) == ["aa"]\n  MethodError:
    objects of type Int64 are not callable\n  Maybe you forgot to use an operator
    such as *, ^, %, / etc. ?\n  Stacktrace:\n    [1] lt(o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n      @
    ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64, hi::Int64,
    a::Base.Sort.MergeSortAlg, o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @ ./sort.jl:591
    [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n      @
    ./sort.jl:725 [inlined]\n    [7] #sort#9\n      @ ./sort.jl:772 [inlined]\n    [8]
    sorted_list_sum(lst::Vector{String})\n      @ Main /tmp/tmppzdo4pkl.jl:23\n    [9]
    macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [10] macro expansion\n      @ /tmp/tmppzdo4pkl.jl:31 [inlined]\n   [11]
    macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [12] top-level scope\n      @ /tmp/tmppzdo4pkl.jl:30\ntest set:
    Error During Test at /tmp/tmppzdo4pkl.jl:32\n  Test threw exception\n  Expression:
    candidate(["school", "AI", "asdf", "b"]) == ["AI", "asdf", "school"]\n  MethodError:
    objects of type Int64 are not callable\n  Maybe you forgot to use an operator
    such as *, ^, %, / etc. ?\n  Stacktrace:\n    [1] lt(o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n      @
    ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64, hi::Int64,
    a::Base.Sort.MergeSortAlg, o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @ ./sort.jl:591
    [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n    '
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = Vector{String}()\n    \n    for word in lst\n    \
    \    push!(sorted_list, word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    aa\", \"a\", \"aaa\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\"\
    , \"a\", \"aaa\", \"cd\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\"\
    , \"g\", \"h\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\"\
    , \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\",\
    \ \"j\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\",\
    \ \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\",\
    \ \"n\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\"\
    , \"aaa\", \"cd\", \"\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp83llsk83.jl:29\nin expression starting at\
    \ /tmp/tmp83llsk83.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by = sum)\n\
    \    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_ydsyo3.jl:30\nin expression starting at\
    \ /tmp/tmpz_ydsyo3.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        if length(word) % 2 == 1\n            push!(sorted_list_sum,\
    \ word)\n        end\n    end\n    \n    return sorted_list_sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpip0oacb8.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpip0oacb8.jl:36\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpip0oacb8.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpip0oacb8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpip0oacb8.jl:37\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\"] ==\
    \ [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpip0oacb8.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpip0oacb8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpip0oacb8.jl:38\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpip0oacb8.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpip0oacb8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpip0oacb8.jl:39\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"d\"] == [\"\
    abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpip0oacb8.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpip0oacb8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpip0oacb8.jl:4"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list = filter(x -> length(x) % 2 !=\
    \ 0, sorted_list)\n    sorted_list = filter(x -> x != \"\", sorted_list)\n   \
    \ return sorted_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppjeelznx.jl:23\nin expression starting at\
    \ /tmp/tmppjeelznx.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = Vector{String}()\n    for\
    \ word in sorted_list\n        push!(sorted_list_sum, word)\n    end\n    return\
    \ sorted_list_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxnnei7sx.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpxnnei7sx.jl:30\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxnnei7sx.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxnnei7sx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxnnei7sx.jl:31\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxnnei7sx.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxnnei7sx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxnnei7sx.jl:32\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxnnei7sx.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxnnei7sx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxnnei7sx.jl:33\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxnnei7sx.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxnnei7sx.jl:29\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    for word\
    \ in sorted_list\n        if length(word) == length(sorted_list[1])\n        \
    \    sorted_list_sum .= word\n        end\n    end\n    return sorted_list_sum\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6f8u0joe.jl:28\nin expression starting at\
    \ /tmp/tmp6f8u0joe.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by = x ->\
    \ length(x))\n    \n    for i in sorted_list\n        sum += length(i)\n    end\n\
    \    \n    sorted_list = sort(lst, by = x -> x)\n    \n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    \n    return sorted_list\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph5cw22mj.jl:40\nin expression starting at\
    \ /tmp/tmph5cw22mj.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = []\n    for word in sorted_list\n\
    \        push!(sorted_list_sum, word)\n    end\n    return sorted_list_sum\nend\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvbxct6uf.jl:25\nin expression starting at\
    \ /tmp/tmpvbxct6uf.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe21lq6wj.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe21lq6wj.jl:1\n\
    in expression starting at /tmp/tmpe21lq6wj.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list = remove!(sorted_list, x -> length(x)\
    \ % 2 == 1)\n    return sorted_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpj_yjujv3.jl:27\n  Test threw
    exception\n  Expression: candidate(["aa", "a", "aaa"]) == ["aa"]\n  UndefVarError:
    remove! not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @
    Main /tmp/tmpj_yjujv3.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj_yjujv3.jl:27 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj_yjujv3.jl:26\ntest set: Error
    During Test at /tmp/tmpj_yjujv3.jl:28\n  Test threw exception\n  Expression: candidate(["school",
    "AI", "asdf", "b"]) == ["AI", "asdf", "school"]\n  UndefVarError: remove! not
    defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main
    /tmp/tmpj_yjujv3.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj_yjujv3.jl:28 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj_yjujv3.jl:26\ntest set: Error
    During Test at /tmp/tmpj_yjujv3.jl:29\n  Test threw exception\n  Expression: candidate(["d",
    "b", "c", "a"]) == Vector{String}([])\n  UndefVarError: remove! not defined\n  Stacktrace:\n   [1]
    sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpj_yjujv3.jl:19\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj_yjujv3.jl:29 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj_yjujv3.jl:26\ntest set: Error
    During Test at /tmp/tmpj_yjujv3.jl:30\n  Test threw exception\n  Expression: candidate(["d",
    "dcba", "abcd", "a"]) == ["abcd", "dc'
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = []\n    for word in sorted_list\n\
    \        push!(sorted_list_sum, word)\n    end\n    return sorted_list_sum\nend\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvbxct6uf.jl:25\nin expression starting at\
    \ /tmp/tmpvbxct6uf.jl:25\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list = removeDuplicates(sorted_list)\n\
    \    \n    return sorted_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpc9wryhwq.jl:30\n  Test threw
    exception\n  Expression: candidate(["aa", "a", "aaa"]) == ["aa"]\n  UndefVarError:
    removeDuplicates not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @
    Main /tmp/tmpc9wryhwq.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc9wryhwq.jl:30 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc9wryhwq.jl:29\ntest set: Error
    During Test at /tmp/tmpc9wryhwq.jl:31\n  Test threw exception\n  Expression: candidate(["school",
    "AI", "asdf", "b"]) == ["AI", "asdf", "school"]\n  UndefVarError: removeDuplicates
    not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @
    Main /tmp/tmpc9wryhwq.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc9wryhwq.jl:31 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc9wryhwq.jl:29\ntest set: Error
    During Test at /tmp/tmpc9wryhwq.jl:32\n  Test threw exception\n  Expression: candidate(["d",
    "b", "c", "a"]) == Vector{String}([])\n  UndefVarError: removeDuplicates not defined\n  Stacktrace:\n   [1]
    sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpc9wryhwq.jl:21\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc9wryhwq.jl:32 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc9wryhwq.jl:29\ntest set: Error
    During Test at /tmp/tmpc9wryhwq.jl:33\n  Test threw exception\n  Expression: candidate(["d",
    "dcba", "a'
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sum = 0\n    for i in sorted_list\n     \
    \   sum += length(i)\n    end\n    sorted_list = sort(lst, by=sum)\n    return\
    \ sorted_list\nend\n</code>\n<|/ a |>\n<| a tags=sorting,julia,string |>\nThe\
    \ answer by is correct, but I wanted to add that you can also use sort! to sort\
    \ the vector in-place:\n<code>\njulia> sort!([\"aa\", \"a\", \"aaa\"])\n3-element\
    \ Array{String,1}:\n \"a\"\n \"aa\"\n \"aaa\"\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=sorting,julia,string |>\nI believe that your problem can be solved using\
    \ sort!:\n<code>\njulia> sort!([\"aa\", \"a\", \"aaa\"])\n3-element Array{String,1}:\n\
    \ \"a\"\n \"aa\"\n \"aaa\"\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphj1elhol.jl:26\nin expression starting at\
    \ /tmp/tmphj1elhol.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = Vector{String}()\n    \n    for word in lst\n    \
    \    if length(word) == length(sorted_list) == 0\n            push!(sorted_list,\
    \ word)\n        elseif length(word) > length(sorted_list)\n            push!(sorted_list,\
    \ word)\n        elseif length(word) < length(sorted_list)\n            push!(sorted_list,\
    \ word)\n        end\n    end\n    \n    return sorted_list\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3j8hkkis.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmp3j8hkkis.jl:38\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3j8hkkis.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3j8hkkis.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp3j8hkkis.jl:39\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"AI\", \"asdf\", \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3j8hkkis.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3j8hkkis.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp3j8hkkis.jl:40\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3j8hkkis.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3j8hkkis.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp3j8hkkis.jl:41\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"\
    abcd\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3j8hkkis.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3j8hkkis.jl:37\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list = sort(sorted_list)\n    return\
    \ sorted_list\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3zxe2y2j.jl:22\nin expression starting at\
    \ /tmp/tmp3zxe2y2j.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        if length(word) == length(sorted_list[1])\n\
    \            sorted_list_sum .= word\n        else\n            sorted_list_sum\
    \ .= word\n        end\n    end\n    \n    return sorted_list_sum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfarcnjra.jl:33\nin expression starting at\
    \ /tmp/tmpfarcnjra.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = Vector{String}()\n    \n    for word in lst\n    \
    \    if length(word) % 2 == 1\n            push!(sorted_list, word)\n        end\n\
    \    end\n    \n    return sorted_list\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that accepts a vector of strings as a parameter,\n    deletes the\
    \ strings that have odd lengths from it,\n    and returns the resulted vector\
    \ with a sorted order,\n    The vector is always a vector of strings and never\
    \ a vector of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ vector should be ascending by length of each word, and you\n    should return\
    \ the vector sorted by that rule.\n    If two words have the same length, sort\
    \ the vector alphabetically.\n    The function should return a vector of strings\
    \ in sorted order.\n    You may assume that all words will have the same length.\n\
    \    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n\
    \    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n \
    \   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_xxf72bn.jl:29\nin expression starting at\
    \ /tmp/tmp_xxf72bn.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        if length(word) == length(sorted_list[1])\n\
    \            sorted_list_sum = [word]\n        else\n            sorted_list_sum\
    \ = sorted_list_sum + word\n        end\n    end\n    \n    return sorted_list_sum\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5h4vvmfe.jl:33\nin expression starting at\
    \ /tmp/tmp5h4vvmfe.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgy44yh8g.jl:35\nin expression starting at\
    \ /tmp/tmpgy44yh8g.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = []\n    for word in sorted_list\n\
    \        if length(word) % 2 == 1\n            push!(sorted_list_sum, word)\n\
    \        end\n    end\n    return sorted_list_sum\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that accepts a vector of strings as a parameter,\n    deletes\
    \ the strings that have odd lengths from it,\n    and returns the resulted vector\
    \ with a sorted order,\n    The vector is always a vector of strings and never\
    \ a vector of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ vector should be ascending by length of each word, and you\n    should return\
    \ the vector sorted by that rule.\n    If two words have the same length, sort\
    \ the vector alphabetically.\n    The function should return a vector of strings\
    \ in sorted order.\n    You may assume that all words will have the same length.\n\
    \    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n\
    \    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n \
    \   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp70hlzaup.jl:27\nin expression starting at\
    \ /tmp/tmp70hlzaup.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq3obwsdr.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq3obwsdr.jl:1\n\
    in expression starting at /tmp/tmpq3obwsdr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = Vector{String}()\n    for\
    \ word in sorted_list\n        push!(sorted_list_sum, word)\n    end\n    return\
    \ sorted_list_sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxp0mgjv1.jl:25\nin expression starting at\
    \ /tmp/tmpxp0mgjv1.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe21lq6wj.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe21lq6wj.jl:1\n\
    in expression starting at /tmp/tmpe21lq6wj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq3obwsdr.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq3obwsdr.jl:1\n\
    in expression starting at /tmp/tmpq3obwsdr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list_sum = []\n    \n    for word in lst\n        push!(sorted_list_sum,\
    \ word)\n    end\n    \n    return sorted_list_sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppzagczjk.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmppzagczjk.jl:32\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppzagczjk.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzagczjk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppzagczjk.jl:33\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"AI\", \"asdf\", \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppzagczjk.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzagczjk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppzagczjk.jl:34\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppzagczjk.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzagczjk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppzagczjk.jl:35\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"\
    abcd\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppzagczjk.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzagczjk.jl:31\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list_sum = []\n    \n    for word in lst\n        push!(sorted_list_sum,\
    \ word)\n    end\n    \n    return sorted_list_sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppzagczjk.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmppzagczjk.jl:32\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppzagczjk.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzagczjk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppzagczjk.jl:33\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"AI\", \"asdf\", \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppzagczjk.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzagczjk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppzagczjk.jl:34\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppzagczjk.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzagczjk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppzagczjk.jl:35\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"\
    abcd\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppzagczjk.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzagczjk.jl:31\n"
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sum = 0\n    for word in sorted_list\n  \
    \      sum += length(word)\n    end\n    sorted_list = sort(lst, by = sum)\n \
    \   return sorted_list\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpuld92m89.jl:31\n  Test threw
    exception\n  Expression: candidate(["aa", "a", "aaa"]) == ["aa"]\n  MethodError:
    objects of type Int64 are not callable\n  Maybe you forgot to use an operator
    such as *, ^, %, / etc. ?\n  Stacktrace:\n    [1] lt(o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n      @
    ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64, hi::Int64,
    a::Base.Sort.MergeSortAlg, o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @ ./sort.jl:591
    [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n      @
    ./sort.jl:725 [inlined]\n    [7] #sort#9\n      @ ./sort.jl:772 [inlined]\n    [8]
    sorted_list_sum(lst::Vector{String})\n      @ Main /tmp/tmpuld92m89.jl:23\n    [9]
    macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [10] macro expansion\n      @ /tmp/tmpuld92m89.jl:31 [inlined]\n   [11]
    macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [12] top-level scope\n      @ /tmp/tmpuld92m89.jl:30\ntest set:
    Error During Test at /tmp/tmpuld92m89.jl:32\n  Test threw exception\n  Expression:
    candidate(["school", "AI", "asdf", "b"]) == ["AI", "asdf", "school"]\n  MethodError:
    objects of type Int64 are not callable\n  Maybe you forgot to use an operator
    such as *, ^, %, / etc. ?\n  Stacktrace:\n    [1] lt(o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n      @
    ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64, hi::Int64,
    a::Base.Sort.MergeSortAlg, o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @ ./sort.jl:591
    [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n    '
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sum = 0\n    for i in sorted_list\n     \
    \   sum += length(i)\n    end\n    sorted_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp77dmtxew.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp77dmtxew.jl:30\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp77dmtxew.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp77dmtxew.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp77dmtxew.jl:31\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp77dmtxew.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp77dmtxew.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp77dmtxew.jl:32\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp77dmtxew.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp77dmtxew.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp77dmtxew.jl:33\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp77dmtxew.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp77dmtxew.jl:29\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        \n        if length(word) == length(sorted_list[1])\n\
    \            \n            push!(sorted_list_sum, word)\n            \n      \
    \  elseif length(word) > length(sorted_list[1])\n            \n            push!(sorted_list_sum,\
    \ word)\n            \n        elseif length(word) < length(sorted_list[1])\n\
    \            \n            push!(sorted_list_sum, word)\n            \n      \
    \  end\n        \n    end\n    \n    return sorted_list_sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6a82hxsw.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp6a82hxsw.jl:48\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6a82hxsw.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6a82hxsw.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp6a82hxsw.jl:49\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6a82hxsw.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6a82hxsw.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp6a82hxsw.jl:50\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6a82hxsw.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6a82hxsw.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp6a82hxsw.jl:51\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6a82hxsw.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6a82hxsw.jl:47\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(lst,\
    \ by=sum)\n    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1oycec74.jl:31\nin expression starting at\
    \ /tmp/tmp1oycec74.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by = x ->\
    \ length(x), rev=true)\n    \n    for i in sorted_list\n        sum += length(i)\n\
    \    end\n    \n    sorted_list = sort(lst, by = x -> x, rev=true)\n    \n   \
    \ for i in sorted_list\n        sum += length(i)\n    end\n    \n    sorted_list\
    \ = sort(lst, by = x -> length(x), rev=true)\n    \n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by = x ->\
    \ x, rev=true)\n    \n    for i in sorted_list\n        sum += length(i)\n   \
    \ end\n    \n    sorted_list = sort(lst, by = x -> length(x), rev=true)\n    \n\
    \    for i in sorted_list\n        sum += length(i)\n    end\n    \n    sorted_list\
    \ = sort(lst, by = x -> x, rev=true)\n    \n    for i in sorted_list\n       \
    \ sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by = x -> length(x),\
    \ rev=true)\n    \n    for i in sorted_list\n        sum += length(i)\n    end\n\
    \    \n    sorted_list = sort(lst, by = x -> x, rev=true)\n    \n    for i in\
    \ sorted_list\n        sum += length(i)\n    end\n    \n    sorted_list = sort(lst,\
    \ by = x -> length(x), rev=true)\n    \n    for i in sorted_list\n        sum\
    \ += length(i)\n    end\n    \n    sorted_list = sort(lst, by = x -> x, rev=true)\n\
    \    \n    for i in sorted_list\n        sum += length(i)\n    end\n    \n   \
    \ sorted_list = sort(lst, by = x -> length(x), rev=true)\n    \n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by = x ->\
    \ x, rev=true)\n    \n    for i in sorted_list\n        sum += length(i)\n   \
    \ end\n    \n    sorted_list = sort(lst, by = x -> length(x), rev=true)\n    \n\
    \    for i in sorted_list\n        sum += length(i)\n    end\n    \n    sorted_list\
    \ = sort(lst, by = x -> x, rev=true)\n    \n    for i in sorted_list\n       \
    \ sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by = x -> length(x),\
    \ rev=true)\n    \n    for i in sorted_list\n        sum += length(i)\n    end\n\
    \    \n    sorted_list = sort(lst, by = x -> x, rev=true)\n    \n    for i in\
    \ sorted_list\n        sum += length(i)\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpuhz3ud8f.jl:118\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuhz3ud8f.jl:1\n\
    in expression starting at /tmp/tmpuhz3ud8f.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        \n        if length(word) % 2 == 1\n   \
    \         \n            push!(sorted_list_sum, word)\n            \n        end\n\
    \    end\n    \n    return sorted_list_sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpf0l58mj4.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpf0l58mj4.jl:39\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf0l58mj4.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf0l58mj4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpf0l58mj4.jl:40\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\"] ==\
    \ [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf0l58mj4.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf0l58mj4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpf0l58mj4.jl:41\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf0l58mj4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf0l58mj4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpf0l58mj4.jl:42\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"d\"] == [\"\
    abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf0l58mj4.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf0l58mj4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpf0l58mj4.jl:4"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list = sort(sorted_list)\n    return\
    \ sorted_list\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3zxe2y2j.jl:22\nin expression starting at\
    \ /tmp/tmp3zxe2y2j.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        if length(word) == length(sorted_list[1])\n\
    \            sorted_list_sum .= word\n        else\n            sorted_list_sum\
    \ .= word\n        end\n    end\n    \n    return sorted_list_sum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfarcnjra.jl:33\nin expression starting at\
    \ /tmp/tmpfarcnjra.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    return sorted_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgbokez0_.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpgbokez0_.jl:42\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgbokez0_.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbokez0_.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpgbokez0_.jl:43\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgbokez0_.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbokez0_.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpgbokez0_.jl:44\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgbokez0_.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbokez0_.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpgbokez0_.jl:45\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgbokez0_.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbokez0_.jl:41\n"
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        if length(word) == length(sorted_list[1])\n\
    \            sorted_list_sum = [word + sorted_list[1]]\n        else\n       \
    \     sorted_list_sum = [word + sorted_list[2]]\n        end\n    end\n    \n\
    \    return sorted_list_sum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpwclolbz2.jl:38\n  Test threw
    exception\n  Expression: candidate(["aa", "a", "aaa"]) == ["aa"]\n  MethodError:
    no method matching +(::String, ::String)\n  Closest candidates are:\n    +(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpwclolbz2.jl:25\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwclolbz2.jl:38 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwclolbz2.jl:37\ntest set: Error
    During Test at /tmp/tmpwclolbz2.jl:39\n  Test threw exception\n  Expression: candidate(["school",
    "AI", "asdf", "b"]) == ["AI", "asdf", "school"]\n  MethodError: no method matching
    +(::String, ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpwclolbz2.jl:25\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwclolbz2.jl:39 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwclolbz2.jl:37\n'''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list_sum = []\n    \n    for word in lst\n        if length(word)\
    \ == length(sorted_list_sum)\n            push!(sorted_list_sum, word)\n     \
    \   else\n            push!(sorted_list_sum, word)\n        end\n    end\n   \
    \ \n    return sorted_list_sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplret4m_q.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmplret4m_q.jl:36\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplret4m_q.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplret4m_q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplret4m_q.jl:37\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"AI\", \"asdf\", \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplret4m_q.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplret4m_q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplret4m_q.jl:38\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplret4m_q.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplret4m_q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplret4m_q.jl:39\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"\
    abcd\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplret4m_q.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplret4m_q.jl:35\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        \n        if length(word) % 2 == 1\n   \
    \         \n            push!(sorted_list_sum, word)\n            \n        end\n\
    \    end\n    \n    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjlpm0zh1.jl:34\nin expression starting at\
    \ /tmp/tmpjlpm0zh1.jl:34\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(lst,\
    \ by=sum)\n    \n    return sorted_list\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpfexvex0q.jl:36\n  Test threw
    exception\n  Expression: candidate(["aa", "a", "aaa"]) == ["aa"]\n  MethodError:
    objects of type Int64 are not callable\n  Maybe you forgot to use an operator
    such as *, ^, %, / etc. ?\n  Stacktrace:\n    [1] lt(o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n      @
    ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64, hi::Int64,
    a::Base.Sort.MergeSortAlg, o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @ ./sort.jl:591
    [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n      @
    ./sort.jl:725 [inlined]\n    [7] #sort#9\n      @ ./sort.jl:772 [inlined]\n    [8]
    sorted_list_sum(lst::Vector{String})\n      @ Main /tmp/tmpfexvex0q.jl:27\n    [9]
    macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [10] macro expansion\n      @ /tmp/tmpfexvex0q.jl:36 [inlined]\n   [11]
    macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [12] top-level scope\n      @ /tmp/tmpfexvex0q.jl:35\ntest set:
    Error During Test at /tmp/tmpfexvex0q.jl:37\n  Test threw exception\n  Expression:
    candidate(["school", "AI", "asdf", "b"]) == ["AI", "asdf", "school"]\n  MethodError:
    objects of type Int64 are not callable\n  Maybe you forgot to use an operator
    such as *, ^, %, / etc. ?\n  Stacktrace:\n    [1] lt(o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n      @
    ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64, hi::Int64,
    a::Base.Sort.MergeSortAlg, o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @ ./sort.jl:591
    [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n    '
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = []\n    for word in sorted_list\n\
    \        if length(word) == length(sorted_list[1])\n            sorted_list_sum\
    \ .= word\n        else\n            sorted_list_sum .= word\n        end\n  \
    \  end\n    return sorted_list_sum\nend\n\"\"\"Write a function that accepts a\
    \ vector of strings as a parameter,\n    deletes the strings that have even lengths\
    \ from it,\n    and returns the resulted vector with a sorted order,\n    The\
    \ vector is always a vector of strings and never a vector of numbers,\n    and\
    \ it may contain duplicates.\n    The order of the vector should be ascending\
    \ by length of each word, and you\n    should return the vector sorted by that\
    \ rule.\n    If two words have the same length, sort the vector alphabetically.\n\
    \    The function should return a vector of strings in sorted order.\n    You\
    \ may assume that all words will have the same length.\n    For example:\n   \
    \ >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>> list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpf4n6vij2.jl:29\nin expression starting at /tmp/tmpf4n6vij2.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    return sorted_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgbokez0_.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpgbokez0_.jl:42\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgbokez0_.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbokez0_.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpgbokez0_.jl:43\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgbokez0_.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbokez0_.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpgbokez0_.jl:44\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgbokez0_.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbokez0_.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpgbokez0_.jl:45\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgbokez0_.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbokez0_.jl:41\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(lst,\
    \ by=sum)\n    \n    return sorted_list\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpfexvex0q.jl:36\n  Test threw
    exception\n  Expression: candidate(["aa", "a", "aaa"]) == ["aa"]\n  MethodError:
    objects of type Int64 are not callable\n  Maybe you forgot to use an operator
    such as *, ^, %, / etc. ?\n  Stacktrace:\n    [1] lt(o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n      @
    ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64, hi::Int64,
    a::Base.Sort.MergeSortAlg, o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @ ./sort.jl:591
    [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n      @
    ./sort.jl:725 [inlined]\n    [7] #sort#9\n      @ ./sort.jl:772 [inlined]\n    [8]
    sorted_list_sum(lst::Vector{String})\n      @ Main /tmp/tmpfexvex0q.jl:27\n    [9]
    macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [10] macro expansion\n      @ /tmp/tmpfexvex0q.jl:36 [inlined]\n   [11]
    macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [12] top-level scope\n      @ /tmp/tmpfexvex0q.jl:35\ntest set:
    Error During Test at /tmp/tmpfexvex0q.jl:37\n  Test threw exception\n  Expression:
    candidate(["school", "AI", "asdf", "b"]) == ["AI", "asdf", "school"]\n  MethodError:
    objects of type Int64 are not callable\n  Maybe you forgot to use an operator
    such as *, ^, %, / etc. ?\n  Stacktrace:\n    [1] lt(o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n      @
    ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64, hi::Int64,
    a::Base.Sort.MergeSortAlg, o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @ ./sort.jl:591
    [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n    '
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        if length(word) == sum\n         \
    \   push!(sorted_list, word)\n        end\n    end\n    \n    return sorted_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_7f7n_p.jl:35\nin expression starting at\
    \ /tmp/tmpi_7f7n_p.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        \n        if length(word) % 2 == 1\n   \
    \         \n            push!(sorted_list_sum, word)\n            \n        end\n\
    \    end\n    \n    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjlpm0zh1.jl:34\nin expression starting at\
    \ /tmp/tmpjlpm0zh1.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = Vector{String}()\n    for\
    \ word in sorted_list\n        if length(word) % 2 != 0\n            push!(sorted_list_sum,\
    \ word)\n        end\n    end\n    return sorted_list_sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy7gmytgh.jl:27\nin expression starting at\
    \ /tmp/tmpy7gmytgh.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(lst,\
    \ by=sum)\n    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1oycec74.jl:31\nin expression starting at\
    \ /tmp/tmp1oycec74.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sum = 0\n    for i in sorted_list\n     \
    \   sum += length(i)\n    end\n    sorted_list\nend\n\"\"\"\nWrite a function\
    \ that accepts a vector of strings as a parameter,\n    deletes the strings that\
    \ have odd lengths from it,\n    and returns the resulted vector with a sorted\
    \ order,\n    The vector is always a vector of strings and never a vector of numbers,\n\
    \    and it may contain duplicates.\n    The order of the vector should be ascending\
    \ by length of each word, and you\n    should return the vector sorted by that\
    \ rule.\n    If two words have the same length, sort the vector alphabetically.\n\
    \    The function should return a vector of strings in sorted order.\n    You\
    \ may assume that all words will have the same length.\n    For example:\n   \
    \ >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>> list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp55mlx_n1.jl:25\nin expression starting at /tmp/tmp55mlx_n1.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        if length(word) % 2 == 1\n            sorted_list_sum\
    \ .= word\n        end\n    end\n    \n    return sorted_list_sum\nend\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"aa\", \"a\", \"aaa\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\"])\n\
    </cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\"\
    , \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\"\
    , \"aaa\", \"cd\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"\
    f\", \"g\", \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\",\
    \ \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\",\
    \ \"n\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlist_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_bltw442.jl:31\nin expression starting at\
    \ /tmp/tmp_bltw442.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = Vector{String}()\n    for\
    \ word in sorted_list\n        if length(word) == length(sorted_list[1])\n   \
    \         sorted_list_sum .= word\n        end\n    end\n    return sorted_list_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprmw1_q_3.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmprmw1_q_3.jl:32\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: String[] == [\"aa\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprmw1_q_3.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprmw1_q_3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmprmw1_q_3.jl:33\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: String[]\
    \ == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprmw1_q_3.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprmw1_q_3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmprmw1_q_3.jl:35\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: String[] == [\"abcd\"\
    , \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprmw1_q_3.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprmw1_q_3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmprmw1_q_3.jl:36\n  Expression: candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"]\n   Evaluated: String[] == [\"AI\", \"ai\"\
    , \"au\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprmw1_q_3.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprmw1_q_3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmprmw1_q_3.jl:38\n  Exp"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        if length(word) == length(sorted_list[1])\n\
    \            sorted_list_sum .= word\n        end\n    end\n    \n    return sorted_list_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7vg0go08.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp7vg0go08.jl:36\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: String[] == [\"aa\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7vg0go08.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7vg0go08.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp7vg0go08.jl:37\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: String[]\
    \ == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7vg0go08.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7vg0go08.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp7vg0go08.jl:39\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: String[] == [\"abcd\"\
    , \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7vg0go08.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7vg0go08.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp7vg0go08.jl:40\n  Expression: candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"]\n   Evaluated: String[] == [\"AI\", \"ai\"\
    , \"au\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7vg0go08.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7vg0go08.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp7vg0go08.jl:42\n  Exp"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    return sorted_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgbokez0_.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpgbokez0_.jl:42\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgbokez0_.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbokez0_.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpgbokez0_.jl:43\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgbokez0_.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbokez0_.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpgbokez0_.jl:44\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgbokez0_.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbokez0_.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpgbokez0_.jl:45\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgbokez0_.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbokez0_.jl:41\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list_sum = []\n    for word in lst\n        if length(word) ==\
    \ length(sorted_list_sum)\n            push!(sorted_list_sum, word)\n        else\n\
    \            push!(sorted_list_sum, word)\n        end\n    end\n    return sorted_list_sum\n\
    end\n\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmps895vbh1.jl:28\nin expression starting at /tmp/tmps895vbh1.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list = sort(sorted_list)\n    return\
    \ sorted_list\nend\n\"\"\"Write a function that accepts a vector of strings as\
    \ a parameter,\n    deletes the strings that have odd lengths from it,\n    and\
    \ returns the resulted vector with a sorted order,\n    The vector is always a\
    \ vector of strings and never a vector of numbers,\n    and it may contain duplicates.\n\
    \    The order of the vector should be ascending by length of each word, and you\n\
    \    should return the vector sorted by that rule.\n    If two words have the\
    \ same length, sort the vector alphabetically.\n    The function should return\
    \ a vector of strings in sorted order.\n    You may assume that all words will\
    \ have the same length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"\
    aaa\"])\n    [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n \
    \   [\"ab\", \"cd\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpigo0w7hk.jl:22\nin expression starting at /tmp/tmpigo0w7hk.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        if length(word) == length(sorted_list[1])\n\
    \            sorted_list_sum = [word + sorted_list[1]]\n        else\n       \
    \     sorted_list_sum = [word + sorted_list[2]]\n        end\n    end\n    \n\
    \    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiidyb0c2.jl:33\nin expression starting at\
    \ /tmp/tmpiidyb0c2.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = []\n    for word in sorted_list\n\
    \        push!(sorted_list_sum, word)\n    end\n    return sorted_list_sum\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplj5278vm.jl:25\nin expression starting at\
    \ /tmp/tmplj5278vm.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list_sum = []\n    \n    for word in lst\n        if length(word)\
    \ == length(sorted_list_sum)\n            push!(sorted_list_sum, word)\n     \
    \   else\n            push!(sorted_list_sum, word)\n        end\n    end\n   \
    \ \n    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.0>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ajtcn13.jl:30\nin expression starting at\
    \ /tmp/tmp0ajtcn13.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = Vector{String}()\n    for\
    \ word in sorted_list\n        if length(word) % 2 != 0\n            push!(sorted_list_sum,\
    \ word)\n        end\n    end\n    return sorted_list_sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy7gmytgh.jl:27\nin expression starting at\
    \ /tmp/tmpy7gmytgh.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(lst, by=sum)\n\
    \    \n    return sorted_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp5wvkeujk.jl:35\n  Test threw
    exception\n  Expression: candidate(["aa", "a", "aaa"]) == ["aa"]\n  MethodError:
    objects of type Int64 are not callable\n  Maybe you forgot to use an operator
    such as *, ^, %, / etc. ?\n  Stacktrace:\n    [1] lt(o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n      @
    ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64, hi::Int64,
    a::Base.Sort.MergeSortAlg, o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @ ./sort.jl:591
    [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n      @
    ./sort.jl:725 [inlined]\n    [7] #sort#9\n      @ ./sort.jl:772 [inlined]\n    [8]
    sorted_list_sum(lst::Vector{String})\n      @ Main /tmp/tmp5wvkeujk.jl:26\n    [9]
    macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [10] macro expansion\n      @ /tmp/tmp5wvkeujk.jl:35 [inlined]\n   [11]
    macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [12] top-level scope\n      @ /tmp/tmp5wvkeujk.jl:34\ntest set:
    Error During Test at /tmp/tmp5wvkeujk.jl:36\n  Test threw exception\n  Expression:
    candidate(["school", "AI", "asdf", "b"]) == ["AI", "asdf", "school"]\n  MethodError:
    objects of type Int64 are not callable\n  Maybe you forgot to use an operator
    such as *, ^, %, / etc. ?\n  Stacktrace:\n    [1] lt(o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n      @
    ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64, hi::Int64,
    a::Base.Sort.MergeSortAlg, o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @ ./sort.jl:591
    [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n    '
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        if length(word) == length(sorted_list[1])\n\
    \            sorted_list_sum .= word\n        else\n            sorted_list_sum\
    \ .= word\n        end\n    end\n    \n    return sorted_list_sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps9k5v1pz.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmps9k5v1pz.jl:38\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: String[] == [\"aa\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps9k5v1pz.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps9k5v1pz.jl:37\ntest set: Test\
    \ Failed at /tmp/tmps9k5v1pz.jl:39\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: String[]\
    \ == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps9k5v1pz.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps9k5v1pz.jl:37\ntest set: Test\
    \ Failed at /tmp/tmps9k5v1pz.jl:41\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: String[] == [\"abcd\"\
    , \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps9k5v1pz.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps9k5v1pz.jl:37\ntest set: Test\
    \ Failed at /tmp/tmps9k5v1pz.jl:42\n  Expression: candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"]\n   Evaluated: String[] == [\"AI\", \"ai\"\
    , \"au\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps9k5v1pz.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps9k5v1pz.jl:37\ntest set: Test\
    \ Failed at /tmp/tmps9k5v1pz.jl:44\n  Exp"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list = sort(sorted_list)\n    return\
    \ sorted_list\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3zxe2y2j.jl:22\nin expression starting at\
    \ /tmp/tmp3zxe2y2j.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        if length(word) % 2 == 1\n            sorted_list_sum\
    \ = [word]\n        else\n            sorted_list_sum = sorted_list_sum + word\n\
    \        end\n    end\n    \n    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppgn0z6u4.jl:33\nin expression starting at\
    \ /tmp/tmppgn0z6u4.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(lst,\
    \ by=sum)\n    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1oycec74.jl:31\nin expression starting at\
    \ /tmp/tmp1oycec74.jl:31\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(lst,\
    \ by = sum)\n    \n    return sorted_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp_1e5052u.jl:36\n  Test threw
    exception\n  Expression: candidate(["aa", "a", "aaa"]) == ["aa"]\n  MethodError:
    objects of type Int64 are not callable\n  Maybe you forgot to use an operator
    such as *, ^, %, / etc. ?\n  Stacktrace:\n    [1] lt(o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n      @
    ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64, hi::Int64,
    a::Base.Sort.MergeSortAlg, o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @ ./sort.jl:591
    [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n      @
    ./sort.jl:725 [inlined]\n    [7] #sort#9\n      @ ./sort.jl:772 [inlined]\n    [8]
    sorted_list_sum(lst::Vector{String})\n      @ Main /tmp/tmp_1e5052u.jl:27\n    [9]
    macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [10] macro expansion\n      @ /tmp/tmp_1e5052u.jl:36 [inlined]\n   [11]
    macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [12] top-level scope\n      @ /tmp/tmp_1e5052u.jl:35\ntest set:
    Error During Test at /tmp/tmp_1e5052u.jl:37\n  Test threw exception\n  Expression:
    candidate(["school", "AI", "asdf", "b"]) == ["AI", "asdf", "school"]\n  MethodError:
    objects of type Int64 are not callable\n  Maybe you forgot to use an operator
    such as *, ^, %, / etc. ?\n  Stacktrace:\n    [1] lt(o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n      @
    ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64, hi::Int64,
    a::Base.Sort.MergeSortAlg, o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @ ./sort.jl:591
    [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n    '
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list = filter(x -> length(x) % 2 !=\
    \ 0, sorted_list)\n    sorted_list = sort(sorted_list)\n    return sorted_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbjdxjewf.jl:23\nin expression starting at\
    \ /tmp/tmpbjdxjewf.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list = sort(sorted_list)\n    return\
    \ sorted_list\nend\n\"\"\"\nWrite a function that accepts a vector of strings\
    \ as a parameter,\n    deletes the strings that have odd lengths from it,\n  \
    \  and returns the resulted vector with a sorted order,\n    The vector is always\
    \ a vector of strings and never a vector of numbers,\n    and it may contain duplicates.\n\
    \    The order of the vector should be ascending by length of each word, and you\n\
    \    should return the vector sorted by that rule.\n    If two words have the\
    \ same length, sort the vector alphabetically.\n    The function should return\
    \ a vector of strings in sorted order.\n    You may assume that all words will\
    \ have the same length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"\
    aaa\"])\n    [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n \
    \   [\"ab\", \"cd\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp2jr_7c_k.jl:22\nin expression starting at /tmp/tmp2jr_7c_k.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        \n        if length(word) % 2 == 1\n   \
    \         \n            sorted_list_sum = [word]\n            \n        else\n\
    \            \n            sorted_list_sum = sorted_list_sum + word\n        \
    \    \n        end\n        \n    end\n    \n    return sorted_list_sum\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyea45j14.jl:39\nin expression starting at\
    \ /tmp/tmpyea45j14.jl:39\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        \n        if length(word) == length(sorted_list[1])\n\
    \            \n            sorted_list_sum = [word]\n            \n        else\n\
    \            \n            sorted_list_sum = sorted_list_sum + word\n        \
    \    \n        end\n        \n    end\n    \n    return sorted_list_sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpwviel_uo.jl:44\n  Test threw
    exception\n  Expression: candidate(["aa", "a", "aaa"]) == ["aa"]\n  MethodError:
    no method matching +(::Vector{String}, ::String)\n  Closest candidates are:\n    +(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(::Array,
    !Matched::Array...) at /shared/centos7/julia/1.7.3/share/julia/base/arraymath.jl:43\n    +(::Array,
    !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1775\n    ...\n  Stacktrace:\n   [1]
    sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpwviel_uo.jl:31\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwviel_uo.jl:44 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwviel_uo.jl:43\n'''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list_sum = []\n    \n    for word in lst\n        push!(sorted_list_sum,\
    \ word)\n    end\n    \n    return sorted_list_sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps7q89t7s.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmps7q89t7s.jl:31\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps7q89t7s.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps7q89t7s.jl:30\ntest set: Test\
    \ Failed at /tmp/tmps7q89t7s.jl:32\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"AI\", \"asdf\", \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps7q89t7s.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps7q89t7s.jl:30\ntest set: Test\
    \ Failed at /tmp/tmps7q89t7s.jl:33\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps7q89t7s.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps7q89t7s.jl:30\ntest set: Test\
    \ Failed at /tmp/tmps7q89t7s.jl:34\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"\
    abcd\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps7q89t7s.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps7q89t7s.jl:30\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list = sort(sorted_list)\n    return\
    \ sorted_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_3raguah.jl:22\nin expression starting at\
    \ /tmp/tmp_3raguah.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(lst,\
    \ by=sum)\n    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1oycec74.jl:31\nin expression starting at\
    \ /tmp/tmp1oycec74.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list_sum = []\n    \n    for word in lst\n        if length(word)\
    \ == length(sorted_list_sum)\n            push!(sorted_list_sum, word)\n     \
    \   else\n            push!(sorted_list_sum, word)\n        end\n    end\n   \
    \ \n    return sorted_list_sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgolc0y__.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpgolc0y__.jl:35\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgolc0y__.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgolc0y__.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpgolc0y__.jl:36\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"AI\", \"asdf\", \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgolc0y__.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgolc0y__.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpgolc0y__.jl:37\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgolc0y__.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgolc0y__.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpgolc0y__.jl:38\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"\
    abcd\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgolc0y__.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgolc0y__.jl:34\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq3obwsdr.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq3obwsdr.jl:1\n\
    in expression starting at /tmp/tmpq3obwsdr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    return sorted_list\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_fskf8r5.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmp_fskf8r5.jl:40\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_fskf8r5.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_fskf8r5.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_fskf8r5.jl:41\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_fskf8r5.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_fskf8r5.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_fskf8r5.jl:42\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_fskf8r5.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_fskf8r5.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_fskf8r5.jl:43\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_fskf8r5.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_fskf8r5.jl:39\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        if length(word) % 2 != 0\n            push!(sorted_list_sum,\
    \ word)\n        end\n    end\n    \n    return sorted_list_sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5r1dr9gi.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp5r1dr9gi.jl:36\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5r1dr9gi.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5r1dr9gi.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5r1dr9gi.jl:37\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\"] ==\
    \ [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5r1dr9gi.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5r1dr9gi.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5r1dr9gi.jl:38\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5r1dr9gi.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5r1dr9gi.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5r1dr9gi.jl:39\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"d\"] == [\"\
    abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5r1dr9gi.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5r1dr9gi.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5r1dr9gi.jl:4"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    return sorted_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgbokez0_.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpgbokez0_.jl:42\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgbokez0_.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbokez0_.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpgbokez0_.jl:43\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgbokez0_.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbokez0_.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpgbokez0_.jl:44\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgbokez0_.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbokez0_.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpgbokez0_.jl:45\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgbokez0_.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbokez0_.jl:41\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = Vector{String}()\n    \n    for word in lst\n    \
    \    push!(sorted_list, word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe6vjmy5v.jl:29\nin expression starting at\
    \ /tmp/tmpe6vjmy5v.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(lst,\
    \ by = sum)\n    \n    return sorted_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp_1e5052u.jl:36\n  Test threw
    exception\n  Expression: candidate(["aa", "a", "aaa"]) == ["aa"]\n  MethodError:
    objects of type Int64 are not callable\n  Maybe you forgot to use an operator
    such as *, ^, %, / etc. ?\n  Stacktrace:\n    [1] lt(o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n      @
    ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64, hi::Int64,
    a::Base.Sort.MergeSortAlg, o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @ ./sort.jl:591
    [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n      @
    ./sort.jl:725 [inlined]\n    [7] #sort#9\n      @ ./sort.jl:772 [inlined]\n    [8]
    sorted_list_sum(lst::Vector{String})\n      @ Main /tmp/tmp_1e5052u.jl:27\n    [9]
    macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [10] macro expansion\n      @ /tmp/tmp_1e5052u.jl:36 [inlined]\n   [11]
    macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [12] top-level scope\n      @ /tmp/tmp_1e5052u.jl:35\ntest set:
    Error During Test at /tmp/tmp_1e5052u.jl:37\n  Test threw exception\n  Expression:
    candidate(["school", "AI", "asdf", "b"]) == ["AI", "asdf", "school"]\n  MethodError:
    objects of type Int64 are not callable\n  Maybe you forgot to use an operator
    such as *, ^, %, / etc. ?\n  Stacktrace:\n    [1] lt(o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n      @
    ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64, hi::Int64,
    a::Base.Sort.MergeSortAlg, o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @ ./sort.jl:591
    [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n    '
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq3obwsdr.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq3obwsdr.jl:1\n\
    in expression starting at /tmp/tmpq3obwsdr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(lst,\
    \ by=sum)\n    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1oycec74.jl:31\nin expression starting at\
    \ /tmp/tmp1oycec74.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(lst,\
    \ by=sum)\n    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1oycec74.jl:31\nin expression starting at\
    \ /tmp/tmp1oycec74.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = Vector{String}()\n    for\
    \ word in sorted_list\n        push!(sorted_list_sum, word)\n    end\n    return\
    \ sorted_list_sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxp0mgjv1.jl:25\nin expression starting at\
    \ /tmp/tmpxp0mgjv1.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq3obwsdr.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq3obwsdr.jl:1\n\
    in expression starting at /tmp/tmpq3obwsdr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = Vector{String}()\n    for\
    \ word in sorted_list\n        if length(word) % 2 != 0\n            sorted_list_sum\
    \ .= word\n        end\n    end\n    return sorted_list_sum\nend\n\"\"\"\nWrite\
    \ a function that accepts a vector of strings as a parameter,\n    deletes the\
    \ strings that have even lengths from it,\n    and returns the resulted vector\
    \ with a sorted order,\n    The vector is always a vector of strings and never\
    \ a vector of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ vector should be ascending by length of each word, and you\n    should return\
    \ the vector sorted by that rule.\n    If two words have the same length, sort\
    \ the vector alphabetically.\n    The function should return a vector of strings\
    \ in sorted order.\n    You may assume that all words will have the same length.\n\
    \    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n\
    \    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n \
    \   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpzmvbw233.jl:27\nin expression starting at /tmp/tmpzmvbw233.jl:27\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        if length(word) == length(sorted_list[1])\n\
    \            sorted_list_sum = [word + sorted_list[1]]\n        else\n       \
    \     sorted_list_sum = sorted_list_sum + word\n        end\n    end\n    \n \
    \   return sorted_list_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdm45mvk.jl:38\n  Test threw
    exception\n  Expression: candidate(["aa", "a", "aaa"]) == ["aa"]\n  MethodError:
    no method matching +(::String, ::String)\n  Closest candidates are:\n    +(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpmdm45mvk.jl:25\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmdm45mvk.jl:38 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmdm45mvk.jl:37\ntest set: Error
    During Test at /tmp/tmpmdm45mvk.jl:39\n  Test threw exception\n  Expression: candidate(["school",
    "AI", "asdf", "b"]) == ["AI", "asdf", "school"]\n  MethodError: no method matching
    +(::String, ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpmdm45mvk.jl:25\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmdm45mvk.jl:39 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmdm45mvk.jl:37\ntest set: Error
    During Test at /tmp/tmpmdm45mvk.jl:40\n  Test threw exception\n  Expression: candidate(["d",
    "b", "c", "a"]) == Vector{String}([])\n  MethodError: no method matching +(::String,
    ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)
    at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpmdm45mvk.jl:25\n  '
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    return sorted_list\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7ry5fh0.jl:37\nin expression starting at\
    \ /tmp/tmps7ry5fh0.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = Vector{String}()\n    for\
    \ word in sorted_list\n        if length(word) % 2 == 1\n            sorted_list_sum\
    \ .= word\n        end\n    end\n    return sorted_list_sum\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvon0sjcb.jl:27\nin expression starting at\
    \ /tmp/tmpvon0sjcb.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list = filter(x -> length(x) % 2 !=\
    \ 0, sorted_list)\n    return sorted_list\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsn07uq08.jl:22\nin expression starting at\
    \ /tmp/tmpsn07uq08.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = Vector{String}()\n    \n    for word in lst\n    \
    \    if length(word) % 2 != 0\n            push!(sorted_list, word)\n        end\n\
    \    end\n    \n    sorted_list\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprnwodzkk.jl:29\nin expression starting at\
    \ /tmp/tmprnwodzkk.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        if length(word) % 2 != 0\n            push!(sorted_list_sum,\
    \ word)\n        end\n    end\n    \n    return sorted_list_sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5r1dr9gi.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp5r1dr9gi.jl:36\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5r1dr9gi.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5r1dr9gi.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5r1dr9gi.jl:37\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\"] ==\
    \ [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5r1dr9gi.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5r1dr9gi.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5r1dr9gi.jl:38\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5r1dr9gi.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5r1dr9gi.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5r1dr9gi.jl:39\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"d\"] == [\"\
    abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5r1dr9gi.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5r1dr9gi.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5r1dr9gi.jl:4"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n \
    \       sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n \
    \       sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n \
    \       sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n \
    \       sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n \
    \       sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n \
    \       sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n \
    \       sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n \
    \       sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n \
    \       sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n \
    \       sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7u0to8zu.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7u0to8zu.jl:1\n\
    in expression starting at /tmp/tmp7u0to8zu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq3obwsdr.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq3obwsdr.jl:1\n\
    in expression starting at /tmp/tmpq3obwsdr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        \n        if length(word) == length(sorted_list[1])\n\
    \            \n            sorted_list_sum = [word + sorted_list[1]]\n       \
    \     \n        else\n            \n            sorted_list_sum = [word + sorted_list[2]]\n\
    \            \n        end\n        \n    end\n    \n    return sorted_list_sum\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6x5mepb1.jl:39\nin expression starting at\
    \ /tmp/tmp6x5mepb1.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = Vector{String}()\n    \n    for word in lst\n    \
    \    push!(sorted_list, word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    return sorted_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphh422n_p.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmphh422n_p.jl:34\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphh422n_p.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphh422n_p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmphh422n_p.jl:35\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphh422n_p.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphh422n_p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmphh422n_p.jl:36\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphh422n_p.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphh422n_p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmphh422n_p.jl:37\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphh422n_p.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphh422n_p.jl:33\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(lst,\
    \ by = sum)\n    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5cb21pjc.jl:31\nin expression starting at\
    \ /tmp/tmp5cb21pjc.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    return sorted_list\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_fskf8r5.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmp_fskf8r5.jl:40\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_fskf8r5.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_fskf8r5.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_fskf8r5.jl:41\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_fskf8r5.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_fskf8r5.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_fskf8r5.jl:42\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_fskf8r5.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_fskf8r5.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_fskf8r5.jl:43\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_fskf8r5.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_fskf8r5.jl:39\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = Vector{String}()\n    for\
    \ word in sorted_list\n        if length(word) % 2 != 0\n            push!(sorted_list_sum,\
    \ word)\n        end\n    end\n    return sorted_list_sum\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeugfemqy.jl:27\nin expression starting at\
    \ /tmp/tmpeugfemqy.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by=sum)\n\
    \    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    aa\", \"a\", \"aaa\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\"\
    , \"a\", \"aaa\", \"cd\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\"])\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\",\
    \ \"ab\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\",\
    \ \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"\
    ab\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    ])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\",\
    \ \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"\
    a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\",\
    \ \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwtlmzdsk.jl:30\nin expression starting at\
    \ /tmp/tmpwtlmzdsk.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = Vector{String}()\n    \n    for word in lst\n    \
    \    if length(word) % 2 == 1\n            push!(sorted_list, word)\n        end\n\
    \    end\n    \n    return sorted_list\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptomjco7c.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmptomjco7c.jl:34\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptomjco7c.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptomjco7c.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptomjco7c.jl:35\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\"] ==\
    \ [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptomjco7c.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptomjco7c.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptomjco7c.jl:36\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptomjco7c.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptomjco7c.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptomjco7c.jl:37\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"a\"] == [\"\
    abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptomjco7c.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptomjco7c.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptomjco7c.jl:3"
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in\
    \ sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list = sort(lst,\
    \ by = sum)\n    \n    return sorted_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp_1e5052u.jl:36\n  Test threw
    exception\n  Expression: candidate(["aa", "a", "aaa"]) == ["aa"]\n  MethodError:
    objects of type Int64 are not callable\n  Maybe you forgot to use an operator
    such as *, ^, %, / etc. ?\n  Stacktrace:\n    [1] lt(o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n      @
    ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64, hi::Int64,
    a::Base.Sort.MergeSortAlg, o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @ ./sort.jl:591
    [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n      @
    ./sort.jl:725 [inlined]\n    [7] #sort#9\n      @ ./sort.jl:772 [inlined]\n    [8]
    sorted_list_sum(lst::Vector{String})\n      @ Main /tmp/tmp_1e5052u.jl:27\n    [9]
    macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [10] macro expansion\n      @ /tmp/tmp_1e5052u.jl:36 [inlined]\n   [11]
    macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [12] top-level scope\n      @ /tmp/tmp_1e5052u.jl:35\ntest set:
    Error During Test at /tmp/tmp_1e5052u.jl:37\n  Test threw exception\n  Expression:
    candidate(["school", "AI", "asdf", "b"]) == ["AI", "asdf", "school"]\n  MethodError:
    objects of type Int64 are not callable\n  Maybe you forgot to use an operator
    such as *, ^, %, / etc. ?\n  Stacktrace:\n    [1] lt(o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n      @
    ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64, hi::Int64,
    a::Base.Sort.MergeSortAlg, o::Base.Order.By{Int64, Base.Order.ForwardOrdering},
    t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @ ./sort.jl:591
    [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n    '
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe21lq6wj.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe21lq6wj.jl:1\n\
    in expression starting at /tmp/tmpe21lq6wj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n\
    \    for word in sorted_list\n        if length(word) == length(sorted_list[1])\n\
    \            sorted_list_sum = [word]\n        else\n            sorted_list_sum\
    \ = sorted_list_sum + word\n        end\n    end\n    \n    return sorted_list_sum\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5h4vvmfe.jl:33\nin expression starting at\
    \ /tmp/tmp5h4vvmfe.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    sorted_list_sum = []\n    for word in sorted_list\n\
    \        if length(word) % 2 != 0\n            push!(sorted_list_sum, word)\n\
    \        end\n    end\n    return sorted_list_sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp06bm_mgy.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp06bm_mgy.jl:32\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp06bm_mgy.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp06bm_mgy.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp06bm_mgy.jl:33\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\"] ==\
    \ [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp06bm_mgy.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp06bm_mgy.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp06bm_mgy.jl:34\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp06bm_mgy.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp06bm_mgy.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp06bm_mgy.jl:35\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"d\"] == [\"\
    abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp06bm_mgy.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp06bm_mgy.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp06bm_mgy.jl:3"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    sorted_list = Vector{String}()\n    \n    for word in lst\n    \
    \    if length(word) == length(sorted_list) == 0\n            push!(sorted_list,\
    \ word)\n        elseif length(word) > length(sorted_list)\n            push!(sorted_list,\
    \ word)\n        end\n    end\n    \n    return sorted_list\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdmo539y6.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpdmo539y6.jl:36\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmo539y6.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmo539y6.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpdmo539y6.jl:37\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"AI\", \"asdf\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmo539y6.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmo539y6.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpdmo539y6.jl:38\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmo539y6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmo539y6.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpdmo539y6.jl:39\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"\
    abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmo539y6.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmo539y6.jl:35\ntest set: Test\
    \ Failed at /tmp/"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_tevzwm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_tevzwm.jl:1\n\
    in expression starting at /tmp/tmpn_tevzwm.jl:1\n"
  stdout: ''
