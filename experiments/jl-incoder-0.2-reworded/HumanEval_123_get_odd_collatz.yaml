name: HumanEval_123_get_odd_collatz
language: jl
prompt: "\"\"\"\n    Given a positive integer n, return a sorted vector that has the\
  \ odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
  \ in mathematics that concerns a sequence defined\n    as follows: start with any\
  \ positive integer n. Then each term is obtained from the \n    previous term as\
  \ follows: if the previous term is even, the next term is one half of \n    the\
  \ previous term. If the previous term is odd, the next term is 3 times the previous\n\
  \    term plus 1. The conjecture is that no matter what value of n, the sequence\
  \ will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2.\
  \ returned vector sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5)\
  \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
  \ numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n    [1, 5]\n    \"\"\"\
  \nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
  \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
  \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
completions: ["    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz = [odd_collatz[1], odd_collatz[1] * 2 + 1]\n    \n   \
    \ return odd_collatz\nend", "    if n == 1 \n        return [1]\n    \n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == ", "    if n == 1\n   \
    \     [1]\n    else\n        odd_collatz(n - 1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer n and returns the sum\
    \ of the even numbers from 1 to n.", "    if n == 1 \n        return [1]\n   \
    \ odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? [n /\
    \ 2] : [n / 2] * 3\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.0>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in a positive integer n and returns the number of steps it takes to reach 1\
    \ from n.", "    if n == 1 \n        return [1]\n    else \n        odd_collatz\
    \ = get_odd_collatz(n / 2)\n        odd_collatz .+= n % 2 == 0 ? 1 : 3\n     \
    \   return odd_collatz\nend\n</cell>\n<code language=julia-1.5>", "    if n ==\
    \ 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .+= [n/2]\n        odd_collatz .+= [n*3+1]\n        return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n   \
    \     return [1]\n    \n    odd_collatz = get_odd_collatz(n-1)\n    odd_collatz\
    \ .+= [n/2]\n    odd_collatz .+= [n/3]\n    odd_collatz .+= [n/5]\n    odd_collatz\
    \ .+= [n/7]\n    odd_collatz .+= [n/11]\n    odd_collatz .+= [n/13]\n    odd_collatz\
    \ .+= [n/17]\n    odd_collatz .+= [n/19]\n    odd_collatz .+= [n/23]\n    odd_collatz\
    \ .+= [n/29]\n    odd_collatz .+= [n/37]\n    odd_collatz .+= [n/53]\n    odd_collatz\
    \ .+= [n/63]\n    odd_collatz .+= [n/79]\n    odd_collatz .+= [n/91]\n    odd_collatz\
    \ .+= [n/107]\n    odd_collatz .+= [n/131]\n    odd_collatz .+= [n/163]\n    odd_collatz\
    \ .+= [n/193]\n    odd_collatz .+= [n/225]\n    odd_collatz .+= [n/251]\n    odd_collatz\
    \ .+= [n/289]\n    odd_collatz .+= [n/361]\n    odd_collatz .+= [n/451]\n    odd_collatz\
    \ .+= [n/559]\n    odd_collatz .+= [n/663]\n    odd_collatz .+= [n/783]\n    odd_collatz\
    \ .+= [n/919]\n    odd_collatz .+= [n/1097]\n    odd_collatz .+= [n/1237]\n  \
    \  odd_collatz .+= [n/1397]\n    odd_collatz .+= [n/1637]\n    odd_collatz .+=\
    \ [n/1937]\n    odd_collatz .+= [n/2237]\n    odd_collatz .+= [n/2537]\n    odd_collatz\
    \ .+= [n/2897]\n    odd_collatz .+= [n/3617]\n    od", "    if n == 1 \n     \
    \   return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .= [n\
    \ * 2 if n % 2 == 0 else n * 2 + 1]\n    return odd_collatz\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 1\n        return [1]\n    odd_collatz =\
    \ get_odd_collatz(n / 2)\n    odd_collatz .= [n % 2 == 0 ? 1 : 3 * odd_collatz[end]\
    \ + 1]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end", "    if n == 1\n        return [1]\n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz = [odd_collatz[1], odd_collatz[1] * 2 + 1]\n    return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n   \
    \     return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .+=\
    \ n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    if n == 1\n        [1]\n    else\n        odd_collatz(n\
    \ - 1) + [n % 2]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n \
    \   Given a positive integer n, return a sorted vector that has the even numbers\
    \ in collatz sequence.", "    if n == 1 \n        return [1]\n    odd_nums = Vector{Int64}()\n\
    \    odd_nums[1] = 1\n    odd_nums[2] = 1\n    odd_nums[3] = 2\n    odd_nums[4]\
    \ = 3\n    odd_nums[5] = 5\n    odd_nums[6] = 8\n    odd_nums[7] = 13\n    odd_nums[8]\
    \ = 21\n    odd_nums[9] = 34\n    odd_nums[10] = 55\n    odd_nums[11] = 89\n \
    \   odd_nums[12] = 144\n    odd_nums[13] = 233\n    odd_nums[14] = 377\n    odd_nums[15]\
    \ = 610\n    odd_nums[16] = 987\n    odd_nums[17] = 1597\n    odd_nums[18] = 2584\n\
    \    odd_nums[19] = 4181\n    odd_nums[20] = 6765\n    odd_nums[21] = 10946\n\
    \    odd_nums[22] = 17711\n    odd_nums[23] = 28657\n    odd_nums[24] = 46368\n\
    \    odd_nums[25] = 75025\n    odd_nums[26] = 121393\n    odd_nums[27] = 196418\n\
    \    odd_nums[28] = 317811\n    odd_nums[29] = 514229\n    odd_nums[30] = 832040\n\
    \    odd_nums[31] = 1346269\n    odd_nums[32] = 2178309\n    odd_nums[33] = 3424578\n\
    \    odd_nums[34] = 5529536\n    odd_nums[35] = 8912896\n    odd_nums[36] = 14397219\n\
    \    odd_nums[37] = 24593840\n    odd_nums[38] = 39088169\n    odd_nums[39] =\
    \ 56085571\n    odd_nums[40] = 80651551\n    odd_nums[41] = 130496954\n    odd_nums[42]\
    \ = 211995232\n    odd_nums[43] = 345222688\n    odd_nums[44] = 570288728\n  \
    \  odd_nums[45] = 923873273\n    odd_nums[46] = 1493035648\n    odd_nums[47] =\
    \ 2412728124\n    odd_nums[48", "    if n == 1\n        return [1]\n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n\
    \ + 1]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  if n == 1\n        return [1]\n    odd_nums = get_odd_collatz(n-1)\n    odd_nums\
    \ = [odd_nums[i] + 1 for i in 1:length(odd_nums)]\n    odd_nums = odd_nums[2:end]\n\
    \    return odd_nums\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1\
    \ \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz\
    \ += [n * 2 if n % 2 == 0 else n * 3 + 1 ]\n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        return [1]\n    else \n \
    \       odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz .+= n % 2 ==\
    \ 0 ? [n / 2] : [3 * n + 1]\n        return odd_collatz\nend", "    if n == 1\
    \ \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n\
    \    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz += [n * 2 if n % 2\
    \ == 0 else n * 3]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n /\
    \ 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\nend", "    if n\
    \ == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz\
    \ += [n % 2 == 0 ? 1 : 3 * odd_collatz[end-1] + 1]\n    return odd_collatz\nend\n\
    </cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer $n$ and returns the number of steps\
    \ it takes to reach 1 from $n$. For example, get_steps(3) should return 3.", " \
    \   if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    \n    if n % 2 == 1 \n        odd_collatz += [n / 2]\n    else \n\
    \        odd_collatz += [n / 2] * 3\n    \n    return odd_collatz\nend", "   \
    \ if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n   \
    \ odd_collatz = [odd_collatz[1], 3*odd_collatz[1]+1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given positive integer\
    \ n.", "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of even numbers in a given\
    \ vector. For example, get_even_count([1,2,3,4,5]) should return 2.", "    if\
    \ n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n    odd_collatz\
    \ .+= [n/2]\n    odd_collatz .+= [n/3]\n    odd_collatz .+= [n/3]\n    odd_collatz\
    \ .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz\
    \ .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz\
    \ .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz\
    \ .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz\
    \ .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz\
    \ .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz\
    \ .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz\
    \ .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz\
    \ .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz\
    \ .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz\
    \ .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz\
    \ .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz\
    \ .+= [n/2]\n    odd_collatz .+= [n/", "    if n == 1 \n        return [1]\n \
    \   else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz .=\
    \ [n % 2 == 0 ? 1 : 3 * odd_collatz[end] + 1]\n        return odd_collatz\nend",
  "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n\
    \    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? [n\
    \ / 2] : [n / 2] * 3 + 1\nend\n</cell>\n<code language=julia-1.3>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given positive integer n.", "    if n == 1 \n        return [1]\n    odd_nums\
    \ = Vector{Int64}()\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_",
  "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer\
    \ n, return a sorted vector that has the even numbers in collatz sequence.", " \
    \   if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    \n    if n % 2 == 0 \n        odd_collatz .+= [n]\n    else \n   \
    \     odd_collatz .+= [n * 3]\n    end\n    \n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        return [1]\n    \n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    \n    if n % 2 == 1 \n        odd_collatz += [n\
    \ / 2]\n    else \n        odd_collatz += [n / 2] * (3 + (n % 2))\n    \n    return\
    \ odd_collatz\nend", "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .= [n * 2 if n % 2 == 0 else n * 2 + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert get_odd_collatz(5) == [1, 5]\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the nth number in the\
    \ Fibonacci sequence. \nFor example, get_fibonacci(3) should return 5.", "   \
    \ if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz += [n/2]\n        return odd_collatz\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 1 \n        return [1]\n    odd_collatz =\
    \ get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    @time get_odd_collatz(10)\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ returns the Collatz sequence starting from n.", "    if n == 1 \n        return\
    \ [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 ==\
    \ 0 ? [n / 2] : [n / 2] * 3\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end", "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz += [n * 2 if n % 2 == 0 else n * 3 + 1 for i in odd_collatz]\n\
    \    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an integer n and returns\
    \ the number of steps it takes to reach 1 from n.", "    if n == 1\n        return\
    \ [1]\n    else\n        odd_collatz = get_odd_collatz(n-1)\n        odd_collatz\
    \ .+= [n]\n        return odd_collatz\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n % 2 == 0 ? 1 : 3 * odd_collatz[end] + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n\
    \    else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz\
    \ .= [n * 3 + 1]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an\
    \ integer n and returns the number of steps it takes to reach 1 from n.", "  \
    \  if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n /\
    \ 2)\n    \n    if n % 2 == 0 \n        odd_collatz .+= [n]\n        return odd_collatz\n\
    \    \n    odd_collatz .+= [n * 3]\n    return odd_collatz\nend", "    if n ==\
    \ 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz\
    \ .= [n * 3 + 1]\n    if n % 2 == 1 \n        odd_collatz .= [n + 1]\n    end\n\
    \    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>", "    if n ==\
    \ 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz\
    \ .+= n % 2 == 0 ? [n / 2] : [3 * odd_collatz[end] + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n\
    \    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .= [n % 2 == 0 ? 1\
    \ : 3 * odd_collatz[end] + 1]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert get_odd_collatz(5) == [1, 5]\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes in a list of numbers and returns the number of even numbers in the\
    \ list.", "    if n == 1 \n        return [1]\n    else \n        odd_collatz\
    \ = get_odd_collatz(n-1)\n        odd_collatz = [odd_collatz[i] + 1 for i in 1:length(odd_collatz)]\n\
    \        return odd_collatz\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n\
    \    else \n        odd_collatz = get_odd_collatz(n-1)\n        odd_collatz .+=\
    \ [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz .+= [n/5]\n      \
    \  odd_collatz .+= [n/7]\n        odd_collatz .+= [n/11]\n        odd_collatz\
    \ .+= [n/13]\n        odd_collatz .+= [n/17]\n        odd_collatz .+= [n/19]\n\
    \        return odd_collatz\nend", "    if n == 1 \n        return [1]\n    \n\
    \    odd_collatz = get_odd_collatz(n / 2)\n    \n    if n % 2 == 0 \n        odd_collatz\
    \ += [n]\n    else \n        odd_collatz += [n] * 3 + 1\n    end\n    \n    return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n   \
    \     return [1]\n    else \n        odd_collatz = get_odd_collatz(n / 2)\n  \
    \      odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n        return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer n and returns the number\
    \ of steps it takes to reach 1 from n.", "    if n == 1 \n        return [1]\n\
    \    else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz\
    \ .= [n * 3 + 1]\n        if n % 2 == 1 \n            odd_collatz .= [n + 1]\n\
    \        end\n        return odd_collatz\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer n, return a sorted vector that has the even\
    \ numbers in collatz sequence.", "    if n == 1 \n        return [1]\n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz += [n / 2]\n    if n % 2 == 1 \n \
    \       odd_collatz += [3]\n    end\n    return odd_collatz\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 1 \n        return [1]\n    else \n     \
    \   odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz .+= n % 2 == 0 ?\
    \ [n / 2] : [3 * n + 1]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.4>",
  "    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n /\
    \ 2)\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ?\
    \ 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 ==\
    \ 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2\
    \ == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n\
    \ % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+=\
    \ n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == ", "    if n == 1 \n  \
    \      return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .+=\
    \ n % 2 == 0 ? [n / 2] : [n / 2] * 3\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the nth Fibonacci number.", "    if n == 1\n       \
    \ return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .+= n\
    \ % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 1 ? 1 : 3\n    return odd_collatz\n\
    end", "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz .+= [n/2]\n    if n % 2 == 1 \n        odd_collatz .+= [n*3]\n\
    \    odd_collatz\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n\
    \        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz\
    \ .= [n * 2 if n % 2 == 0 else n * 3 + 1 for i in odd_collatz]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n\
    \    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz += [n / 2]\n    if\
    \ n % 2 == 1 \n        odd_collatz += [n / 2]\n    end\n    return odd_collatz\n\
    end", "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1 for n in odd_collatz]\n\
    \        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given positive integer. \nFor example, factorial(5) returns 120.", "    if n\
    \ == 1\n        [1]\n    else\n        odd_collatz(n - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        return [1]\n    else \n \
    \       odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz += [n * 3 if\
    \ n % 2 == 0 else n * 2 + 1]\n        return odd_collatz\nend\n</cell>\n<code\
    \ language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes in a positive integer n and returns the nth Fibonacci\
    \ number.", "    if n == 1 \n        return [1]\n    odd_nums = Vector{Int64}()\n\
    \    odd_nums.append(1)\n    odd_nums.append(n)\n    odd_nums = odd_nums[2:end]\n\
    \    return odd_nums\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1\
    \ \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz\
    \ .= [n * 2 if n % 2 == 0 else n * 3 + 1 for i in odd_collatz]\n    \n    return\
    \ odd_collatz\nend", "    if n == 1 \n        return [1]\n    else \n        odd_collatz\
    \ = get_odd_collatz(n / 2)\n        odd_collatz .+= n % 2 == 0 ? [n / 2] : [n\
    \ / 2] * 3\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n\
    \    \n    odd_collatz = get_odd_collatz(n-1)\n    odd_collatz .+= [n/2]\n   \
    \ odd_collatz .+= [n/3]\n    odd_collatz .+= [n/5]\n    odd_collatz .+= [n/7]\n\
    \    odd_collatz .+= [n/11]\n    odd_collatz .+= [n/13]\n    odd_collatz .+= [n/17]\n\
    \    odd_collatz .+= [n/19]\n    odd_collatz .+= [n/23]\n    odd_collatz .+= [n/29]\n\
    \    odd_collatz .+= [n/37]\n    odd_collatz .+= [n/43]\n    odd_collatz .+= [n/59]\n\
    \    odd_collatz .+= [n/67]\n    odd_collatz .+= [n/83]\n    odd_collatz .+= [n/99]\n\
    \    odd_collatz .+= [n/107]\n    odd_collatz .+= [n/131]\n    odd_collatz .+=\
    \ [n/163]\n    odd_collatz .+= [n/191]\n    odd_collatz .+= [n/223]\n    odd_collatz\
    \ .+= [n/251]\n    odd_collatz .+= [n/289]\n    odd_collatz .+= [n/331]\n    odd_collatz\
    \ .+= [n/377]\n    odd_collatz .+= [n/425]\n    odd_collatz .+= [n/479]\n    odd_collatz\
    \ .+= [n/531]\n    odd_collatz .+= [n/593]\n    odd_collatz .+= [n/653]\n    odd_collatz\
    \ .+= [n/711]\n    odd_collatz .+= [n/769]\n    odd_collatz .+= [n/823]\n    odd_collatz\
    \ .+= [n/883]\n    odd_collatz .+= [n/937]\n    odd_collatz .+= [n/991]\n    odd_collatz\
    \ .+= [n/1059]\n    odd_collat", "    if n == 1 \n        return [1]\n    else\
    \ \n        odd_collatz = get_odd_collatz(n-1)\n        odd_collatz += [n/2]\n\
    \        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/3]\n    odd_collatz .+= [n/5]\n\
    \    odd_collatz .+= [n/7]\n    odd_collatz .+= [n/11]\n    odd_collatz .+= [n/13]\n\
    \    odd_collatz .+= [n/17]\n    odd_collatz .+= [n/19]\n    odd_collatz .+= [n/23]\n\
    \    odd_collatz .+= [n/29]\n    odd_collatz .+= [n/37]\n    odd_collatz .+= [n/53]\n\
    \    odd_collatz .+= [n/63]\n    odd_collatz .+= [n/79]\n    odd_collatz .+= [n/91]\n\
    \    odd_collatz .+= [n/107]\n    odd_collatz .+= [n/131]\n    odd_collatz .+=\
    \ [n/163]\n    odd_collatz .+= [n/193]\n    odd_collatz .+= [n/229]\n    odd_collatz\
    \ .+= [n/253]\n    odd_collatz .+= [n/289]\n    odd_collatz .+= [n/331]\n    odd_collatz\
    \ .+= [n/377]\n    odd_collatz .+= [n/539]\n    odd_collatz .+= [n/647]\n    odd_collatz\
    \ .+= [n/711]\n    odd_collatz .+= [n/769]\n    odd_collatz .+= [n/823]\n    odd_collatz\
    \ .+= [n/871]\n    odd_collatz .+= [n/937]\n    odd_collatz .+= [n/1013]\n   \
    \ odd_collatz .+= [n/1097]\n    odd_collatz .+= [n/1175]\n    odd_collatz .+=\
    \ [n/1237]\n    odd_collatz .+= [n/1319]\n    odd_collatz .+= [n/1397]\n    odd_",
  "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .+= [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz\
    \ .+= [n/3]\n        odd_collatz .+= [n/2]\n        return odd_collatz\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n   \
    \ odd_nums = Vector{Int64}()\n    odd_nums.push(2)\n    odd_nums.push(2)\n   \
    \ odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_", "    if n == 1 \n        return [1]\n    odd_nums = Vector{Int64}()\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_", "    if n == 1 \n    \
    \    return [1]\n    \n    odd_collatz = get_odd_collatz(n / 2)\n    \n    if\
    \ n % 2 == 1 \n        odd_collatz += [n / 2]\n    else \n        odd_collatz\
    \ += [n / 2] * 3\n    \n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert get_odd_collatz(5) == [1, 5]\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the nth Fibonacci number.", "    if n == 1 \n        return [1]\n\
    \    else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz\
    \ .= [n * 2 if n % 2 == 0 else n * 3 + 1 for (_) in odd_collatz]\n        return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n   \
    \     return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .+=\
    \ n % 2 == 0 ? [n / 2] : [n / 2] * 3 + 1\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1\n        return [1]\n\
    \    else\n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz .=\
    \ [n * 3 if n % 2 == 0 else n * 2 + 1]\n        return odd_collatz\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes in a positive integer\
    \ n and returns the Collatz sequence for n.", "    if n == 1 \n        return\
    \ [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 ==\
    \ 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1 for (_,n) in zip(odd_collatz,\
    \ odd_collatz)]\n    return odd_collatz\nend", "    if n == 1 \n        return\
    \ [1]\n    else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz\
    \ .= [n * 3 + (n % 2 == 1)]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz = [odd_collatz[1], odd_collatz[1] * 2 + 1]\n    return odd_collatz\n\
    end", "    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2] * 3 + 1\nend", "  \
    \  if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz += [n / 2]\n        odd_collatz += [n / 2 * 3]\n \
    \       odd_collatz += [n / 2 * 3 + (n % 2 == 0)]\n        return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n\
    \    \n    odd_collatz = get_odd_collatz(n-1)\n    odd_collatz .+= [n/2]\n   \
    \ odd_collatz .+= [n/3]\n    odd_collatz .+= [n/5]\n    odd_collatz .+= [n/7]\n\
    \    odd_collatz .+= [n/11]\n    odd_collatz .+= [n/13]\n    odd_collatz .+= [n/17]\n\
    \    odd_collatz .+= [n/19]\n    odd_collatz .+= [n/23]\n    odd_collatz .+= [n/29]\n\
    \    odd_collatz .+= [n/37]\n    odd_collatz .+= [n/43]\n    odd_collatz .+= [n/59]\n\
    \    odd_collatz .+= [n/67]\n    odd_collatz .+= [n/83]\n    odd_collatz .+= [n/99]\n\
    \    odd_collatz .+= [n/107]\n    odd_collatz .+= [n/131]\n    odd_collatz .+=\
    \ [n/163]\n    odd_collatz .+= [n/193]\n    odd_collatz .+= [n/229]\n    odd_collatz\
    \ .+= [n/251]\n    odd_collatz .+= [n/289]\n    odd_collatz .+= [n/303]\n    odd_collatz\
    \ .+= [n/337]\n    odd_collatz .+= [n/361]\n    odd_collatz .+= [n/379]\n    odd_collatz\
    \ .+= [n/393]\n    odd_collatz .+= [n/419]\n    odd_collatz .+= [n/439]\n    odd_collatz\
    \ .+= [n/463]\n    odd_collatz .+= [n/479]\n    odd_collatz .+= [n/499]\n    odd_collatz\
    \ .+= [n/511]\n    odd_collatz .+= [n/531]\n    odd_collatz .+= [n/547]\n    odd_collatz\
    \ .+= [n/561]\n    odd_collatz .+= [n/587", "    if n == 1 \n        return [1]\n\
    \    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz += [n / 2]\n    if\
    \ n % 2 == 1 \n        odd_collatz += [n / 2]\n    end\n    return odd_collatz\n\
    end", "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0\
    \ ? 1 : 3\n    return odd_collatz\nend", "    if n == 1 \n        return [1]\n\
    \    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz = [odd_collatz[1],\
    \ odd_collatz[2]*2 + 1]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert get_odd_collatz(5) == [1, 5]\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that returns the nth Fibonacci number using recursion.", "    if n == 1 \n \
    \       return [1]\n    odd_collatz = get_odd_collatz(n-1)\n    odd_collatz .+=\
    \ [n/2]\n    odd_collatz .+= [n/3]\n    odd_collatz .+= [n/5]\n    odd_collatz\
    \ .+= [n/7]\n    odd_collatz .+= [n/11]\n    odd_collatz .+= [n/13]\n    odd_collatz\
    \ .+= [n/17]\n    odd_collatz .+= [n/19]\n    odd_collatz .+= [n/23]\n    odd_collatz\
    \ .+= [n/29]\n    odd_collatz .+= [n/37]\n    odd_collatz .+= [n/43]\n    odd_collatz\
    \ .+= [n/59]\n    odd_collatz .+= [n/67]\n    odd_collatz .+= [n/83]\n    odd_collatz\
    \ .+= [n/99]\n    odd_collatz .+= [n/107]\n    odd_collatz .+= [n/113]\n    odd_collatz\
    \ .+= [n/129]\n    odd_collatz .+= [n/131]\n    odd_collatz .+= [n/137]\n    odd_collatz\
    \ .+= [n/143]\n    odd_collatz .+= [n/149]\n    odd_collatz .+= [n/153]\n    odd_collatz\
    \ .+= [n/157]\n    odd_collatz .+= [n/163]\n    odd_collatz .+= [n/169]\n    odd_collatz\
    \ .+= [n/173]\n    odd_collatz .+= [n/177]\n    odd_collatz .+= [n/183]\n    odd_collatz\
    \ .+= [n/189]\n    odd_collatz .+= [n/193]\n    odd_collatz .+= [n/197]\n    odd_collatz\
    \ .+= [n/203]\n    odd_collatz .+= [n/209]\n    odd_collatz .+= [n/213]\n    odd_collatz\
    \ .+= [n/217]\n    odd_collatz .+= [n/223]\n", "    if n == 1 \n        return\
    \ [1]\n    \n    odd_nums = get_odd_collatz(n-1)\n    \n    odd_nums = [odd_nums[i]\
    \ + 1 for i in 1:length(odd_nums)]\n    \n    return odd_nums\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert get_odd_collatz(5) == [1, 5]\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the nth Fibonacci number.", "    if\
    \ n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    \n    if n % 2 == 1 \n        odd_collatz = [odd_collatz[1], odd_collatz[1]\
    \ * 3] + odd_collatz[2:end]\n    \n    return odd_collatz\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert get_odd_collatz(5) == [1, 5]\n</cell>\n<text>\n\
    Exercise 1\nWrite a function that takes in a positive integer n and returns the\
    \ Collatz sequence up to n.", "    if n == 1 \n        return [1]\n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz = [odd_collatz[1], odd_collatz[2]\
    \ * 2 + 1]\n    return odd_collatz\nend", "    if n == 1\n        return [1]\n\
    \    odd_collatz = get_odd_collatz(n-1)\n    odd_collatz .+= [n/2]\n    odd_collatz\
    \ .+= [n*3+1]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n /\
    \ 2)\n    \n    if n % 2 == 1 \n        odd_collatz += [n / 2]\n    else \n  \
    \      odd_collatz += [n / 2] * 3\n    end\n    \n    return odd_collatz\nend",
  "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1 for (_) in\
    \ odd_collatz]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n  \
    \  odd_collatz .+= [n/2]\n    odd_collatz .+= [n*3+1]\n    return odd_collatz\n\
    end", "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz .+= [n/2]\n    if n % 2 == 1 \n        odd_collatz .+= [n/2]\n\
    \    end\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n * 3 + (n % 2 == 0)]\n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        return [1]\n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in a positive integer n and returns the nth Fibonacci number.", "    if n ==\
    \ 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz\
    \ .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        return [1]\n    odd_nums\
    \ = Vector{Int64}()\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_",
  "    if n == 1\n        [1]\n    else\n        odd_collatz(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert get_odd_collatz(5) == [1, 5]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the Collatz sequence for positive\
    \ integer n.", "    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    \n    if n % 2 == 1 \n        odd_collatz = [odd_collatz[1], odd_collatz[2]]\n\
    \    \n    odd_collatz = [odd_collatz[1], odd_collatz[2]]\n    \n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n\
    \    odd_collatz = get_odd_collatz(n-1)\n    odd_collatz += [n/2]\n    if n %\
    \ 2 == 1 \n        odd_collatz += [n*3]\n    end\n    return odd_collatz\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n   \
    \ \n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ?\
    \ 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    return odd_collatz\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n   \
    \ \n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .= [n * 2 if n %\
    \ 2 == 0 else n * 2 + 1]\n    return odd_collatz\nend", "    if n == 1 \n    \
    \    return [1]\n    \n    odd_collatz = get_odd_collatz(n / 2)\n    \n    if\
    \ n % 2 == 1 \n        odd_collatz += [n / 2]\n    else \n        odd_collatz\
    \ += [n / 2] * (3 + (n % 2))\n    \n    return odd_collatz\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 1 \n        return [1]\n    odd_collatz =\
    \ get_odd_collatz(n / 2)\n    odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 +\
    \ 1 for i in odd_collatz]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n  \
    \      return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz =\
    \ [odd_collatz[1], odd_collatz[1] * 3 + 1]\n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the factorial of a given positive integer n.", "   \
    \ if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .+= n % 2 == 0 ? 1 : 3\n        odd_collatz .+= n\
    \ % 2 == 0 ? 1 : 3\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .+= [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz\
    \ .+= [n/5]\n        odd_collatz .+= [n/7]\n        odd_collatz .+= [n/11]\n \
    \       odd_collatz .+= [n/13]\n        odd_collatz .+= [n/17]\n        odd_collatz\
    \ .+= [n/19]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer n, return a sorted vector that has the even\
    \ numbers in collatz sequence.", "    if n == 1 \n        return [1]\n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2]\
    \ * 3 + 1\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.4>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the nth Fibonacci number\
    \ using recursion.", "    if n == 1 \n        return [1]\n    else \n        odd_collatz\
    \ = get_odd_collatz(n-1)\n        odd_collatz .+= [n/2]\n        odd_collatz .+=\
    \ [n/3]\n        odd_collatz .+= [n/3]\n        odd_collatz .+= [n/2]\n      \
    \  return odd_collatz\nend\n</cell>\n<code language=julia-1.5>", "    if n ==\
    \ 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz\
    \ .+= n % 2 == 0 ? [n / 2] : [n / 2] * 3 + 1\n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        return [1]\n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz += [n / 2]\n    if n % 2 == 1 \n \
    \       odd_collatz += [n / 2]\n    end\n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        return [1]\n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz += [n * 2 if n % 2 == 0 else n * 3]\n\
    \    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a positive integer\
    \ n and returns the nth Fibonacci number.", "    if n == 1 \n        return [1]\n\
    \    \n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .= [n * 3 + 1]\n\
    \    odd_collatz .= odd_collatz[end-1]\n    \n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns the factorial of a given positive integer n.", "   \
    \ if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz += [n/2]\n        return odd_collatz\nend", "    if n ==\
    \ 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz\
    \ = [odd_collatz[1], odd_collatz[1] * 3 + (n % 2)]\n    return odd_collatz\nend\n\
    </cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the factorial of a given positive integer n.",
  "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .+= [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz\
    \ .+= [n/3]\n        odd_collatz .+= [n/2]\n        return odd_collatz\nend\n\
    </cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the Collatz sequence starting from n.", " \
    \   if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n * 2 if n % 2 == 0 else n * 2 + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer n and returns the number\
    \ of steps it takes to reach 1 from n.", "    if n == 1 \n        return [1]\n\
    \    \n    odd_collatz = get_odd_collatz(n / 2)\n    \n    if n % 2 == 1 \n  \
    \      odd_collatz = [odd_collatz[1], odd_collatz[2] * 3]\n    \n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given positive integer.\
    \ \nFor example, factorial(5) returns 120.", "    if n == 1 \n        return [1]\n\
    \    else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz\
    \ .+= [n * 3 if n % 2 == 0 else 1]\n        return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a positive integer n and returns the Collatz sequence\
    \ up to and including n.", "    if n == 1 \n        return [1]\n    else \n  \
    \      odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz .+= n % 2 ==\
    \ 0 ? [n / 2] : [3 * n + 1]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.4>",
  "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.4>", "    if n == 1 \n        return [1]\n\
    \    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz = [odd_collatz[1],\
    \ odd_collatz[2] * 2 + 1]\n    return odd_collatz\nend", "    if n == 1 \n   \
    \     return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n    \
    \    odd_collatz .+= [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz\
    \ .+= [n/3]\n        return odd_collatz\nend", "    if n == 1 \n        return\
    \ [1]\n    odd_collatz = get_odd_collatz(n-1)\n    odd_collatz = [odd_collatz[i]\
    \ + (n % 2 == 0 ? 1 : 3) for i in 1:length(odd_collatz)]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert get_odd_collatz(5) == [1, 5]\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a positive integer\
    \ n and returns the number of steps it takes to reach 1 from n.", "    if n ==\
    \ 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz\
    \ .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        return [1]\n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2]\
    \ * 3\nend", "    if n == 1 \n        return [1]\n    else \n        odd_collatz\
    \ = get_odd_collatz(n-1)\n        odd_collatz .= [n/2]\n        odd_collatz .=\
    \ odd_collatz .+ [n/3]\n        odd_collatz .= odd_collatz .+ [n/3]\n        odd_collatz\
    \ .= odd_collatz .+ [n/3]\n        odd_collatz .= odd_collatz .+ [n/3]\n     \
    \   odd_collatz .= odd_collatz .+ [n/3]\n        odd_collatz .= odd_collatz .+\
    \ [n/3]\n        odd_collatz .= odd_collatz .+ [n/3]\n        odd_collatz .= odd_collatz\
    \ .+ [n/3]\n        odd_collatz .= odd_collatz .+ [n/3]\n        odd_collatz .=\
    \ odd_collatz .+ [n/3]\n        odd_collatz .= odd_collatz .+ [n/3]\n        odd_collatz\
    \ .= odd_collatz .+ [n/3]\n        odd_collatz .= odd_collatz .+ [n/3]\n     \
    \   odd_collatz .= odd_collatz .+ [n/3]\n        odd_collatz .= odd_collatz .+\
    \ [n/3]\n        odd_collatz .= odd_collatz .+ [n/3]\n        odd_collatz .= odd_collatz\
    \ .+ [n/3]\n        odd_collatz .= odd_collatz .+ [n/3]\n        odd_collatz .=\
    \ odd_collatz .+ [n/3]\n        odd_collatz .= odd_collatz .+ [n/3]\n        odd_collatz\
    \ .= odd_collatz .+ [n/3]\n        odd_collatz .= odd_collatz .+ [n/3]\n     \
    \   odd_collatz .= odd_collatz .+ [n/3]\n        odd_collatz .= odd_collatz .+\
    \ [n/3]\n        odd_collatz .= odd_collatz .+ [n/3]\n", "    if n == 1 \n   \
    \     return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .+=\
    \ n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    return odd_collatz\n\
    end", "    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n\
    \    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .= [n * 2 if n % 2\
    \ == 0 else n * 3 + 1 for i in odd_collatz]\n    return odd_collatz\nend", " \
    \   if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n\
    \    else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz\
    \ = [odd_collatz[1], odd_collatz[1] * 2 + 1]\n        return odd_collatz\nend",
  "    if n == 1 \n        return [1]\n    odd_nums = Vector{Int64}()\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_", "    if n == 1 \n        return [1]\n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2]\
    \ * 3 + 1\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n       \
    \ return [1]\n    else \n        odd_collatz = get_odd_collatz(n / 2)\n      \
    \  odd_collatz += [n * 2 if n % 2 == 0 else n * 3]\n        return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n\
    \    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? 1\
    \ : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert get_odd_collatz(5) == [1, 5]\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an integer n and returns the nth Fibonacci\
    \ number.", "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2] * 3\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a positive integer\
    \ n, return a sorted vector that has the even numbers in collatz sequence.", " \
    \   if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz += [n % 2 == 0 ? 1 : 3 * odd_collatz[end-1] + 1]\n    return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n@assert get_odd_collatz(5)\
    \ == [1, 5]\n</cell>\n<text>\nProblem 3\nWrite a function that returns the first\
    \ n Fibonacci numbers. \nThe Fibonacci numbers are defined by the recurrence relation:",
  "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n  \
    \  odd_collatz = [odd_collatz[1], odd_collatz[2]*odd_collatz[1]]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1\n        return [1]\n\
    \    else\n        odd_collatz = get_odd_collatz(n-1)\n        odd_collatz .+=\
    \ [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz .+= [n/5]\n      \
    \  odd_collatz .+= [n/7]\n        odd_collatz .+= [n/11]\n        odd_collatz\
    \ .+= [n/13]\n        odd_collatz .+= [n/17]\n        odd_collatz .+= [n/19]\n\
    \        return odd_collatz\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n /\
    \ 2)\n    odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1 for i in odd_collatz]\n\
    \    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n@assert get_odd_collatz(5)\
    \ == [1, 5]\n</cell>\n<text>\nExercise 4\nWrite a function that returns the factorial\
    \ of a given positive integer n.", "    if n == 1 \n        return [1]\n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n\
    \ + 1]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a positive integer n, return a sorted vector that has the even numbers\
    \ in collatz sequence.", "    if n == 1 \n        return [1]\n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ od", "    if n == 1 \n        return [1]\n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz += [n / 2]\n    if n % 2 == 1 \n \
    \       odd_collatz += [n / 2]\n    end\n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the nth Fibonacci number in the Fibonacci sequence.\
    \ \nThe Fibonacci sequence is defined by the recurrence relation:", "    if n\
    \ == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz\
    \ .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.3>\nget_odd_collatz(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes in a positive integer n and returns the number of steps\
    \ it takes to reach 1 from the first odd number in the Collatz sequence.", " \
    \   if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n\
    \    odd_nums = Vector{Int64}()\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_", "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz += [n/2]\n    if n % 2 == 1 \n        odd_collatz += [n*3]\n\
    \    odd_collatz\nend\n</cell>\n<text>\nProblem 3\nWrite a function that returns\
    \ the nth Fibonacci number in the Fibonacci sequence. \nThe Fibonacci sequence\
    \ is defined by the recurrence relation:", "    if n == 1 \n        return [1]\n\
    \    else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz\
    \ = [odd_collatz[1], odd_collatz[1] * 2 + 1]\n        return odd_collatz\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n   \
    \ odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n\
    \    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes in a positive integer n and returns the number of steps\
    \ it takes to reach 1 from n.", "    if n == 1 \n        return [1]\n    \n  \
    \  odd_collatz = get_odd_collatz(n-1)\n    odd_collatz .+= [n/2]\n    odd_collatz\
    \ .+= [n/3]\n    odd_collatz .+= [n/5]\n    odd_collatz .+= [n/7]\n    odd_collatz\
    \ .+= [n/11]\n    odd_collatz .+= [n/13]\n    odd_collatz .+= [n/17]\n    odd_collatz\
    \ .+= [n/19]\n    odd_collatz .+= [n/23]\n    odd_collatz .+= [n/29]\n    odd_collatz\
    \ .+= [n/37]\n    odd_collatz .+= [n/43]\n    odd_collatz .+= [n/59]\n    odd_collatz\
    \ .+= [n/67]\n    odd_collatz .+= [n/83]\n    odd_collatz .+= [n/99]\n    odd_collatz\
    \ .+= [n/107]\n    odd_collatz .+= [n/131]\n    odd_collatz .+= [n/163]\n    odd_collatz\
    \ .+= [n/193]\n    odd_collatz .+= [n/223]\n    odd_collatz .+= [n/253]\n    odd_collatz\
    \ .+= [n/273]\n    odd_collatz .+= [n/313]\n    odd_collatz .+= [n/337]\n    odd_collatz\
    \ .+= [n/373]\n    odd_collatz .+= [n/439]\n    odd_collatz .+= [n/493]\n    odd_collatz\
    \ .+= [n/553]\n    odd_collatz .+= [n/593]\n    odd_collatz .+= [n/643]\n    odd_collatz\
    \ .+= [n/739]\n    odd_collatz .+= [n/839]\n    odd_collatz .+= [n/939]\n    odd_collatz\
    \ .+= [n/1039]\n    odd_collatz .+= [n/1199]\n    odd_collatz .+= [n/1379]\n \
    \   odd_collat", "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .= [n * 3 + 1]\n    if n % 2 == 1 \n        odd_collatz\
    \ .= [n + 1]\n    end\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    @time get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes an integer $n$ and returns the number of steps it takes to reach 1 from\
    \ $n$. For example, get_steps(5) should return 4 because 5 is even, 5 is odd,\
    \ then 6 is odd, then 7 is odd, then 8 is odd, then 9 is odd, then 10 is odd,\
    \ then 11 is odd, then 12 is odd, then 13 is odd, then 14 is odd, then 15 is odd,\
    \ then 16 is odd, then 17 is odd, then 18 is odd, then 19 is odd, then 20 is odd,\
    \ then 21 is odd, then 22 is odd, then 23 is odd, then 24 is odd, then 25 is odd,\
    \ then 26 is odd, then 27 is odd, then 28 is odd, then 29 is odd, then 30 is odd,\
    \ then 31 is odd, then 32 is odd, then 33 is odd, then 34 is odd, then 35 is odd,\
    \ then 36 is odd, then 37 is odd, then 38 is odd, then 39 is odd, then 40 is odd,\
    \ then 41 is odd, then 42 is odd, then 43 is odd, then 44 is odd, then 45 is odd,\
    \ then 46 is odd, then 47 is odd, then 48 is odd, then 49 is odd, then 50 is odd,\
    \ then 51 is odd, then 52 is odd, then 53 is odd, then 54 is odd, then 55 is odd,\
    \ then 56 is odd, then 57 is odd, then 58 is odd, then 59 is odd, then 60 is odd,\
    \ then 61 is odd, then 62 is odd, then 63 is odd, then 64 is odd, then 65 is odd,\
    \ then 66 is odd, then 67 is odd, then 68 is odd, then 69 is odd, then 70 is odd,\
    \ then 71 is odd, then 72 is odd, then 73 is odd, then 74 is odd, then 75 is odd,\
    \ then 76 is odd, then 77 is odd, then 78 is odd, then 79 is odd, then 80 is odd,\
    \ then 8", "    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2] * 3\n    odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer\
    \ n, return a sorted vector that has the even numbers in collatz sequence.", " \
    \   if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    \n    if n % 2 == 0 \n        odd_collatz += [n / 2]\n    else \n\
    \        odd_collatz += [n / 2] * 3 + 1\n    \n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a positive integer n, return a sorted\
    \ vector that has the even numbers in collatz sequence.", "    if n == 1 \n  \
    \      return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .=\
    \ [n % 2 == 0 ? 1 : 3 * odd_collatz[end] + 1]\n    return odd_collatz\nend", " \
    \   if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz += [n % 2 == 0 ? 1 : 3 * odd_collatz[-1] + 1]\n  \
    \      return odd_collatz\nend\n</cell>\n<code language=julia-1.5>", "    if n\
    \ == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz\
    \ .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the first n positive integers starting from 1 that\
    \ have the Collatz conjecture.", "    if n == 1 \n        return [1]\n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n\
    \ + 1]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given positive integer. \nThe factorial of a positive integer is defined as\
    \ the product of all the positive integers less than or equal to that integer.",
  "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1 for (_,n) in zip(odd_collatz,\
    \ odd_collatz)]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n % 2 == 0 ? 1 : 3 * odd_collatz[end] + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n\
    \    \n    odd_collatz = get_odd_collatz(n / 2)\n    \n    if n % 2 == 1 \n  \
    \      odd_collatz += [n / 2]\n    \n    odd_collatz += [n * 3]\n    \n    return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n   \
    \     return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz =\
    \ [odd_collatz[end-1] + 1 for i in 1:length(odd_collatz)]\n    odd_collatz\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 1\n        return [1]\n    odd_nums\
    \ = Vector{Int64}()\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_",
  "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer n and returns the number\
    \ of steps it takes to reach 1 from n.", "    if n == 1\n        return [1]\n\
    \    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz += [n * 2 if n % 2\
    \ == 0 else n * 3 + 1 for i in odd_collatz]\n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\n@time get_odd_collatz(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the nth term of the Fibonacci sequence. \n\
    The Fibonacci sequence is defined by the recurrence relation:", "    if n == 1\
    \ \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz\
    \ .= [n * 2 if n % 2 == 0 else n * 3 + 1]\n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        return [1]\n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * odd_collatz[end]\
    \ + 1]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.3>", "  \
    \  if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end", "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes in a positive integer n and returns the\
    \ number of steps it takes to reach 1 from n.", "    if n == 1 \n        return\
    \ [1]\n    \n    odd_collatz = get_odd_collatz(n / 2)\n    \n    if n % 2 == 0\
    \ \n        odd_collatz .+= [n]\n    else \n        odd_collatz .+= [n] * 3\n\
    \    end\n    \n    return odd_collatz\nend", "    if n == 1 \n        return\
    \ [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n        odd_collatz\
    \ .= [n/2]\n        odd_collatz .= odd_collatz .+ [n*3+1]\n        return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n\
    \    \n    odd_collatz = get_odd_collatz(n-1)\n    odd_collatz .+= [n/2]\n   \
    \ odd_collatz .+= [n/3]\n    odd_collatz .+= [n/5]\n    odd_collatz .+= [n/7]\n\
    \    odd_collatz .+= [n/11]\n    odd_collatz .+= [n/13]\n    odd_collatz .+= [n/17]\n\
    \    odd_collatz .+= [n/19]\n    odd_collatz .+= [n/23]\n    odd_collatz .+= [n/29]\n\
    \    odd_collatz .+= [n/37]\n    odd_collatz .+= [n/53]\n    odd_collatz .+= [n/63]\n\
    \    odd_collatz .+= [n/79]\n    odd_collatz .+= [n/97]\n    odd_collatz .+= [n/113]\n\
    \    odd_collatz .+= [n/127]\n    odd_collatz .+= [n/131]\n    odd_collatz .+=\
    \ [n/139]\n    odd_collatz .+= [n/147]\n    odd_collatz .+= [n/153]\n    odd_collatz\
    \ .+= [n/159]\n    odd_collatz .+= [n/163]\n    odd_collatz .+= [n/161]\n    odd_collatz\
    \ .+= [n/163]\n    odd_collatz .+= [n/161]\n    odd_collatz .+= [n/159]\n    odd_collatz\
    \ .+= [n/153]\n    odd_collatz .+= [n/147]\n    odd_collatz .+= [n/139]\n    odd_collatz\
    \ .+= [n/131]\n    odd_collatz .+= [n/127]\n    odd_collatz .+= [n/113]\n    odd_collatz\
    \ .+= [n/97]\n    odd_collatz .+= [n/79]\n    odd_collatz .+= [n/63]\n    odd_collatz\
    \ .+= [n/53]\n    odd_collatz .+= [n/37", "    if n == 1 \n        return [1]\n\
    \    odd_collatz = get_odd_collatz(n-1)\n    odd_collatz .+= [n/2]\n    if n %\
    \ 2 == 1 \n        odd_collatz .+= [n/2]\n    end\n    return odd_collatz\nend\n\
    </cell>\n<code language=julia-1.3>", "    if n == 1 \n        return [1]\n   \
    \ \n    odd_collatz = get_odd_collatz(n / 2)\n    \n    if n % 2 == 1 \n     \
    \   odd_collatz += [n / 2]\n    else \n        odd_collatz += [n / 2] * (3 + (n\
    \ % 2))\n    \n    return odd_collatz\nend", "    if n == 1 \n        return [1]\n\
    \    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? [n\
    \ / 2] : [3 * n + 1]\n    return odd_collatz\nend", "    if n == 1 \n        return\
    \ [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .= [n * 3 + (n\
    \ % 2 == 1)]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer n, return a sorted vector that has the even\
    \ numbers in collatz sequence.", "    if n == 1 \n        return [1]\n    odd_collatz\
    \ = get_odd_collatz(n-1)\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/3]\n\
    \    odd_collatz .+= [n*3+1]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz = [odd_collatz[end-1] + 1 for x in odd_collatz]\n\
    \        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1 for i in odd_collatz]\n\
    \        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n    odd_collatz\
    \ += [n/2]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz\
    \ += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz\
    \ += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz\
    \ += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz\
    \ += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz\
    \ += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz\
    \ += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz\
    \ += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz\
    \ += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz\
    \ += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz\
    \ += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz\
    \ += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz\
    \ += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz\
    \ += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz\
    \ += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz", "    if n == 1 \n    \
    \    return [1]\n    else \n        odd_collatz = get_odd_collatz(n / 2)\n   \
    \     odd_collatz += [n % 2]\n        return odd_collatz\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1\n        return [1]\n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n\
    \ + 1]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n  \
    \  odd_collatz .+= [n/2]\n    odd_collatz .+= [n/3]\n    odd_collatz .+= [n/5]\n\
    \    odd_collatz .+= [n/7]\n    odd_collatz .+= [n/11]\n    odd_collatz .+= [n/13]\n\
    \    odd_collatz .+= [n/17]\n    odd_collatz .+= [n/19]\n    odd_collatz .+= [n/23]\n\
    \    odd_collatz .+= [n/29]\n    odd_collatz .+= [n/37]\n    odd_collatz .+= [n/43]\n\
    \    odd_collatz .+= [n/59]\n    odd_collatz .+= [n/67]\n    odd_collatz .+= [n/83]\n\
    \    odd_collatz .+= [n/99]\n    odd_collatz .+= [n/107]\n    odd_collatz .+=\
    \ [n/113]\n    odd_collatz .+= [n/127]\n    odd_collatz .+= [n/135]\n    odd_collatz\
    \ .+= [n/143]\n    odd_collatz .+= [n/151]\n    odd_collatz .+= [n/159]\n    odd_collatz\
    \ .+= [n/167]\n    odd_collatz .+= [n/175]\n    odd_collatz .+= [n/183]\n    odd_collatz\
    \ .+= [n/191]\n    odd_collatz .+= [n/199]\n    odd_collatz .+= [n/207]\n    odd_collatz\
    \ .+= [n/215]\n    odd_collatz .+= [n/223]\n    odd_collatz .+= [n/227]\n    odd_collatz\
    \ .+= [n/231]\n    odd_collatz .+= [n/237]\n    odd_collatz .+= [n/243]\n    odd_collatz\
    \ .+= [n/251]\n    odd_collatz .+= [n/259]\n    odd_collatz .+= [n/267]\n", " \
    \   if n == 1 \n        return [1]\n    odd_nums = Vector{Int64}()\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_", "    if n == 1 \n        return [1]\n    \n\
    \    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .= [n / 2]\n    if\
    \ n % 2 == 1 \n        odd_collatz .= odd_collatz .+ [n / 2]\n    end\n    return\
    \ odd_collatz\nend", "    if n == 1 \n        return [1]\n    \n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz .= [n % 2 == 0 ? 1 : 3 * odd_collatz[end]\
    \ + 1]\n    \n    return odd_collatz\nend", "    if n == 1 \n        return [1]\n\
    \    else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz\
    \ += [n / 2]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer n, return a sorted vector that has the even\
    \ numbers in collatz sequence.", "    if n == 1 \n        return [1]\n    \n \
    \   odd_collatz = get_odd_collatz(n / 2)\n    \n    if n % 2 == 1 \n        odd_collatz\
    \ += [n / 2]\n    else \n        odd_collatz += [n / 2] * 3\n    \n    return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer n, return a sorted vector that has the even numbers in collatz sequence.",
  "    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n-1)\n\
    \    \n    if n % 2 == 0 \n        odd_collatz += [n/2]\n    else \n        odd_collatz\
    \ += [n*3]\n    \n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 1\nWrite a function that returns\
    \ the first n positive integers greater than or equal to n.", "    if n == 1\n\
    \        return [1]\n    else\n        odd_collatz = get_odd_collatz(n-1)\n  \
    \      odd_collatz .+= [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz\
    \ .+= [n/5]\n        odd_collatz .+= [n/7]\n        odd_collatz .+= [n/11]\n \
    \       odd_collatz .+= [n/13]\n        odd_collatz .+= [n/17]\n        odd_collatz\
    \ .+= [n/19]\n        odd_collatz .+= [n/23]\n        odd_collatz .+= [n/29]\n\
    \        odd_collatz .+= [n/37]\n        odd_collatz .+= [n/43]\n        odd_collatz\
    \ .+= [n/59]\n        odd_collatz .+= [n/67]\n        odd_collatz .+= [n/83]\n\
    \        odd_collatz .+= [n/99]\n        odd_collatz .+= [n/107]\n        odd_collatz\
    \ .+= [n/131]\n        odd_collatz .+= [n/163]\n        odd_collatz .+= [n/191]\n\
    \        odd_collatz .+= [n/223]\n        odd_collatz .+= [n/251]\n        odd_collatz\
    \ .+= [n/289]\n        odd_collatz .+= [n/339]\n        odd_collatz .+= [n/379]\n\
    \        odd_collatz .+= [n/431]\n        odd_collatz .+= [n/573]\n        odd_collatz\
    \ .+= [n/739]\n        odd_collatz .+= [n/919]\n        odd_collatz .+= [n/1097]\n\
    \        odd_collatz .+= [n/1365]\n        odd_collatz .+= [n/1733]\n        odd_collatz\
    \ .+= [n/2031]\n        odd_collatz .+= [n/2439]\n        odd_collatz .+= [n/2891]\n\
    \        odd_collatz .+= [n/3397]\n        odd_collatz .+= [n/3831]\n        odd_",
  "    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/3]\n    odd_collatz .+= [n/5]\n\
    \    odd_collatz .+= [n/7]\n    odd_collatz .+= [n/11]\n    odd_collatz .+= [n/13]\n\
    \    odd_collatz .+= [n/17]\n    odd_collatz .+= [n/19]\n    odd_collatz .+= [n/23]\n\
    \    odd_collatz .+= [n/29]\n    odd_collatz .+= [n/37]\n    odd_collatz .+= [n/43]\n\
    \    odd_collatz .+= [n/59]\n    odd_collatz .+= [n/67]\n    odd_collatz .+= [n/83]\n\
    \    odd_collatz .+= [n/99]\n    odd_collatz .+= [n/107]\n    odd_collatz .+=\
    \ [n/131]\n    odd_collatz .+= [n/163]\n    odd_collatz .+= [n/193]\n    odd_collatz\
    \ .+= [n/225]\n    odd_collatz .+= [n/251]\n    odd_collatz .+= [n/289]\n    odd_collatz\
    \ .+= [n/361]\n    odd_collatz .+= [n/425]\n    odd_collatz .+= [n/495]\n    odd_collatz\
    \ .+= [n/577]\n    odd_collatz .+= [n/653]\n    odd_collatz .+= [n/729]\n    odd_collatz\
    \ .+= [n/811]\n    odd_collatz .+= [n/907]\n    odd_collatz .+= [n/1013]\n   \
    \ odd_collatz .+= [n/1117]\n    odd_collatz .+= [n/1223]\n    odd_collatz .+=\
    \ [n/1349]\n    odd_collatz .+= [n/1477]\n    odd_collatz .+= [n/1597]\n    ",
  "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .+= [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz\
    \ .+= [n/3]\n        odd_collatz .+= [n/2]\n        return odd_collatz\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n   \
    \ odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? [n /\
    \ 2] : [3 * odd_collatz[end] + 1]\nend\n</cell>\n<code language=julia-1.0>", " \
    \   if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 3 if n % 2 == 0 else n * 2 + 1]\n        return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer n, return a sorted vector that has the even numbers in collatz sequence.",
  "    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n /\
    \ 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
