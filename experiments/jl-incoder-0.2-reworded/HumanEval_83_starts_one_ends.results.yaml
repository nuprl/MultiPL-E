language: jl
name: HumanEval_83_starts_one_ends
results:
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n / 10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers less than or equal to n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6tjre5hf.jl:11\nin expression starting at\
    \ /tmp/tmp6tjre5hf.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl0n770yj.jl:11\nin expression starting at\
    \ /tmp/tmpl0n770yj.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        count_one_ends(n-1) + count_one_ends(n-2) \nend\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of integers less than or equal to n that\
    \ start or end with 1.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgv6xwy5m.jl:7\nin expression starting at /tmp/tmpgv6xwy5m.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of integers from 1 to n that\
    \ start or end with 1.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5g4oeoal.jl:8\nin expression starting at /tmp/tmp5g4oeoal.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local count = 1\n\
    \        local i = 1\n        while i <= n \n            do if i%10 == 1 \n  \
    \              then count = count + 1\n                else count = count + 1\n\
    \            end\n            i = i + 1\n        end\n        return count\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr2t2dmnu.jl:7\nin expression starting at /tmp/tmpr2t2dmnu.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return n\n    else\
    \ \n        return starts_one_ends(n//10) + n%10 == 1 ? 1 : 0\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(123)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of integers less than n that start or\
    \ end with 1.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) ==\
    \ 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8dfth91_.jl:11\nin expression starting at\
    \ /tmp/tmp8dfth91_.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        n <- n \n        i <- 0 \n       \
    \ count <- 0 \n        while i < n \n            do if n%10 == 1 \n          \
    \      then count += 1 \n                else if n%10 == 0 \n                \
    \    then return 0 \n                else \n                    count += 1 \n\
    \            i <- i + 1 \n        return count \nend \n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(2)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(3)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(4)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(5)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(6)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(7)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(8)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(9)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(11)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(12)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(13)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(14)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(15)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(16)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(17)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(18)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(19)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(20)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(21)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(22)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(23)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(24)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(25)\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph5s_ff_m.jl:7\nin expression starting at /tmp/tmph5s_ff_m.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        x <- starts_one_ends(n-1) \n        if n % 10 == 1 \n    \
    \        then return x + 1 \n        else return x \nend \n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpek0s1ism.jl:7\nin expression starting at /tmp/tmpek0s1ism.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return starts_one_ends(n-1) + 1 \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6dgjn4d2.jl:7\nin expression starting at /tmp/tmp6dgjn4d2.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdm8ntjyw.jl:8\nin expression starting at /tmp/tmpdm8ntjyw.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \   else if n < 100 \n        then return 1 + starts_one_ends(n//10)\n    else\
    \ if n < 1000 \n        then return 1 + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 10000 \n        then return 1 + starts_one_ends(n//1000) + starts_one_ends(n//100)\
    \ + starts_one_ends(n//10)\n    else if n < 100000 \n        then return 1 + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 1000000 \n        then return 1 + starts_one_ends(n//100000)\
    \ + starts_one_ends(n//10000) + starts_one_ends(n//1000) + starts_one_ends(n//100)\
    \ + starts_one_ends(n//10)\n    else if n < 10000000 \n        then return 1 +\
    \ starts_one_ends(n//1000000) + starts_one_ends(n//100000) + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 100000000 \n        then return 1 + starts_one_ends(n//10000000)\
    \ + starts_one_ends(n//1000000) + starts_one_ends(n//100000) + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 1000000000 \n        then return 1 + starts_one_ends(n//100000000)\
    \ + starts_one_ends(n//10000000) + starts_one_ends(n//1000000) + starts_one_ends(n//100000)\
    \ + starts_one_ends(n//10000) + starts_one_ends(n//1000) + starts_one_ends(n//100)\
    \ + starts_one_ends(n//10)\n    else if n < 10000000000 \n        then return\
    \ 1 + starts_one_ends(n//1000000000) + starts_one_ends(n//100000000) + starts_one_ends(n//10000000)\
    \ + starts_one_ends(n//1000000) + starts_one_ends(n//100000) + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + start\nusing Test\n\n\
    @testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz_v5krxn.jl:7\nin expression starting at /tmp/tmpz_v5krxn.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        let\n         \
    \   digits = digits(n)\n            counts = counts(digits)\n            \n  \
    \          count_starts_ends(digits, counts)\n        end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm6jy7ds3.jl:7\nin expression starting at /tmp/tmpm6jy7ds3.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        let\n         \
    \   digits = digits(n) \n            start = digits[1]\n            end = digits[end]\n\
    \            digits_start = digits[start]\n            digits_end = digits[end]\n\
    \            digits_start_end = digits_start + digits_end\n            digits_start_end_one\
    \ = digits_start + digits_end + 1\n            digits_start_end_one_one = digits_start\
    \ + digits_end + 2\n            digits_start_end_one_one_one = digits_start +\
    \ digits_end + 3\n            digits_start_end_one_one_one_one = digits_start\
    \ + digits_end + 4\n            digits_start_end_one_one_one_one_one = digits_start\
    \ + digits_end + 5\n            digits_start_end_one_one_one_one_one_one = digits_start\
    \ + digits_end + 6\n            digits_start_end_one_one_one_one_one_one_one =\
    \ digits_start + digits_end + 7\n            digits_start_end_one_one_one_one_one_one_one_one\
    \ = digits_start + digits_end + 8\n            digits_start_end_one_one_one_one_one_one_one_one_one\
    \ = digits_start + digits_end + 9\n            digits_start_end_one_one_one_one_one_one_one_one_one_one\
    \ = digits_start + digits_end + 10\n            digits_start_end_one_one_one_one_one_one_one_one_one_one\
    \ = digits_start + digits_end + 11\n            digits_start_end_one_one_one_one_one_one_one_one_one_one_one\
    \ = digits_start + digits_end + 12\n            digits_start_end_one_one_one_one_one_one_one_one_one_one_one_one\
    \ = digits_start + digits_end + 13\n            digits_start_end_one_one_one_one_one_one_one_one_one_one_one_one_one\
    \ = digits_start + digits_end + 14\n            digits_start_end_one_one_one_one_one_one_one_one_one_one_one_one_one\
    \ = digits_start + digits_end + 15\n            digits_start_end_one_one_one_one_one_one_one_one_one_one_one_one_one_one\
    \ = digits_start + digits_end + 16\n            digits_start_end_one_one_one_one_one_one_one_one_one_one_one_one_one_one_one\
    \ = digits_start + digits_end + 17\n            digits_start_end_one_one_one_one_one_one_one_one_one_one_one_one_one_one_one\
    \ = digits_start + digits_end + 18\n            digits_start_end_one_one_one_one_one_one_\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5kpvwz5j.jl:7\nin expression starting at /tmp/tmp5kpvwz5j.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else \n        local count = 0\n        for i = 1 to n \n            do if\
    \ starts_one_ends(i) == 1 \n                then count = count + 1\n         \
    \       else return 0\n            end\n        end\n        return count\n  \
    \  end\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoje8xrrc.jl:7\nin expression starting at /tmp/tmpoje8xrrc.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppcgm6gbv.jl:7\nin expression starting at /tmp/tmppcgm6gbv.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers less than or equal to n that start or end with\
    \ 1.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg3oidh2a.jl:11\nin expression starting at\
    \ /tmp/tmpg3oidh2a.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n < 10 \n        return n\n    else if n < 100\n  \
    \      return 10 * n + n\n    else if n < 1000\n        return 100 * n + n\n \
    \   else if n < 10000\n        return 1000 * n + n\n    else if n < 100000\n \
    \       return 10000 * n + n\n    else if n < 1000000\n        return 100000 *\
    \ n + n\n    else if n < 10000000\n        return 1000000 * n + n\n    else if\
    \ n < 100000000\n        return 10000000 * n + n\n    else if n < 1000000000\n\
    \        return 100000000 * n + n\n    else if n < 10000000000\n        return\
    \ 1000000000 * n + n\n    else if n < 100000000000\n        return 10000000000\
    \ * n + n\n    else if n < 1000000000000\n        return 100000000000 * n + n\n\
    \    else if n < 10000000000000\n        return 1000000000000 * n + n\n    else\
    \ if n < 100000000000000\n        return 10000000000000 * n + n\n    else if n\
    \ < 1000000000000000\n        return 100000000000000 * n + n\n    else if n <\
    \ 10000000000000000\n        return 1000000000000000 * n + n\n    else if n <\
    \ 100000000000000000\n        return 10000000000000000 * n + n\n    else if n\
    \ < 1000000000000000000\n        return 100000000000000000 * n + n\n    else \n\
    \        error(\"n too large\")\nend\n</cell>\n<code language=julia-1.3>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6tm_lu86.jl:8\nin expression starting at /tmp/tmp6tm_lu86.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) ==\
    \ 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2d6igsav.jl:8\nin expression starting at /tmp/tmp2d6igsav.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n < 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        local i::Int64 = 1\n        local count::Int64 = 1\n \
    \       while i <= n \n            do if i %% 10 == 1 \n                then count\
    \ = count + 1\n                else return 0\n            end\n            i =\
    \ i + 1\n        end\n        return count\nend\n\"\"\"\n    Given a positive\
    \ integer n, return the count of the numbers of n-digit\n    positive integers\
    \ that start or end with 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvuqp9bxn.jl:7\nin expression starting at /tmp/tmpvuqp9bxn.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else \n        let\n            digits = digits(n)\n            digits_count\
    \ = length(digits)\n            digits_count_plus_one = digits_count + 1\n   \
    \         digits_count_minus_one = digits_count - 1\n            digits_count_minus_one_plus_one\
    \ = digits_count_minus_one + 1\n            digits_count_minus_one_minus_one =\
    \ digits_count_minus_one - 1\n            digits_count_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one + 1\n            digits_count_minus_one_minus_one_minus_one\
    \ = digits_count_minus_one_minus_one - 1\n            digits_count_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one + 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one - 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one + 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one - 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ - 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ + 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ - 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_min\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpley47utl.jl:7\nin expression starting at /tmp/tmpley47utl.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)\n\
    </cell>\n\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkn_9erz2.jl:8\nin expression starting at /tmp/tmpkn_9erz2.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        count_starts_ends(n-1) + starts_one_ends(n-2)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)\n\
    </cell>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzt3xi0bt.jl:7\nin expression starting at /tmp/tmpzt3xi0bt.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1p01f9ak.jl:11\nin expression starting at\
    \ /tmp/tmp1p01f9ak.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else if n == 1 \n        1\n\
    \    else \n        1 + starts_one_ends(n - 1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmkr8bqp1.jl:8\nin expression starting at /tmp/tmpmkr8bqp1.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return n\n    else\
    \ \n        return starts_one_ends(n/10) + n%10 == 1 ? 1 : 0\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of integers that start or end with 1, and\
    \ are divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq34f7grp.jl:11\nin expression starting at\
    \ /tmp/tmpq34f7grp.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return starts_one_ends(n-1) + 1 \n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of positive integers that end with 2.\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptuyapdr_.jl:7\nin expression starting at /tmp/tmptuyapdr_.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else if n < 1 \n        then return 0\n    else if n == 0 \n        then return\
    \ 0\n    else \n        count_one_ends(n-1) + count_one_ends(n-2) + count_one_ends(n-3)\
    \ + count_one_ends(n-4) + count_one_ends(n-5) + count_one_ends(n-6) + count_one_ends(n-7)\
    \ + count_one_ends(n-8) + count_one_ends(n-9) + count_one_ends(n-10)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9_h_luvh.jl:7\nin expression starting at /tmp/tmp9_h_luvh.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \       else return starts_one_ends(n-1) + ends_one_starts(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers that start\
    \ or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzxz__2hb.jl:7\nin expression starting at /tmp/tmpzxz__2hb.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsbu908qr.jl:11\nin expression starting at\
    \ /tmp/tmpsbu908qr.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \   else \n        local count = 0\n        while n >= 10 \n            do count\
    \ = count + 1\n            n = n / 10\n        end\n        return count\n   \
    \ end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3apqi7rh.jl:7\nin expression starting at /tmp/tmp3apqi7rh.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers less than or equal to n that start or end with\
    \ 1.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgqcy6p7b.jl:11\nin expression starting at\
    \ /tmp/tmpgqcy6p7b.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return n\n    else\
    \ \n        return starts_one_ends(n/10) + n%10 == 1 ? 1 : 0\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyh7vudzo.jl:11\nin expression starting at\
    \ /tmp/tmpyh7vudzo.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphz3_d87b.jl:11\nin expression starting at\
    \ /tmp/tmphz3_d87b.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpahz4ulxa.jl:11\nin expression starting at\
    \ /tmp/tmpahz4ulxa.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n < 10 \n        return 1 \n    else \n        return\
    \ starts_one_ends(n/10) + 1 \nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) ==\
    \ 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcx_yuvsk.jl:8\nin expression starting at /tmp/tmpcx_yuvsk.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else return starts_one_ends(n//10) + starts_one_ends(n%10)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwvo98blw.jl:7\nin expression starting at /tmp/tmpwvo98blw.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return n\n    else\
    \ \n        return starts_one_ends(n//10) + n%10 == 1 ? 1 : 0\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphdp80cqj.jl:11\nin expression starting at\
    \ /tmp/tmphdp80cqj.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4b9rb04s.jl:11\nin expression starting at\
    \ /tmp/tmp4b9rb04s.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) + 1 \nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of positive integers that\
    \ end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) ==\
    \ 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps2c6gzd2.jl:11\nin expression starting at\
    \ /tmp/tmps2c6gzd2.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    end\n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0251j2cl.jl:7\nin expression starting at /tmp/tmp0251j2cl.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of positive\
    \ integers that end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmca5z46r.jl:7\nin expression starting at /tmp/tmpmca5z46r.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers less than or equal\
    \ to n.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn00k8v26.jl:11\nin expression starting at\
    \ /tmp/tmpn00k8v26.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else if n == 1 \n        1\n\
    \    else \n        1 + starts_one_ends(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj5qfyp23.jl:8\nin expression starting at /tmp/tmpj5qfyp23.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10)\nend\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(123456789)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers less than or\
    \ equal to a given number.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqglifqm4.jl:11\nin expression starting at\
    \ /tmp/tmpqglifqm4.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else if n < 100\n            then return 2\n            else if n < 1000\n\
    \                then return 3\n                else if n < 10000\n          \
    \          then return 4\n                    else if n < 100000\n           \
    \             then return 5\n                        else if n < 1000000\n   \
    \                         then return 6\n                            else if n\
    \ < 10000000\n                                then return 7\n                \
    \                else if n < 100000000\n                                    then\
    \ return 8\n                                    else if n < 1000000000\n     \
    \                                   then return 9\n                          \
    \              else if n < 10000000000\n                                     \
    \       then return 10\n                                            else if n\
    \ < 100000000000\n                                                then return\
    \ 11\n                                                else if n < 1000000000000\n\
    \                                                    then return 12\n        \
    \                                            else if n < 10000000000000\n    \
    \                                                    then return 13\n        \
    \                                                else if n < 100000000000000\n\
    \                                                            then return 14\n\
    \                                                            else if n < 1000000000000000\n\
    \                                                                then return 15\n\
    \                                                                else if n < 10000000000000000\n\
    \                                                                    then return\
    \ 16\n                                                                    else\
    \ if n < 100000000000000000\n                                                \
    \                        then return 17\n                                    \
    \                                    else if n < 1000000000000000000\n       \
    \                                                                     then return\
    \ 18\n                                                                       \
    \     else if n < 10000000000000000000\n                                     \
    \                                           then return 19\n                 \
    \                                                               else if n < 100000000000000000000\n\
    \                                                                            \
    \        then return 20\n                                                    \
    \                                else if n < 1000000000000000000000\n        \
    \                                                                            \
    \    then return 21\n                                                        \
    \                                else if n < 10000000000000000000000\n       \
    \                                                                            \
    \         then return 22\n                                                   \
    \                                         else if n < 100000000000000000000000\n\
    \                                                                            \
    \                    then return 23\n                                        \
    \                                                        else if n < 1000000000000000000000000\n\
    \                                                                            \
    \                        then return 24\n                                    \
    \                                                                else if n < 10000000000000000000000000\n\
    \                                                                            \
    \                            then return 25\n                                \
    \                                                                        else\
    \ if n < 100000000000000000000000000\n                                       \
    \                                                                     then return\
    \ 26\n                                                                       \
    \                                     else if n < 1000000000000000000000000000\n\
    \                                                                            \
    \                                    then return 27\n                        \
    \                                                                            \
    \            else if n < 10000000000000000000000000000\n                     \
    \                                                                            \
    \                   then return 28\n                                         \
    \                                                                           else\
    \ if n < 100000000000000000000000000000\n                                    \
    \                                                                            \
    \        then return 29\n                                                    \
    \                                                                    else if n\
    \ < 1000000000000000000000000000000\n                                        \
    \                                                                            \
    \        then return 30\n                                                    \
    \                                                                        else\
    \ if n < 10000000000000000000000000000000\n                                  \
    \                                                                            \
    \                  then return 31\n                                          \
    \                                                                            \
    \          else if n < 100000000000000000000000000000000\n                   \
    \                                                                            \
    \                                     then return 32\n                       \
    \                                                                            \
    \                                 else if n < 1000000000000000000000000000000000\n\
    \                                                                            \
    \                                                            then return 33\n\
    \                                                                            \
    \                                                            else if n < 1000000000000000000000000000000000\n\
    \                                                                            \
    \                                                                then return 34\n\
    \                                                                            \
    \                                                                else if n < 1000000000000000000000000000000000\n\
    \                                                                            \
    \                                                                    then return\
    \ 35\n                                                                       \
    \                                                                         else\
    \ if n < 1000000000000000000000000000000000\n                                \
    \                                                                            \
    \                                        then return 36\n                    \
    \                                                                            \
    \                                                    else if n < 1000000000000000000000000000000000\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdywin7rm.jl:7\nin expression starting at /tmp/tmpdywin7rm.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_c82kyla.jl:11\nin expression starting at\
    \ /tmp/tmp_c82kyla.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1 \n\
    \        else return starts_one_ends(n//10) + 1 \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprg0kjiy9.jl:7\nin expression starting at /tmp/tmprg0kjiy9.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return n\n    else\
    \ \n        return starts_one_ends(n/10) + n%10 == 1 ? 1 : 0\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdkjjdbg4.jl:11\nin expression starting at\
    \ /tmp/tmpdkjjdbg4.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp75yo2vtr.jl:11\nin expression starting at\
    \ /tmp/tmp75yo2vtr.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        local i::Int64 = 1\n        local count::Int64 = 0\n     \
    \   while i <= n \n            do if i%10 == 1 \n                then count =\
    \ count + 1\n                else return count\n            end\n            i\
    \ = i + 1\n        end\n        return count\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of integers between 1 and n that \nsatisfy the equation $x^2 + y^2\
    \ = z^2$. For example, given n = 10, the function should return 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwmq4mdgt.jl:7\nin expression starting at /tmp/tmpwmq4mdgt.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else \n        count_one_ends(n-1) + count_one_ends(n+1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(10)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of positive integers that start or end with\
    \ 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkwm32_br.jl:7\nin expression starting at /tmp/tmpkwm32_br.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else if n == 1 \n        then return 1 \n    else \n        count_one_ends(n-1)\
    \ + count_one_ends(n-2) \nend\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpflwlp_ww.jl:7\nin expression starting at /tmp/tmpflwlp_ww.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers less than or equal to n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ia5zm46.jl:11\nin expression starting at\
    \ /tmp/tmp7ia5zm46.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        let\n            digits = digits(n)\
    \ \n            digits_count = length(digits) \n            digits_sum = sum(digits)\
    \ \n            digits_product = digits_sum * digits_count \n            digits_product\
    \ = digits_product % 10 \n            digits_product = digits_product == 0 ? 1\
    \ : digits_product \n            digits_product = digits_product * digits_count\
    \ \n            digits_product = digits_product % 10 \n            digits_product\
    \ = digits_product == 0 ? 1 : digits_product \n            digits_product = digits_product\
    \ * digits_count \n            digits_product = digits_product % 10 \n       \
    \     digits_product = digits_product == 0 ? 1 : digits_product \n           \
    \ digits_product = digits_product * digits_count \n            digits_product\
    \ = digits_product % 10 \n            digits_product = digits_product == 0 ? 1\
    \ : digits_product \n            digits_product = digits_product * digits_count\
    \ \n            digits_product = digits_product % 10 \n            digits_product\
    \ = digits_product == 0 ? 1 : digits_product \n            digits_product = digits_product\
    \ * digits_count \n            digits_product = digits_product % 10 \n       \
    \     digits_product = digits_product == 0 ? 1 : digits_product \n           \
    \ digits_product = digits_product * digits_count \n            digits_product\
    \ = digits_product % 10 \n            digits_product = digits_product == 0 ? 1\
    \ : digits_product \n            digits_product = digits_product * digits_count\
    \ \n            digits_product = digits_product % 10 \n            digits_product\
    \ = digits_product == 0 ? 1 : digits_product \n            digits_product = digits_product\
    \ * digits_count \n            digits_product = digits_product % 10 \n       \
    \     digits_product = digits_product == 0 ? 1 : digits_product \n           \
    \ digits_product = digits_product * digits_count \n            digits_product\
    \ = digits_product % 10 \n            digits_product = digits_product == 0 ? 1\
    \ : digits_product \n            digits_product = digits_product * digits_count\
    \ \n            digits_product = digits_product % 10 \n            digits_product\
    \ = digits_product == 0 ? 1 : digits_product \n            digits_product = digits_product\
    \ * digits_count \n            digits_product = digits_product % 10 \n       \
    \     digits_product = digits_product == 0 ? 1 : digits_product \n           \
    \ \nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxt2yajj4.jl:7\nin expression starting at /tmp/tmpxt2yajj4.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \   else \n        count_starts_ends(n) \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbwowz9rb.jl:7\nin expression starting at /tmp/tmpbwowz9rb.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else return starts_one_ends(n//10) + 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn38m23wx.jl:7\nin expression starting at /tmp/tmpn38m23wx.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2 + 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprdtdlqhz.jl:7\nin expression starting at /tmp/tmprdtdlqhz.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4b9rb04s.jl:11\nin expression starting at\
    \ /tmp/tmp4b9rb04s.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else \n        count_ones = starts_one_ends(n-1)\n        if n % 10 == 1 \n\
    \            then return count_ones + 1\n        else \n            return count_ones\n\
    end\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy36k5d7i.jl:7\nin expression starting at /tmp/tmpy36k5d7i.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else \n        sum(starts_one_ends(n-1) == 1 for i in 1:n)\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers less than or equal\
    \ to a given integer n.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsqgunjh4.jl:7\nin expression starting at /tmp/tmpsqgunjh4.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 10 == 1 \n       \
    \ then return starts_one_ends(n / 10) + 1\n    else \n        return starts_one_ends(n\
    \ / 10) + 1\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbjb7bj47.jl:7\nin expression starting at /tmp/tmpbjb7bj47.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n < 0\n        then return -1\n    else if n == 1\n        then return\
    \ 1\n    else \n        local count = 1\n        local i = 2\n        while i\
    \ <= n \n            do if i%10 == 1 \n                then count = count + 1\n\
    \                else count = count + 1\n            end\n            i = i +\
    \ 1\n        end\n        return count\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_end\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpimji8i_e.jl:7\nin expression starting at /tmp/tmpimji8i_e.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10)\nusing Test\n\
    \n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp6q5uzvkw.jl:6 requires\
    \ end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6q5uzvkw.jl:1\nin expression\
    \ starting at /tmp/tmp6q5uzvkw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else \n        local count = 0\n        while n >= 10 \n            do count\
    \ = count + 1\n            n = n / 10\n        end\n        return count\n   \
    \ end\nend\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(123456789)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1234567891)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(12345678901)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(123456789012)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1234567890123)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(12345678901234)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(123456789012345)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(12345678901234567)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(123456789012345678)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1234567890123456788)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(12345678901234567889)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(123456789012345678899)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1234567890123456788999)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(123456789012345678899999)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1234567890123456788999999)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(12345678901234567889999999)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(12345678901234567889999999999)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(12345678901234567889999999999999)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(123456789012345678899999999999998)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpai8ntxyt.jl:7\nin expression starting at /tmp/tmpai8ntxyt.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl442bdf7.jl:11\nin expression starting at\
    \ /tmp/tmpl442bdf7.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 1 \n        then\
    \ return starts_one_ends(n/2)\n    else \n        return starts_one_ends(n-1)\
    \ + starts_one_ends(n-2) \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr5v4z92w.jl:7\nin expression starting at /tmp/tmpr5v4z92w.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(123456789)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of positive integers less than or equal to n.\nusing Test\n\
    \n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7uz61lhh.jl:11\nin expression starting at\
    \ /tmp/tmp7uz61lhh.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkqb0s0nq.jl:11\nin expression starting at\
    \ /tmp/tmpkqb0s0nq.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return starts_one_ends(n-1) + ends_one_starts(n-1) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers that are\n\
    divisible by 3 or 5 but not both.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t\
    @test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp809ex882.jl:7\nin expression starting at /tmp/tmp809ex882.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else \n        count_one_ends(n-1) + count_one_ends(n-1)\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(100)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(100000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(10000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000002)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(1000000000004)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000005)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000006)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(1000000000008)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000009)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000010)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_one_ends(1000000000011)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(1000000000012)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000013)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000014)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_one_ends(10000000000\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdin091aj.jl:7\nin expression starting at /tmp/tmpdin091aj.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else return starts_one_ends(n//10)*10 + n % 10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers that start\
    \ or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph0znk5wo.jl:7\nin expression starting at /tmp/tmph0znk5wo.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        val counts = starts_one_ends(n-1) \n        val result = counts\
    \ + 1 \n        val digit = n % 10 \n        if digit == 1 \n            then\
    \ return result \n        else \n            val counts = starts_one_ends(n-1)\
    \ \n            val result = counts + 1 \n            val digit = n % 10 \n  \
    \          if digit == 1 \n                then return result \n            else\
    \ \n                val counts = starts_one_ends(n-1) \n                val result\
    \ = counts + 1 \n                val digit = n % 10 \n                if digit\
    \ == 1 \n                    then return result \n                else \n    \
    \                val counts = starts_one_ends(n-1) \n                    val result\
    \ = counts + 1 \n                    val digit = n % 10 \n                   \
    \ if digit == 1 \n                        then return result \n              \
    \      else \n                        val counts = starts_one_ends(n-1) \n   \
    \                     val result = counts + 1 \n                        val digit\
    \ = n % 10 \n                        if digit == 1 \n                        \
    \    then return result \n                        else \n                    \
    \        val counts = starts_one_ends(n-1) \n                            val result\
    \ = counts + 1 \n                            val digit = n % 10 \n           \
    \                 if digit == 1 \n                                then return\
    \ result \n                            else \n                               \
    \ val counts = starts_one_ends(n-1) \n                                val result\
    \ = counts + 1 \n                                val digit = n % 10 \n       \
    \                         if digit == 1 \n                                   \
    \ then return result \n                                else \n               \
    \                     val counts = starts_one_ends(n-1) \n                   \
    \                 val result = counts + 1 \n                                 \
    \   val digit = n % 10 \n                                    if digit == 1 \n\
    \                                        then return result \n               \
    \                     else \n                                        val counts\
    \ = starts_one_ends(n-1) \n                                        val result\
    \ = counts + 1 \n                                        val digit = n % 10 \n\
    \                                        if digit == 1 \n                    \
    \                        then return result \n                               \
    \         else \n                                            val counts = starts_one_ends(n-1)\
    \ \n                                            val result = counts + 1 \n   \
    \                                         val digit = n % 10 \n              \
    \                              if digit == 1 \n                              \
    \                  then return result \n                                     \
    \       else \n                                                val counts = starts_one_ends(n-1)\
    \ \n                                                val result = counts + 1 \n\
    \                                                val digit = n % 10 \n       \
    \                                         if digit == 1 \n                   \
    \                                 then return result \n                      \
    \                          else \n                                           \
    \         val counts = starts_one_ends(n-1) \n                               \
    \                     val result = counts + 1 \n                             \
    \                       val digit = n % 10 \n                                \
    \                    if digit == 1 \n                                        \
    \                then return result \n                                       \
    \             else \n                                                        val\
    \ counts = starts_one_ends(n-1) \n                                           \
    \             val result = counts + 1 \n                                     \
    \                   val digit = n % 10 \n                                    \
    \                    if digit == \nusing Test\n\n@testset begin\n\ncandidate =\
    \ starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t\
    @test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuegtwic5.jl:7\nin expression starting at /tmp/tmpuegtwic5.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else if n == 2 \n        then return 2\n    else if n == 3 \n        then\
    \ return 3\n    else if n == 4 \n        then return 4\n    else if n == 5 \n\
    \        then return 5\n    else if n == 6 \n        then return 6\n    else if\
    \ n == 7 \n        then return 7\n    else if n == 8 \n        then return 8\n\
    \    else if n == 9 \n        then return 9\n    else if n == 10\n        then\
    \ return 10\n    else if n == 11\n        then return 11\n    else if n == 12\n\
    \        then return 12\n    else if n == 13\n        then return 13\n    else\
    \ if n == 14\n        then return 14\n    else if n == 15\n        then return\
    \ 15\n    else if n == 16\n        then return 16\n    else if n == 17\n     \
    \   then return 17\n    else if n == 18\n        then return 18\n    else if n\
    \ == 19\n        then return 19\n    else if n == 20\n        then return 20\n\
    \    else if n == 21\n        then return 21\n    else if n == 22\n        then\
    \ return 22\n    else if n == 23\n        then return 23\n    else if n == 24\n\
    \        then return 24\n    else if n == 25\n        then return 25\n    else\
    \ if n == 26\n        then return 26\n    else if n == 27\n        then return\
    \ 27\n    else if n == 28\n        then return 28\n    else if n == 29\n     \
    \   then return 29\n    else if n == 30\n        then return 30\n    else if n\
    \ == 31\n        then return 31\n    else if n == 32\n        then return 32\n\
    \    else if n == 33\n        then return 33\n    else if n == 34\n        then\
    \ return 34\n    else if n == 35\n        then return 35\n    else if n == 36\n\
    \        then return 36\n    else if n == 37\n        then return 37\n    else\
    \ if n == 38\n        then return 38\n    else if n == 39\n        then return\
    \ 39\n    else if n == 40\n        then return 40\n    else if n == 41\n     \
    \   then return 41\n    else if n == 42\n        then return 42\n    else if n\
    \ == 43\n        then return 43\n    else if n == 44\n        then return 44\n\
    \    else if n == 45\n        then return 45\n    else if n == 46\n        then\
    \ return 46\n    else if n == 47\n        \nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuozmh5f6.jl:7\nin expression starting at /tmp/tmpuozmh5f6.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else if n == 1 \n        then return 1 \n    else \n        local count =\
    \ 1\n        local i = 1\n        while i <= n \n            do if i%10 == 1 \n\
    \                then count = count + 1 \n                else count = count \n\
    \            end\n            i = i + 1\n        end\n        return count\n \
    \   end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a positive\
    \ integer n, return the count of the numbers of n-digit\n    positive integers\
    \ that start or end with 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg9_r8723.jl:7\nin expression starting at /tmp/tmpg9_r8723.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 10 == 1 \n       \
    \ then return starts_one_ends(n / 10) + 1\n    else if n % 10 == 0 \n        then\
    \ return starts_one_ends(n / 10) + starts_one_ends(n / 10) + 1\n    else return\
    \ starts_one_ends(n / 10) + starts_one_ends(n / 10) + starts_one_ends(n / 10)\
    \ + 1\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1234567890)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(12345678901)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(12345678901234)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(123456789012345)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234567)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(123456789012345678)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1234567890123456788)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(12345678901234567889)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678899)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456788999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678899999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456788999999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234567889999999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456788999999999)\n\
    </cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpriivdbvi.jl:7\nin expression starting at /tmp/tmpriivdbvi.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers that\
    \ end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) ==\
    \ 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwq0nnjav.jl:8\nin expression starting at /tmp/tmpwq0nnjav.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else if n == 1 \n        1\n\
    \    else \n        1 + starts_one_ends(n - 1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmkr8bqp1.jl:8\nin expression starting at /tmp/tmpmkr8bqp1.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else \n        count_starts_ends(n-1, n) \nend\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(10_000, 10_000);\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the number of positive integers that start or end with\
    \ 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1tu0cyk8.jl:7\nin expression starting at /tmp/tmp1tu0cyk8.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else if n == 1 \n        then return 1 \n    else \n        local count =\
    \ 1\n        local i = 1\n        while i <= n \n            do \n           \
    \     if ((i mod 10) == 1) \n                    then count = count + 1 \n   \
    \             else \n                    count = count \n                end \n\
    \                i = i + 1\n            end \n        return count\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeg8k8r_w.jl:7\nin expression starting at /tmp/tmpeg8k8r_w.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxgcfi1n0.jl:11\nin expression starting at\
    \ /tmp/tmpxgcfi1n0.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)\n\
    </cell>\n\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkn_9erz2.jl:8\nin expression starting at /tmp/tmpkn_9erz2.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \       else return 0\n    else \n        return starts_one_ends(n-1) + ends_one_starts(n-1)\n\
    end\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpve699oua.jl:7\nin expression starting at /tmp/tmpve699oua.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvwyervv2.jl:11\nin expression starting at\
    \ /tmp/tmpvwyervv2.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers that\
    \ start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpie7hr33g.jl:8\nin expression starting at /tmp/tmpie7hr33g.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    end\nend\n\"\"\"\n    Given a positive integer n,\
    \ return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo502zhjw.jl:7\nin expression starting at /tmp/tmpo502zhjw.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(123456789)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers that start\
    \ or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp12ugqw_n.jl:11\nin expression starting at\
    \ /tmp/tmp12ugqw_n.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpadye9ulv.jl:11\nin expression starting at\
    \ /tmp/tmpadye9ulv.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n / 10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpio_h8zrq.jl:11\nin expression starting at\
    \ /tmp/tmpio_h8zrq.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else if n == 0 \n        then return 0\n    else \n        let\n         \
    \   digits = digits(n) \n            start = digits[1] \n            end = digits[digits.length\
    \ - 1] \n        in \n            if start == 1 \n                then starts_one_ends(end\
    \ - 1)\n            else if end == 1 \n                then starts_one_ends(start\
    \ - 1)\n            else starts_one_ends(end - 1) + starts_one_ends(start - 1)\n\
    \        end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg2andoqj.jl:7\nin expression starting at /tmp/tmpg2andoqj.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        return starts_one_ends(n-1) + ends_one_starts(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqauptk40.jl:7\nin expression starting at /tmp/tmpqauptk40.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\n@time starts_one_ends(100_000_000);\n</cell>\n<text>\n\
    Exercise: Write a function that counts the number of positive integers less than\
    \ or equal to n that start or end with 1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe_zdhcfq.jl:11\nin expression starting at\
    \ /tmp/tmpe_zdhcfq.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        count_one_ends(n-1)\
    \ + count_one_ends(n-2) + count_one_ends(n-3) + count_one_ends(n-4) + count_one_ends(n-5)\
    \ + count_one_ends(n-6)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcymzuwat.jl:7\nin expression starting at /tmp/tmpcymzuwat.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        0\n    else \n        1 + starts_one_ends(n\
    \ / 10)\n    end\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000000000000000)\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ai3hvri.jl:8\nin expression starting at /tmp/tmp2ai3hvri.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \   else \n        local count = 1\n        while n >= 10 \n            then count\
    \ = count + 1\n            n = n / 10\n        end\n        return count\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppfquszfx.jl:7\nin expression starting at /tmp/tmppfquszfx.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfk5oqt63.jl:7\nin expression starting at /tmp/tmpfk5oqt63.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return starts_one_ends(n-1) + ends_one_starts(n-1) \n    end\nend\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7m_ecd3d.jl:7\nin expression starting at /tmp/tmp7m_ecd3d.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else \n        if n % 10 == 1 \n            then return 1 + starts_one_ends(n\
    \ / 10)\n        else \n            return starts_one_ends(n / 10) + 1\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that counts the number of positive integers that are\ndivisible\
    \ by 3 or 5.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) ==\
    \ 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdjyw6yye.jl:7\nin expression starting at /tmp/tmpdjyw6yye.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn30vqclp.jl:11\nin expression starting at\
    \ /tmp/tmpn30vqclp.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkru7lqh6.jl:11\nin expression starting at\
    \ /tmp/tmpkru7lqh6.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        x <- starts_one_ends(n-1) \n        if n % x == 0 \n     \
    \       then return 1 + starts_one_ends(n-x) \n            else return starts_one_ends(n-x)\
    \ \nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers that\
    \ start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpls2u2uew.jl:7\nin expression starting at /tmp/tmpls2u2uew.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else if n == 0 \n        then return 0\n    else \n        count_starts_ends(n-1)\
    \ + count_starts_ends(n-2) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(10000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_end\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_nqe4_vl.jl:7\nin expression starting at /tmp/tmp_nqe4_vl.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpadye9ulv.jl:11\nin expression starting at\
    \ /tmp/tmpadye9ulv.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n / 10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1o7rktv0.jl:11\nin expression starting at\
    \ /tmp/tmp1o7rktv0.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptnk60zgc.jl:11\nin expression starting at\
    \ /tmp/tmptnk60zgc.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else if n == 0 \n        then return 0\n    else \n        let\n         \
    \   digits = digits(n::Int64)\n            digits_start = digits[1..]\n      \
    \      digits_end = digits[0..]\n            digits_start_one = digits_start[1..]\n\
    \            digits_end_one = digits_end[0..]\n            digits_start_one_count\
    \ = digits_start_one |> length\n            digits_end_one_count = digits_end_one\
    \ |> length\n            digits_start_one_count_plus_one = digits_start_one_count\
    \ + 1\n            digits_end_one_count_plus_one = digits_end_one_count + 1\n\
    \            digits_start_one_count_plus_one_plus_one = digits_start_one_count_plus_one\
    \ + 1\n            digits_end_one_count_plus_one_plus_one = digits_end_one_count_plus_one\
    \ + 1\n            digits_start_one_count_plus_one_plus_one_plus_one = digits_start_one_count_plus_one_plus_one\
    \ + 1\n            digits_end_one_count_plus_one_plus_one_plus_one = digits_end_one_count_plus_one_plus_one\
    \ + 1\n            digits_start_one_count_plus_one_plus_one_plus_one_plus_one\
    \ = digits_start_one_count_plus_one_plus_one_plus_one + 1\n            digits_end_one_count_plus_one_plus_one_plus_one_plus_one\
    \ = digits_end_one_count_plus_one_plus_one_plus_one + 1\n            digits_start_one_count_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ = digits_start_one_count_plus_one_plus_one_plus_one_plus_one + 1\n         \
    \   digits_end_one_count_plus_one_plus_one_plus_one_plus_one_plus_one = digits_end_one_count_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ + 1\n            digits_start_one_count_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ = digits_start_one_count_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ + 1\n            digits_end_one_count_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ = digits_end_one_count_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ + 1\n            digits_start_one_count_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ = digits_start_one_count_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ + 1\n            digits_end_one_count_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ = digits_end_one_count_plus_one_plus_one_plus_one_plus_one_plus_one_plus_\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpui1ay83j.jl:7\nin expression starting at /tmp/tmpui1ay83j.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        return starts_one_ends(n-1) + ends_one_starts(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqauptk40.jl:7\nin expression starting at /tmp/tmpqauptk40.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else if n == 0 \n        then return 0 \n       \
    \ else return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a positive integer n, return the count\
    \ of the numbers of n-digit\n    positive integers that start or end with 1.\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) ==\
    \ 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp40wt7pv9.jl:7\nin expression starting at /tmp/tmp40wt7pv9.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local count = 0\n\
    \        local i = 1\n        while i <= n \n            do if starts_one_ends(i)\
    \ == 1 \n                then count = count + 1\n                else i = i +\
    \ 1\n            end\n        end\n        return count\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaz7by5dq.jl:7\nin expression starting at /tmp/tmpaz7by5dq.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n/2)\n    else \n        then return starts_one_ends(n-1)\
    \ + starts_one_ends(n-2) \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0u8h35ob.jl:7\nin expression starting at /tmp/tmp0u8h35ob.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of positive integers that\
    \ end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) ==\
    \ 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp3dz3h5z.jl:8\nin expression starting at /tmp/tmpp3dz3h5z.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers that start or end\
    \ with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyc2kgovl.jl:11\nin expression starting at\
    \ /tmp/tmpyc2kgovl.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        return 1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptionas5v.jl:7\nin expression starting at /tmp/tmptionas5v.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        let\n            digits = digits(n) \n            digits_count\
    \ = length(digits) \n            digits_count_plus_one = digits_count + 1 \n \
    \           digits_count_minus_one = digits_count - 1 \n            digits_count_minus_one_plus_one\
    \ = digits_count_minus_one + 1 \n            digits_count_minus_one_minus_one\
    \ = digits_count_minus_one - 1 \n            digits_count_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one + 1 \n            digits_count_minus_one_minus_one_minus_one\
    \ = digits_count_minus_one_minus_one - 1 \n            digits_count_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one + 1 \n            digits_count_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one - 1 \n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one + 1 \n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one - 1 \n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ + 1 \n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ - 1 \n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ + 1 \n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf_hbhrzi.jl:7\nin expression starting at /tmp/tmpf_hbhrzi.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        n <- n \n        i <- 1 \n       \
    \ while i < n \n            do if n%i==0 \n                then return 1 \n  \
    \              else return 0 \n            i <- i + 1 \n        return 0 \nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000006)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000012)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3o5suts3.jl:7\nin expression starting at /tmp/tmp3o5suts3.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return n\n    else\
    \ \n        return starts_one_ends(n//10) + n%10 == 1 ? 1 : 0\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ephrvmu.jl:11\nin expression starting at\
    \ /tmp/tmp7ephrvmu.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else return starts_one_ends(n-1) + starts_one_ends(n+1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv1ulm_pn.jl:7\nin expression starting at /tmp/tmpv1ulm_pn.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_aik0kbw.jl:11\nin expression starting at\
    \ /tmp/tmp_aik0kbw.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local i::Int64\
    \ = 1\n        local count::Int64 = 0\n        while i <= n \n            do if\
    \ i%10 == 1 \n                then count = count + 1\n                else break\n\
    \            end\n            i = i + 1\n        end\n        return count\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7hm8taz_.jl:7\nin expression starting at /tmp/tmp7hm8taz_.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2)\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers less than or equal to a given integer n.\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbczq96vg.jl:7\nin expression starting at /tmp/tmpbczq96vg.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of positive integers that start or end\
    \ with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpynncj6vd.jl:11\nin expression starting at\
    \ /tmp/tmpynncj6vd.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000\nusing\
    \ Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp28mguvwy.jl:7\nin expression starting at /tmp/tmp28mguvwy.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local count = 0\n\
    \        local i = 1\n        while i <= n \n            do if i%10 == 1 \n  \
    \              then count = count + 1\n                else return 0\n       \
    \     end\n            i = i + 1\n        end\n        return count\n    end\n\
    end\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxxdomdsd.jl:7\nin expression starting at /tmp/tmpxxdomdsd.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) + 1 \nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Given a positive integer n, return the\
    \ count of the numbers of n-digit\n    positive integers that start or end with\
    \ 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpta8qqclh.jl:11\nin expression starting at\
    \ /tmp/tmpta8qqclh.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        let\n         \
    \   digits = digits(n) \n            start = digits[1]\n            end = digits[end]\n\
    \        in \n            if start == 1 \n                then starts_one_ends(end\
    \ - 1)\n            else starts_one_ends(end - 1) + starts_one_ends(end - 2)\n\
    \        end\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\nstarts_\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdob0pmlx.jl:7\nin expression starting at /tmp/tmpdob0pmlx.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else return starts_one_ends(n//10) + starts_one_ends(n%10)\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw_quotc9.jl:7\nin expression starting at /tmp/tmpw_quotc9.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n < 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        local i::Int64 = 1\n        local count::Int64 = 1\n \
    \       while i <= n \n            do if i%10 == 1 \n                then count\
    \ = count + 1\n                else return 0\n            end\n            i =\
    \ i + 1\n        end\n        return count\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1pzksq70.jl:7\nin expression starting at /tmp/tmp1pzksq70.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        if n % 10 == 1 \n            then return 1 + starts_one_ends(n\
    \ / 10) \n        else \n            return starts_one_ends(n / 10) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3k0kptz6.jl:7\nin expression starting at /tmp/tmp3k0kptz6.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        0\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) ==\
    \ 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5yd2ll4k.jl:8\nin expression starting at /tmp/tmp5yd2ll4k.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpadye9ulv.jl:11\nin expression starting at\
    \ /tmp/tmpadye9ulv.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n/2)\n    else \n        return starts_one_ends(n/2)\
    \ + starts_one_ends(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n  \
    \  Given a positive integer n, return the count of the numbers of n-digit\n  \
    \  positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuvvk33qr.jl:7\nin expression starting at /tmp/tmpuvvk33qr.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return starts_one_ends(n-1) + 1 \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3z50xttk.jl:7\nin expression starting at /tmp/tmp3z50xttk.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n < 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return starts_one_ends(n-1) + starts_one_ends(n+1)\nend\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=juli\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprxi3ghww.jl:7\nin expression starting at /tmp/tmprxi3ghww.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvsys59hv.jl:11\nin expression starting at\
    \ /tmp/tmpvsys59hv.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        let\n         \
    \   digits = digits(n)\n            count = 1\n            digit = digits[1]\n\
    \            for i in digits[2:] \n                count *= 10\n             \
    \   count += digit\n                if i == 1 \n                    then return\
    \ count\n        end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a positive integer n, return the count of the numbers of n-digit\n    positive\
    \ integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbjr3kuaa.jl:7\nin expression starting at /tmp/tmpbjr3kuaa.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl442bdf7.jl:11\nin expression starting at\
    \ /tmp/tmpl442bdf7.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyhu7u697.jl:11\nin expression starting at\
    \ /tmp/tmpyhu7u697.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers less than or equal to n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ia5zm46.jl:11\nin expression starting at\
    \ /tmp/tmp7ia5zm46.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a positive integer n, return the\
    \ count of the numbers of n-digit\n    positive integers that start or end with\
    \ 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxn0rhrth.jl:11\nin expression starting at\
    \ /tmp/tmpxn0rhrth.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) + 1 \nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprrc_uv28.jl:11\nin expression starting at\
    \ /tmp/tmprrc_uv28.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        let\n         \
    \   digits = digits(n)\n            start = digits[1]\n            end = digits[digits.length\
    \ - 1]\n        in \n            if start == end\n                then starts_one_ends(n\
    \ - 1)\n                else starts_one_ends(end - 1) + starts_one_ends(n - 1)\n\
    \        end\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\nstart\nusing\
    \ Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpec346ako.jl:7\nin expression starting at /tmp/tmpec346ako.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else return starts_one_ends(n//10) + 1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg4kdbrzg.jl:7\nin expression starting at /tmp/tmpg4kdbrzg.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppkccj3w6.jl:11\nin expression starting at\
    \ /tmp/tmppkccj3w6.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl442bdf7.jl:11\nin expression starting at\
    \ /tmp/tmpl442bdf7.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    end\nend\n\"\"\"\n    Given a positive integer n,\
    \ return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo502zhjw.jl:7\nin expression starting at /tmp/tmpo502zhjw.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else return starts_one_ends(n//10) + 1\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkpd1fyuz.jl:7\nin expression starting at /tmp/tmpkpd1fyuz.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxgcfi1n0.jl:11\nin expression starting at\
    \ /tmp/tmpxgcfi1n0.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n / 10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1o7rktv0.jl:11\nin expression starting at\
    \ /tmp/tmp1o7rktv0.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \       else return 0\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp346tbgsf.jl:7\nin expression starting at /tmp/tmp346tbgsf.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return starts_one_ends(n-1) + ends_one_starts(n-1) \n    end\nend\n\
    \"\"\"\n    \n\"\"\"\n    Given a positive integer n, return the count of the\
    \ numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkrkn5f9c.jl:7\nin expression starting at /tmp/tmpkrkn5f9c.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        count_starts_ends(n-1, n) \nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpteyj5r2y.jl:7\nin expression starting at /tmp/tmpteyj5r2y.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        return starts_one_ends(n-1)\
    \ + ends_one_starts(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiezhxsd4.jl:7\nin expression starting at /tmp/tmpiezhxsd4.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else return starts_one_ends(n//10) + starts_one_ends(n%10)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(123456789)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1234567891)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(12345678910)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(12345678901)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(123456789010)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(123456789011)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1234567890100)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1234567890101)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(12345678901010)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(12345678901011)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(123456789010100)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(123456789010101)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1234567890101010)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1234567890101011)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(12345678901010100)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(12345678901010101)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(123456789010101010)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(123456789010101011)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(1234567890101010100)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1234567890101010101)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(12345678901010101010)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(12345678901010101011)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(123456789010101010100)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(123456789010101010\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj2bwbwt5.jl:7\nin expression starting at /tmp/tmpj2bwbwt5.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl442bdf7.jl:11\nin expression starting at\
    \ /tmp/tmpl442bdf7.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return starts_one_ends(n-1) + ends_one_starts(n-1) \n    end\nend\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7m_ecd3d.jl:7\nin expression starting at /tmp/tmp7m_ecd3d.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local count = 1\n\
    \        local i = 1\n        while i <= n \n            do \n               \
    \ if ((i mod 10) == 1) \n                    then count = count + 1\n        \
    \        end\n                i = i + 1\n            end\n        return count\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(2)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(3)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(4)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(5)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(6)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(7)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(8)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(9)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(11)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(12)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(13)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(14)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(15)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(16)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(17)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(18)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(19)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(20)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(21)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(22)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(23)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(24)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(25)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_end\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi4b47z30.jl:7\nin expression starting at /tmp/tmpi4b47z30.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local count = 1\n\
    \        for i = 2 to n \n            do if i%2 == 0 \n                then count\
    \ = count + 1\n                else count = count + starts_one_ends(i-1)\n   \
    \         end\n        end\n        return count\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    Given a positive integer n, return the count\
    \ of the numbers of n-digit\n    positive integers that start or end with 1.\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) ==\
    \ 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8ecdim94.jl:7\nin expression starting at /tmp/tmp8ecdim94.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        n <- starts_one_ends(n-1) \n     \
    \   if n % 10 == 1 \n            then return 1 + starts_one_ends(n//10) \n   \
    \         else return starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfp21364f.jl:7\nin expression starting at /tmp/tmpfp21364f.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        let\n         \
    \   digits = digits(n)\n            start = digits[1]\n            end = digits[end]\n\
    \        in \n            if start == 1 \n                then starts_one_ends(end\
    \ - 1)\n            else starts_one_ends(end - 1) + starts_one_ends(end - 2)\n\
    \        end\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise: Write a function that counts the number of positive integers\
    \ that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbrrqofpa.jl:7\nin expression starting at /tmp/tmpbrrqofpa.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn30vqclp.jl:11\nin expression starting at\
    \ /tmp/tmpn30vqclp.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfk5oqt63.jl:7\nin expression starting at /tmp/tmpfk5oqt63.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        let\n         \
    \   digits = digits(n)\n            first_digit = digits[1]\n            first_digit_is_one\
    \ = first_digit == 1\n            second_digit = digits[2]\n            second_digit_is_one\
    \ = second_digit == 1\n            third_digit = digits[3]\n            third_digit_is_one\
    \ = third_digit == 1\n            fourth_digit = digits[4]\n            fourth_digit_is_one\
    \ = fourth_digit == 1\n            fifth_digit = digits[5]\n            fifth_digit_is_one\
    \ = fifth_digit == 1\n            sixth_digit = digits[6]\n            sixth_digit_is_one\
    \ = sixth_digit == 1\n            seventh_digit = digits[7]\n            seventh_digit_is_one\
    \ = seventh_digit == 1\n            eighth_digit = digits[8]\n            eighth_digit_is_one\
    \ = eighth_digit == 1\n            ninth_digit = digits[9]\n            ninth_digit_is_one\
    \ = ninth_digit == 1\n            tenth_digit = digits[10]\n            tenth_digit_is_one\
    \ = tenth_digit == 1\n            eleventh_digit = digits[11]\n            eleventh_digit_is_one\
    \ = eleventh_digit == 1\n            twelfth_digit = digits[12]\n            twelfth_digit_is_one\
    \ = twelfth_digit == 1\n            thirteenth_digit = digits[13]\n          \
    \  thirteenth_digit_is_one = thirteenth_digit == 1\n            fourteenth_digit\
    \ = digits[14]\n            fourteenth_digit_is_one = fourteenth_digit == 1\n\
    \            fifteenth_digit = digits[15]\n            fifteenth_digit_is_one\
    \ = fifteenth_digit == 1\n            sixteenth_digit = digits[16]\n         \
    \   sixteenth_digit_is_one = sixteenth_digit == 1\n            seventeenth_digit\
    \ = digits[17]\n            seventeenth_digit_is_one = seventeenth_digit == 1\n\
    \            eighteenth_digit = digits[18]\n            eighteenth_digit_is_one\
    \ = eighteenth_digit == 1\n            nineteenth_digit = digits[19]\n       \
    \     nineteenth_digit_is_one = nineteenth_digit == 1\n            twentieth_digit\
    \ = digits[20]\n            twentieth_digit_is_one = twentieth_digit \nusing Test\n\
    \n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu3xvrjgr.jl:7\nin expression starting at /tmp/tmpu3xvrjgr.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else if n == 1 \n        1\n\
    \    else \n        1 + starts_one_ends(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbi65s4fb.jl:8\nin expression starting at /tmp/tmpbi65s4fb.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        let\n         \
    \   digits = digits(n)\n            first_digit = digits[1]\n            rest\
    \ = digits[2:end]\n        in \n            if first_digit == 1 \n           \
    \     then starts_one_ends(rest)\n                else starts_one_ends(rest) +\
    \ starts_one_ends(n - rest)\n        end\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000000000000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstart\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd1la7_c9.jl:7\nin expression starting at /tmp/tmpd1la7_c9.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else \n        n <- n - 1\n        i <- 1\n        count <- 0\n        while\
    \ i <= n \n            do if i%10 == 1 \n                then count <- count +\
    \ 1\n                else i <- i + 1\n        end\n        return count\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3_j0_ab_.jl:7\nin expression starting at /tmp/tmp3_j0_ab_.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else \n        count_starts_ends(n-1) + 1\nend\n</cell>\n<code language=julia-1.0>\n\
    count_starts_ends(10)\n</cell>\n<code language=julia-1.0>\ncount_starts_ends(100)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(1000)\n</cell>\n<code language=julia-1.0>\n\
    count_starts_ends(10000)\n</cell>\n<code language=julia-1.0>\ncount_starts_ends(100000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(1000000)\n</cell>\n<code\
    \ language=julia-1.0>\ncount_starts_ends(10000000)\n</cell>\n<code language=julia-1.0>\n\
    count_starts_ends(100000000)\n</cell>\n<code language=julia-1.0>\ncount_starts_ends(1000000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(10000000000)\n</cell>\n\
    <code language=julia-1.0>\ncount_starts_ends(100000000000)\n</cell>\n<code language=julia-1.0>\n\
    count_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.0>\ncount_starts_ends(10000000000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(100000000000000)\n</cell>\n\
    <code language=julia-1.0>\ncount_starts_ends(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.0>\ncount_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    count_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.0>\ncount_starts_ends(1000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpteau66hr.jl:7\nin expression starting at /tmp/tmpteau66hr.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn30vqclp.jl:11\nin expression starting at\
    \ /tmp/tmpn30vqclp.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(123456789)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of integers less than n that\
    \ start or end with 1.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh2be15_.jl:11\nin expression starting at\
    \ /tmp/tmpmh2be15_.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        count_starts_ends(n-1)\
    \ + count_starts_ends(n-2) + count_starts_ends(n-3) + count_starts_ends(n-4) +\
    \ count_starts_ends(n-5) + count_starts_ends(n-6)\nend\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(10)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(100)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(10000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(100000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(10000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(100000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(100000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000000000000)\n\
    </cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzaxdrua2.jl:7\nin expression starting at /tmp/tmpzaxdrua2.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        0\n    else \n        1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)\n</cell>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7xfyqyxh.jl:8\nin expression starting at /tmp/tmp7xfyqyxh.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n/10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_zz82ua.jl:11\nin expression starting at\
    \ /tmp/tmpy_zz82ua.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local i::Int64\
    \ = 1\n        local count::Int64 = 0\n        while i <= n \n            do if\
    \ i%10 == 1 \n                then count = count + 1\n                else break\n\
    \            end\n            i = i + 1\n        end\n        return count\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmlfv8bxz.jl:7\nin expression starting at /tmp/tmpmlfv8bxz.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise: Write a function that counts the\
    \ number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxmtssc8k.jl:11\nin expression starting at\
    \ /tmp/tmpxmtssc8k.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 10 == 1 \n       \
    \ then return starts_one_ends(n / 10) + 1\n    else if n % 10 == 0 \n        then\
    \ return starts_one_ends(n / 10) + starts_one_ends(n / 10) + 1\n    else return\
    \ starts_one_ends(n / 10) + starts_one_ends(n / 10) + starts_one_ends(n / 10)\
    \ + 1\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n\
    <text>\nProblem 4\nWrite a function that returns the number of integers within\
    \ a given range that are\ndivisible by another given integer. For example, if\
    \ the given range is 1 to 100\nand the given divisor is 3, then the function should\
    \ return 3.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) ==\
    \ 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuugz1v8_.jl:7\nin expression starting at /tmp/tmpuugz1v8_.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else if n == 1 \n        1\n\
    \    else if n == 2 \n        1\n    else if n == 3 \n        1\n    else if n\
    \ == 4 \n        1\n    else if n == 5 \n        1\n    else if n == 6 \n    \
    \    1\n    else if n == 7 \n        1\n    else if n == 8 \n        1\n    else\
    \ if n == 9 \n        1\n    else if n == 10 \n        1\n    else if n == 11\
    \ \n        1\n    else if n == 12 \n        1\n    else if n == 13 \n       \
    \ 1\n    else if n == 14 \n        1\n    else if n == 15 \n        1\n    else\
    \ if n == 16 \n        1\n    else if n == 17 \n        1\n    else if n == 18\
    \ \n        1\n    else if n == 19 \n        1\n    else if n == 20 \n       \
    \ 1\n    else if n == 21 \n        1\n    else if n == 22 \n        1\n    else\
    \ if n == 23 \n        1\n    else if n == 24 \n        1\n    else if n == 25\
    \ \n        1\n    else if n == 26 \n        1\n    else if n == 27 \n       \
    \ 1\n    else if n == 28 \n        1\n    else if n == 29 \n        1\n    else\
    \ if n == 30 \n        1\n    else if n == 31 \n        1\n    else if n == 32\
    \ \n        1\n    else if n == 33 \n        1\n    else if n == 34 \n       \
    \ 1\n    else if n == 35 \n        1\n    else if n == 36 \n        1\n    else\
    \ if n == 37 \n        1\n    else if n == 38 \n        1\n    else if n == 39\
    \ \n        1\n    else if n == 40 \n        1\n    else if n == 41 \n       \
    \ 1\n    else if n == 42 \n        1\n    else if n == 43 \n        1\n    else\
    \ if n == 44 \n        1\n    else if n == 45 \n        1\n    else if n == 46\
    \ \n        1\n    else if n == 47 \n        1\n    else if n == 48 \n       \
    \ 1\n    else if n == 49 \n        1\n    else if n == 50 \n        1\n    else\
    \ if n == 51 \n        1\n    else if n == 52 \n        1\n    else if n == 53\
    \ \n\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptoqzdapg.jl:8\nin expression starting at /tmp/tmptoqzdapg.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else return starts_one_ends(n-1) + starts_one_ends(n+1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjprgen_y.jl:7\nin expression starting at /tmp/tmpjprgen_y.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local count = 1\n\
    \        local i = 1\n        while i <= n \n            do \n               \
    \ if ((n % i) == 0) \n                    then count = count + 1\n           \
    \     end\n                i = i + 1\n            end\n        return count\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp30ftix5r.jl:7\nin expression starting at /tmp/tmp30ftix5r.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else if n == 0 \n        then return 0\n    else \n        begin\n       \
    \     local count = 1\n            local i = 1\n            while i <= n \n  \
    \              do \n                    if ((i mod 10) == 1) \n              \
    \          then count = count + 1\n                    end\n                 \
    \   i = i + 1\n                end\n            return count\n        end\nend\n\
    </cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprzvrmmds.jl:7\nin expression starting at /tmp/tmprzvrmmds.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n < 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        local count = 1\n        while n >= 10 \n            do\
    \ count = count + 1\n            n = n / 10\n        end\n        return count\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb4d6qjwl.jl:7\nin expression starting at /tmp/tmpb4d6qjwl.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ / 10)\n    end\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw9qqvvjv.jl:8\nin expression starting at /tmp/tmpw9qqvvjv.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else \n        count_starts_ends(n-1, n) \nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2ukllr64.jl:7\nin expression starting at /tmp/tmp2ukllr64.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyieftrzh.jl:7\nin expression starting at /tmp/tmpyieftrzh.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmq0w52a3.jl:11\nin expression starting at\
    \ /tmp/tmpmq0w52a3.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n < 0 \n        then return -1\n    else if n == 1 \n        then\
    \ return 1\n    else if n == 2 \n        then return 2\n    else if n == 3 \n\
    \        then return 3\n    else if n == 4 \n        then return 4\n    else if\
    \ n == 5 \n        then return 5\n    else if n == 6 \n        then return 6\n\
    \    else if n == 7 \n        then return 7\n    else if n == 8 \n        then\
    \ return 8\n    else if n == 9 \n        then return 9\n    else if n == 10 \n\
    \        then return 10\n    else if n == 11 \n        then return 11\n    else\
    \ if n == 12 \n        then return 12\n    else if n == 13 \n        then return\
    \ 13\n    else if n == 14 \n        then return 14\n    else if n == 15 \n   \
    \     then return 15\n    else if n == 16 \n        then return 16\n    else if\
    \ n == 17 \n        then return 17\n    else if n == 18 \n        then return\
    \ 18\n    else if n == 19 \n        then return 19\n    else if n == 20 \n   \
    \     then return 20\n    else if n == 21 \n        then return 21\n    else if\
    \ n == 22 \n        then return 22\n    else if n == 23 \n        then return\
    \ 23\n    else if n == 24 \n        then return 24\n    else if n == 25 \n   \
    \     then return 25\n    else if n == 26 \n        then return 26\n    else if\
    \ n == 27 \n        then return 27\n    else if n == 28 \n        then return\
    \ 28\n    else if n == 29 \n        then return 29\n    else if n == 30 \n   \
    \     then return 30\n    else if n == 31 \n        then return 31\n    else if\
    \ n == 32 \n        then return 32\n    else if n == 33 \n        then return\
    \ 33\n    else if n == 34 \n        then return 34\n    else if n == 35 \n   \
    \     then return 35\n    else if n == 36 \n        then return 36\n    else if\
    \ n == 37 \n        then return 37\n    else if n == 38 \n        then return\
    \ 38\n    else if n == 39 \n        then return 39\n    else if n == 40 \n   \
    \     then return 40\n    else if n == 41 \n        then return 41\n    else if\
    \ n == 42 \n        then return 42\n    else if n == 43 \n        then return\
    \ 43\n    else if n == 44 \n        then \nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp90_ji_dr.jl:7\nin expression starting at /tmp/tmp90_ji_dr.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else if n < 100 \n            then return 2\n            else if n < 1000\
    \ \n                then return 3\n                else if n < 10000 \n      \
    \              then return 4\n                    else if n < 100000 \n      \
    \                  then return 5\n                        else if n < 1000000\
    \ \n                            then return 6\n                            else\
    \ if n < 10000000 \n                                then return 7\n          \
    \                      else if n < 100000000 \n                              \
    \      then return 8\n                                    else if n < 1000000000\
    \ \n                                        then return 9\n                  \
    \                      else if n < 10000000000 \n                            \
    \                then return 10\n                                            else\
    \ if n < 100000000000 \n                                                then return\
    \ 11\n                                                else if n < 1000000000000\
    \ \n                                                    then return 12\n     \
    \                                               else if n < 10000000000000 \n\
    \                                                        then return 13\n    \
    \                                                    else if n < 100000000000000\
    \ \n                                                            then return 14\n\
    \                                                            else if n < 1000000000000000\
    \ \n                                                                then return\
    \ 15\n                                                                else if\
    \ n < 10000000000000000 \n                                                   \
    \                 then return 16\n                                           \
    \                         else if n < 100000000000000000 \n                  \
    \                                                      then return 17\n      \
    \                                                                  else if n <\
    \ 1000000000000000000 \n                                                     \
    \                       then return 18\n                                     \
    \                                       else if n < 10000000000000000000 \n  \
    \                                                                            \
    \  then return 19\n                                                          \
    \                      else if n < 1000000000000000000 \n                    \
    \                                                                then return 20\n\
    \                                                                            \
    \        else if n < 10000000000000000000 \n                                 \
    \                                                       then return 21\n     \
    \                                                                            \
    \       else if n < 100000000000000000000 \n                                 \
    \                                                           then return 22\n \
    \                                                                            \
    \               else if n < 1000000000000000000000 \n                        \
    \                                                                        then\
    \ return 23\n                                                                \
    \                                else if n < 10000000000000000000000 \n      \
    \                                                                            \
    \                  then return 24\n                                          \
    \                                                          else if n < 100000000000000000000000\
    \ \n                                                                         \
    \                               then return 25\n                             \
    \                                                                           else\
    \ if n < 1000000000000000000000000 \n                                        \
    \                                                                    then return\
    \ 26\n                                                                       \
    \                                     else if n < 10000000000000000000000000 \n\
    \                                                                            \
    \                                    then return 27\n                        \
    \                                                                            \
    \            else if n < 100000000000000000000000000 \n                      \
    \                                                                            \
    \                  then return 28\n                                          \
    \                                                                          else\
    \ if n < 1000000000000000000000000000 \n                                     \
    \                                                                            \
    \       then return 29\n                                                     \
    \                                                                   else if n\
    \ < 10000000000000000000000000000 \n                                         \
    \                                                                            \
    \       then return 30\n                                                     \
    \                                                                       else if\
    \ n < 100000000000000000000000000000 \n                                      \
    \                                                                            \
    \              then return 31\n                                              \
    \                                                                            \
    \      else if n < 1000000000000000000000000000000\n                         \
    \                                                                            \
    \                               then return 32\n                             \
    \                                                                            \
    \                           else if n < 10000000000000000000000000000000 \n  \
    \                                                                            \
    \                                                          then return 33\n  \
    \                                                                            \
    \                                                          else if n < 100000000000000000000000000000000\
    \ \n                                                                         \
    \                                                                   then return\
    \ 34\n                                                                       \
    \                                                                     else if\
    \ n < 1000000000000000000000000000000000 \n                                  \
    \                                                                            \
    \                                  then return 35\n                          \
    \                                                                            \
    \                                          else if n < 10000000000000000000000000000000000\
    \ \nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyt6_1qnh.jl:7\nin expression starting at /tmp/tmpyt6_1qnh.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else if n == 1 \n        then return 1 \n    else \n        local i::Int64\
    \ = 1\n        local count::Int64 = 0\n        while i <= n \n            do if\
    \ i%10 == 1 \n                then count = count + 1 \n                else break\
    \ \n            end \n            i = i + 1\n        end\n        return count\n\
    \    end\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpip8e8pg6.jl:7\nin expression starting at /tmp/tmpip8e8pg6.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        let\n            digits = digits(n) \n            start =\
    \ digits[1] == 1 \n            end = digits[digits.length - 1] == 1 \n       \
    \ in \n            if start \n                then 1 + starts_one_ends(digits[2..digits.length])\
    \ \n                else if end \n                    then 1 + starts_one_ends(digits[0..digits.length\
    \ - 1])\n                else 0 \n        end\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(123456789)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of positive integers that start or end with 2.\nusing Test\n\
    \n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwml5ry2x.jl:7\nin expression starting at /tmp/tmpwml5ry2x.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        count_starts_ends(n-1,\
    \ 1)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1dhdllg.jl:8\nin expression starting at /tmp/tmpj1dhdllg.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppcgm6gbv.jl:7\nin expression starting at /tmp/tmppcgm6gbv.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else if n < 100 \n            then return 2\n            else if n < 1000\
    \ \n                then return 3\n                else if n < 10000 \n      \
    \              then return 4\n                    else if n < 100000 \n      \
    \                  then return 5\n                        else if n < 1000000\
    \ \n                            then return 6\n                            else\
    \ if n < 10000000 \n                                then return 7\n          \
    \                      else if n < 100000000 \n                              \
    \      then return 8\n                                    else if n < 1000000000\
    \ \n                                        then return 9\n                  \
    \                      else if n < 10000000000 \n                            \
    \                then return 10\n                                            else\
    \ if n < 100000000000 \n                                                then return\
    \ 11\n                                                else if n < 1000000000000\
    \ \n                                                    then return 12\n     \
    \                                               else if n < 10000000000000 \n\
    \                                                        then return 13\n    \
    \                                                    else if n < 100000000000000\
    \ \n                                                            then return 14\n\
    \                                                            else if n < 1000000000000000\
    \ \n                                                                then return\
    \ 15\n                                                                else if\
    \ n < 10000000000000000 \n                                                   \
    \                 then return 16\n                                           \
    \                         else if n < 100000000000000000 \n                  \
    \                                                      then return 17\n      \
    \                                                                  else if n <\
    \ 1000000000000000000 \n                                                     \
    \                       then return 18\n                                     \
    \                                       else if n < 10000000000000000000 \n  \
    \                                                                            \
    \  then return 19\n                                                          \
    \                      else if n < 100000000000000000000 \n                  \
    \                                                                  then return\
    \ 20\n                                                                       \
    \             else if n < 1000000000000000000000 \n                          \
    \                                                              then return 21\n\
    \                                                                            \
    \            else if n < 10000000000000000000000 \n                          \
    \                                                                  then return\
    \ 22\n                                                                       \
    \                     else if n < 100000000000000000000000 \n                \
    \                                                                            \
    \    then return 23\n                                                        \
    \                                        else if n < 1000000000000000000000000\
    \ \n                                                                         \
    \                           then return 24\n                                 \
    \                                                                   else if n\
    \ < 10000000000000000000000000 \n                                            \
    \                                                            then return 25\n\
    \                                                                            \
    \                            else if n < 100000000000000000000000000 \n      \
    \                                                                            \
    \                          then return 26\n                                  \
    \                                                                          else\
    \ if n < 1000000000000000000000000000 \n                                     \
    \                                                                           then\
    \ return 27\n                                                                \
    \                                                else if n < 10000000000000000000000000000\
    \ \n                                                                         \
    \                                           then return 28\n                 \
    \                                                                            \
    \                       else if n < 100000000000000000000000000000 \n        \
    \                                                                            \
    \                                    then return 29\n                        \
    \                                                                            \
    \                    else if n < 1000000000000000000000000000000 \n          \
    \                                                                            \
    \                                      then return 30\n                      \
    \                                                                            \
    \                          else if n < 10000000000000000000000000000000 \n   \
    \                                                                            \
    \                                                 then return 31\n           \
    \                                                                            \
    \                                         else if n < 100000000000000000000000000000000\
    \ \n                                                                         \
    \                                                           then return 32\n \
    \                                                                            \
    \                                                       else if n < 1000000000000000000000000000000000\
    \ \n                                                                         \
    \                                                               then return 33\n\
    \                                                                            \
    \                                                            else if n < 10000000000000000000000000000000000\
    \ \n                                                                         \
    \                                                                   then return\
    \ 34\n                                                                       \
    \                                                                     else if\
    \ n < 100000000000000000000000000000000000 \n                                \
    \                                                                            \
    \                                    then return 35\n                        \
    \                                                                            \
    \                                            else if n < 100000000000000000000000000\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi6smczo8.jl:7\nin expression starting at /tmp/tmpi6smczo8.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else \n        sum_of_ones = 0\n        for i = 2 to n \n            sum_of_ones\
    \ = sum_of_ones + starts_one_ends(i)\n        return sum_of_ones\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstart\nusing Test\n\n@testset begin\n\ncandidate =\
    \ starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t\
    @test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyh28isv9.jl:7\nin expression starting at /tmp/tmpyh28isv9.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000002)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000003)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000004)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000006)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000007)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000008)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000010)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000011)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000012)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000013)\n</cell>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsakj2xag.jl:8\nin expression starting at /tmp/tmpsakj2xag.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10)\nend\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbvucxn3s.jl:11\nin expression starting at\
    \ /tmp/tmpbvucxn3s.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000006)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000013)\n</cell>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt9cv7a5o.jl:8\nin expression starting at /tmp/tmpt9cv7a5o.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) + 1 \nusing\
    \ Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp0xlqjte6.jl:6 requires\
    \ end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0xlqjte6.jl:1\nin expression\
    \ starting at /tmp/tmp0xlqjte6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n - 10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph0ck3m_2.jl:11\nin expression starting at\
    \ /tmp/tmph0ck3m_2.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else \n        sum_ = 0\n        for i in 1:n \n            sum_ = sum_ +\
    \ i\n            if sum_ == n\n                then return 1\n            else\
    \ \n                sum_ = 0\n        end\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps1m3t9bh.jl:7\nin expression starting at /tmp/tmps1m3t9bh.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        count_one_ends(n-1)\
    \ + count_one_ends(n-2) + count_one_ends(n-3) + count_one_ends(n-4) + count_one_ends(n-5)\
    \ + count_one_ends(n-6)\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ does not answer the question, which is about counting how many numbers are divisible\
    \ by `1`.\n<|/ c |>\n<| c |>\nI did answer the question. He asked \"how many numbers\
    \ are divisible by 1?\" He didn't ask \"how many numbers are divisible by 2?\"\
    \ He asked \"how many numbers are divisible by 3?\" He didn't ask \"how many numbers\
    \ are divisible by 4?\" He asked \"how many numbers are divisible by 5?\" He didn't\
    \ ask \"how many numbers are divisible by 6?\" He asked \"how many numbers are\
    \ divisible by 7?\" He didn't ask \"how many numbers are divisible by 8?\" He\
    \ asked \"how many numbers are divisible by 9?\" He didn't ask \"how many numbers\
    \ are divisible by 10?\" He asked \"how many numbers are divisible by 11?\" He\
    \ didn't ask \"how many numbers are divisible by 12?\" He asked \"how many numbers\
    \ are divisible by 13?\" He didn't ask \"how many numbers are divisible by 14?\"\
    \ He asked \"how many numbers are divisible by 15?\" He didn't ask \"how many\
    \ numbers are divisible by 16?\" He asked \"how many numbers are divisible by\
    \ 17?\" He didn't ask \"how many numbers are divisible by 18?\" He asked \"how\
    \ many numbers are divisible by 19?\" He didn't ask \"how many numbers are divisible\
    \ by 20?\" He asked \"how many numbers are divisible by 21?\" He didn't ask \"\
    how many numbers are divisible by 22?\" He asked \"how many numbers are divisible\
    \ by 23?\" He didn't ask \"how many numbers are divisible by 24?\" He asked \"\
    how many numbers are divisible by 25?\" He didn't ask \"how many numbers are divisible\
    \ by 26?\" He asked \"how many numbers are divisible by 27?\" He didn't ask \"\
    how many numbers are divisible by 28?\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2ronzutc.jl:7\nin expression starting at /tmp/tmp2ronzutc.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return n\n    else\
    \ \n        return starts_one_ends(n/10) + n%10 == 1 ? 1 : 0\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(123)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(124)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(125)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(126)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(127)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(128)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(129)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(130)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(131)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(132)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(133)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(134)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(135)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(136)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(137)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(138)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(139)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(140)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(141)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(142)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(143)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(144)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(145)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(146)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(147)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(148)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(149\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1i95egfu.jl:11\nin expression starting at\
    \ /tmp/tmp1i95egfu.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n\"\"\"\n    Given a positive\
    \ integer n, return the count of the numbers of n-digit\n    positive integers\
    \ that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplam8xwg2.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplam8xwg2.jl:1\n\
    in expression starting at /tmp/tmplam8xwg2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        let\n            digits = digits(n) \n            start =\
    \ digits[1] == 1 \n            end = digits[digits.length - 1] == 1 \n       \
    \ in \n            if start \n                then 1 + starts_one_ends(digits[2..digits.length\
    \ - 1]) \n                else if end \n                    then 1 + starts_one_ends(digits[0..digits.length\
    \ - 2]) \n                    else 0 \n        end\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(123456789)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567891)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(123456789012)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1234567890123)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1234567890123456)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(12345678901234567)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456788)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(12345678901234567889)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(123456789012345678899)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1234567890123456788999)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(12345678901234567889999)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(123456789012345678899999)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1234567890123456788999999)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(12345678901234567889999999)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1234567890123456788999999999)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1234567890\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsym6jht7.jl:7\nin expression starting at /tmp/tmpsym6jht7.jl:7\n"
  stdout: ''
